
F746disco-audio-processing-RTOS-TP-SIA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a944  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000161f4  0801ab14  0801ab14  0002ab14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030d08  08030d08  000500e4  2**0
                  CONTENTS
  4 .ARM          00000008  08030d08  08030d08  00040d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030d10  08030d10  000500e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030d10  08030d10  00040d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030d14  08030d14  00040d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08030d18  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027b7c  200000e8  08030dfc  000500e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20027c64  08030dfc  00057c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042eb8  00000000  00000000  00050114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000992e  00000000  00000000  00092fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003650  00000000  00000000  0009c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031d0  00000000  00000000  0009ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039ce9  00000000  00000000  000a3120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048b77  00000000  00000000  000dce09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012918a  00000000  00000000  00125980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0024eb0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ed24  00000000  00000000  0024ebc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000004cd  00000000  00000000  0025d8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801aafc 	.word	0x0801aafc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	0801aafc 	.word	0x0801aafc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <Do_Comb0>:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */

float Do_Comb0(float inSample) {
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = cfbuf0[cf0_p];
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <Do_Comb0+0x70>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <Do_Comb0+0x74>)
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	60fb      	str	r3, [r7, #12]
	float new = readback*cf0_g + inSample;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <Do_Comb0+0x78>)
 8000daa:	ed93 7a00 	vldr	s14, [r3]
 8000dae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dbe:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf0[cf0_p] = new;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <Do_Comb0+0x70>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <Do_Comb0+0x74>)
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	601a      	str	r2, [r3, #0]
	cf0_p++;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <Do_Comb0+0x70>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <Do_Comb0+0x70>)
 8000dd8:	6013      	str	r3, [r2, #0]
	if (cf0_p==cf0_lim) cf0_p = 0;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <Do_Comb0+0x70>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <Do_Comb0+0x7c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d102      	bne.n	8000dec <Do_Comb0+0x5c>
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <Do_Comb0+0x70>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
	return readback;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	ee07 3a90 	vmov	s15, r3
}
 8000df2:	eeb0 0a67 	vmov.f32	s0, s15
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	2001d56c 	.word	0x2001d56c
 8000e04:	20000120 	.word	0x20000120
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000104 	.word	0x20000104

08000e10 <Do_Comb1>:

float Do_Comb1(float inSample) {
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = cfbuf1[cf1_p];
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <Do_Comb1+0x70>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <Do_Comb1+0x74>)
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	60fb      	str	r3, [r7, #12]
	float new = readback*cf1_g + inSample;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <Do_Comb1+0x78>)
 8000e2a:	ed93 7a00 	vldr	s14, [r3]
 8000e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e36:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf1[cf1_p] = new;
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <Do_Comb1+0x70>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <Do_Comb1+0x74>)
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	601a      	str	r2, [r3, #0]
	cf1_p++;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <Do_Comb1+0x70>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <Do_Comb1+0x70>)
 8000e58:	6013      	str	r3, [r2, #0]
	if (cf1_p==cf1_lim) cf1_p = 0;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <Do_Comb1+0x70>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <Do_Comb1+0x7c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d102      	bne.n	8000e6c <Do_Comb1+0x5c>
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <Do_Comb1+0x70>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
	return readback;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	ee07 3a90 	vmov	s15, r3
}
 8000e72:	eeb0 0a67 	vmov.f32	s0, s15
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	2001d570 	.word	0x2001d570
 8000e84:	20006d40 	.word	0x20006d40
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	20000108 	.word	0x20000108

08000e90 <Do_Comb2>:
float Do_Comb2(float inSample) {
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = cfbuf2[cf2_p];
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <Do_Comb2+0x70>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <Do_Comb2+0x74>)
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	60fb      	str	r3, [r7, #12]
	float new = readback*cf2_g + inSample;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <Do_Comb2+0x78>)
 8000eaa:	ed93 7a00 	vldr	s14, [r3]
 8000eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ebe:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf2[cf2_p] = new;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <Do_Comb2+0x70>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <Do_Comb2+0x74>)
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	601a      	str	r2, [r3, #0]
	cf2_p++;
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <Do_Comb2+0x70>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <Do_Comb2+0x70>)
 8000ed8:	6013      	str	r3, [r2, #0]
	if (cf2_p==cf2_lim) cf2_p = 0;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <Do_Comb2+0x70>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <Do_Comb2+0x7c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d102      	bne.n	8000eec <Do_Comb2+0x5c>
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <Do_Comb2+0x70>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	return readback;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	ee07 3a90 	vmov	s15, r3
}
 8000ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	2001d574 	.word	0x2001d574
 8000f04:	2000caa0 	.word	0x2000caa0
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	2000010c 	.word	0x2000010c

08000f10 <Do_Comb3>:
float Do_Comb3(float inSample) {
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = cfbuf3[cf3_p];
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <Do_Comb3+0x70>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <Do_Comb3+0x74>)
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	60fb      	str	r3, [r7, #12]
	float new = readback*cf3_g + inSample;
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <Do_Comb3+0x78>)
 8000f2a:	ed93 7a00 	vldr	s14, [r3]
 8000f2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f36:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3e:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf3[cf3_p] = new;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <Do_Comb3+0x70>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <Do_Comb3+0x74>)
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	601a      	str	r2, [r3, #0]
	cf3_p++;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <Do_Comb3+0x70>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <Do_Comb3+0x70>)
 8000f58:	6013      	str	r3, [r2, #0]
	if (cf3_p==cf3_lim) cf3_p = 0;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <Do_Comb3+0x70>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <Do_Comb3+0x7c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d102      	bne.n	8000f6c <Do_Comb3+0x5c>
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <Do_Comb3+0x70>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
	return readback;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	ee07 3a90 	vmov	s15, r3
}
 8000f72:	eeb0 0a67 	vmov.f32	s0, s15
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	2001d578 	.word	0x2001d578
 8000f84:	200143f0 	.word	0x200143f0
 8000f88:	20000014 	.word	0x20000014
 8000f8c:	20000110 	.word	0x20000110

08000f90 <Do_Allpass0>:


float Do_Allpass0(float inSample) {
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = apbuf0[ap0_p];
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <Do_Allpass0+0x90>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a21      	ldr	r2, [pc, #132]	; (8001024 <Do_Allpass0+0x94>)
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	60fb      	str	r3, [r7, #12]
	readback += (-ap0_g) * inSample;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <Do_Allpass0+0x98>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb1 7a67 	vneg.f32	s14, s15
 8000fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fba:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc2:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*ap0_g + inSample;
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <Do_Allpass0+0x98>)
 8000fc8:	ed93 7a00 	vldr	s14, [r3]
 8000fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fdc:	edc7 7a02 	vstr	s15, [r7, #8]
	apbuf0[ap0_p] = new;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <Do_Allpass0+0x90>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <Do_Allpass0+0x94>)
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	601a      	str	r2, [r3, #0]
	ap0_p++;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <Do_Allpass0+0x90>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <Do_Allpass0+0x90>)
 8000ff6:	6013      	str	r3, [r2, #0]
	if (ap0_p == ap0_lim) ap0_p=0;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <Do_Allpass0+0x90>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <Do_Allpass0+0x9c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d102      	bne.n	800100a <Do_Allpass0+0x7a>
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <Do_Allpass0+0x90>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
	return readback;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	ee07 3a90 	vmov	s15, r3
}
 8001010:	eeb0 0a67 	vmov.f32	s0, s15
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2001d57c 	.word	0x2001d57c
 8001024:	2001cab0 	.word	0x2001cab0
 8001028:	20000018 	.word	0x20000018
 800102c:	20000114 	.word	0x20000114

08001030 <Do_Allpass1>:

float Do_Allpass1(float inSample) {
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = apbuf1[ap1_p];
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <Do_Allpass1+0x90>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <Do_Allpass1+0x94>)
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	60fb      	str	r3, [r7, #12]
	readback += (-ap1_g) * inSample;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <Do_Allpass1+0x98>)
 800104a:	edd3 7a00 	vldr	s15, [r3]
 800104e:	eeb1 7a67 	vneg.f32	s14, s15
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105a:	ed97 7a03 	vldr	s14, [r7, #12]
 800105e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001062:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*ap1_g + inSample;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <Do_Allpass1+0x98>)
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	ed97 7a01 	vldr	s14, [r7, #4]
 8001078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107c:	edc7 7a02 	vstr	s15, [r7, #8]
	apbuf1[ap1_p] = new;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <Do_Allpass1+0x90>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <Do_Allpass1+0x94>)
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	601a      	str	r2, [r3, #0]
	ap1_p++;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <Do_Allpass1+0x90>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <Do_Allpass1+0x90>)
 8001096:	6013      	str	r3, [r2, #0]
	if (ap1_p == ap1_lim) ap1_p=0;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <Do_Allpass1+0x90>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <Do_Allpass1+0x9c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d102      	bne.n	80010aa <Do_Allpass1+0x7a>
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <Do_Allpass1+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
	return readback;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	ee07 3a90 	vmov	s15, r3
}
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	2001d580 	.word	0x2001d580
 80010c4:	2001d230 	.word	0x2001d230
 80010c8:	2000001c 	.word	0x2000001c
 80010cc:	20000118 	.word	0x20000118

080010d0 <Do_Allpass2>:
float Do_Allpass2(float inSample) {
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = apbuf2[ap2_p];
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <Do_Allpass2+0x90>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <Do_Allpass2+0x94>)
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	60fb      	str	r3, [r7, #12]
	readback += (-ap2_g) * inSample;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <Do_Allpass2+0x98>)
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	eeb1 7a67 	vneg.f32	s14, s15
 80010f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80010fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001102:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*ap2_g + inSample;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <Do_Allpass2+0x98>)
 8001108:	ed93 7a00 	vldr	s14, [r3]
 800110c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	ed97 7a01 	vldr	s14, [r7, #4]
 8001118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111c:	edc7 7a02 	vstr	s15, [r7, #8]
	apbuf2[ap2_p] = new;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <Do_Allpass2+0x90>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <Do_Allpass2+0x94>)
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
	ap2_p++;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <Do_Allpass2+0x90>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <Do_Allpass2+0x90>)
 8001136:	6013      	str	r3, [r2, #0]
	if (ap2_p == ap2_lim) ap2_p=0;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <Do_Allpass2+0x90>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <Do_Allpass2+0x9c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d102      	bne.n	800114a <Do_Allpass2+0x7a>
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <Do_Allpass2+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
	return readback;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	ee07 3a90 	vmov	s15, r3
}
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2001d584 	.word	0x2001d584
 8001164:	2001d4b4 	.word	0x2001d4b4
 8001168:	20000020 	.word	0x20000020
 800116c:	2000011c 	.word	0x2000011c

08001170 <Do_Reverb>:

//on additionne les 4filtres peignes pour ensuite faire une div par 4
//puis on passe l'échantillon dans les 3 passes tout
float Do_Reverb(float inSample) {
 8001170:	b580      	push	{r7, lr}
 8001172:	ed2d 8b02 	vpush	{d8}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	ed87 0a01 	vstr	s0, [r7, #4]
	float newsample = (Do_Comb0(inSample) + Do_Comb1(inSample) + Do_Comb2(inSample) + Do_Comb3(inSample))/4.0f;
 800117e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001182:	f7ff fe05 	bl	8000d90 <Do_Comb0>
 8001186:	eeb0 8a40 	vmov.f32	s16, s0
 800118a:	ed97 0a01 	vldr	s0, [r7, #4]
 800118e:	f7ff fe3f 	bl	8000e10 <Do_Comb1>
 8001192:	eef0 7a40 	vmov.f32	s15, s0
 8001196:	ee38 8a27 	vadd.f32	s16, s16, s15
 800119a:	ed97 0a01 	vldr	s0, [r7, #4]
 800119e:	f7ff fe77 	bl	8000e90 <Do_Comb2>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80011aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80011ae:	f7ff feaf 	bl	8000f10 <Do_Comb3>
 80011b2:	eef0 7a40 	vmov.f32	s15, s0
 80011b6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80011ba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80011be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c2:	edc7 7a03 	vstr	s15, [r7, #12]
	newsample = Do_Allpass0(newsample);
 80011c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80011ca:	f7ff fee1 	bl	8000f90 <Do_Allpass0>
 80011ce:	ed87 0a03 	vstr	s0, [r7, #12]
	newsample = Do_Allpass1(newsample);
 80011d2:	ed97 0a03 	vldr	s0, [r7, #12]
 80011d6:	f7ff ff2b 	bl	8001030 <Do_Allpass1>
 80011da:	ed87 0a03 	vstr	s0, [r7, #12]
	newsample = Do_Allpass2(newsample);
 80011de:	ed97 0a03 	vldr	s0, [r7, #12]
 80011e2:	f7ff ff75 	bl	80010d0 <Do_Allpass2>
 80011e6:	ed87 0a03 	vstr	s0, [r7, #12]
	return newsample;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	ee07 3a90 	vmov	s15, r3
}
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	ecbd 8b02 	vpop	{d8}
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <audioLoop>:
void audioLoop() {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af02      	add	r7, sp, #8

	//uiDisplayBasic();

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8001206:	4a34      	ldr	r2, [pc, #208]	; (80012d8 <audioLoop+0xd8>)
 8001208:	2100      	movs	r1, #0
 800120a:	4834      	ldr	r0, [pc, #208]	; (80012dc <audioLoop+0xdc>)
 800120c:	f018 fa3e 	bl	801968c <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8001210:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <audioLoop+0xe0>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

	arm_rfft_fast_init_f32(&FFTStruct, FFTLength);
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	4832      	ldr	r0, [pc, #200]	; (80012e4 <audioLoop+0xe4>)
 800121c:	f018 f93a 	bl	8019494 <arm_rfft_fast_init_f32>

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <audioLoop+0xe8>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122e:	492f      	ldr	r1, [pc, #188]	; (80012ec <audioLoop+0xec>)
 8001230:	482f      	ldr	r0, [pc, #188]	; (80012f0 <audioLoop+0xf0>)
 8001232:	f004 f93d 	bl	80054b0 <start_Audio_Processing>

	/* main audio loop */
	while (1) {

		accumulateInputLevels();
 8001236:	f000 f86b 	bl	8001310 <accumulateInputLevels>
		count++;
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <audioLoop+0xf4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a2c      	ldr	r2, [pc, #176]	; (80012f4 <audioLoop+0xf4>)
 8001242:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <audioLoop+0xf4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b13      	cmp	r3, #19
 800124a:	dd2a      	ble.n	80012a2 <audioLoop+0xa2>
			count = 0;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <audioLoop+0xf4>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
			inputLevelLavr = inputLevelL * 0.05;
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <audioLoop+0xf8>)
 8001254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001258:	a31d      	add	r3, pc, #116	; (adr r3, 80012d0 <audioLoop+0xd0>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff f9e3 	bl	8000628 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4925      	ldr	r1, [pc, #148]	; (80012fc <audioLoop+0xfc>)
 8001268:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelRavr = inputLevelR * 0.05;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <audioLoop+0x100>)
 800126e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001272:	a317      	add	r3, pc, #92	; (adr r3, 80012d0 <audioLoop+0xd0>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff f9d6 	bl	8000628 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4920      	ldr	r1, [pc, #128]	; (8001304 <audioLoop+0x104>)
 8001282:	e9c1 2300 	strd	r2, r3, [r1]
			//osSignalSet(uiTaskHandle, 0x0002);
			//uiDisplayInputLevel(inputLevelL, inputLevelR);
			inputLevelL = 0.;
 8001286:	491c      	ldr	r1, [pc, #112]	; (80012f8 <audioLoop+0xf8>)
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 8001294:	491a      	ldr	r1, [pc, #104]	; (8001300 <audioLoop+0x100>)
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		osSignalWait (0x0002, osWaitForever);
 80012a2:	463b      	mov	r3, r7
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	2102      	movs	r1, #2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f015 f954 	bl	8016558 <osSignalWait>
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 1st half block */
//		processAudio(buf_output, buf_input);

		osSignalWait (0x0001, osWaitForever);
 80012b0:	463b      	mov	r3, r7
 80012b2:	f04f 32ff 	mov.w	r2, #4294967295
 80012b6:	2101      	movs	r1, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f015 f94d 	bl	8016558 <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 2nd half block */
		processReverb(buf_output_half, buf_input_half);
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <audioLoop+0x108>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <audioLoop+0x10c>)
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f8e9 	bl	80014a0 <processReverb>
	while (1) {
 80012ce:	e7b2      	b.n	8001236 <audioLoop+0x36>
 80012d0:	9999999a 	.word	0x9999999a
 80012d4:	3fa99999 	.word	0x3fa99999
 80012d8:	0004e200 	.word	0x0004e200
 80012dc:	c0096000 	.word	0xc0096000
 80012e0:	2001d588 	.word	0x2001d588
 80012e4:	2001e7b8 	.word	0x2001e7b8
 80012e8:	2001ed30 	.word	0x2001ed30
 80012ec:	2001d58c 	.word	0x2001d58c
 80012f0:	2001dd8c 	.word	0x2001dd8c
 80012f4:	2001e78c 	.word	0x2001e78c
 80012f8:	2001e798 	.word	0x2001e798
 80012fc:	2001e7a8 	.word	0x2001e7a8
 8001300:	2001e7a0 	.word	0x2001e7a0
 8001304:	2001e7b0 	.word	0x2001e7b0
 8001308:	20000028 	.word	0x20000028
 800130c:	20000024 	.word	0x20000024

08001310 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	e016      	b.n	800134e <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 8001320:	4a3e      	ldr	r2, [pc, #248]	; (800141c <accumulateInputLevels+0x10c>)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001328:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 800132a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	dd05      	ble.n	800133e <accumulateInputLevels+0x2e>
			lvl += v;
 8001332:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e004      	b.n	8001348 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 800133e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3302      	adds	r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001354:	d3e4      	bcc.n	8001320 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff f8ec 	bl	8000534 <__aeabi_ui2d>
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <accumulateInputLevels+0x110>)
 8001362:	f7ff fa8b 	bl	800087c <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <accumulateInputLevels+0x114>)
 8001374:	f7ff fa82 	bl	800087c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <accumulateInputLevels+0x118>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7fe ff99 	bl	80002bc <__adddf3>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4926      	ldr	r1, [pc, #152]	; (8001428 <accumulateInputLevels+0x118>)
 8001390:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001398:	2301      	movs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	e016      	b.n	80013cc <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <accumulateInputLevels+0x10c>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013a6:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 80013a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd05      	ble.n	80013bc <accumulateInputLevels+0xac>
			lvl += v;
 80013b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	e004      	b.n	80013c6 <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 80013bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3302      	adds	r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d2:	d3e4      	bcc.n	800139e <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f7ff f8ad 	bl	8000534 <__aeabi_ui2d>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <accumulateInputLevels+0x110>)
 80013e0:	f7ff fa4c 	bl	800087c <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <accumulateInputLevels+0x114>)
 80013f2:	f7ff fa43 	bl	800087c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <accumulateInputLevels+0x11c>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7fe ff5a 	bl	80002bc <__adddf3>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <accumulateInputLevels+0x11c>)
 800140e:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2001d58c 	.word	0x2001d58c
 8001420:	40900000 	.word	0x40900000
 8001424:	40e00000 	.word	0x40e00000
 8001428:	2001e798 	.word	0x2001e798
 800142c:	2001e7a0 	.word	0x2001e7a0

08001430 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_FULL;
	osSignalSet(defaultTaskHandle, 0x0001);
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_SAI_RxCpltCallback+0x1c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f015 f84a 	bl	80164d8 <osSignalSet>
	return;
 8001444:	bf00      	nop
}
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2001f32c 	.word	0x2001f32c

08001450 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_HALF;
	osSignalSet(defaultTaskHandle, 0x0002);
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_SAI_RxHalfCpltCallback+0x1c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2102      	movs	r1, #2
 800145e:	4618      	mov	r0, r3
 8001460:	f015 f83a 	bl	80164d8 <osSignalSet>
	return;
 8001464:	bf00      	nop
}
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2001f32c 	.word	0x2001f32c

08001470 <writeToAudioScratch>:
}

/**
 * Write the given value to the audio scratch buffer in SDRAM at position "pos"
 */
static void writeToAudioScratch(float val, int pos) {
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	ed87 0a01 	vstr	s0, [r7, #4]
 800147a:	6038      	str	r0, [r7, #0]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <writeToAudioScratch+0x2c>)
 800147e:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
	*(__IO float*) pSdramAddress = val;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	601a      	str	r2, [r3, #0]

}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	c0096000 	.word	0xc0096000

080014a0 <processReverb>:
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */

 void processReverb(int16_t *out, int16_t *in){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	ed2d 8b02 	vpush	{d8}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	//limiteur de temps
		cf0_lim = (int)(time2*l_CB0);
 80014ae:	4b64      	ldr	r3, [pc, #400]	; (8001640 <processReverb+0x1a0>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001644 <processReverb+0x1a4>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c4:	ee17 2a90 	vmov	r2, s15
 80014c8:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <processReverb+0x1a8>)
 80014ca:	601a      	str	r2, [r3, #0]
		cf1_lim = (int)(time2*l_CB1);
 80014cc:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <processReverb+0x1a0>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800164c <processReverb+0x1ac>
 80014d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e2:	ee17 2a90 	vmov	r2, s15
 80014e6:	4b5a      	ldr	r3, [pc, #360]	; (8001650 <processReverb+0x1b0>)
 80014e8:	601a      	str	r2, [r3, #0]
		cf2_lim = (int)(time2*l_CB2);
 80014ea:	4b55      	ldr	r3, [pc, #340]	; (8001640 <processReverb+0x1a0>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001654 <processReverb+0x1b4>
 80014f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001500:	ee17 2a90 	vmov	r2, s15
 8001504:	4b54      	ldr	r3, [pc, #336]	; (8001658 <processReverb+0x1b8>)
 8001506:	601a      	str	r2, [r3, #0]
		cf3_lim = (int)(time2*l_CB3);
 8001508:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <processReverb+0x1a0>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800165c <processReverb+0x1bc>
 8001512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001516:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <processReverb+0x1c0>)
 8001524:	601a      	str	r2, [r3, #0]
		ap0_lim = (int)(time2*l_AP0);
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <processReverb+0x1a0>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001664 <processReverb+0x1c4>
 8001530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001538:	ee17 2a90 	vmov	r2, s15
 800153c:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <processReverb+0x1c8>)
 800153e:	601a      	str	r2, [r3, #0]
		ap1_lim = (int)(time2*l_AP1);
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <processReverb+0x1a0>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800166c <processReverb+0x1cc>
 800154a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001552:	ee17 2a90 	vmov	r2, s15
 8001556:	4b46      	ldr	r3, [pc, #280]	; (8001670 <processReverb+0x1d0>)
 8001558:	601a      	str	r2, [r3, #0]
		ap2_lim = (int)(time2*l_AP2);
 800155a:	4b39      	ldr	r3, [pc, #228]	; (8001640 <processReverb+0x1a0>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001674 <processReverb+0x1d4>
 8001564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800156c:	ee17 2a90 	vmov	r2, s15
 8001570:	4b41      	ldr	r3, [pc, #260]	; (8001678 <processReverb+0x1d8>)
 8001572:	601a      	str	r2, [r3, #0]

		for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e057      	b.n	800162a <processReverb+0x18a>
			float new = (1.0f-wet)*in[n] + wet*Do_Reverb(in[n]);
 800157a:	4b40      	ldr	r3, [pc, #256]	; (800167c <processReverb+0x1dc>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001584:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	4413      	add	r3, r2
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	ee27 8a27 	vmul.f32	s16, s14, s15
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	f7ff fdda 	bl	8001170 <Do_Reverb>
 80015bc:	eeb0 7a40 	vmov.f32	s14, s0
 80015c0:	4b2e      	ldr	r3, [pc, #184]	; (800167c <processReverb+0x1dc>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	ee78 7a27 	vadd.f32	s15, s16, s15
 80015ce:	edc7 7a02 	vstr	s15, [r7, #8]
			//	float new = in[n]+(float)old/100*(delayFeed);
			//	delay
			writeToAudioScratch((float)new,posScratch);
 80015d2:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <processReverb+0x1e0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80015dc:	f7ff ff48 	bl	8001470 <writeToAudioScratch>
			posScratch+=1;
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <processReverb+0x1e0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <processReverb+0x1e0>)
 80015e8:	6013      	str	r3, [r2, #0]
			out[n]= (new*volume*depth)/100;
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <processReverb+0x1e4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <processReverb+0x1e8>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001608:	eddf 6a20 	vldr	s13, [pc, #128]	; 800168c <processReverb+0x1ec>
 800160c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800161c:	ee17 2a90 	vmov	r2, s15
 8001620:	b212      	sxth	r2, r2
 8001622:	801a      	strh	r2, [r3, #0]
		for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001630:	d3a3      	bcc.n	800157a <processReverb+0xda>
		}


}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	ecbd 8b02 	vpop	{d8}
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000004 	.word	0x20000004
 8001644:	45584000 	.word	0x45584000
 8001648:	20000104 	.word	0x20000104
 800164c:	453ac000 	.word	0x453ac000
 8001650:	20000108 	.word	0x20000108
 8001654:	4572a000 	.word	0x4572a000
 8001658:	2000010c 	.word	0x2000010c
 800165c:	4586c000 	.word	0x4586c000
 8001660:	20000110 	.word	0x20000110
 8001664:	43f00000 	.word	0x43f00000
 8001668:	20000114 	.word	0x20000114
 800166c:	43210000 	.word	0x43210000
 8001670:	20000118 	.word	0x20000118
 8001674:	42380000 	.word	0x42380000
 8001678:	2000011c 	.word	0x2000011c
 800167c:	20000000 	.word	0x20000000
 8001680:	2001e790 	.word	0x2001e790
 8001684:	20000030 	.word	0x20000030
 8001688:	20000034 	.word	0x20000034
 800168c:	42c80000 	.word	0x42c80000

08001690 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80016d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <vApplicationGetIdleTaskMemory+0x30>)
 80016da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	2001e7d0 	.word	0x2001e7d0
 80016f4:	2001e828 	.word	0x2001e828

080016f8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016fc:	f3bf 8f4f 	dsb	sy
}
 8001700:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001702:	f3bf 8f6f 	isb	sy
}
 8001706:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <SCB_EnableICache+0x48>)
 800170a:	2200      	movs	r2, #0
 800170c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001710:	f3bf 8f4f 	dsb	sy
}
 8001714:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001716:	f3bf 8f6f 	isb	sy
}
 800171a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <SCB_EnableICache+0x48>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <SCB_EnableICache+0x48>)
 8001722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001726:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001728:	f3bf 8f4f 	dsb	sy
}
 800172c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800172e:	f3bf 8f6f 	isb	sy
}
 8001732:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001748:	f3bf 8f4f 	dsb	sy
}
 800174c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800174e:	f3bf 8f6f 	isb	sy
}
 8001752:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <SCB_InvalidateICache+0x30>)
 8001756:	2200      	movs	r2, #0
 8001758:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800175c:	f3bf 8f4f 	dsb	sy
}
 8001760:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001762:	f3bf 8f6f 	isb	sy
}
 8001766:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <SCB_EnableDCache+0x84>)
 8001780:	2200      	movs	r2, #0
 8001782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001786:	f3bf 8f4f 	dsb	sy
}
 800178a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <SCB_EnableDCache+0x84>)
 800178e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001792:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	0b5b      	lsrs	r3, r3, #13
 8001798:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800179c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80017b0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017b6:	4911      	ldr	r1, [pc, #68]	; (80017fc <SCB_EnableDCache+0x84>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	60ba      	str	r2, [r7, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ef      	bne.n	80017a8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1e5a      	subs	r2, r3, #1
 80017cc:	60fa      	str	r2, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e5      	bne.n	800179e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80017d2:	f3bf 8f4f 	dsb	sy
}
 80017d6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <SCB_EnableDCache+0x84>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <SCB_EnableDCache+0x84>)
 80017de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017e4:	f3bf 8f4f 	dsb	sy
}
 80017e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017ea:	f3bf 8f6f 	isb	sy
}
 80017ee:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <SCB_InvalidateDCache+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800180e:	f3bf 8f4f 	dsb	sy
}
 8001812:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <SCB_InvalidateDCache+0x74>)
 8001816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800181a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0b5b      	lsrs	r3, r3, #13
 8001820:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001824:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	08db      	lsrs	r3, r3, #3
 800182a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800182e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001838:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800183e:	490d      	ldr	r1, [pc, #52]	; (8001874 <SCB_InvalidateDCache+0x74>)
 8001840:	4313      	orrs	r3, r2
 8001842:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ef      	bne.n	8001830 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e5a      	subs	r2, r3, #1
 8001854:	60fa      	str	r2, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1e5      	bne.n	8001826 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800185a:	f3bf 8f4f 	dsb	sy
}
 800185e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001860:	f3bf 8f6f 	isb	sy
}
 8001864:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b08e      	sub	sp, #56	; 0x38
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 800187e:	f7ff ffbf 	bl	8001800 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001882:	f7ff ff5f 	bl	8001744 <SCB_InvalidateICache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001886:	f005 fb83 	bl	8006f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188a:	f000 f873 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188e:	f001 f8cf 	bl	8002a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001892:	f001 f80b 	bl	80028ac <MX_DMA_Init>
  MX_ADC3_Init();
 8001896:	f000 f92b 	bl	8001af0 <MX_ADC3_Init>
  MX_CRC_Init();
 800189a:	f000 f97b 	bl	8001b94 <MX_CRC_Init>
  MX_DCMI_Init();
 800189e:	f000 f99b 	bl	8001bd8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80018a2:	f000 f9cd 	bl	8001c40 <MX_DMA2D_Init>
  MX_FMC_Init();
 80018a6:	f001 f86f 	bl	8002988 <MX_FMC_Init>
  MX_I2C1_Init();
 80018aa:	f000 f9fb 	bl	8001ca4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80018ae:	f000 fa39 	bl	8001d24 <MX_I2C3_Init>
  MX_LTDC_Init();
 80018b2:	f000 fa77 	bl	8001da4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80018b6:	f000 faf9 	bl	8001eac <MX_QUADSPI_Init>
  MX_RTC_Init();
 80018ba:	f000 fb39 	bl	8001f30 <MX_RTC_Init>
  MX_SAI2_Init();
 80018be:	f000 fbdd 	bl	800207c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80018c2:	f000 fc97 	bl	80021f4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80018c6:	f000 fcb5 	bl	8002234 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 80018ca:	f000 fce3 	bl	8002294 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018ce:	f000 fd8d 	bl	80023ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80018d2:	f000 fe01 	bl	80024d8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80018d6:	f000 fe77 	bl	80025c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80018da:	f000 feed 	bl	80026b8 <MX_TIM8_Init>
  MX_TIM12_Init();
 80018de:	f000 ff3f 	bl	8002760 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80018e2:	f000 ff83 	bl	80027ec <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80018e6:	f000 ffb1 	bl	800284c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80018ea:	f012 f943 	bl	8013b74 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 80018ee:	f012 fb91 	bl	8014014 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

	MPU_Init();
 80018f2:	f004 fa37 	bl	8005d64 <MPU_Init>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 80018f6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80018fa:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018fe:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8001900:	f003 feca 	bl	8005698 <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001904:	4816      	ldr	r0, [pc, #88]	; (8001960 <main+0xe8>)
 8001906:	f018 f845 	bl	8019994 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 800190a:	f7ff fef5 	bl	80016f8 <SCB_EnableICache>
	SCB_EnableDCache();
 800190e:	f7ff ff33 	bl	8001778 <SCB_EnableDCache>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <main+0xec>)
 8001914:	f107 041c 	add.w	r4, r7, #28
 8001918:	461d      	mov	r5, r3
 800191a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f014 fd73 	bl	8016418 <osThreadCreate>
 8001932:	4603      	mov	r3, r0
 8001934:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <main+0xf0>)
 8001936:	6013      	str	r3, [r2, #0]

  /* definition and creation of uiTask */
  osThreadDef(uiTask, startUITask, osPriorityLow, 0, 1024);
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <main+0xf4>)
 800193a:	463c      	mov	r4, r7
 800193c:	461d      	mov	r5, r3
 800193e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001942:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001946:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 800194a:	463b      	mov	r3, r7
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f014 fd62 	bl	8016418 <osThreadCreate>
 8001954:	4603      	mov	r3, r0
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <main+0xf8>)
 8001958:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800195a:	f014 fd3a 	bl	80163d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800195e:	e7fe      	b.n	800195e <main+0xe6>
 8001960:	0801ab28 	.word	0x0801ab28
 8001964:	0801ab40 	.word	0x0801ab40
 8001968:	2001f32c 	.word	0x2001f32c
 800196c:	0801ab5c 	.word	0x0801ab5c
 8001970:	2001f330 	.word	0x2001f330

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b0b4      	sub	sp, #208	; 0xd0
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800197e:	2230      	movs	r2, #48	; 0x30
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f017 fe82 	bl	801968c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	2284      	movs	r2, #132	; 0x84
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f017 fe73 	bl	801968c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019a6:	f00a fa21 	bl	800bdec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <SystemClock_Config+0x170>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a4d      	ldr	r2, [pc, #308]	; (8001ae4 <SystemClock_Config+0x170>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <SystemClock_Config+0x170>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c2:	4b49      	ldr	r3, [pc, #292]	; (8001ae8 <SystemClock_Config+0x174>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a48      	ldr	r2, [pc, #288]	; (8001ae8 <SystemClock_Config+0x174>)
 80019c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <SystemClock_Config+0x174>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019da:	2309      	movs	r3, #9
 80019dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 80019fc:	230f      	movs	r3, #15
 80019fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 228;
 8001a02:	23e4      	movs	r3, #228	; 0xe4
 8001a04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001a0e:	2309      	movs	r3, #9
 8001a10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a14:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f00b fa0b 	bl	800ce34 <HAL_RCC_OscConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a24:	f001 fa72 	bl	8002f0c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a28:	f00a f9f0 	bl	800be0c <HAL_PWREx_EnableOverDrive>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a32:	f001 fa6b 	bl	8002f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a36:	230f      	movs	r3, #15
 8001a38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001a58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a5c:	2106      	movs	r1, #6
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00b fc8c 	bl	800d37c <HAL_RCC_ClockConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001a6a:	f001 fa4f 	bl	8002f0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <SystemClock_Config+0x178>)
 8001a70:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 60;
 8001a72:	233c      	movs	r3, #60	; 0x3c
 8001a74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001a82:	233c      	movs	r3, #60	; 0x3c
 8001a84:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001aac:	2300      	movs	r3, #0
 8001aae:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001ab8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00b fe6e 	bl	800d7ac <HAL_RCCEx_PeriphCLKConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0x166>
  {
    Error_Handler();
 8001ad6:	f001 fa19 	bl	8002f0c <Error_Handler>
  }
}
 8001ada:	bf00      	nop
 8001adc:	37d0      	adds	r7, #208	; 0xd0
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	01b14868 	.word	0x01b14868

08001af0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001af6:	463b      	mov	r3, r7
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b04:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <MX_ADC3_Init+0x9c>)
 8001b06:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b0e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b32:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <MX_ADC3_Init+0xa0>)
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b52:	f005 fa77 	bl	8007044 <HAL_ADC_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001b5c:	f001 f9d6 	bl	8002f0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b60:	2304      	movs	r3, #4
 8001b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_ADC3_Init+0x98>)
 8001b72:	f005 faab 	bl	80070cc <HAL_ADC_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001b7c:	f001 f9c6 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2001ea28 	.word	0x2001ea28
 8001b8c:	40012200 	.word	0x40012200
 8001b90:	0f000001 	.word	0x0f000001

08001b94 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <MX_CRC_Init+0x40>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001bbe:	f005 fe59 	bl	8007874 <HAL_CRC_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001bc8:	f001 f9a0 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2001ea70 	.word	0x2001ea70
 8001bd4:	40023000 	.word	0x40023000

08001bd8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <MX_DCMI_Init+0x64>)
 8001be0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_DCMI_Init+0x60>)
 8001c26:	f005 ff0f 	bl	8007a48 <HAL_DCMI_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001c30:	f001 f96c 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2001ea94 	.word	0x2001ea94
 8001c3c:	50050000 	.word	0x50050000

08001c40 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c46:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <MX_DMA2D_Init+0x60>)
 8001c48:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c74:	4809      	ldr	r0, [pc, #36]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c76:	f006 fc47 	bl	8008508 <HAL_DMA2D_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001c80:	f001 f944 	bl	8002f0c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c84:	2101      	movs	r1, #1
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_DMA2D_Init+0x5c>)
 8001c88:	f006 feac 	bl	80089e4 <HAL_DMA2D_ConfigLayer>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001c92:	f001 f93b 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2001eb44 	.word	0x2001eb44
 8001ca0:	4002b000 	.word	0x4002b000

08001ca4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <MX_I2C1_Init+0x78>)
 8001cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B0D1FF;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <MX_I2C1_Init+0x7c>)
 8001cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cde:	480e      	ldr	r0, [pc, #56]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001ce0:	f009 f83a 	bl	800ad58 <HAL_I2C_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cea:	f001 f90f 	bl	8002f0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4809      	ldr	r0, [pc, #36]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001cf2:	f009 fd3b 	bl	800b76c <HAL_I2CEx_ConfigAnalogFilter>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cfc:	f001 f906 	bl	8002f0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d00:	2100      	movs	r1, #0
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_I2C1_Init+0x74>)
 8001d04:	f009 fd7d 	bl	800b802 <HAL_I2CEx_ConfigDigitalFilter>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d0e:	f001 f8fd 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2001eb84 	.word	0x2001eb84
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	00b0d1ff 	.word	0x00b0d1ff

08001d24 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <MX_I2C3_Init+0x78>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B0D1FF;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <MX_I2C3_Init+0x7c>)
 8001d32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d5e:	480e      	ldr	r0, [pc, #56]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d60:	f008 fffa 	bl	800ad58 <HAL_I2C_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001d6a:	f001 f8cf 	bl	8002f0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4809      	ldr	r0, [pc, #36]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d72:	f009 fcfb 	bl	800b76c <HAL_I2CEx_ConfigAnalogFilter>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001d7c:	f001 f8c6 	bl	8002f0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d80:	2100      	movs	r1, #0
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_I2C3_Init+0x74>)
 8001d84:	f009 fd3d 	bl	800b802 <HAL_I2CEx_ConfigDigitalFilter>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001d8e:	f001 f8bd 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2001ebd0 	.word	0x2001ebd0
 8001d9c:	40005c00 	.word	0x40005c00
 8001da0:	00b0d1ff 	.word	0x00b0d1ff

08001da4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08e      	sub	sp, #56	; 0x38
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2234      	movs	r2, #52	; 0x34
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f017 fc6b 	bl	801968c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001db8:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <MX_LTDC_Init+0x104>)
 8001dba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001dce:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001dd4:	4b33      	ldr	r3, [pc, #204]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001dd6:	2228      	movs	r2, #40	; 0x28
 8001dd8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001dda:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001ddc:	2209      	movs	r2, #9
 8001dde:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001de2:	2235      	movs	r2, #53	; 0x35
 8001de4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001de6:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001de8:	220b      	movs	r2, #11
 8001dea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001dee:	f240 2215 	movw	r2, #533	; 0x215
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001df6:	f240 121b 	movw	r2, #283	; 0x11b
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001dfe:	f240 2235 	movw	r2, #565	; 0x235
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001e06:	f240 121d 	movw	r2, #285	; 0x11d
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001e24:	481f      	ldr	r0, [pc, #124]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001e26:	f009 fd39 	bl	800b89c <HAL_LTDC_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001e30:	f001 f86c 	bl	8002f0c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001e38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001e3c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001e42:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001e46:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001e4c:	23ff      	movs	r3, #255	; 0xff
 8001e4e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e58:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001e5e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001e64:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001e6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2200      	movs	r2, #0
 8001e86:	4619      	mov	r1, r3
 8001e88:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <MX_LTDC_Init+0x100>)
 8001e8a:	f009 fdd7 	bl	800ba3c <HAL_LTDC_ConfigLayer>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001e94:	f001 f83a 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001e98:	f002 fe30 	bl	8004afc <LCD_Init>

  /* USER CODE END LTDC_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3738      	adds	r7, #56	; 0x38
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2001ec1c 	.word	0x2001ec1c
 8001ea8:	40016800 	.word	0x40016800

08001eac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <MX_QUADSPI_Init+0x80>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001eca:	2218      	movs	r2, #24
 8001ecc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001ed0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001ed4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001ee8:	480f      	ldr	r0, [pc, #60]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001eea:	f009 ffdf 	bl	800beac <HAL_QSPI_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001ef4:	f001 f80a 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001efa:	f003 f9a1 	bl	8005240 <DISCO_QSPI_ResetMemory>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_QUADSPI_Init+0x5c>
 8001f04:	f001 f802 	bl	8002f0c <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001f08:	4807      	ldr	r0, [pc, #28]	; (8001f28 <MX_QUADSPI_Init+0x7c>)
 8001f0a:	f003 f9db 	bl	80052c4 <DISCO_QSPI_DummyCyclesCfg>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_QUADSPI_Init+0x6c>
 8001f14:	f000 fffa 	bl	8002f0c <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001f18:	f003 f960 	bl	80051dc <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001f1c:	205c      	movs	r0, #92	; 0x5c
 8001f1e:	f005 fc1f 	bl	8007760 <HAL_NVIC_DisableIRQ>


  /* USER CODE END QUADSPI_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2001ecc4 	.word	0x2001ecc4
 8001f2c:	a0001000 	.word	0xa0001000

08001f30 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b092      	sub	sp, #72	; 0x48
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	611a      	str	r2, [r3, #16]
 8001f46:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	222c      	movs	r2, #44	; 0x2c
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f017 fb9a 	bl	801968c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <MX_RTC_Init+0x144>)
 8001f5a:	4a47      	ldr	r2, [pc, #284]	; (8002078 <MX_RTC_Init+0x148>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f5e:	4b45      	ldr	r3, [pc, #276]	; (8002074 <MX_RTC_Init+0x144>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f64:	4b43      	ldr	r3, [pc, #268]	; (8002074 <MX_RTC_Init+0x144>)
 8001f66:	227f      	movs	r2, #127	; 0x7f
 8001f68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f6a:	4b42      	ldr	r3, [pc, #264]	; (8002074 <MX_RTC_Init+0x144>)
 8001f6c:	22ff      	movs	r2, #255	; 0xff
 8001f6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <MX_RTC_Init+0x144>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <MX_RTC_Init+0x144>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <MX_RTC_Init+0x144>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f82:	483c      	ldr	r0, [pc, #240]	; (8002074 <MX_RTC_Init+0x144>)
 8001f84:	f00c f946 	bl	800e214 <HAL_RTC_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001f8e:	f000 ffbd 	bl	8002f0c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	482f      	ldr	r0, [pc, #188]	; (8002074 <MX_RTC_Init+0x144>)
 8001fb6:	f00c f9bf 	bl	800e338 <HAL_RTC_SetTime>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001fc0:	f000 ffa4 	bl	8002f0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4823      	ldr	r0, [pc, #140]	; (8002074 <MX_RTC_Init+0x144>)
 8001fe6:	f00c fa65 	bl	800e4b4 <HAL_RTC_SetDate>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001ff0:	f000 ff8c 	bl	8002f0c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800201e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002024:	463b      	mov	r3, r7
 8002026:	2201      	movs	r2, #1
 8002028:	4619      	mov	r1, r3
 800202a:	4812      	ldr	r0, [pc, #72]	; (8002074 <MX_RTC_Init+0x144>)
 800202c:	f00c faea 	bl	800e604 <HAL_RTC_SetAlarm>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8002036:	f000 ff69 	bl	8002f0c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800203a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002040:	463b      	mov	r3, r7
 8002042:	2201      	movs	r2, #1
 8002044:	4619      	mov	r1, r3
 8002046:	480b      	ldr	r0, [pc, #44]	; (8002074 <MX_RTC_Init+0x144>)
 8002048:	f00c fadc 	bl	800e604 <HAL_RTC_SetAlarm>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8002052:	f000 ff5b 	bl	8002f0c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002056:	2202      	movs	r2, #2
 8002058:	2100      	movs	r1, #0
 800205a:	4806      	ldr	r0, [pc, #24]	; (8002074 <MX_RTC_Init+0x144>)
 800205c:	f00c fc5c 	bl	800e918 <HAL_RTCEx_SetTimeStamp>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8002066:	f000 ff51 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	3748      	adds	r7, #72	; 0x48
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2001ed10 	.word	0x2001ed10
 8002078:	40002800 	.word	0x40002800

0800207c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002080:	4b58      	ldr	r3, [pc, #352]	; (80021e4 <MX_SAI2_Init+0x168>)
 8002082:	4a59      	ldr	r2, [pc, #356]	; (80021e8 <MX_SAI2_Init+0x16c>)
 8002084:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002086:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <MX_SAI2_Init+0x168>)
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800208c:	4b55      	ldr	r3, [pc, #340]	; (80021e4 <MX_SAI2_Init+0x168>)
 800208e:	2200      	movs	r2, #0
 8002090:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8002092:	4b54      	ldr	r3, [pc, #336]	; (80021e4 <MX_SAI2_Init+0x168>)
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002098:	4b52      	ldr	r3, [pc, #328]	; (80021e4 <MX_SAI2_Init+0x168>)
 800209a:	2200      	movs	r2, #0
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800209e:	4b51      	ldr	r3, [pc, #324]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80020a4:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80020aa:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b0:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80020b2:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80020b8:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80020be:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020c0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80020c4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80020cc:	4b45      	ldr	r3, [pc, #276]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80020d2:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80020d8:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020da:	2200      	movs	r2, #0
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020e0:	2240      	movs	r2, #64	; 0x40
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 80020e4:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020e6:	2220      	movs	r2, #32
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80020ea:	4b3e      	ldr	r3, [pc, #248]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020f0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80020f2:	4b3c      	ldr	r3, [pc, #240]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80020f8:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <MX_SAI2_Init+0x168>)
 80020fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80020fe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002100:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <MX_SAI2_Init+0x168>)
 8002102:	2200      	movs	r2, #0
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002106:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <MX_SAI2_Init+0x168>)
 8002108:	2200      	movs	r2, #0
 800210a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 800210c:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <MX_SAI2_Init+0x168>)
 800210e:	2204      	movs	r2, #4
 8002110:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8002112:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <MX_SAI2_Init+0x168>)
 8002114:	2205      	movs	r2, #5
 8002116:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002118:	4832      	ldr	r0, [pc, #200]	; (80021e4 <MX_SAI2_Init+0x168>)
 800211a:	f00c fc53 	bl	800e9c4 <HAL_SAI_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_SAI2_Init+0xac>
  {
    Error_Handler();
 8002124:	f000 fef2 	bl	8002f0c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002128:	4b30      	ldr	r3, [pc, #192]	; (80021ec <MX_SAI2_Init+0x170>)
 800212a:	4a31      	ldr	r2, [pc, #196]	; (80021f0 <MX_SAI2_Init+0x174>)
 800212c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800212e:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <MX_SAI2_Init+0x170>)
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002134:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <MX_SAI2_Init+0x170>)
 8002136:	2203      	movs	r2, #3
 8002138:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <MX_SAI2_Init+0x170>)
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <MX_SAI2_Init+0x170>)
 8002142:	2200      	movs	r2, #0
 8002144:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <MX_SAI2_Init+0x170>)
 8002148:	2201      	movs	r2, #1
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <MX_SAI2_Init+0x170>)
 800214e:	2201      	movs	r2, #1
 8002150:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002152:	4b26      	ldr	r3, [pc, #152]	; (80021ec <MX_SAI2_Init+0x170>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <MX_SAI2_Init+0x170>)
 800215a:	2201      	movs	r2, #1
 800215c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <MX_SAI2_Init+0x170>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <MX_SAI2_Init+0x170>)
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <MX_SAI2_Init+0x170>)
 800216c:	2200      	movs	r2, #0
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <MX_SAI2_Init+0x170>)
 8002172:	2200      	movs	r2, #0
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 64;
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <MX_SAI2_Init+0x170>)
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <MX_SAI2_Init+0x170>)
 800217e:	2220      	movs	r2, #32
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <MX_SAI2_Init+0x170>)
 8002184:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002188:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <MX_SAI2_Init+0x170>)
 800218c:	2200      	movs	r2, #0
 800218e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <MX_SAI2_Init+0x170>)
 8002192:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002196:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_SAI2_Init+0x170>)
 800219a:	2200      	movs	r2, #0
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <MX_SAI2_Init+0x170>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 4;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_SAI2_Init+0x170>)
 80021a6:	2204      	movs	r2, #4
 80021a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_SAI2_Init+0x170>)
 80021ac:	220a      	movs	r2, #10
 80021ae:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80021b0:	480e      	ldr	r0, [pc, #56]	; (80021ec <MX_SAI2_Init+0x170>)
 80021b2:	f00c fc07 	bl	800e9c4 <HAL_SAI_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_SAI2_Init+0x144>
  {
    Error_Handler();
 80021bc:	f000 fea6 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <MX_SAI2_Init+0x168>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_SAI2_Init+0x168>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021ce:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_SAI2_Init+0x170>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <MX_SAI2_Init+0x170>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021de:	601a      	str	r2, [r3, #0]

  /* USER CODE END SAI2_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	2001ed30 	.word	0x2001ed30
 80021e8:	40015c04 	.word	0x40015c04
 80021ec:	2001edb4 	.word	0x2001edb4
 80021f0:	40015c24 	.word	0x40015c24

080021f4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <MX_SDMMC1_SD_Init+0x38>)
 80021fa:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <MX_SDMMC1_SD_Init+0x3c>)
 80021fc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <MX_SDMMC1_SD_Init+0x38>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <MX_SDMMC1_SD_Init+0x38>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <MX_SDMMC1_SD_Init+0x38>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <MX_SDMMC1_SD_Init+0x38>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <MX_SDMMC1_SD_Init+0x38>)
 8002218:	2200      	movs	r2, #0
 800221a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <MX_SDMMC1_SD_Init+0x38>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	2001eef8 	.word	0x2001eef8
 8002230:	40012c00 	.word	0x40012c00

08002234 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 800223a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800223e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 800225a:	2200      	movs	r2, #0
 800225c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 8002278:	2200      	movs	r2, #0
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800227c:	4804      	ldr	r0, [pc, #16]	; (8002290 <MX_SPDIFRX_Init+0x5c>)
 800227e:	f00e f899 	bl	80103b4 <HAL_SPDIFRX_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002288:	f000 fe40 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2001ef7c 	.word	0x2001ef7c

08002294 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b09a      	sub	sp, #104	; 0x68
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
 80022c4:	615a      	str	r2, [r3, #20]
 80022c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	222c      	movs	r2, #44	; 0x2c
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f017 f9dc 	bl	801968c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022d4:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <MX_TIM1_Init+0x150>)
 80022d6:	4a44      	ldr	r2, [pc, #272]	; (80023e8 <MX_TIM1_Init+0x154>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022da:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <MX_TIM1_Init+0x150>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <MX_TIM1_Init+0x150>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <MX_TIM1_Init+0x150>)
 80022e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <MX_TIM1_Init+0x150>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022f4:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <MX_TIM1_Init+0x150>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <MX_TIM1_Init+0x150>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002300:	4838      	ldr	r0, [pc, #224]	; (80023e4 <MX_TIM1_Init+0x150>)
 8002302:	f00e f8b3 	bl	801046c <HAL_TIM_Base_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800230c:	f000 fdfe 	bl	8002f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002314:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002316:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800231a:	4619      	mov	r1, r3
 800231c:	4831      	ldr	r0, [pc, #196]	; (80023e4 <MX_TIM1_Init+0x150>)
 800231e:	f00e fbfb 	bl	8010b18 <HAL_TIM_ConfigClockSource>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002328:	f000 fdf0 	bl	8002f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800232c:	482d      	ldr	r0, [pc, #180]	; (80023e4 <MX_TIM1_Init+0x150>)
 800232e:	f00e f96d 	bl	801060c <HAL_TIM_PWM_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002338:	f000 fde8 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002348:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800234c:	4619      	mov	r1, r3
 800234e:	4825      	ldr	r0, [pc, #148]	; (80023e4 <MX_TIM1_Init+0x150>)
 8002350:	f00f f868 	bl	8011424 <HAL_TIMEx_MasterConfigSynchronization>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800235a:	f000 fdd7 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800235e:	2360      	movs	r3, #96	; 0x60
 8002360:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002366:	2300      	movs	r3, #0
 8002368:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800236a:	2300      	movs	r3, #0
 800236c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800237a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800237e:	2200      	movs	r2, #0
 8002380:	4619      	mov	r1, r3
 8002382:	4818      	ldr	r0, [pc, #96]	; (80023e4 <MX_TIM1_Init+0x150>)
 8002384:	f00e fab8 	bl	80108f8 <HAL_TIM_PWM_ConfigChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800238e:	f000 fdbd 	bl	8002f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4807      	ldr	r0, [pc, #28]	; (80023e4 <MX_TIM1_Init+0x150>)
 80023c8:	f00f f8ba 	bl	8011540 <HAL_TIMEx_ConfigBreakDeadTime>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80023d2:	f000 fd9b 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023d6:	4803      	ldr	r0, [pc, #12]	; (80023e4 <MX_TIM1_Init+0x150>)
 80023d8:	f001 faba 	bl	8003950 <HAL_TIM_MspPostInit>

}
 80023dc:	bf00      	nop
 80023de:	3768      	adds	r7, #104	; 0x68
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2001efc8 	.word	0x2001efc8
 80023e8:	40010000 	.word	0x40010000

080023ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	615a      	str	r2, [r3, #20]
 800241c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <MX_TIM2_Init+0xe8>)
 8002420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002424:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002426:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <MX_TIM2_Init+0xe8>)
 8002428:	2200      	movs	r2, #0
 800242a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <MX_TIM2_Init+0xe8>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002432:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <MX_TIM2_Init+0xe8>)
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <MX_TIM2_Init+0xe8>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <MX_TIM2_Init+0xe8>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002446:	4823      	ldr	r0, [pc, #140]	; (80024d4 <MX_TIM2_Init+0xe8>)
 8002448:	f00e f810 	bl	801046c <HAL_TIM_Base_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002452:	f000 fd5b 	bl	8002f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800245c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002460:	4619      	mov	r1, r3
 8002462:	481c      	ldr	r0, [pc, #112]	; (80024d4 <MX_TIM2_Init+0xe8>)
 8002464:	f00e fb58 	bl	8010b18 <HAL_TIM_ConfigClockSource>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800246e:	f000 fd4d 	bl	8002f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002472:	4818      	ldr	r0, [pc, #96]	; (80024d4 <MX_TIM2_Init+0xe8>)
 8002474:	f00e f8ca 	bl	801060c <HAL_TIM_PWM_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800247e:	f000 fd45 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800248a:	f107 031c 	add.w	r3, r7, #28
 800248e:	4619      	mov	r1, r3
 8002490:	4810      	ldr	r0, [pc, #64]	; (80024d4 <MX_TIM2_Init+0xe8>)
 8002492:	f00e ffc7 	bl	8011424 <HAL_TIMEx_MasterConfigSynchronization>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800249c:	f000 fd36 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a0:	2360      	movs	r3, #96	; 0x60
 80024a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	2200      	movs	r2, #0
 80024b4:	4619      	mov	r1, r3
 80024b6:	4807      	ldr	r0, [pc, #28]	; (80024d4 <MX_TIM2_Init+0xe8>)
 80024b8:	f00e fa1e 	bl	80108f8 <HAL_TIM_PWM_ConfigChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80024c2:	f000 fd23 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024c6:	4803      	ldr	r0, [pc, #12]	; (80024d4 <MX_TIM2_Init+0xe8>)
 80024c8:	f001 fa42 	bl	8003950 <HAL_TIM_MspPostInit>

}
 80024cc:	bf00      	nop
 80024ce:	3738      	adds	r7, #56	; 0x38
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2001f014 	.word	0x2001f014

080024d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08e      	sub	sp, #56	; 0x38
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f8:	463b      	mov	r3, r7
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
 8002504:	611a      	str	r2, [r3, #16]
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800250a:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <MX_TIM3_Init+0xe8>)
 800250c:	4a2d      	ldr	r2, [pc, #180]	; (80025c4 <MX_TIM3_Init+0xec>)
 800250e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <MX_TIM3_Init+0xe8>)
 8002512:	2200      	movs	r2, #0
 8002514:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <MX_TIM3_Init+0xe8>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <MX_TIM3_Init+0xe8>)
 800251e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002524:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <MX_TIM3_Init+0xe8>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <MX_TIM3_Init+0xe8>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002530:	4823      	ldr	r0, [pc, #140]	; (80025c0 <MX_TIM3_Init+0xe8>)
 8002532:	f00d ff9b 	bl	801046c <HAL_TIM_Base_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800253c:	f000 fce6 	bl	8002f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800254a:	4619      	mov	r1, r3
 800254c:	481c      	ldr	r0, [pc, #112]	; (80025c0 <MX_TIM3_Init+0xe8>)
 800254e:	f00e fae3 	bl	8010b18 <HAL_TIM_ConfigClockSource>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002558:	f000 fcd8 	bl	8002f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800255c:	4818      	ldr	r0, [pc, #96]	; (80025c0 <MX_TIM3_Init+0xe8>)
 800255e:	f00e f855 	bl	801060c <HAL_TIM_PWM_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002568:	f000 fcd0 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4619      	mov	r1, r3
 800257a:	4811      	ldr	r0, [pc, #68]	; (80025c0 <MX_TIM3_Init+0xe8>)
 800257c:	f00e ff52 	bl	8011424 <HAL_TIMEx_MasterConfigSynchronization>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002586:	f000 fcc1 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800258a:	2360      	movs	r3, #96	; 0x60
 800258c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800259a:	463b      	mov	r3, r7
 800259c:	2200      	movs	r2, #0
 800259e:	4619      	mov	r1, r3
 80025a0:	4807      	ldr	r0, [pc, #28]	; (80025c0 <MX_TIM3_Init+0xe8>)
 80025a2:	f00e f9a9 	bl	80108f8 <HAL_TIM_PWM_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80025ac:	f000 fcae 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025b0:	4803      	ldr	r0, [pc, #12]	; (80025c0 <MX_TIM3_Init+0xe8>)
 80025b2:	f001 f9cd 	bl	8003950 <HAL_TIM_MspPostInit>

}
 80025b6:	bf00      	nop
 80025b8:	3738      	adds	r7, #56	; 0x38
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2001f060 	.word	0x2001f060
 80025c4:	40000400 	.word	0x40000400

080025c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e8:	463b      	mov	r3, r7
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
 80025f4:	611a      	str	r2, [r3, #16]
 80025f6:	615a      	str	r2, [r3, #20]
 80025f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <MX_TIM5_Init+0xe8>)
 80025fc:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <MX_TIM5_Init+0xec>)
 80025fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <MX_TIM5_Init+0xe8>)
 8002602:	2200      	movs	r2, #0
 8002604:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <MX_TIM5_Init+0xe8>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <MX_TIM5_Init+0xe8>)
 800260e:	f04f 32ff 	mov.w	r2, #4294967295
 8002612:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002614:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <MX_TIM5_Init+0xe8>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261a:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <MX_TIM5_Init+0xe8>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002620:	4823      	ldr	r0, [pc, #140]	; (80026b0 <MX_TIM5_Init+0xe8>)
 8002622:	f00d ff23 	bl	801046c <HAL_TIM_Base_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800262c:	f000 fc6e 	bl	8002f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800263a:	4619      	mov	r1, r3
 800263c:	481c      	ldr	r0, [pc, #112]	; (80026b0 <MX_TIM5_Init+0xe8>)
 800263e:	f00e fa6b 	bl	8010b18 <HAL_TIM_ConfigClockSource>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002648:	f000 fc60 	bl	8002f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800264c:	4818      	ldr	r0, [pc, #96]	; (80026b0 <MX_TIM5_Init+0xe8>)
 800264e:	f00d ffdd 	bl	801060c <HAL_TIM_PWM_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002658:	f000 fc58 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	4619      	mov	r1, r3
 800266a:	4811      	ldr	r0, [pc, #68]	; (80026b0 <MX_TIM5_Init+0xe8>)
 800266c:	f00e feda 	bl	8011424 <HAL_TIMEx_MasterConfigSynchronization>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002676:	f000 fc49 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800267a:	2360      	movs	r3, #96	; 0x60
 800267c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800268a:	463b      	mov	r3, r7
 800268c:	220c      	movs	r2, #12
 800268e:	4619      	mov	r1, r3
 8002690:	4807      	ldr	r0, [pc, #28]	; (80026b0 <MX_TIM5_Init+0xe8>)
 8002692:	f00e f931 	bl	80108f8 <HAL_TIM_PWM_ConfigChannel>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800269c:	f000 fc36 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80026a0:	4803      	ldr	r0, [pc, #12]	; (80026b0 <MX_TIM5_Init+0xe8>)
 80026a2:	f001 f955 	bl	8003950 <HAL_TIM_MspPostInit>

}
 80026a6:	bf00      	nop
 80026a8:	3738      	adds	r7, #56	; 0x38
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2001f0ac 	.word	0x2001f0ac
 80026b4:	40000c00 	.word	0x40000c00

080026b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <MX_TIM8_Init+0xa0>)
 80026d8:	4a20      	ldr	r2, [pc, #128]	; (800275c <MX_TIM8_Init+0xa4>)
 80026da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80026dc:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <MX_TIM8_Init+0xa0>)
 80026de:	2200      	movs	r2, #0
 80026e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <MX_TIM8_Init+0xa0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <MX_TIM8_Init+0xa0>)
 80026ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <MX_TIM8_Init+0xa0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026f6:	4b18      	ldr	r3, [pc, #96]	; (8002758 <MX_TIM8_Init+0xa0>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <MX_TIM8_Init+0xa0>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002702:	4815      	ldr	r0, [pc, #84]	; (8002758 <MX_TIM8_Init+0xa0>)
 8002704:	f00d feb2 	bl	801046c <HAL_TIM_Base_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800270e:	f000 fbfd 	bl	8002f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	4619      	mov	r1, r3
 800271e:	480e      	ldr	r0, [pc, #56]	; (8002758 <MX_TIM8_Init+0xa0>)
 8002720:	f00e f9fa 	bl	8010b18 <HAL_TIM_ConfigClockSource>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800272a:	f000 fbef 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4806      	ldr	r0, [pc, #24]	; (8002758 <MX_TIM8_Init+0xa0>)
 8002740:	f00e fe70 	bl	8011424 <HAL_TIMEx_MasterConfigSynchronization>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800274a:	f000 fbdf 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2001f0f8 	.word	0x2001f0f8
 800275c:	40010400 	.word	0x40010400

08002760 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
 8002774:	615a      	str	r2, [r3, #20]
 8002776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002778:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <MX_TIM12_Init+0x84>)
 800277a:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <MX_TIM12_Init+0x88>)
 800277c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <MX_TIM12_Init+0x84>)
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <MX_TIM12_Init+0x84>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800278a:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <MX_TIM12_Init+0x84>)
 800278c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002790:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <MX_TIM12_Init+0x84>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <MX_TIM12_Init+0x84>)
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800279e:	4811      	ldr	r0, [pc, #68]	; (80027e4 <MX_TIM12_Init+0x84>)
 80027a0:	f00d ff34 	bl	801060c <HAL_TIM_PWM_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80027aa:	f000 fbaf 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ae:	2360      	movs	r3, #96	; 0x60
 80027b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2200      	movs	r2, #0
 80027c2:	4619      	mov	r1, r3
 80027c4:	4807      	ldr	r0, [pc, #28]	; (80027e4 <MX_TIM12_Init+0x84>)
 80027c6:	f00e f897 	bl	80108f8 <HAL_TIM_PWM_ConfigChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80027d0:	f000 fb9c 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80027d4:	4803      	ldr	r0, [pc, #12]	; (80027e4 <MX_TIM12_Init+0x84>)
 80027d6:	f001 f8bb 	bl	8003950 <HAL_TIM_MspPostInit>

}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2001f144 	.word	0x2001f144
 80027e8:	40001800 	.word	0x40001800

080027ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_USART1_UART_Init+0x58>)
 80027f2:	4a15      	ldr	r2, [pc, #84]	; (8002848 <MX_USART1_UART_Init+0x5c>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <MX_USART1_UART_Init+0x58>)
 80027f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_USART1_UART_Init+0x58>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <MX_USART1_UART_Init+0x58>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_USART1_UART_Init+0x58>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_USART1_UART_Init+0x58>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_USART1_UART_Init+0x58>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_USART1_UART_Init+0x58>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <MX_USART1_UART_Init+0x58>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_USART1_UART_Init+0x58>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_USART1_UART_Init+0x58>)
 8002830:	f00e ff22 	bl	8011678 <HAL_UART_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800283a:	f000 fb67 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2001f190 	.word	0x2001f190
 8002848:	40011000 	.word	0x40011000

0800284c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <MX_USART6_UART_Init+0x5c>)
 8002854:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_USART6_UART_Init+0x58>)
 8002890:	f00e fef2 	bl	8011678 <HAL_UART_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800289a:	f000 fb37 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2001f214 	.word	0x2001f214
 80028a8:	40011400 	.word	0x40011400

080028ac <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028b2:	4b32      	ldr	r3, [pc, #200]	; (800297c <MX_DMA_Init+0xd0>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a31      	ldr	r2, [pc, #196]	; (800297c <MX_DMA_Init+0xd0>)
 80028b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b2f      	ldr	r3, [pc, #188]	; (800297c <MX_DMA_Init+0xd0>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <MX_DMA_Init+0xd4>)
 80028cc:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <MX_DMA_Init+0xd8>)
 80028ce:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <MX_DMA_Init+0xd4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <MX_DMA_Init+0xd4>)
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <MX_DMA_Init+0xd4>)
 80028de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80028e4:	4b26      	ldr	r3, [pc, #152]	; (8002980 <MX_DMA_Init+0xd4>)
 80028e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ea:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028ec:	4b24      	ldr	r3, [pc, #144]	; (8002980 <MX_DMA_Init+0xd4>)
 80028ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028f2:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <MX_DMA_Init+0xd4>)
 80028f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028fa:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80028fc:	4b20      	ldr	r3, [pc, #128]	; (8002980 <MX_DMA_Init+0xd4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002902:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <MX_DMA_Init+0xd4>)
 8002904:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002908:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <MX_DMA_Init+0xd4>)
 800290c:	2204      	movs	r2, #4
 800290e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <MX_DMA_Init+0xd4>)
 8002912:	2203      	movs	r2, #3
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <MX_DMA_Init+0xd4>)
 8002918:	2200      	movs	r2, #0
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800291c:	4b18      	ldr	r3, [pc, #96]	; (8002980 <MX_DMA_Init+0xd4>)
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002922:	4817      	ldr	r0, [pc, #92]	; (8002980 <MX_DMA_Init+0xd4>)
 8002924:	f005 f9da 	bl	8007cdc <HAL_DMA_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 800292e:	f000 faed 	bl	8002f0c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2105      	movs	r1, #5
 8002936:	2038      	movs	r0, #56	; 0x38
 8002938:	f004 fee8 	bl	800770c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800293c:	2038      	movs	r0, #56	; 0x38
 800293e:	f004 ff01 	bl	8007744 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2105      	movs	r1, #5
 8002946:	2039      	movs	r0, #57	; 0x39
 8002948:	f004 fee0 	bl	800770c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800294c:	2039      	movs	r0, #57	; 0x39
 800294e:	f004 fef9 	bl	8007744 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2105      	movs	r1, #5
 8002956:	203c      	movs	r0, #60	; 0x3c
 8002958:	f004 fed8 	bl	800770c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800295c:	203c      	movs	r0, #60	; 0x3c
 800295e:	f004 fef1 	bl	8007744 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2105      	movs	r1, #5
 8002966:	2046      	movs	r0, #70	; 0x46
 8002968:	f004 fed0 	bl	800770c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800296c:	2046      	movs	r0, #70	; 0x46
 800296e:	f004 fee9 	bl	8007744 <HAL_NVIC_EnableIRQ>

}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	2001f298 	.word	0x2001f298
 8002984:	40026410 	.word	0x40026410

08002988 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
 800299c:	615a      	str	r2, [r3, #20]
 800299e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80029a0:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029a2:	4a22      	ldr	r2, [pc, #136]	; (8002a2c <MX_FMC_Init+0xa4>)
 80029a4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80029ac:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029b4:	2204      	movs	r2, #4
 80029b6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029ba:	2210      	movs	r2, #16
 80029bc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029c0:	2240      	movs	r2, #64	; 0x40
 80029c2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ca:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029d8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <MX_FMC_Init+0xa0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80029e8:	2302      	movs	r3, #2
 80029ea:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80029ec:	2307      	movs	r3, #7
 80029ee:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80029f0:	2304      	movs	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80029f4:	2307      	movs	r3, #7
 80029f6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80029f8:	2303      	movs	r3, #3
 80029fa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	4807      	ldr	r0, [pc, #28]	; (8002a28 <MX_FMC_Init+0xa0>)
 8002a0a:	f00d fc54 	bl	80102b6 <HAL_SDRAM_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002a14:	f000 fa7a 	bl	8002f0c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002a18:	f240 6003 	movw	r0, #1539	; 0x603
 8002a1c:	f002 fddc 	bl	80055d8 <DISCO_SDRAM_Initialization_sequence>

  /* USER CODE END FMC_Init 2 */
}
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2001f2f8 	.word	0x2001f2f8
 8002a2c:	a0000140 	.word	0xa0000140

08002a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b090      	sub	sp, #64	; 0x40
 8002a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a46:	4baf      	ldr	r3, [pc, #700]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4aae      	ldr	r2, [pc, #696]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a4c:	f043 0310 	orr.w	r3, r3, #16
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4bac      	ldr	r3, [pc, #688]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a5e:	4ba9      	ldr	r3, [pc, #676]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4aa8      	ldr	r2, [pc, #672]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4ba6      	ldr	r3, [pc, #664]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a76:	4ba3      	ldr	r3, [pc, #652]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4aa2      	ldr	r2, [pc, #648]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4ba0      	ldr	r3, [pc, #640]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	623b      	str	r3, [r7, #32]
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a8e:	4b9d      	ldr	r3, [pc, #628]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a9c      	ldr	r2, [pc, #624]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a94:	f043 0308 	orr.w	r3, r3, #8
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b9a      	ldr	r3, [pc, #616]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa6:	4b97      	ldr	r3, [pc, #604]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a96      	ldr	r2, [pc, #600]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b94      	ldr	r3, [pc, #592]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	4b91      	ldr	r3, [pc, #580]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a90      	ldr	r2, [pc, #576]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b8e      	ldr	r3, [pc, #568]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ad6:	4b8b      	ldr	r3, [pc, #556]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a8a      	ldr	r2, [pc, #552]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002aee:	4b85      	ldr	r3, [pc, #532]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a84      	ldr	r2, [pc, #528]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b82      	ldr	r3, [pc, #520]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b06:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a7e      	ldr	r2, [pc, #504]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002b0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b7c      	ldr	r3, [pc, #496]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b1e:	4b79      	ldr	r3, [pc, #484]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a78      	ldr	r2, [pc, #480]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002b24:	f043 0320 	orr.w	r3, r3, #32
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b36:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a72      	ldr	r2, [pc, #456]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b70      	ldr	r3, [pc, #448]	; (8002d04 <MX_GPIO_Init+0x2d4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2120      	movs	r1, #32
 8002b52:	486d      	ldr	r0, [pc, #436]	; (8002d08 <MX_GPIO_Init+0x2d8>)
 8002b54:	f006 fb44 	bl	80091e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	210e      	movs	r1, #14
 8002b5c:	486b      	ldr	r0, [pc, #428]	; (8002d0c <MX_GPIO_Init+0x2dc>)
 8002b5e:	f006 fb3f 	bl	80091e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002b62:	2201      	movs	r2, #1
 8002b64:	2108      	movs	r1, #8
 8002b66:	486a      	ldr	r0, [pc, #424]	; (8002d10 <MX_GPIO_Init+0x2e0>)
 8002b68:	f006 fb3a 	bl	80091e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b72:	4866      	ldr	r0, [pc, #408]	; (8002d0c <MX_GPIO_Init+0x2dc>)
 8002b74:	f006 fb34 	bl	80091e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b7e:	4865      	ldr	r0, [pc, #404]	; (8002d14 <MX_GPIO_Init+0x2e4>)
 8002b80:	f006 fb2e 	bl	80091e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	21c8      	movs	r1, #200	; 0xc8
 8002b88:	4863      	ldr	r0, [pc, #396]	; (8002d18 <MX_GPIO_Init+0x2e8>)
 8002b8a:	f006 fb29 	bl	80091e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002b8e:	2308      	movs	r3, #8
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b92:	2300      	movs	r3, #0
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	485e      	ldr	r0, [pc, #376]	; (8002d1c <MX_GPIO_Init+0x2ec>)
 8002ba2:	f006 f84d 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002ba6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bb8:	230b      	movs	r3, #11
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4855      	ldr	r0, [pc, #340]	; (8002d18 <MX_GPIO_Init+0x2e8>)
 8002bc4:	f006 f83c 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002bc8:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002bda:	230a      	movs	r3, #10
 8002bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be2:	4619      	mov	r1, r3
 8002be4:	484e      	ldr	r0, [pc, #312]	; (8002d20 <MX_GPIO_Init+0x2f0>)
 8002be6:	f006 f82b 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4849      	ldr	r0, [pc, #292]	; (8002d24 <MX_GPIO_Init+0x2f4>)
 8002c00:	f006 f81e 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002c04:	2340      	movs	r3, #64	; 0x40
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c08:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <MX_GPIO_Init+0x2f8>)
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c14:	4619      	mov	r1, r3
 8002c16:	483c      	ldr	r0, [pc, #240]	; (8002d08 <MX_GPIO_Init+0x2d8>)
 8002c18:	f006 f812 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c30:	4619      	mov	r1, r3
 8002c32:	4835      	ldr	r0, [pc, #212]	; (8002d08 <MX_GPIO_Init+0x2d8>)
 8002c34:	f006 f804 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8002c38:	f241 030e 	movw	r3, #4110	; 0x100e
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	2300      	movs	r3, #0
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c4e:	4619      	mov	r1, r3
 8002c50:	482e      	ldr	r0, [pc, #184]	; (8002d0c <MX_GPIO_Init+0x2dc>)
 8002c52:	f005 fff5 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4830      	ldr	r0, [pc, #192]	; (8002d2c <MX_GPIO_Init+0x2fc>)
 8002c6c:	f005 ffe8 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002c70:	2308      	movs	r3, #8
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c74:	2301      	movs	r3, #1
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c84:	4619      	mov	r1, r3
 8002c86:	4822      	ldr	r0, [pc, #136]	; (8002d10 <MX_GPIO_Init+0x2e0>)
 8002c88:	f005 ffda 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002c8c:	2310      	movs	r3, #16
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c90:	2300      	movs	r3, #0
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	481a      	ldr	r0, [pc, #104]	; (8002d08 <MX_GPIO_Init+0x2d8>)
 8002ca0:	f005 ffce 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002ca4:	f248 0304 	movw	r3, #32772	; 0x8004
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4816      	ldr	r0, [pc, #88]	; (8002d14 <MX_GPIO_Init+0x2e4>)
 8002cba:	f005 ffc1 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	480f      	ldr	r0, [pc, #60]	; (8002d14 <MX_GPIO_Init+0x2e4>)
 8002cd8:	f005 ffb2 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002cdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4806      	ldr	r0, [pc, #24]	; (8002d0c <MX_GPIO_Init+0x2dc>)
 8002cf2:	f005 ffa5 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <MX_GPIO_Init+0x300>)
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e017      	b.n	8002d34 <MX_GPIO_Init+0x304>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40020c00 	.word	0x40020c00
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40022800 	.word	0x40022800
 8002d14:	40021c00 	.word	0x40021c00
 8002d18:	40021800 	.word	0x40021800
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40020400 	.word	0x40020400
 8002d24:	40022400 	.word	0x40022400
 8002d28:	10120000 	.word	0x10120000
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	10110000 	.word	0x10110000
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4844      	ldr	r0, [pc, #272]	; (8002e50 <MX_GPIO_Init+0x420>)
 8002d3e:	f005 ff7f 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002d42:	2310      	movs	r3, #16
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d52:	230a      	movs	r3, #10
 8002d54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	483d      	ldr	r0, [pc, #244]	; (8002e54 <MX_GPIO_Init+0x424>)
 8002d5e:	f005 ff6f 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002d62:	23c8      	movs	r3, #200	; 0xc8
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d66:	2301      	movs	r3, #1
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d76:	4619      	mov	r1, r3
 8002d78:	4837      	ldr	r0, [pc, #220]	; (8002e58 <MX_GPIO_Init+0x428>)
 8002d7a:	f005 ff61 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002d7e:	2305      	movs	r3, #5
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d8e:	230a      	movs	r3, #10
 8002d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d96:	4619      	mov	r1, r3
 8002d98:	4830      	ldr	r0, [pc, #192]	; (8002e5c <MX_GPIO_Init+0x42c>)
 8002d9a:	f005 ff51 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002d9e:	2332      	movs	r3, #50	; 0x32
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dae:	230b      	movs	r3, #11
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002db6:	4619      	mov	r1, r3
 8002db8:	4828      	ldr	r0, [pc, #160]	; (8002e5c <MX_GPIO_Init+0x42c>)
 8002dba:	f005 ff41 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4821      	ldr	r0, [pc, #132]	; (8002e58 <MX_GPIO_Init+0x428>)
 8002dd2:	f005 ff35 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002dd6:	2386      	movs	r3, #134	; 0x86
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de2:	2303      	movs	r3, #3
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002de6:	230b      	movs	r3, #11
 8002de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dee:	4619      	mov	r1, r3
 8002df0:	481b      	ldr	r0, [pc, #108]	; (8002e60 <MX_GPIO_Init+0x430>)
 8002df2:	f005 ff25 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002df6:	2328      	movs	r3, #40	; 0x28
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e06:	230a      	movs	r3, #10
 8002e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4813      	ldr	r0, [pc, #76]	; (8002e60 <MX_GPIO_Init+0x430>)
 8002e12:	f005 ff15 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002e16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e28:	2305      	movs	r3, #5
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e30:	4619      	mov	r1, r3
 8002e32:	480c      	ldr	r0, [pc, #48]	; (8002e64 <MX_GPIO_Init+0x434>)
 8002e34:	f005 ff04 	bl	8008c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2105      	movs	r1, #5
 8002e3c:	2028      	movs	r0, #40	; 0x28
 8002e3e:	f004 fc65 	bl	800770c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e42:	2028      	movs	r0, #40	; 0x28
 8002e44:	f004 fc7e 	bl	8007744 <HAL_NVIC_EnableIRQ>

}
 8002e48:	bf00      	nop
 8002e4a:	3740      	adds	r7, #64	; 0x40
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40021c00 	.word	0x40021c00
 8002e58:	40021800 	.word	0x40021800
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400

08002e68 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f016 fcf3 	bl	801985c <iprintf>
	printf("\n");
 8002e76:	200a      	movs	r0, #10
 8002e78:	f016 fd08 	bl	801988c <putchar>
	Error_Handler();
 8002e7c:	f000 f846 	bl	8002f0c <Error_Handler>
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002e90:	f016 f80a 	bl	8018ea8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 8002e94:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <StartDefaultTask+0x1c>)
 8002e96:	f016 fd7d 	bl	8019994 <puts>
	audioLoop();
 8002e9a:	f7fe f9b1 	bl	8001200 <audioLoop>
	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
	for(;;)
 8002ea2:	e7fe      	b.n	8002ea2 <StartDefaultTask+0x1a>
 8002ea4:	0801ab78 	.word	0x0801ab78

08002ea8 <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN startUITask */

	osDelay(200);
 8002eb0:	20c8      	movs	r0, #200	; 0xc8
 8002eb2:	f013 fafd 	bl	80164b0 <osDelay>
	printf("StartLedTask\n");
 8002eb6:	480b      	ldr	r0, [pc, #44]	; (8002ee4 <startUITask+0x3c>)
 8002eb8:	f016 fd6c 	bl	8019994 <puts>
	uiDisplayBasic();
 8002ebc:	f001 f9ce 	bl	800425c <uiDisplayBasic>
	/* Infinite loop */
	for(;;)
	{
		osSignalWait (0x0001, osWaitForever);
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f013 fb45 	bl	8016558 <osSignalWait>
		uiDisplaySpectrum();
 8002ece:	f001 fcab 	bl	8004828 <uiDisplaySpectrum>
		//uiDisplayMaster();
		uiSliderDelay();
 8002ed2:	f001 facd 	bl	8004470 <uiSliderDelay>
		uiSliderFeed();
 8002ed6:	f001 fb3b 	bl	8004550 <uiSliderFeed>
		uiSliderVolume();
 8002eda:	f001 fbbd 	bl	8004658 <uiSliderVolume>
		uiSliderFlanger();
 8002ede:	f001 fc31 	bl	8004744 <uiSliderFlanger>
	{
 8002ee2:	e7ed      	b.n	8002ec0 <startUITask+0x18>
 8002ee4:	0801ab8c 	.word	0x0801ab8c

08002ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002efa:	f004 f85f 	bl	8006fbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40001000 	.word	0x40001000

08002f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002f10:	f001 fce4 	bl	80048dc <LED_Toggle>
		HAL_Delay(100);
 8002f14:	2064      	movs	r0, #100	; 0x64
 8002f16:	f004 f871 	bl	8006ffc <HAL_Delay>
		LED_Toggle();
 8002f1a:	e7f9      	b.n	8002f10 <Error_Handler+0x4>

08002f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_MspInit+0x4c>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_MspInit+0x4c>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_MspInit+0x4c>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_MspInit+0x4c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_MspInit+0x4c>)
 8002f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f44:	6453      	str	r3, [r2, #68]	; 0x44
 8002f46:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_MspInit+0x4c>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	210f      	movs	r1, #15
 8002f56:	f06f 0001 	mvn.w	r0, #1
 8002f5a:	f004 fbd7 	bl	800770c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800

08002f6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a21      	ldr	r2, [pc, #132]	; (8003010 <HAL_ADC_MspInit+0xa4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d13c      	bne.n	8003008 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f8e:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_ADC_MspInit+0xa8>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	4a20      	ldr	r2, [pc, #128]	; (8003014 <HAL_ADC_MspInit+0xa8>)
 8002f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f98:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_ADC_MspInit+0xa8>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <HAL_ADC_MspInit+0xa8>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a1a      	ldr	r2, [pc, #104]	; (8003014 <HAL_ADC_MspInit+0xa8>)
 8002fac:	f043 0320 	orr.w	r3, r3, #32
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_ADC_MspInit+0xa8>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_ADC_MspInit+0xa8>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_ADC_MspInit+0xa8>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_ADC_MspInit+0xa8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002fd6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002fda:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	480b      	ldr	r0, [pc, #44]	; (8003018 <HAL_ADC_MspInit+0xac>)
 8002fec:	f005 fe28 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	4619      	mov	r1, r3
 8003002:	4806      	ldr	r0, [pc, #24]	; (800301c <HAL_ADC_MspInit+0xb0>)
 8003004:	f005 fe1c 	bl	8008c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003008:	bf00      	nop
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40012200 	.word	0x40012200
 8003014:	40023800 	.word	0x40023800
 8003018:	40021400 	.word	0x40021400
 800301c:	40020000 	.word	0x40020000

08003020 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_CRC_MspInit+0x38>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10b      	bne.n	800304a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_CRC_MspInit+0x3c>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_CRC_MspInit+0x3c>)
 8003038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <HAL_CRC_MspInit+0x3c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40023000 	.word	0x40023000
 800305c:	40023800 	.word	0x40023800

08003060 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08e      	sub	sp, #56	; 0x38
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a6c      	ldr	r2, [pc, #432]	; (8003230 <HAL_DCMI_MspInit+0x1d0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	f040 80d2 	bne.w	8003228 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003084:	4b6b      	ldr	r3, [pc, #428]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	4a6a      	ldr	r2, [pc, #424]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6353      	str	r3, [r2, #52]	; 0x34
 8003090:	4b68      	ldr	r3, [pc, #416]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	623b      	str	r3, [r7, #32]
 800309a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800309c:	4b65      	ldr	r3, [pc, #404]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	4a64      	ldr	r2, [pc, #400]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030a2:	f043 0310 	orr.w	r3, r3, #16
 80030a6:	6313      	str	r3, [r2, #48]	; 0x30
 80030a8:	4b62      	ldr	r3, [pc, #392]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b4:	4b5f      	ldr	r3, [pc, #380]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	4a5e      	ldr	r2, [pc, #376]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030ba:	f043 0308 	orr.w	r3, r3, #8
 80030be:	6313      	str	r3, [r2, #48]	; 0x30
 80030c0:	4b5c      	ldr	r3, [pc, #368]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	4a58      	ldr	r2, [pc, #352]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d6:	6313      	str	r3, [r2, #48]	; 0x30
 80030d8:	4b56      	ldr	r3, [pc, #344]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ee:	6313      	str	r3, [r2, #48]	; 0x30
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fc:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	4a4c      	ldr	r2, [pc, #304]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6313      	str	r3, [r2, #48]	; 0x30
 8003108:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_DCMI_MspInit+0x1d4>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003114:	2360      	movs	r3, #96	; 0x60
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003120:	2300      	movs	r3, #0
 8003122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003124:	230d      	movs	r3, #13
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312c:	4619      	mov	r1, r3
 800312e:	4842      	ldr	r0, [pc, #264]	; (8003238 <HAL_DCMI_MspInit+0x1d8>)
 8003130:	f005 fd86 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003134:	2308      	movs	r3, #8
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003144:	230d      	movs	r3, #13
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314c:	4619      	mov	r1, r3
 800314e:	483b      	ldr	r0, [pc, #236]	; (800323c <HAL_DCMI_MspInit+0x1dc>)
 8003150:	f005 fd76 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003166:	230d      	movs	r3, #13
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800316e:	4619      	mov	r1, r3
 8003170:	4833      	ldr	r0, [pc, #204]	; (8003240 <HAL_DCMI_MspInit+0x1e0>)
 8003172:	f005 fd65 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003176:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	2300      	movs	r3, #0
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003188:	230d      	movs	r3, #13
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800318c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003190:	4619      	mov	r1, r3
 8003192:	482c      	ldr	r0, [pc, #176]	; (8003244 <HAL_DCMI_MspInit+0x1e4>)
 8003194:	f005 fd54 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003198:	2350      	movs	r3, #80	; 0x50
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80031a8:	230d      	movs	r3, #13
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b0:	4619      	mov	r1, r3
 80031b2:	4825      	ldr	r0, [pc, #148]	; (8003248 <HAL_DCMI_MspInit+0x1e8>)
 80031b4:	f005 fd44 	bl	8008c40 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80031b8:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031ba:	4a25      	ldr	r2, [pc, #148]	; (8003250 <HAL_DCMI_MspInit+0x1f0>)
 80031bc:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80031be:	4b23      	ldr	r3, [pc, #140]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031e0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031e8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80031f0:	4b16      	ldr	r3, [pc, #88]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80031fc:	4813      	ldr	r0, [pc, #76]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 80031fe:	f004 fd6d 	bl	8007cdc <HAL_DMA_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8003208:	f7ff fe80 	bl	8002f0c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 8003210:	649a      	str	r2, [r3, #72]	; 0x48
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_DCMI_MspInit+0x1ec>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2105      	movs	r1, #5
 800321c:	204e      	movs	r0, #78	; 0x4e
 800321e:	f004 fa75 	bl	800770c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003222:	204e      	movs	r0, #78	; 0x4e
 8003224:	f004 fa8e 	bl	8007744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003228:	bf00      	nop
 800322a:	3738      	adds	r7, #56	; 0x38
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	50050000 	.word	0x50050000
 8003234:	40023800 	.word	0x40023800
 8003238:	40021000 	.word	0x40021000
 800323c:	40020c00 	.word	0x40020c00
 8003240:	40021800 	.word	0x40021800
 8003244:	40021c00 	.word	0x40021c00
 8003248:	40020000 	.word	0x40020000
 800324c:	2001eae4 	.word	0x2001eae4
 8003250:	40026428 	.word	0x40026428

08003254 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <HAL_DMA2D_MspInit+0x44>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d113      	bne.n	800328e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_DMA2D_MspInit+0x48>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a0c      	ldr	r2, [pc, #48]	; (800329c <HAL_DMA2D_MspInit+0x48>)
 800326c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <HAL_DMA2D_MspInit+0x48>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2105      	movs	r1, #5
 8003282:	205a      	movs	r0, #90	; 0x5a
 8003284:	f004 fa42 	bl	800770c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003288:	205a      	movs	r0, #90	; 0x5a
 800328a:	f004 fa5b 	bl	8007744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	4002b000 	.word	0x4002b000
 800329c:	40023800 	.word	0x40023800

080032a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08c      	sub	sp, #48	; 0x30
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 031c 	add.w	r3, r7, #28
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a2f      	ldr	r2, [pc, #188]	; (800337c <HAL_I2C_MspInit+0xdc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d129      	bne.n	8003316 <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c2:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4a2e      	ldr	r2, [pc, #184]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	6313      	str	r3, [r2, #48]	; 0x30
 80032ce:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80032da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e0:	2312      	movs	r3, #18
 80032e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e4:	2301      	movs	r3, #1
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032ec:	2304      	movs	r3, #4
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	4619      	mov	r1, r3
 80032f6:	4823      	ldr	r0, [pc, #140]	; (8003384 <HAL_I2C_MspInit+0xe4>)
 80032f8:	f005 fca2 	bl	8008c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 8003302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003306:	6413      	str	r3, [r2, #64]	; 0x40
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003314:	e02d      	b.n	8003372 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_I2C_MspInit+0xe8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d128      	bne.n	8003372 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 8003326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332a:	6313      	str	r3, [r2, #48]	; 0x30
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003338:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800333c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800333e:	2312      	movs	r3, #18
 8003340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003342:	2301      	movs	r3, #1
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800334a:	2304      	movs	r3, #4
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4619      	mov	r1, r3
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <HAL_I2C_MspInit+0xec>)
 8003356:	f005 fc73 	bl	8008c40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 8003360:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_I2C_MspInit+0xe0>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
}
 8003372:	bf00      	nop
 8003374:	3730      	adds	r7, #48	; 0x30
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40005400 	.word	0x40005400
 8003380:	40023800 	.word	0x40023800
 8003384:	40020400 	.word	0x40020400
 8003388:	40005c00 	.word	0x40005c00
 800338c:	40021c00 	.word	0x40021c00

08003390 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <HAL_I2C_MspDeInit+0x64>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d110      	bne.n	80033c4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_I2C_MspDeInit+0x68>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <HAL_I2C_MspDeInit+0x68>)
 80033a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033ac:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80033ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033b2:	4812      	ldr	r0, [pc, #72]	; (80033fc <HAL_I2C_MspDeInit+0x6c>)
 80033b4:	f005 fdf0 	bl	8008f98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80033b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033bc:	480f      	ldr	r0, [pc, #60]	; (80033fc <HAL_I2C_MspDeInit+0x6c>)
 80033be:	f005 fdeb 	bl	8008f98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80033c2:	e013      	b.n	80033ec <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <HAL_I2C_MspDeInit+0x70>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_I2C_MspDeInit+0x68>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_I2C_MspDeInit+0x68>)
 80033d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	4809      	ldr	r0, [pc, #36]	; (8003404 <HAL_I2C_MspDeInit+0x74>)
 80033de:	f005 fddb 	bl	8008f98 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80033e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033e6:	4807      	ldr	r0, [pc, #28]	; (8003404 <HAL_I2C_MspDeInit+0x74>)
 80033e8:	f005 fdd6 	bl	8008f98 <HAL_GPIO_DeInit>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40005400 	.word	0x40005400
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40020400 	.word	0x40020400
 8003400:	40005c00 	.word	0x40005c00
 8003404:	40021c00 	.word	0x40021c00

08003408 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08e      	sub	sp, #56	; 0x38
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a51      	ldr	r2, [pc, #324]	; (800356c <HAL_LTDC_MspInit+0x164>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f040 809b 	bne.w	8003562 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	4a4f      	ldr	r2, [pc, #316]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 8003432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003436:	6453      	str	r3, [r2, #68]	; 0x44
 8003438:	4b4d      	ldr	r3, [pc, #308]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003444:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	4a49      	ldr	r2, [pc, #292]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 800344a:	f043 0310 	orr.w	r3, r3, #16
 800344e:	6313      	str	r3, [r2, #48]	; 0x30
 8003450:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800345c:	4b44      	ldr	r3, [pc, #272]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	4a43      	ldr	r2, [pc, #268]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 8003462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003466:	6313      	str	r3, [r2, #48]	; 0x30
 8003468:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003474:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 800347a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800347e:	6313      	str	r3, [r2, #48]	; 0x30
 8003480:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800348c:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	4a37      	ldr	r2, [pc, #220]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 8003492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003496:	6313      	str	r3, [r2, #48]	; 0x30
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034a4:	4b32      	ldr	r3, [pc, #200]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	4a31      	ldr	r2, [pc, #196]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 80034aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ae:	6313      	str	r3, [r2, #48]	; 0x30
 80034b0:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_LTDC_MspInit+0x168>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80034bc:	2310      	movs	r3, #16
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034cc:	230e      	movs	r3, #14
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80034d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d4:	4619      	mov	r1, r3
 80034d6:	4827      	ldr	r0, [pc, #156]	; (8003574 <HAL_LTDC_MspInit+0x16c>)
 80034d8:	f005 fbb2 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80034dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034ee:	230e      	movs	r3, #14
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80034f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f6:	4619      	mov	r1, r3
 80034f8:	481f      	ldr	r0, [pc, #124]	; (8003578 <HAL_LTDC_MspInit+0x170>)
 80034fa:	f005 fba1 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80034fe:	23f7      	movs	r3, #247	; 0xf7
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2300      	movs	r3, #0
 800350c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800350e:	230e      	movs	r3, #14
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003516:	4619      	mov	r1, r3
 8003518:	4818      	ldr	r0, [pc, #96]	; (800357c <HAL_LTDC_MspInit+0x174>)
 800351a:	f005 fb91 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800351e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352c:	2300      	movs	r3, #0
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003530:	2309      	movs	r3, #9
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003538:	4619      	mov	r1, r3
 800353a:	4811      	ldr	r0, [pc, #68]	; (8003580 <HAL_LTDC_MspInit+0x178>)
 800353c:	f005 fb80 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003540:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354e:	2300      	movs	r3, #0
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003552:	230e      	movs	r3, #14
 8003554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355a:	4619      	mov	r1, r3
 800355c:	4809      	ldr	r0, [pc, #36]	; (8003584 <HAL_LTDC_MspInit+0x17c>)
 800355e:	f005 fb6f 	bl	8008c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003562:	bf00      	nop
 8003564:	3738      	adds	r7, #56	; 0x38
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40016800 	.word	0x40016800
 8003570:	40023800 	.word	0x40023800
 8003574:	40021000 	.word	0x40021000
 8003578:	40022400 	.word	0x40022400
 800357c:	40022800 	.word	0x40022800
 8003580:	40021800 	.word	0x40021800
 8003584:	40022000 	.word	0x40022000

08003588 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	; 0x30
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 031c 	add.w	r3, r7, #28
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3f      	ldr	r2, [pc, #252]	; (80036a4 <HAL_QSPI_MspInit+0x11c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d178      	bne.n	800369c <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80035aa:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	4a3e      	ldr	r2, [pc, #248]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	6393      	str	r3, [r2, #56]	; 0x38
 80035b6:	4b3c      	ldr	r3, [pc, #240]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a38      	ldr	r2, [pc, #224]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035c8:	f043 0310 	orr.w	r3, r3, #16
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035da:	4b33      	ldr	r3, [pc, #204]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a32      	ldr	r2, [pc, #200]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035e0:	f043 0302 	orr.w	r3, r3, #2
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 80035f8:	f043 0308 	orr.w	r3, r3, #8
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_QSPI_MspInit+0x120>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800360a:	2304      	movs	r3, #4
 800360c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800361a:	2309      	movs	r3, #9
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800361e:	f107 031c 	add.w	r3, r7, #28
 8003622:	4619      	mov	r1, r3
 8003624:	4821      	ldr	r0, [pc, #132]	; (80036ac <HAL_QSPI_MspInit+0x124>)
 8003626:	f005 fb0b 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800362a:	2340      	movs	r3, #64	; 0x40
 800362c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362e:	2302      	movs	r3, #2
 8003630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003636:	2303      	movs	r3, #3
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800363a:	230a      	movs	r3, #10
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800363e:	f107 031c 	add.w	r3, r7, #28
 8003642:	4619      	mov	r1, r3
 8003644:	481a      	ldr	r0, [pc, #104]	; (80036b0 <HAL_QSPI_MspInit+0x128>)
 8003646:	f005 fafb 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800364a:	2304      	movs	r3, #4
 800364c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003656:	2303      	movs	r3, #3
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800365a:	2309      	movs	r3, #9
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365e:	f107 031c 	add.w	r3, r7, #28
 8003662:	4619      	mov	r1, r3
 8003664:	4812      	ldr	r0, [pc, #72]	; (80036b0 <HAL_QSPI_MspInit+0x128>)
 8003666:	f005 faeb 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800366a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800366e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800367c:	2309      	movs	r3, #9
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003680:	f107 031c 	add.w	r3, r7, #28
 8003684:	4619      	mov	r1, r3
 8003686:	480b      	ldr	r0, [pc, #44]	; (80036b4 <HAL_QSPI_MspInit+0x12c>)
 8003688:	f005 fada 	bl	8008c40 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2105      	movs	r1, #5
 8003690:	205c      	movs	r0, #92	; 0x5c
 8003692:	f004 f83b 	bl	800770c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003696:	205c      	movs	r0, #92	; 0x5c
 8003698:	f004 f854 	bl	8007744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800369c:	bf00      	nop
 800369e:	3730      	adds	r7, #48	; 0x30
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	a0001000 	.word	0xa0001000
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40020400 	.word	0x40020400
 80036b4:	40020c00 	.word	0x40020c00

080036b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <HAL_RTC_MspInit+0x2c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d105      	bne.n	80036d6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_RTC_MspInit+0x30>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <HAL_RTC_MspInit+0x30>)
 80036d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40002800 	.word	0x40002800
 80036e8:	40023800 	.word	0x40023800

080036ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <HAL_SD_MspInit+0xb4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d144      	bne.n	8003798 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800370e:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_SD_MspInit+0xb8>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <HAL_SD_MspInit+0xb8>)
 8003714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_SD_MspInit+0xb8>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003726:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <HAL_SD_MspInit+0xb8>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a1e      	ldr	r2, [pc, #120]	; (80037a4 <HAL_SD_MspInit+0xb8>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <HAL_SD_MspInit+0xb8>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800373e:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_SD_MspInit+0xb8>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_SD_MspInit+0xb8>)
 8003744:	f043 0308 	orr.w	r3, r3, #8
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <HAL_SD_MspInit+0xb8>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003756:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800375a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003764:	2303      	movs	r3, #3
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003768:	230c      	movs	r3, #12
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4619      	mov	r1, r3
 8003772:	480d      	ldr	r0, [pc, #52]	; (80037a8 <HAL_SD_MspInit+0xbc>)
 8003774:	f005 fa64 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003778:	2304      	movs	r3, #4
 800377a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377c:	2302      	movs	r3, #2
 800377e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003784:	2303      	movs	r3, #3
 8003786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003788:	230c      	movs	r3, #12
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4619      	mov	r1, r3
 8003792:	4806      	ldr	r0, [pc, #24]	; (80037ac <HAL_SD_MspInit+0xc0>)
 8003794:	f005 fa54 	bl	8008c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003798:	bf00      	nop
 800379a:	3728      	adds	r7, #40	; 0x28
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40020800 	.word	0x40020800
 80037ac:	40020c00 	.word	0x40020c00

080037b0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80037d0:	d127      	bne.n	8003822 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <HAL_SPDIFRX_MspInit+0x7c>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	4a15      	ldr	r2, [pc, #84]	; (800382c <HAL_SPDIFRX_MspInit+0x7c>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6413      	str	r3, [r2, #64]	; 0x40
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <HAL_SPDIFRX_MspInit+0x7c>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_SPDIFRX_MspInit+0x7c>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a0f      	ldr	r2, [pc, #60]	; (800382c <HAL_SPDIFRX_MspInit+0x7c>)
 80037f0:	f043 0308 	orr.w	r3, r3, #8
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_SPDIFRX_MspInit+0x7c>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380e:	2300      	movs	r3, #0
 8003810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003812:	2308      	movs	r3, #8
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	4619      	mov	r1, r3
 800381c:	4804      	ldr	r0, [pc, #16]	; (8003830 <HAL_SPDIFRX_MspInit+0x80>)
 800381e:	f005 fa0f 	bl	8008c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003822:	bf00      	nop
 8003824:	3728      	adds	r7, #40	; 0x28
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	40020c00 	.word	0x40020c00

08003834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2e      	ldr	r2, [pc, #184]	; (80038fc <HAL_TIM_Base_MspInit+0xc8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10c      	bne.n	8003860 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003846:	4b2e      	ldr	r3, [pc, #184]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a2d      	ldr	r2, [pc, #180]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800385e:	e046      	b.n	80038ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003868:	d10c      	bne.n	8003884 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800386a:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a24      	ldr	r2, [pc, #144]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	69bb      	ldr	r3, [r7, #24]
}
 8003882:	e034      	b.n	80038ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_TIM_Base_MspInit+0xd0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10c      	bne.n	80038a8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	6413      	str	r3, [r2, #64]	; 0x40
 800389a:	4b19      	ldr	r3, [pc, #100]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]
}
 80038a6:	e022      	b.n	80038ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a16      	ldr	r2, [pc, #88]	; (8003908 <HAL_TIM_Base_MspInit+0xd4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d10c      	bne.n	80038cc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	693b      	ldr	r3, [r7, #16]
}
 80038ca:	e010      	b.n	80038ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0e      	ldr	r2, [pc, #56]	; (800390c <HAL_TIM_Base_MspInit+0xd8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10b      	bne.n	80038ee <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	4a09      	ldr	r2, [pc, #36]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	6453      	str	r3, [r2, #68]	; 0x44
 80038e2:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_TIM_Base_MspInit+0xcc>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
}
 80038ee:	bf00      	nop
 80038f0:	3724      	adds	r7, #36	; 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40010000 	.word	0x40010000
 8003900:	40023800 	.word	0x40023800
 8003904:	40000400 	.word	0x40000400
 8003908:	40000c00 	.word	0x40000c00
 800390c:	40010400 	.word	0x40010400

08003910 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <HAL_TIM_PWM_MspInit+0x38>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10b      	bne.n	800393a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_TIM_PWM_MspInit+0x3c>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <HAL_TIM_PWM_MspInit+0x3c>)
 8003928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_TIM_PWM_MspInit+0x3c>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40001800 	.word	0x40001800
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	; 0x30
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 031c 	add.w	r3, r7, #28
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a56      	ldr	r2, [pc, #344]	; (8003ac8 <HAL_TIM_MspPostInit+0x178>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d11d      	bne.n	80039ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003972:	4b56      	ldr	r3, [pc, #344]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a55      	ldr	r2, [pc, #340]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800398a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800398e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003998:	2300      	movs	r3, #0
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800399c:	2301      	movs	r3, #1
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f107 031c 	add.w	r3, r7, #28
 80039a4:	4619      	mov	r1, r3
 80039a6:	484a      	ldr	r0, [pc, #296]	; (8003ad0 <HAL_TIM_MspPostInit+0x180>)
 80039a8:	f005 f94a 	bl	8008c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80039ac:	e087      	b.n	8003abe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d11d      	bne.n	80039f4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b8:	4b44      	ldr	r3, [pc, #272]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	4a43      	ldr	r2, [pc, #268]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6313      	str	r3, [r2, #48]	; 0x30
 80039c4:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80039d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	2300      	movs	r3, #0
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039e2:	2301      	movs	r3, #1
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	4838      	ldr	r0, [pc, #224]	; (8003ad0 <HAL_TIM_MspPostInit+0x180>)
 80039ee:	f005 f927 	bl	8008c40 <HAL_GPIO_Init>
}
 80039f2:	e064      	b.n	8003abe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a36      	ldr	r2, [pc, #216]	; (8003ad4 <HAL_TIM_MspPostInit+0x184>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d11c      	bne.n	8003a38 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fe:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	4a32      	ldr	r2, [pc, #200]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0a:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003a16:	2310      	movs	r3, #16
 8003a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a22:	2300      	movs	r3, #0
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a26:	2302      	movs	r3, #2
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003a2a:	f107 031c 	add.w	r3, r7, #28
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4829      	ldr	r0, [pc, #164]	; (8003ad8 <HAL_TIM_MspPostInit+0x188>)
 8003a32:	f005 f905 	bl	8008c40 <HAL_GPIO_Init>
}
 8003a36:	e042      	b.n	8003abe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a27      	ldr	r2, [pc, #156]	; (8003adc <HAL_TIM_MspPostInit+0x18c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d11c      	bne.n	8003a7c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	4a21      	ldr	r2, [pc, #132]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4e:	4b1f      	ldr	r3, [pc, #124]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a66:	2300      	movs	r3, #0
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003a6e:	f107 031c 	add.w	r3, r7, #28
 8003a72:	4619      	mov	r1, r3
 8003a74:	481a      	ldr	r0, [pc, #104]	; (8003ae0 <HAL_TIM_MspPostInit+0x190>)
 8003a76:	f005 f8e3 	bl	8008c40 <HAL_GPIO_Init>
}
 8003a7a:	e020      	b.n	8003abe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <HAL_TIM_MspPostInit+0x194>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a86:	4b11      	ldr	r3, [pc, #68]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <HAL_TIM_MspPostInit+0x17c>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003a9e:	2340      	movs	r3, #64	; 0x40
 8003aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003aae:	2309      	movs	r3, #9
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003ab2:	f107 031c 	add.w	r3, r7, #28
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	480b      	ldr	r0, [pc, #44]	; (8003ae8 <HAL_TIM_MspPostInit+0x198>)
 8003aba:	f005 f8c1 	bl	8008c40 <HAL_GPIO_Init>
}
 8003abe:	bf00      	nop
 8003ac0:	3730      	adds	r7, #48	; 0x30
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40020000 	.word	0x40020000
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40022000 	.word	0x40022000
 8003ae4:	40001800 	.word	0x40001800
 8003ae8:	40021c00 	.word	0x40021c00

08003aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08c      	sub	sp, #48	; 0x30
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	f107 031c 	add.w	r3, r7, #28
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <HAL_UART_MspInit+0x110>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d145      	bne.n	8003b9a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b0e:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003b14:	f043 0310 	orr.w	r3, r3, #16
 8003b18:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1a:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	4a35      	ldr	r2, [pc, #212]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003b2c:	f043 0302 	orr.w	r3, r3, #2
 8003b30:	6313      	str	r3, [r2, #48]	; 0x30
 8003b32:	4b33      	ldr	r3, [pc, #204]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3e:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	4a2f      	ldr	r2, [pc, #188]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4a:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b62:	2300      	movs	r3, #0
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b66:	2307      	movs	r3, #7
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4824      	ldr	r0, [pc, #144]	; (8003c04 <HAL_UART_MspInit+0x118>)
 8003b72:	f005 f865 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b88:	2307      	movs	r3, #7
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	4619      	mov	r1, r3
 8003b92:	481d      	ldr	r0, [pc, #116]	; (8003c08 <HAL_UART_MspInit+0x11c>)
 8003b94:	f005 f854 	bl	8008c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003b98:	e02c      	b.n	8003bf4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HAL_UART_MspInit+0x120>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d127      	bne.n	8003bf4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ba4:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003baa:	f043 0320 	orr.w	r3, r3, #32
 8003bae:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_UART_MspInit+0x114>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003bd4:	23c0      	movs	r3, #192	; 0xc0
 8003bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003be4:	2308      	movs	r3, #8
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be8:	f107 031c 	add.w	r3, r7, #28
 8003bec:	4619      	mov	r1, r3
 8003bee:	4808      	ldr	r0, [pc, #32]	; (8003c10 <HAL_UART_MspInit+0x124>)
 8003bf0:	f005 f826 	bl	8008c40 <HAL_GPIO_Init>
}
 8003bf4:	bf00      	nop
 8003bf6:	3730      	adds	r7, #48	; 0x30
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40011000 	.word	0x40011000
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40020400 	.word	0x40020400
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40011400 	.word	0x40011400
 8003c10:	40020800 	.word	0x40020800

08003c14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003c1a:	1d3b      	adds	r3, r7, #4
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003c28:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_FMC_MspInit+0x10c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d173      	bne.n	8003d18 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8003c30:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_FMC_MspInit+0x10c>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c36:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_FMC_MspInit+0x110>)
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	4a3a      	ldr	r2, [pc, #232]	; (8003d24 <HAL_FMC_MspInit+0x110>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6393      	str	r3, [r2, #56]	; 0x38
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_FMC_MspInit+0x110>)
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003c4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003c52:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c54:	2302      	movs	r3, #2
 8003c56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c60:	230c      	movs	r3, #12
 8003c62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c64:	1d3b      	adds	r3, r7, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	482f      	ldr	r0, [pc, #188]	; (8003d28 <HAL_FMC_MspInit+0x114>)
 8003c6a:	f004 ffe9 	bl	8008c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003c6e:	f248 1333 	movw	r3, #33075	; 0x8133
 8003c72:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c80:	230c      	movs	r3, #12
 8003c82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	4828      	ldr	r0, [pc, #160]	; (8003d2c <HAL_FMC_MspInit+0x118>)
 8003c8a:	f004 ffd9 	bl	8008c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003c8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003c92:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ca0:	230c      	movs	r3, #12
 8003ca2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4821      	ldr	r0, [pc, #132]	; (8003d30 <HAL_FMC_MspInit+0x11c>)
 8003caa:	f004 ffc9 	bl	8008c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003cae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003cb2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003cc0:	230c      	movs	r3, #12
 8003cc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	481a      	ldr	r0, [pc, #104]	; (8003d34 <HAL_FMC_MspInit+0x120>)
 8003cca:	f004 ffb9 	bl	8008c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003cce:	2328      	movs	r3, #40	; 0x28
 8003cd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003cde:	230c      	movs	r3, #12
 8003ce0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4814      	ldr	r0, [pc, #80]	; (8003d38 <HAL_FMC_MspInit+0x124>)
 8003ce8:	f004 ffaa 	bl	8008c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003cec:	2308      	movs	r3, #8
 8003cee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003cfc:	230c      	movs	r3, #12
 8003cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	480d      	ldr	r0, [pc, #52]	; (8003d3c <HAL_FMC_MspInit+0x128>)
 8003d06:	f004 ff9b 	bl	8008c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <HAL_FMC_MspInit+0x12c>)
 8003d0c:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <HAL_FMC_MspInit+0x130>)
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <HAL_FMC_MspInit+0x130>)
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <HAL_FMC_MspInit+0x12c>)
 8003d14:	639a      	str	r2, [r3, #56]	; 0x38
 8003d16:	e000      	b.n	8003d1a <HAL_FMC_MspInit+0x106>
    return;
 8003d18:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	2001f334 	.word	0x2001f334
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40021800 	.word	0x40021800
 8003d30:	40020c00 	.word	0x40020c00
 8003d34:	40021400 	.word	0x40021400
 8003d38:	40021c00 	.word	0x40021c00
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	2001f2f8 	.word	0x2001f2f8
 8003d44:	2001f298 	.word	0x2001f298

08003d48 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003d50:	f7ff ff60 	bl	8003c14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a6f      	ldr	r2, [pc, #444]	; (8003f28 <HAL_SAI_MspInit+0x1cc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d175      	bne.n	8003e5a <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003d6e:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_SAI_MspInit+0x1d0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003d76:	4b6e      	ldr	r3, [pc, #440]	; (8003f30 <HAL_SAI_MspInit+0x1d4>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	4a6d      	ldr	r2, [pc, #436]	; (8003f30 <HAL_SAI_MspInit+0x1d4>)
 8003d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d80:	6453      	str	r3, [r2, #68]	; 0x44
 8003d82:	4b6b      	ldr	r3, [pc, #428]	; (8003f30 <HAL_SAI_MspInit+0x1d4>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003d8e:	4b67      	ldr	r3, [pc, #412]	; (8003f2c <HAL_SAI_MspInit+0x1d0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	4a65      	ldr	r2, [pc, #404]	; (8003f2c <HAL_SAI_MspInit+0x1d0>)
 8003d96:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003d98:	2310      	movs	r3, #16
 8003d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da4:	2303      	movs	r3, #3
 8003da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003da8:	230a      	movs	r3, #10
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	4619      	mov	r1, r3
 8003db2:	4860      	ldr	r0, [pc, #384]	; (8003f34 <HAL_SAI_MspInit+0x1d8>)
 8003db4:	f004 ff44 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003db8:	23e0      	movs	r3, #224	; 0xe0
 8003dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003dc8:	230a      	movs	r3, #10
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4858      	ldr	r0, [pc, #352]	; (8003f34 <HAL_SAI_MspInit+0x1d8>)
 8003dd4:	f004 ff34 	bl	8008c40 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003dd8:	4b57      	ldr	r3, [pc, #348]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003dda:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <HAL_SAI_MspInit+0x1e0>)
 8003ddc:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003dde:	4b56      	ldr	r3, [pc, #344]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003de0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003de4:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003de6:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003de8:	2240      	movs	r2, #64	; 0x40
 8003dea:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dec:	4b52      	ldr	r3, [pc, #328]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003df2:	4b51      	ldr	r3, [pc, #324]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003df8:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003dfa:	4b4f      	ldr	r3, [pc, #316]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e00:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e02:	4b4d      	ldr	r3, [pc, #308]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e08:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003e0a:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e10:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e18:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003e1a:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003e20:	4b45      	ldr	r3, [pc, #276]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e22:	2203      	movs	r2, #3
 8003e24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003e26:	4b44      	ldr	r3, [pc, #272]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003e2c:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003e32:	4841      	ldr	r0, [pc, #260]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e34:	f003 ff52 	bl	8007cdc <HAL_DMA_Init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8003e3e:	f7ff f865 	bl	8002f0c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a3c      	ldr	r2, [pc, #240]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e46:	671a      	str	r2, [r3, #112]	; 0x70
 8003e48:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a39      	ldr	r2, [pc, #228]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e52:	66da      	str	r2, [r3, #108]	; 0x6c
 8003e54:	4a38      	ldr	r2, [pc, #224]	; (8003f38 <HAL_SAI_MspInit+0x1dc>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <HAL_SAI_MspInit+0x1e4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d15c      	bne.n	8003f1e <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003e64:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_SAI_MspInit+0x1d0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003e6c:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <HAL_SAI_MspInit+0x1d4>)
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <HAL_SAI_MspInit+0x1d4>)
 8003e72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e76:	6453      	str	r3, [r2, #68]	; 0x44
 8003e78:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <HAL_SAI_MspInit+0x1d4>)
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003e84:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <HAL_SAI_MspInit+0x1d0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	4a28      	ldr	r2, [pc, #160]	; (8003f2c <HAL_SAI_MspInit+0x1d0>)
 8003e8c:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	2302      	movs	r3, #2
 8003e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003ea0:	230a      	movs	r3, #10
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4826      	ldr	r0, [pc, #152]	; (8003f44 <HAL_SAI_MspInit+0x1e8>)
 8003eac:	f004 fec8 	bl	8008c40 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003eb0:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003eb2:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <HAL_SAI_MspInit+0x1f0>)
 8003eb4:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ebc:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ece:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003ed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed6:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ede:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003ee0:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee6:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003eea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eee:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003ef6:	4814      	ldr	r0, [pc, #80]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003ef8:	f003 fef0 	bl	8007cdc <HAL_DMA_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003f02:	f7ff f803 	bl	8002f0c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a0f      	ldr	r2, [pc, #60]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003f0a:	671a      	str	r2, [r3, #112]	; 0x70
 8003f0c:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a0c      	ldr	r2, [pc, #48]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003f16:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f18:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <HAL_SAI_MspInit+0x1ec>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003f1e:	bf00      	nop
 8003f20:	3728      	adds	r7, #40	; 0x28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40015c04 	.word	0x40015c04
 8003f2c:	2001f338 	.word	0x2001f338
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40022000 	.word	0x40022000
 8003f38:	2001ee38 	.word	0x2001ee38
 8003f3c:	40026470 	.word	0x40026470
 8003f40:	40015c24 	.word	0x40015c24
 8003f44:	40021800 	.word	0x40021800
 8003f48:	2001ee98 	.word	0x2001ee98
 8003f4c:	400264b8 	.word	0x400264b8

08003f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08c      	sub	sp, #48	; 0x30
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003f60:	2200      	movs	r2, #0
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	2036      	movs	r0, #54	; 0x36
 8003f66:	f003 fbd1 	bl	800770c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f6a:	2036      	movs	r0, #54	; 0x36
 8003f6c:	f003 fbea 	bl	8007744 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003f70:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <HAL_InitTick+0xa0>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <HAL_InitTick+0xa0>)
 8003f76:	f043 0310 	orr.w	r3, r3, #16
 8003f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <HAL_InitTick+0xa0>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f88:	f107 0210 	add.w	r2, r7, #16
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f009 fbd8 	bl	800d748 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003f98:	f009 fbae 	bl	800d6f8 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <HAL_InitTick+0xa4>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0c9b      	lsrs	r3, r3, #18
 8003fac:	3b01      	subs	r3, #1
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_InitTick+0xa8>)
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <HAL_InitTick+0xac>)
 8003fb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_InitTick+0xa8>)
 8003fb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fbc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003fbe:	4a0e      	ldr	r2, [pc, #56]	; (8003ff8 <HAL_InitTick+0xa8>)
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <HAL_InitTick+0xa8>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_InitTick+0xa8>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003fd0:	4809      	ldr	r0, [pc, #36]	; (8003ff8 <HAL_InitTick+0xa8>)
 8003fd2:	f00c fa4b 	bl	801046c <HAL_TIM_Base_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d104      	bne.n	8003fe6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003fdc:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <HAL_InitTick+0xa8>)
 8003fde:	f00c fa9d 	bl	801051c <HAL_TIM_Base_Start_IT>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	e000      	b.n	8003fe8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3730      	adds	r7, #48	; 0x30
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	431bde83 	.word	0x431bde83
 8003ff8:	2001f33c 	.word	0x2001f33c
 8003ffc:	40001000 	.word	0x40001000

08004000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004004:	e7fe      	b.n	8004004 <NMI_Handler+0x4>

08004006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800400a:	e7fe      	b.n	800400a <HardFault_Handler+0x4>

0800400c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004010:	e7fe      	b.n	8004010 <MemManage_Handler+0x4>

08004012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004016:	e7fe      	b.n	8004016 <BusFault_Handler+0x4>

08004018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800401c:	e7fe      	b.n	800401c <UsageFault_Handler+0x4>

0800401e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004030:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004034:	f005 f908 	bl	8009248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}

0800403c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004040:	4802      	ldr	r0, [pc, #8]	; (800404c <TIM6_DAC_IRQHandler+0x10>)
 8004042:	f00c fb3a 	bl	80106ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	2001f33c 	.word	0x2001f33c

08004050 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <DMA2_Stream0_IRQHandler+0x10>)
 8004056:	f003 ffe1 	bl	800801c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	2001f298 	.word	0x2001f298

08004064 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004068:	4802      	ldr	r0, [pc, #8]	; (8004074 <DMA2_Stream1_IRQHandler+0x10>)
 800406a:	f003 ffd7 	bl	800801c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	2001eae4 	.word	0x2001eae4

08004078 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800407c:	4802      	ldr	r0, [pc, #8]	; (8004088 <DMA2_Stream4_IRQHandler+0x10>)
 800407e:	f003 ffcd 	bl	800801c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	2001ee38 	.word	0x2001ee38

0800408c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004090:	4802      	ldr	r0, [pc, #8]	; (800409c <OTG_FS_IRQHandler+0x10>)
 8004092:	f005 fb67 	bl	8009764 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20027950 	.word	0x20027950

080040a0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80040a4:	4802      	ldr	r0, [pc, #8]	; (80040b0 <DMA2_Stream7_IRQHandler+0x10>)
 80040a6:	f003 ffb9 	bl	800801c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	2001ee98 	.word	0x2001ee98

080040b4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80040b8:	4802      	ldr	r0, [pc, #8]	; (80040c4 <DCMI_IRQHandler+0x10>)
 80040ba:	f003 fd3f 	bl	8007b3c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	2001ea94 	.word	0x2001ea94

080040c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80040cc:	4802      	ldr	r0, [pc, #8]	; (80040d8 <DMA2D_IRQHandler+0x10>)
 80040ce:	f004 fb79 	bl	80087c4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	2001eb44 	.word	0x2001eb44

080040dc <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <QUADSPI_IRQHandler+0x10>)
 80040e2:	f007 ff5f 	bl	800bfa4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2001ecc4 	.word	0x2001ecc4

080040f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e00a      	b.n	8004118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004102:	f3af 8000 	nop.w
 8004106:	4601      	mov	r1, r0
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	60ba      	str	r2, [r7, #8]
 800410e:	b2ca      	uxtb	r2, r1
 8004110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	dbf0      	blt.n	8004102 <_read+0x12>
	}

return len;
 8004120:	687b      	ldr	r3, [r7, #4]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b086      	sub	sp, #24
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	e009      	b.n	8004150 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	60ba      	str	r2, [r7, #8]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fbd3 	bl	80048f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	3301      	adds	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	dbf1      	blt.n	800413c <_write+0x12>
	}
	return len;
 8004158:	687b      	ldr	r3, [r7, #4]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <_close>:

int _close(int file)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
	return -1;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800418a:	605a      	str	r2, [r3, #4]
	return 0;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <_isatty>:

int _isatty(int file)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
	return 1;
 80041a2:	2301      	movs	r3, #1
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
	return 0;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041d4:	4a14      	ldr	r2, [pc, #80]	; (8004228 <_sbrk+0x5c>)
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <_sbrk+0x60>)
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041e0:	4b13      	ldr	r3, [pc, #76]	; (8004230 <_sbrk+0x64>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <_sbrk+0x64>)
 80041ea:	4a12      	ldr	r2, [pc, #72]	; (8004234 <_sbrk+0x68>)
 80041ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <_sbrk+0x64>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d207      	bcs.n	800420c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041fc:	f015 f9fe 	bl	80195fc <__errno>
 8004200:	4603      	mov	r3, r0
 8004202:	220c      	movs	r2, #12
 8004204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	e009      	b.n	8004220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <_sbrk+0x64>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <_sbrk+0x64>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4413      	add	r3, r2
 800421a:	4a05      	ldr	r2, [pc, #20]	; (8004230 <_sbrk+0x64>)
 800421c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800421e:	68fb      	ldr	r3, [r7, #12]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20050000 	.word	0x20050000
 800422c:	00000400 	.word	0x00000400
 8004230:	2001f388 	.word	0x2001f388
 8004234:	20027c68 	.word	0x20027c68

08004238 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <SystemInit+0x20>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	4a05      	ldr	r2, [pc, #20]	; (8004258 <SystemInit+0x20>)
 8004244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <uiDisplayBasic>:
int time = 0;

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8004262:	f04f 30ff 	mov.w	r0, #4294967295
 8004266:	f000 fd29 	bl	8004cbc <LCD_Clear>

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800426a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800426e:	f000 fc87 	bl	8004b80 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004272:	f04f 30ff 	mov.w	r0, #4294967295
 8004276:	f000 fcb3 	bl	8004be0 <LCD_SetBackColor>
	LCD_SetFont(&Font16);
 800427a:	4835      	ldr	r0, [pc, #212]	; (8004350 <uiDisplayBasic+0xf4>)
 800427c:	f000 fcc8 	bl	8004c10 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 8004280:	2301      	movs	r3, #1
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2301      	movs	r3, #1
 8004286:	4a33      	ldr	r2, [pc, #204]	; (8004354 <uiDisplayBasic+0xf8>)
 8004288:	2100      	movs	r1, #0
 800428a:	2000      	movs	r0, #0
 800428c:	f000 fd5e 	bl	8004d4c <LCD_DrawString>

	/* delay range */
	LCD_DrawRect(60,20,360,30);
 8004290:	231e      	movs	r3, #30
 8004292:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8004296:	2114      	movs	r1, #20
 8004298:	203c      	movs	r0, #60	; 0x3c
 800429a:	f000 fded 	bl	8004e78 <LCD_DrawRect>
	/* feedback range */
	LCD_DrawRect(60,80,360,30);
 800429e:	231e      	movs	r3, #30
 80042a0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80042a4:	2150      	movs	r1, #80	; 0x50
 80042a6:	203c      	movs	r0, #60	; 0x3c
 80042a8:	f000 fde6 	bl	8004e78 <LCD_DrawRect>
	/* volume range */
	LCD_DrawRect(435,36,30,200);
 80042ac:	23c8      	movs	r3, #200	; 0xc8
 80042ae:	221e      	movs	r2, #30
 80042b0:	2124      	movs	r1, #36	; 0x24
 80042b2:	f240 10b3 	movw	r0, #435	; 0x1b3
 80042b6:	f000 fddf 	bl	8004e78 <LCD_DrawRect>
	/* Init Vol, Delay, Feed */
	LCD_SetFont(&Font12);
 80042ba:	4827      	ldr	r0, [pc, #156]	; (8004358 <uiDisplayBasic+0xfc>)
 80042bc:	f000 fca8 	bl	8004c10 <LCD_SetFont>
	LCD_DrawString(428,15,(uint8_t *) "Volume", LEFT_MODE, true);
 80042c0:	2301      	movs	r3, #1
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2303      	movs	r3, #3
 80042c6:	4a25      	ldr	r2, [pc, #148]	; (800435c <uiDisplayBasic+0x100>)
 80042c8:	210f      	movs	r1, #15
 80042ca:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 80042ce:	f000 fd3d 	bl	8004d4c <LCD_DrawString>
	LCD_DrawString(440,245,(uint8_t *) "50 ", LEFT_MODE, true);
 80042d2:	2301      	movs	r3, #1
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2303      	movs	r3, #3
 80042d8:	4a21      	ldr	r2, [pc, #132]	; (8004360 <uiDisplayBasic+0x104>)
 80042da:	21f5      	movs	r1, #245	; 0xf5
 80042dc:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80042e0:	f000 fd34 	bl	8004d4c <LCD_DrawString>
	LCD_SetFillColor(LCD_COLOR_RED);
 80042e4:	481f      	ldr	r0, [pc, #124]	; (8004364 <uiDisplayBasic+0x108>)
 80042e6:	f000 fc63 	bl	8004bb0 <LCD_SetFillColor>
	LCD_FillRect(436,100+36,29,200-100);
 80042ea:	2364      	movs	r3, #100	; 0x64
 80042ec:	221d      	movs	r2, #29
 80042ee:	2188      	movs	r1, #136	; 0x88
 80042f0:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 80042f4:	f000 fe32 	bl	8004f5c <LCD_FillRect>

	LCD_DrawString(LCD_SCREEN_WIDTH/2,60,(uint8_t *) "0 ms  ", LEFT_MODE, true);
 80042f8:	2301      	movs	r3, #1
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2303      	movs	r3, #3
 80042fe:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <uiDisplayBasic+0x10c>)
 8004300:	213c      	movs	r1, #60	; 0x3c
 8004302:	20f0      	movs	r0, #240	; 0xf0
 8004304:	f000 fd22 	bl	8004d4c <LCD_DrawString>
	LCD_DrawString(200,60,(uint8_t *) "Delay", LEFT_MODE, true);
 8004308:	2301      	movs	r3, #1
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2303      	movs	r3, #3
 800430e:	4a17      	ldr	r2, [pc, #92]	; (800436c <uiDisplayBasic+0x110>)
 8004310:	213c      	movs	r1, #60	; 0x3c
 8004312:	20c8      	movs	r0, #200	; 0xc8
 8004314:	f000 fd1a 	bl	8004d4c <LCD_DrawString>
	LCD_DrawString(LCD_SCREEN_WIDTH/2,120,(uint8_t *) "0 %  ", LEFT_MODE, true);
 8004318:	2301      	movs	r3, #1
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2303      	movs	r3, #3
 800431e:	4a14      	ldr	r2, [pc, #80]	; (8004370 <uiDisplayBasic+0x114>)
 8004320:	2178      	movs	r1, #120	; 0x78
 8004322:	20f0      	movs	r0, #240	; 0xf0
 8004324:	f000 fd12 	bl	8004d4c <LCD_DrawString>
	LCD_DrawString(180,120,(uint8_t *) "Feedback", LEFT_MODE, true);
 8004328:	2301      	movs	r3, #1
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2303      	movs	r3, #3
 800432e:	4a11      	ldr	r2, [pc, #68]	; (8004374 <uiDisplayBasic+0x118>)
 8004330:	2178      	movs	r1, #120	; 0x78
 8004332:	20b4      	movs	r0, #180	; 0xb4
 8004334:	f000 fd0a 	bl	8004d4c <LCD_DrawString>

	LCD_DrawString(10,5,(uint8_t *) "Input", LEFT_MODE, true);
 8004338:	2301      	movs	r3, #1
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2303      	movs	r3, #3
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <uiDisplayBasic+0x11c>)
 8004340:	2105      	movs	r1, #5
 8004342:	200a      	movs	r0, #10
 8004344:	f000 fd02 	bl	8004d4c <LCD_DrawString>
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000044 	.word	0x20000044
 8004354:	0801ab9c 	.word	0x0801ab9c
 8004358:	2000003c 	.word	0x2000003c
 800435c:	0801abb4 	.word	0x0801abb4
 8004360:	0801abbc 	.word	0x0801abbc
 8004364:	ffff0000 	.word	0xffff0000
 8004368:	0801abc0 	.word	0x0801abc0
 800436c:	0801abc8 	.word	0x0801abc8
 8004370:	0801abd0 	.word	0x0801abd0
 8004374:	0801abd8 	.word	0x0801abd8
 8004378:	0801abe4 	.word	0x0801abe4

0800437c <printDelay>:

/*
 * Display All Params
 */
static void printDelay(uint32_t x){
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af02      	add	r7, sp, #8
 8004382:	6078      	str	r0, [r7, #4]
	char delay_char[10];
	sprintf(delay_char, "%lu ms  ",x);
 8004384:	f107 0308 	add.w	r3, r7, #8
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	490a      	ldr	r1, [pc, #40]	; (80043b4 <printDelay+0x38>)
 800438c:	4618      	mov	r0, r3
 800438e:	f015 fb19 	bl	80199c4 <siprintf>
	uint16_t X = LCD_SCREEN_WIDTH/2;
 8004392:	23f0      	movs	r3, #240	; 0xf0
 8004394:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 60;
 8004396:	233c      	movs	r3, #60	; 0x3c
 8004398:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)delay_char, LEFT_MODE, true);
 800439a:	f107 0208 	add.w	r2, r7, #8
 800439e:	8ab9      	ldrh	r1, [r7, #20]
 80043a0:	8af8      	ldrh	r0, [r7, #22]
 80043a2:	2301      	movs	r3, #1
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	2303      	movs	r3, #3
 80043a8:	f000 fcd0 	bl	8004d4c <LCD_DrawString>
}
 80043ac:	bf00      	nop
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	0801abec 	.word	0x0801abec

080043b8 <printFeedback>:

static void printFeedback(uint32_t x){
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
	char feedback_char[10];
	sprintf(feedback_char, "%lu %% ",x);
 80043c0:	f107 0308 	add.w	r3, r7, #8
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	490a      	ldr	r1, [pc, #40]	; (80043f0 <printFeedback+0x38>)
 80043c8:	4618      	mov	r0, r3
 80043ca:	f015 fafb 	bl	80199c4 <siprintf>
	uint16_t X = LCD_SCREEN_WIDTH/2;
 80043ce:	23f0      	movs	r3, #240	; 0xf0
 80043d0:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 120;
 80043d2:	2378      	movs	r3, #120	; 0x78
 80043d4:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)feedback_char, LEFT_MODE, true);
 80043d6:	f107 0208 	add.w	r2, r7, #8
 80043da:	8ab9      	ldrh	r1, [r7, #20]
 80043dc:	8af8      	ldrh	r0, [r7, #22]
 80043de:	2301      	movs	r3, #1
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	2303      	movs	r3, #3
 80043e4:	f000 fcb2 	bl	8004d4c <LCD_DrawString>
}
 80043e8:	bf00      	nop
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	0801abf8 	.word	0x0801abf8

080043f4 <printVolume>:

static void printVolume(uint32_t v){
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	6078      	str	r0, [r7, #4]
	char volume_char[10];
	sprintf(volume_char, "%lu  ",v);
 80043fc:	f107 0308 	add.w	r3, r7, #8
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	490b      	ldr	r1, [pc, #44]	; (8004430 <printVolume+0x3c>)
 8004404:	4618      	mov	r0, r3
 8004406:	f015 fadd 	bl	80199c4 <siprintf>
	uint16_t X = 440;
 800440a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800440e:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 245;
 8004410:	23f5      	movs	r3, #245	; 0xf5
 8004412:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)volume_char, LEFT_MODE, true);
 8004414:	f107 0208 	add.w	r2, r7, #8
 8004418:	8ab9      	ldrh	r1, [r7, #20]
 800441a:	8af8      	ldrh	r0, [r7, #22]
 800441c:	2301      	movs	r3, #1
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2303      	movs	r3, #3
 8004422:	f000 fc93 	bl	8004d4c <LCD_DrawString>
}
 8004426:	bf00      	nop
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	0801ac00 	.word	0x0801ac00

08004434 <printDepth>:

static void printDepth(uint32_t d){
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	6078      	str	r0, [r7, #4]
	char volume_char[10];
	sprintf(volume_char, "%lu  ",d);
 800443c:	f107 0308 	add.w	r3, r7, #8
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	490a      	ldr	r1, [pc, #40]	; (800446c <printDepth+0x38>)
 8004444:	4618      	mov	r0, r3
 8004446:	f015 fabd 	bl	80199c4 <siprintf>
	uint16_t X = 20;
 800444a:	2314      	movs	r3, #20
 800444c:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 20;
 800444e:	2314      	movs	r3, #20
 8004450:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)volume_char, LEFT_MODE, true);
 8004452:	f107 0208 	add.w	r2, r7, #8
 8004456:	8ab9      	ldrh	r1, [r7, #20]
 8004458:	8af8      	ldrh	r0, [r7, #22]
 800445a:	2301      	movs	r3, #1
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	2303      	movs	r3, #3
 8004460:	f000 fc74 	bl	8004d4c <LCD_DrawString>
}
 8004464:	bf00      	nop
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	0801ac00 	.word	0x0801ac00

08004470 <uiSliderDelay>:

/*
 * Range for delay value
 */
void uiSliderDelay(){
 8004470:	b580      	push	{r7, lr}
 8004472:	b090      	sub	sp, #64	; 0x40
 8004474:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004476:	463b      	mov	r3, r7
 8004478:	4618      	mov	r0, r3
 800447a:	f001 f917 	bl	80056ac <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 800447e:	783b      	ldrb	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05b      	beq.n	800453c <uiSliderDelay+0xcc>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004484:	887b      	ldrh	r3, [r7, #2]
 8004486:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004488:	89bb      	ldrh	r3, [r7, #12]
 800448a:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 60;
 800448c:	233c      	movs	r3, #60	; 0x3c
 800448e:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 20;
 8004490:	2314      	movs	r3, #20
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 360;
 8004494:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004498:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 30;
 800449a:	231e      	movs	r3, #30
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 800449e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80044a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044a2:	429a      	cmp	r2, r3
 80044a4:	da4a      	bge.n	800453c <uiSliderDelay+0xcc>
 80044a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80044a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	440b      	add	r3, r1
 80044ae:	429a      	cmp	r2, r3
 80044b0:	da44      	bge.n	800453c <uiSliderDelay+0xcc>
 80044b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80044b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b6:	429a      	cmp	r2, r3
 80044b8:	da40      	bge.n	800453c <uiSliderDelay+0xcc>
 80044ba:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80044bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c0:	440b      	add	r3, r1
 80044c2:	429a      	cmp	r2, r3
 80044c4:	da3a      	bge.n	800453c <uiSliderDelay+0xcc>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 80044c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <uiSliderDelay+0xd4>)
 80044d4:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 80044d6:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <uiSliderDelay+0xd4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ff4e 	bl	800437c <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 80044e0:	4819      	ldr	r0, [pc, #100]	; (8004548 <uiSliderDelay+0xd8>)
 80044e2:	f000 fb65 	bl	8004bb0 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3301      	adds	r3, #1
 80044ec:	b298      	uxth	r0, r3
 80044ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	b299      	uxth	r1, r3
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	b29a      	uxth	r2, r3
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29b      	uxth	r3, r3
 8004508:	f000 fd28 	bl	8004f5c <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 800450c:	f04f 30ff 	mov.w	r0, #4294967295
 8004510:	f000 fb4e 	bl	8004bb0 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004516:	b29b      	uxth	r3, r3
 8004518:	3301      	adds	r3, #1
 800451a:	b299      	uxth	r1, r3
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	b29a      	uxth	r2, r3
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	b29b      	uxth	r3, r3
 8004524:	4413      	add	r3, r2
 8004526:	b29a      	uxth	r2, r3
 8004528:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	b29a      	uxth	r2, r3
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29b      	uxth	r3, r3
 8004536:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8004538:	f000 fd10 	bl	8004f5c <LCD_FillRect>
				}
	}
}
 800453c:	bf00      	nop
 800453e:	3740      	adds	r7, #64	; 0x40
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	2001f38c 	.word	0x2001f38c
 8004548:	ffff0000 	.word	0xffff0000
 800454c:	00000000 	.word	0x00000000

08004550 <uiSliderFeed>:

/*
 * Range for feedback value
 */
void uiSliderFeed(){
 8004550:	b580      	push	{r7, lr}
 8004552:	b090      	sub	sp, #64	; 0x40
 8004554:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004556:	463b      	mov	r3, r7
 8004558:	4618      	mov	r0, r3
 800455a:	f001 f8a7 	bl	80056ac <TS_GetState>

	if(TS_State.touchDetected){
 800455e:	783b      	ldrb	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d06d      	beq.n	8004640 <uiSliderFeed+0xf0>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004564:	887b      	ldrh	r3, [r7, #2]
 8004566:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004568:	89bb      	ldrh	r3, [r7, #12]
 800456a:	87bb      	strh	r3, [r7, #60]	; 0x3c

				int x = 60;
 800456c:	233c      	movs	r3, #60	; 0x3c
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 80;
 8004570:	2350      	movs	r3, #80	; 0x50
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 360;
 8004574:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 30;
 800457a:	231e      	movs	r3, #30
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c

				if(xt>x && xt<x+w && yt>y && yt<y+h){
 800457e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004582:	429a      	cmp	r2, r3
 8004584:	da5c      	bge.n	8004640 <uiSliderFeed+0xf0>
 8004586:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004588:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	440b      	add	r3, r1
 800458e:	429a      	cmp	r2, r3
 8004590:	da56      	bge.n	8004640 <uiSliderFeed+0xf0>
 8004592:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004596:	429a      	cmp	r2, r3
 8004598:	da52      	bge.n	8004640 <uiSliderFeed+0xf0>
 800459a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800459c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	440b      	add	r3, r1
 80045a2:	429a      	cmp	r2, r3
 80045a4:	da4c      	bge.n	8004640 <uiSliderFeed+0xf0>
					/*Convert in feedback value {0:50}% */
					delayFeed=(uint32_t)(((float)(xt-x)/7.2));
 80045a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b4:	ee17 0a90 	vmov	r0, s15
 80045b8:	f7fb ffde 	bl	8000578 <__aeabi_f2d>
 80045bc:	a324      	add	r3, pc, #144	; (adr r3, 8004650 <uiSliderFeed+0x100>)
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f7fc f95b 	bl	800087c <__aeabi_ddiv>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	f7fc fa3d 	bl	8000a4c <__aeabi_d2uiz>
 80045d2:	4603      	mov	r3, r0
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <uiSliderFeed+0xf8>)
 80045d8:	601a      	str	r2, [r3, #0]

					/* Display new feedback value */
					printFeedback(delayFeed);
 80045da:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <uiSliderFeed+0xf8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff feea 	bl	80043b8 <printFeedback>
					/* RED Bar for level */
					LCD_SetFillColor(LCD_COLOR_RED);
 80045e4:	4819      	ldr	r0, [pc, #100]	; (800464c <uiSliderFeed+0xfc>)
 80045e6:	f000 fae3 	bl	8004bb0 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3301      	adds	r3, #1
 80045f0:	b298      	uxth	r0, r3
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3301      	adds	r3, #1
 80045f8:	b299      	uxth	r1, r3
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	b29a      	uxth	r2, r3
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29b      	uxth	r3, r3
 800460c:	f000 fca6 	bl	8004f5c <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	f000 facc 	bl	8004bb0 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	b29b      	uxth	r3, r3
 800461c:	3301      	adds	r3, #1
 800461e:	b299      	uxth	r1, r3
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	b29a      	uxth	r2, r3
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	b29b      	uxth	r3, r3
 8004628:	4413      	add	r3, r2
 800462a:	b29a      	uxth	r2, r3
 800462c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	b29a      	uxth	r2, r3
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29b      	uxth	r3, r3
 800463a:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 800463c:	f000 fc8e 	bl	8004f5c <LCD_FillRect>
				}
	}
}
 8004640:	bf00      	nop
 8004642:	3740      	adds	r7, #64	; 0x40
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	2001f390 	.word	0x2001f390
 800464c:	ffff0000 	.word	0xffff0000
 8004650:	cccccccd 	.word	0xcccccccd
 8004654:	401ccccc 	.word	0x401ccccc

08004658 <uiSliderVolume>:
/*
 * Range for volume value
 */
void uiSliderVolume(){
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b091      	sub	sp, #68	; 0x44
 800465c:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 800465e:	463b      	mov	r3, r7
 8004660:	4618      	mov	r0, r3
 8004662:	f001 f823 	bl	80056ac <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004666:	783b      	ldrb	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d062      	beq.n	8004732 <uiSliderVolume+0xda>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 800466c:	887b      	ldrh	r3, [r7, #2]
 800466e:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004670:	89bb      	ldrh	r3, [r7, #12]
 8004672:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 435;
 8004674:	f240 13b3 	movw	r3, #435	; 0x1b3
 8004678:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 36;
 800467a:	2324      	movs	r3, #36	; 0x24
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 30;
 800467e:	231e      	movs	r3, #30
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 200;
 8004682:	23c8      	movs	r3, #200	; 0xc8
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the volume bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004686:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800468a:	429a      	cmp	r2, r3
 800468c:	da51      	bge.n	8004732 <uiSliderVolume+0xda>
 800468e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004690:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	440b      	add	r3, r1
 8004696:	429a      	cmp	r2, r3
 8004698:	da4b      	bge.n	8004732 <uiSliderVolume+0xda>
 800469a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800469c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800469e:	429a      	cmp	r2, r3
 80046a0:	da47      	bge.n	8004732 <uiSliderVolume+0xda>
 80046a2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80046a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	440b      	add	r3, r1
 80046aa:	429a      	cmp	r2, r3
 80046ac:	da41      	bge.n	8004732 <uiSliderVolume+0xda>
					/* Position yt into volume value in % */
					volume = 100-((yt-y))/2;
 80046ae:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da00      	bge.n	80046ba <uiSliderVolume+0x62>
 80046b8:	3301      	adds	r3, #1
 80046ba:	105b      	asrs	r3, r3, #1
 80046bc:	425b      	negs	r3, r3
 80046be:	3364      	adds	r3, #100	; 0x64
 80046c0:	4a1e      	ldr	r2, [pc, #120]	; (800473c <uiSliderVolume+0xe4>)
 80046c2:	6013      	str	r3, [r2, #0]
					/* Display new volume value */
					printVolume((uint32_t) volume);
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <uiSliderVolume+0xe4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fe93 	bl	80043f4 <printVolume>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 80046ce:	481c      	ldr	r0, [pc, #112]	; (8004740 <uiSliderVolume+0xe8>)
 80046d0:	f000 fa6e 	bl	8004bb0 <LCD_SetFillColor>
					LCD_FillRect(x+1,yt,w-1,h-yt+y);
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	b298      	uxth	r0, r3
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29c      	uxth	r4, r3
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80046f8:	4622      	mov	r2, r4
 80046fa:	f000 fc2f 	bl	8004f5c <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 80046fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004702:	f000 fa55 	bl	8004bb0 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,w-1,yt-y-1);
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	b29b      	uxth	r3, r3
 800470a:	3301      	adds	r3, #1
 800470c:	b298      	uxth	r0, r3
 800470e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004710:	b29b      	uxth	r3, r3
 8004712:	3301      	adds	r3, #1
 8004714:	b299      	uxth	r1, r3
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29c      	uxth	r4, r3
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	b29b      	uxth	r3, r3
 8004722:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29b      	uxth	r3, r3
 800472c:	4622      	mov	r2, r4
 800472e:	f000 fc15 	bl	8004f5c <LCD_FillRect>
				}
	}
}
 8004732:	bf00      	nop
 8004734:	3744      	adds	r7, #68	; 0x44
 8004736:	46bd      	mov	sp, r7
 8004738:	bd90      	pop	{r4, r7, pc}
 800473a:	bf00      	nop
 800473c:	20000030 	.word	0x20000030
 8004740:	ffff0000 	.word	0xffff0000

08004744 <uiSliderFlanger>:

//Range for flanger
void uiSliderFlanger(){
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b091      	sub	sp, #68	; 0x44
 8004748:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 800474a:	463b      	mov	r3, r7
 800474c:	4618      	mov	r0, r3
 800474e:	f000 ffad 	bl	80056ac <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004752:	783b      	ldrb	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d05e      	beq.n	8004816 <uiSliderFlanger+0xd2>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004758:	887b      	ldrh	r3, [r7, #2]
 800475a:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 800475c:	89bb      	ldrh	r3, [r7, #12]
 800475e:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 20;
 8004760:	2314      	movs	r3, #20
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 20;
 8004764:	2314      	movs	r3, #20
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 30;
 8004768:	231e      	movs	r3, #30
 800476a:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 200;
 800476c:	23c8      	movs	r3, #200	; 0xc8
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the volume bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004770:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004774:	429a      	cmp	r2, r3
 8004776:	da4e      	bge.n	8004816 <uiSliderFlanger+0xd2>
 8004778:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800477a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	440b      	add	r3, r1
 8004780:	429a      	cmp	r2, r3
 8004782:	da48      	bge.n	8004816 <uiSliderFlanger+0xd2>
 8004784:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004788:	429a      	cmp	r2, r3
 800478a:	da44      	bge.n	8004816 <uiSliderFlanger+0xd2>
 800478c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800478e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	440b      	add	r3, r1
 8004794:	429a      	cmp	r2, r3
 8004796:	da3e      	bge.n	8004816 <uiSliderFlanger+0xd2>
					/* Position yt into volume value in % */
					//depth = 100-((yt-y))/2;
					depth = 0.5;
 8004798:	4b21      	ldr	r3, [pc, #132]	; (8004820 <uiSliderFlanger+0xdc>)
 800479a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800479e:	601a      	str	r2, [r3, #0]
					/* Display new volume value */
					printDepth((uint32_t) depth);
 80047a0:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <uiSliderFlanger+0xdc>)
 80047a2:	edd3 7a00 	vldr	s15, [r3]
 80047a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047aa:	ee17 0a90 	vmov	r0, s15
 80047ae:	f7ff fe41 	bl	8004434 <printDepth>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 80047b2:	481c      	ldr	r0, [pc, #112]	; (8004824 <uiSliderFlanger+0xe0>)
 80047b4:	f000 f9fc 	bl	8004bb0 <LCD_SetFillColor>
					LCD_FillRect(x+1,yt,w-1,h-yt+y);
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3301      	adds	r3, #1
 80047be:	b298      	uxth	r0, r3
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29c      	uxth	r4, r3
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	b29b      	uxth	r3, r3
 80047da:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80047dc:	4622      	mov	r2, r4
 80047de:	f000 fbbd 	bl	8004f5c <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 80047e2:	f04f 30ff 	mov.w	r0, #4294967295
 80047e6:	f000 f9e3 	bl	8004bb0 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,w-1,yt-y-1);
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3301      	adds	r3, #1
 80047f0:	b298      	uxth	r0, r3
 80047f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	b299      	uxth	r1, r3
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29c      	uxth	r4, r3
 8004802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004804:	b29b      	uxth	r3, r3
 8004806:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29b      	uxth	r3, r3
 8004810:	4622      	mov	r2, r4
 8004812:	f000 fba3 	bl	8004f5c <LCD_FillRect>
				}
	}
}
 8004816:	bf00      	nop
 8004818:	3744      	adds	r7, #68	; 0x44
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	20000034 	.word	0x20000034
 8004824:	ffff0000 	.word	0xffff0000

08004828 <uiDisplaySpectrum>:
/**
 * Displays spectrogram.
 */

uint32_t VAL;
void uiDisplaySpectrum() {
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
	/* sweep reset */
	if(time>360){
 800482e:	4b26      	ldr	r3, [pc, #152]	; (80048c8 <uiDisplaySpectrum+0xa0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8004836:	dd02      	ble.n	800483e <uiDisplaySpectrum+0x16>
		time=0;
 8004838:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <uiDisplaySpectrum+0xa0>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
	}
	/* sweep init position */
	uint16_t x=time+60;
 800483e:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <uiDisplaySpectrum+0xa0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	333c      	adds	r3, #60	; 0x3c
 8004846:	817b      	strh	r3, [r7, #10]
	uint16_t y=270;
 8004848:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800484c:	813b      	strh	r3, [r7, #8]
	uint32_t color;

	/* run through mag values */
	for(int i=0;i<(256/2);i++){
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e02d      	b.n	80048b0 <uiDisplaySpectrum+0x88>
		/* Amplitude of frequency "i" */
		VAL = (uint32_t) (FFTOutputMag[i]*255);
 8004854:	4a1d      	ldr	r2, [pc, #116]	; (80048cc <uiDisplaySpectrum+0xa4>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	edd3 7a00 	vldr	s15, [r3]
 8004860:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80048d0 <uiDisplaySpectrum+0xa8>
 8004864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486c:	ee17 2a90 	vmov	r2, s15
 8004870:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <uiDisplaySpectrum+0xac>)
 8004872:	601a      	str	r2, [r3, #0]
		color=(uint32_t) 4278190080+(VAL);
 8004874:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <uiDisplaySpectrum+0xac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 800487c:	607b      	str	r3, [r7, #4]

		/* shade of blue */
		LCD_DrawPixelColor(x,y-(i),(uint32_t) color);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	b29b      	uxth	r3, r3
 8004882:	893a      	ldrh	r2, [r7, #8]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	b299      	uxth	r1, r3
 8004888:	897b      	ldrh	r3, [r7, #10]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f9cf 	bl	8004c30 <LCD_DrawPixelColor>
		/* tracking bar */
		LCD_DrawPixelColor(x+1,y-(i),(uint32_t) (4278190080+16753920));
 8004892:	897b      	ldrh	r3, [r7, #10]
 8004894:	3301      	adds	r3, #1
 8004896:	b298      	uxth	r0, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	b29b      	uxth	r3, r3
 800489c:	893a      	ldrh	r2, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	4a0d      	ldr	r2, [pc, #52]	; (80048d8 <uiDisplaySpectrum+0xb0>)
 80048a4:	4619      	mov	r1, r3
 80048a6:	f000 f9c3 	bl	8004c30 <LCD_DrawPixelColor>
	for(int i=0;i<(256/2);i++){
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3301      	adds	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b7f      	cmp	r3, #127	; 0x7f
 80048b4:	ddce      	ble.n	8004854 <uiDisplaySpectrum+0x2c>
	}
	/* new sweep position */
	time=time+1;
 80048b6:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <uiDisplaySpectrum+0xa0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	4a02      	ldr	r2, [pc, #8]	; (80048c8 <uiDisplaySpectrum+0xa0>)
 80048be:	6013      	str	r3, [r2, #0]
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	2001f394 	.word	0x2001f394
 80048cc:	2001e58c 	.word	0x2001e58c
 80048d0:	437f0000 	.word	0x437f0000
 80048d4:	2001f398 	.word	0x2001f398
 80048d8:	ffffa500 	.word	0xffffa500

080048dc <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80048e0:	2102      	movs	r1, #2
 80048e2:	4802      	ldr	r0, [pc, #8]	; (80048ec <LED_Toggle+0x10>)
 80048e4:	f004 fc95 	bl	8009212 <HAL_GPIO_TogglePin>

}
 80048e8:	bf00      	nop
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40022000 	.word	0x40022000

080048f0 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 80048f8:	1d39      	adds	r1, r7, #4
 80048fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048fe:	2201      	movs	r2, #1
 8004900:	4803      	ldr	r0, [pc, #12]	; (8004910 <__io_putchar+0x20>)
 8004902:	f00c ff07 	bl	8011714 <HAL_UART_Transmit>
	return ch;
 8004906:	687b      	ldr	r3, [r7, #4]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	2001f190 	.word	0x2001f190

08004914 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af04      	add	r7, sp, #16
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	4608      	mov	r0, r1
 800491e:	4611      	mov	r1, r2
 8004920:	461a      	mov	r2, r3
 8004922:	4603      	mov	r3, r0
 8004924:	72fb      	strb	r3, [r7, #11]
 8004926:	460b      	mov	r3, r1
 8004928:	813b      	strh	r3, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004932:	7afb      	ldrb	r3, [r7, #11]
 8004934:	b299      	uxth	r1, r3
 8004936:	88f8      	ldrh	r0, [r7, #6]
 8004938:	893a      	ldrh	r2, [r7, #8]
 800493a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800493e:	9302      	str	r3, [sp, #8]
 8004940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4603      	mov	r3, r0
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f006 fbd8 	bl	800b100 <HAL_I2C_Mem_Read>
 8004950:	4603      	mov	r3, r0
 8004952:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d004      	beq.n	8004964 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800495a:	7afb      	ldrb	r3, [r7, #11]
 800495c:	4619      	mov	r1, r3
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f832 	bl	80049c8 <I2Cx_Error>
  }
  return status;
 8004964:	7dfb      	ldrb	r3, [r7, #23]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b08a      	sub	sp, #40	; 0x28
 8004972:	af04      	add	r7, sp, #16
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	4608      	mov	r0, r1
 8004978:	4611      	mov	r1, r2
 800497a:	461a      	mov	r2, r3
 800497c:	4603      	mov	r3, r0
 800497e:	72fb      	strb	r3, [r7, #11]
 8004980:	460b      	mov	r3, r1
 8004982:	813b      	strh	r3, [r7, #8]
 8004984:	4613      	mov	r3, r2
 8004986:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800498c:	7afb      	ldrb	r3, [r7, #11]
 800498e:	b299      	uxth	r1, r3
 8004990:	88f8      	ldrh	r0, [r7, #6]
 8004992:	893a      	ldrh	r2, [r7, #8]
 8004994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004998:	9302      	str	r3, [sp, #8]
 800499a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	4603      	mov	r3, r0
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f006 fa97 	bl	800aed8 <HAL_I2C_Mem_Write>
 80049aa:	4603      	mov	r3, r0
 80049ac:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80049b4:	7afb      	ldrb	r3, [r7, #11]
 80049b6:	4619      	mov	r1, r3
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f805 	bl	80049c8 <I2Cx_Error>
  }
  return status;
 80049be:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f006 fa4f 	bl	800ae78 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f006 f9bc 	bl	800ad58 <HAL_I2C_Init>
}
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
 80049f2:	460b      	mov	r3, r1
 80049f4:	80bb      	strh	r3, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 80049fa:	887b      	ldrh	r3, [r7, #2]
 80049fc:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80049fe:	89fb      	ldrh	r3, [r7, #14]
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004a06:	89fb      	ldrh	r3, [r7, #14]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	b21a      	sxth	r2, r3
 8004a0e:	887b      	ldrh	r3, [r7, #2]
 8004a10:	b21b      	sxth	r3, r3
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004a1a:	88ba      	ldrh	r2, [r7, #4]
 8004a1c:	79f9      	ldrb	r1, [r7, #7]
 8004a1e:	2302      	movs	r3, #2
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	1cbb      	adds	r3, r7, #2
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	2302      	movs	r3, #2
 8004a28:	4803      	ldr	r0, [pc, #12]	; (8004a38 <AUDIO_I2C_Write+0x50>)
 8004a2a:	f7ff ffa0 	bl	800496e <I2Cx_WriteMultiple>
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	2001ebd0 	.word	0x2001ebd0

08004a3c <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	4603      	mov	r3, r0
 8004a44:	460a      	mov	r2, r1
 8004a46:	71fb      	strb	r3, [r7, #7]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	81bb      	strh	r3, [r7, #12]
 8004a50:	2300      	movs	r3, #0
 8004a52:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004a54:	88ba      	ldrh	r2, [r7, #4]
 8004a56:	79f9      	ldrb	r1, [r7, #7]
 8004a58:	2302      	movs	r3, #2
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	f107 030c 	add.w	r3, r7, #12
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	2302      	movs	r3, #2
 8004a64:	480a      	ldr	r0, [pc, #40]	; (8004a90 <AUDIO_I2C_Read+0x54>)
 8004a66:	f7ff ff55 	bl	8004914 <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004a6a:	89bb      	ldrh	r3, [r7, #12]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004a70:	89bb      	ldrh	r3, [r7, #12]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	b21a      	sxth	r2, r3
 8004a78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	b21b      	sxth	r3, r3
 8004a80:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 8004a82:	89fb      	ldrh	r3, [r7, #14]
 8004a84:	81bb      	strh	r3, [r7, #12]

  return read_value;
 8004a86:	89bb      	ldrh	r3, [r7, #12]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	2001ebd0 	.word	0x2001ebd0

08004a94 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	460a      	mov	r2, r1
 8004a9e:	71fb      	strb	r3, [r7, #7]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	1dbb      	adds	r3, r7, #6
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	2170      	movs	r1, #112	; 0x70
 8004ab4:	4803      	ldr	r0, [pc, #12]	; (8004ac4 <TS_I2C_Write+0x30>)
 8004ab6:	f7ff ff5a 	bl	800496e <I2Cx_WriteMultiple>

}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2001ebd0 	.word	0x2001ebd0

08004ac8 <TS_I2C_Read>:
/**
  * Reads a single control data from the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_I2C_Read(uint8_t Reg){
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]

  uint8_t read_value = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hi2c3, TS_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	2301      	movs	r3, #1
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	f107 030f 	add.w	r3, r7, #15
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	2170      	movs	r1, #112	; 0x70
 8004ae8:	4803      	ldr	r0, [pc, #12]	; (8004af8 <TS_I2C_Read+0x30>)
 8004aea:	f7ff ff13 	bl	8004914 <I2Cx_ReadMultiple>

  return read_value;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	2001ebd0 	.word	0x2001ebd0

08004afc <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <LCD_Init+0x38>)
 8004b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d002      	beq.n	8004b0e <LCD_Init+0x12>
 8004b08:	480b      	ldr	r0, [pc, #44]	; (8004b38 <LCD_Init+0x3c>)
 8004b0a:	f7fe f9ad 	bl	8002e68 <Error>

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
#endif

	LCD_DisplayOn();
 8004b0e:	f000 f819 	bl	8004b44 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8004b12:	480a      	ldr	r0, [pc, #40]	; (8004b3c <LCD_Init+0x40>)
 8004b14:	f000 f87c 	bl	8004c10 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	f000 f860 	bl	8004be0 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8004b20:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004b24:	f000 f82c 	bl	8004b80 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004b28:	4805      	ldr	r0, [pc, #20]	; (8004b40 <LCD_Init+0x44>)
 8004b2a:	f000 f841 	bl	8004bb0 <LCD_SetFillColor>


}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	2001ec1c 	.word	0x2001ec1c
 8004b38:	0801ac14 	.word	0x0801ac14
 8004b3c:	2000004c 	.word	0x2000004c
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <LCD_DisplayOn+0x30>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <LCD_DisplayOn+0x30>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b5e:	4806      	ldr	r0, [pc, #24]	; (8004b78 <LCD_DisplayOn+0x34>)
 8004b60:	f004 fb3e 	bl	80091e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004b64:	2201      	movs	r2, #1
 8004b66:	2108      	movs	r1, #8
 8004b68:	4804      	ldr	r0, [pc, #16]	; (8004b7c <LCD_DisplayOn+0x38>)
 8004b6a:	f004 fb39 	bl	80091e0 <HAL_GPIO_WritePin>
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	2001ec1c 	.word	0x2001ec1c
 8004b78:	40022000 	.word	0x40022000
 8004b7c:	40022800 	.word	0x40022800

08004b80 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8004b88:	4a07      	ldr	r2, [pc, #28]	; (8004ba8 <LCD_SetStrokeColor+0x28>)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <LCD_SetStrokeColor+0x28>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 faf4 	bl	8005180 <ARGB888ToRGB565>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <LCD_SetStrokeColor+0x2c>)
 8004b9e:	601a      	str	r2, [r3, #0]
#endif
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	2001f39c 	.word	0x2001f39c
 8004bac:	2001f3a8 	.word	0x2001f3a8

08004bb0 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8004bb8:	4a07      	ldr	r2, [pc, #28]	; (8004bd8 <LCD_SetFillColor+0x28>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 8004bbe:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <LCD_SetFillColor+0x28>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fadc 	bl	8005180 <ARGB888ToRGB565>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <LCD_SetFillColor+0x2c>)
 8004bce:	601a      	str	r2, [r3, #0]
#endif
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	2001f3a0 	.word	0x2001f3a0
 8004bdc:	2001f3ac 	.word	0x2001f3ac

08004be0 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8004be8:	4a07      	ldr	r2, [pc, #28]	; (8004c08 <LCD_SetBackColor+0x28>)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <LCD_SetBackColor+0x28>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fac4 	bl	8005180 <ARGB888ToRGB565>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <LCD_SetBackColor+0x2c>)
 8004bfe:	601a      	str	r2, [r3, #0]
#endif
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2001f3a4 	.word	0x2001f3a4
 8004c0c:	2001f3b0 	.word	0x2001f3b0

08004c10 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <LCD_SetFont+0x1c>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6013      	str	r3, [r2, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	2001f3b4 	.word	0x2001f3b4

08004c30 <LCD_DrawPixelColor>:
	__CleanDCache();

}

void LCD_DrawPixelColor(uint16_t Xpos, uint16_t Ypos, uint32_t Color8888)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	603a      	str	r2, [r7, #0]
 8004c3a:	80fb      	strh	r3, [r7, #6]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	80bb      	strh	r3, [r7, #4]
	LCD_SetStrokeColor(Color8888);
 8004c40:	6838      	ldr	r0, [r7, #0]
 8004c42:	f7ff ff9d 	bl	8004b80 <LCD_SetStrokeColor>
	__DrawPixel(Xpos, Ypos, STROKE_COLOR);
 8004c46:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <LCD_DrawPixelColor+0x40>)
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <LCD_DrawPixelColor+0x44>)
 8004c4c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004c4e:	88ba      	ldrh	r2, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	015b      	lsls	r3, r3, #5
 8004c58:	461a      	mov	r2, r3
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	440b      	add	r3, r1
 8004c62:	b282      	uxth	r2, r0
 8004c64:	801a      	strh	r2, [r3, #0]
	__CleanDCache();

}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	2001f3a8 	.word	0x2001f3a8
 8004c74:	2001ec1c 	.word	0x2001ec1c

08004c78 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	460a      	mov	r2, r1
 8004c82:	80fb      	strh	r3, [r7, #6]
 8004c84:	4613      	mov	r3, r2
 8004c86:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <LCD_ErasePixel+0x3c>)
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <LCD_ErasePixel+0x40>)
 8004c8e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004c90:	88ba      	ldrh	r2, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	015b      	lsls	r3, r3, #5
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	440b      	add	r3, r1
 8004ca4:	b282      	uxth	r2, r0
 8004ca6:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	2001f3b0 	.word	0x2001f3b0
 8004cb8:	2001ec1c 	.word	0x2001ec1c

08004cbc <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <LCD_Clear+0x28>)
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <LCD_Clear+0x2c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004cd4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004cd8:	f000 fa1a 	bl	8005110 <LL_FillBuffer>
}
 8004cdc:	bf00      	nop
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	2001ec1c 	.word	0x2001ec1c
 8004ce8:	2001f3a4 	.word	0x2001f3a4

08004cec <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8004cec:	b590      	push	{r4, r7, lr}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	80fb      	strh	r3, [r7, #6]
 8004cfe:	4603      	mov	r3, r0
 8004d00:	80bb      	strh	r3, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	70fb      	strb	r3, [r7, #3]
 8004d06:	4613      	mov	r3, r2
 8004d08:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <LCD_DrawChar+0x5c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	3b20      	subs	r3, #32
 8004d14:	490c      	ldr	r1, [pc, #48]	; (8004d48 <LCD_DrawChar+0x5c>)
 8004d16:	6809      	ldr	r1, [r1, #0]
 8004d18:	88c9      	ldrh	r1, [r1, #6]
 8004d1a:	fb03 f101 	mul.w	r1, r3, r1
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <LCD_DrawChar+0x5c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	889b      	ldrh	r3, [r3, #4]
 8004d24:	3307      	adds	r3, #7
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	da00      	bge.n	8004d2c <LCD_DrawChar+0x40>
 8004d2a:	3307      	adds	r3, #7
 8004d2c:	10db      	asrs	r3, r3, #3
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	441a      	add	r2, r3
 8004d34:	78bb      	ldrb	r3, [r7, #2]
 8004d36:	88b9      	ldrh	r1, [r7, #4]
 8004d38:	88f8      	ldrh	r0, [r7, #6]
 8004d3a:	f000 f941 	bl	8004fc0 <DrawChar>

}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd90      	pop	{r4, r7, pc}
 8004d46:	bf00      	nop
 8004d48:	2001f3b4 	.word	0x2001f3b4

08004d4c <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60ba      	str	r2, [r7, #8]
 8004d54:	461a      	mov	r2, r3
 8004d56:	4603      	mov	r3, r0
 8004d58:	81fb      	strh	r3, [r7, #14]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	81bb      	strh	r3, [r7, #12]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8004d62:	2301      	movs	r3, #1
 8004d64:	83fb      	strh	r3, [r7, #30]
 8004d66:	2300      	movs	r3, #0
 8004d68:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 8004d76:	e002      	b.n	8004d7e <LCD_DrawString+0x32>
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	617a      	str	r2, [r7, #20]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f6      	bne.n	8004d78 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <LCD_DrawString+0x128>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	889b      	ldrh	r3, [r3, #4]
 8004d90:	461a      	mov	r2, r3
 8004d92:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d014      	beq.n	8004dcc <LCD_DrawString+0x80>
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	dc23      	bgt.n	8004dee <LCD_DrawString+0xa2>
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d002      	beq.n	8004db0 <LCD_DrawString+0x64>
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d011      	beq.n	8004dd2 <LCD_DrawString+0x86>
 8004dae:	e01e      	b.n	8004dee <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	4a2f      	ldr	r2, [pc, #188]	; (8004e74 <LCD_DrawString+0x128>)
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	8892      	ldrh	r2, [r2, #4]
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	89fb      	ldrh	r3, [r7, #14]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	83fb      	strh	r3, [r7, #30]
		break;
 8004dca:	e013      	b.n	8004df4 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8004dcc:	89fb      	ldrh	r3, [r7, #14]
 8004dce:	83fb      	strh	r3, [r7, #30]
		break;
 8004dd0:	e010      	b.n	8004df4 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	4b26      	ldr	r3, [pc, #152]	; (8004e74 <LCD_DrawString+0x128>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	889b      	ldrh	r3, [r3, #4]
 8004de0:	fb12 f303 	smulbb	r3, r2, r3
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	89fb      	ldrh	r3, [r7, #14]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	83fb      	strh	r3, [r7, #30]
		break;
 8004dec:	e002      	b.n	8004df4 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8004dee:	89fb      	ldrh	r3, [r7, #14]
 8004df0:	83fb      	strh	r3, [r7, #30]
		break;
 8004df2:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8004df4:	8bfb      	ldrh	r3, [r7, #30]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <LCD_DrawString+0xb6>
 8004dfa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da16      	bge.n	8004e30 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004e06:	e013      	b.n	8004e30 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e10:	89b9      	ldrh	r1, [r7, #12]
 8004e12:	8bf8      	ldrh	r0, [r7, #30]
 8004e14:	f7ff ff6a 	bl	8004cec <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <LCD_DrawString+0x128>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	889a      	ldrh	r2, [r3, #4]
 8004e1e:	8bfb      	ldrh	r3, [r7, #30]
 8004e20:	4413      	add	r3, r2
 8004e22:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	3301      	adds	r3, #1
 8004e28:	60bb      	str	r3, [r7, #8]
		i++;
 8004e2a:	8bbb      	ldrh	r3, [r7, #28]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf14      	ite	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	2300      	moveq	r3, #0
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	8bbb      	ldrh	r3, [r7, #28]
 8004e40:	490c      	ldr	r1, [pc, #48]	; (8004e74 <LCD_DrawString+0x128>)
 8004e42:	6809      	ldr	r1, [r1, #0]
 8004e44:	8889      	ldrh	r1, [r1, #4]
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	4908      	ldr	r1, [pc, #32]	; (8004e74 <LCD_DrawString+0x128>)
 8004e52:	6809      	ldr	r1, [r1, #0]
 8004e54:	8889      	ldrh	r1, [r1, #4]
 8004e56:	428b      	cmp	r3, r1
 8004e58:	bfac      	ite	ge
 8004e5a:	2301      	movge	r3, #1
 8004e5c:	2300      	movlt	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	4013      	ands	r3, r2
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1cf      	bne.n	8004e08 <LCD_DrawString+0xbc>
	}
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2001f3b4 	.word	0x2001f3b4

08004e78 <LCD_DrawRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4623      	mov	r3, r4
 8004e88:	80fb      	strh	r3, [r7, #6]
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	80bb      	strh	r3, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	807b      	strh	r3, [r7, #2]
 8004e92:	4613      	mov	r3, r2
 8004e94:	803b      	strh	r3, [r7, #0]

	/* Draw horizontal lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), Width, 1, 0, StrokeColor);
 8004e96:	4b2f      	ldr	r3, [pc, #188]	; (8004f54 <LCD_DrawRect+0xdc>)
 8004e98:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004e9a:	88ba      	ldrh	r2, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	015b      	lsls	r3, r3, #5
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	440b      	add	r3, r1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	8879      	ldrh	r1, [r7, #2]
 8004eb2:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <LCD_DrawRect+0xe0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f000 f928 	bl	8005110 <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, (Ypos+Height)), Width, 1, 0, StrokeColor);
 8004ec0:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <LCD_DrawRect+0xdc>)
 8004ec2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004ec4:	88ba      	ldrh	r2, [r7, #4]
 8004ec6:	883b      	ldrh	r3, [r7, #0]
 8004ec8:	441a      	add	r2, r3
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	015b      	lsls	r3, r3, #5
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	88fb      	ldrh	r3, [r7, #6]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	440b      	add	r3, r1
 8004edc:	4618      	mov	r0, r3
 8004ede:	8879      	ldrh	r1, [r7, #2]
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <LCD_DrawRect+0xe0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f000 f911 	bl	8005110 <LL_FillBuffer>

	/* Draw vertical lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 8004eee:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <LCD_DrawRect+0xdc>)
 8004ef0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004ef2:	88ba      	ldrh	r2, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	015b      	lsls	r3, r3, #5
 8004efc:	461a      	mov	r2, r3
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	4413      	add	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	440b      	add	r3, r1
 8004f06:	4618      	mov	r0, r3
 8004f08:	883a      	ldrh	r2, [r7, #0]
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <LCD_DrawRect+0xe0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	f240 13df 	movw	r3, #479	; 0x1df
 8004f14:	2101      	movs	r1, #1
 8004f16:	f000 f8fb 	bl	8005110 <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress((Xpos+Width), Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <LCD_DrawRect+0xdc>)
 8004f1c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004f1e:	88ba      	ldrh	r2, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	015b      	lsls	r3, r3, #5
 8004f28:	4618      	mov	r0, r3
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	887b      	ldrh	r3, [r7, #2]
 8004f2e:	4413      	add	r3, r2
 8004f30:	4403      	add	r3, r0
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	440b      	add	r3, r1
 8004f36:	4618      	mov	r0, r3
 8004f38:	883a      	ldrh	r2, [r7, #0]
 8004f3a:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <LCD_DrawRect+0xe0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	f240 13df 	movw	r3, #479	; 0x1df
 8004f44:	2101      	movs	r1, #1
 8004f46:	f000 f8e3 	bl	8005110 <LL_FillBuffer>

	__CleanDCache();
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd90      	pop	{r4, r7, pc}
 8004f52:	bf00      	nop
 8004f54:	2001ec1c 	.word	0x2001ec1c
 8004f58:	2001f39c 	.word	0x2001f39c

08004f5c <LCD_FillRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	80fb      	strh	r3, [r7, #6]
 8004f6e:	4603      	mov	r3, r0
 8004f70:	80bb      	strh	r3, [r7, #4]
 8004f72:	460b      	mov	r3, r1
 8004f74:	807b      	strh	r3, [r7, #2]
 8004f76:	4613      	mov	r3, r2
 8004f78:	803b      	strh	r3, [r7, #0]
	uint32_t  x_address = __GetAddress(Xpos, Ypos);
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <LCD_FillRect+0x5c>)
 8004f7c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004f7e:	88ba      	ldrh	r2, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	015b      	lsls	r3, r3, #5
 8004f88:	461a      	mov	r2, r3
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	440b      	add	r3, r1
 8004f92:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	LL_FillBuffer((uint32_t *)x_address, Width, Height, (LCD_SCREEN_WIDTH - Width), FillColor);
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	8879      	ldrh	r1, [r7, #2]
 8004f98:	883a      	ldrh	r2, [r7, #0]
 8004f9a:	887b      	ldrh	r3, [r7, #2]
 8004f9c:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <LCD_FillRect+0x60>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4623      	mov	r3, r4
 8004faa:	f000 f8b1 	bl	8005110 <LL_FillBuffer>
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd90      	pop	{r4, r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	2001ec1c 	.word	0x2001ec1c
 8004fbc:	2001f3a0 	.word	0x2001f3a0

08004fc0 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b08b      	sub	sp, #44	; 0x2c
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60ba      	str	r2, [r7, #8]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	81fb      	strh	r3, [r7, #14]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	81bb      	strh	r3, [r7, #12]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fda:	2300      	movs	r3, #0
 8004fdc:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 8004fde:	4b49      	ldr	r3, [pc, #292]	; (8005104 <DrawChar+0x144>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	88db      	ldrh	r3, [r3, #6]
 8004fe4:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 8004fe6:	4b47      	ldr	r3, [pc, #284]	; (8005104 <DrawChar+0x144>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	889b      	ldrh	r3, [r3, #4]
 8004fec:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 8004fee:	8b3b      	ldrh	r3, [r7, #24]
 8004ff0:	3307      	adds	r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da00      	bge.n	8004ff8 <DrawChar+0x38>
 8004ff6:	3307      	adds	r3, #7
 8004ff8:	10db      	asrs	r3, r3, #3
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	8b3b      	ldrh	r3, [r7, #24]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 8005008:	2300      	movs	r3, #0
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
 800500c:	e070      	b.n	80050f0 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800500e:	8b3b      	ldrh	r3, [r7, #24]
 8005010:	3307      	adds	r3, #7
 8005012:	2b00      	cmp	r3, #0
 8005014:	da00      	bge.n	8005018 <DrawChar+0x58>
 8005016:	3307      	adds	r3, #7
 8005018:	10db      	asrs	r3, r3, #3
 800501a:	461a      	mov	r2, r3
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4413      	add	r3, r2
 8005026:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8005028:	8b3b      	ldrh	r3, [r7, #24]
 800502a:	3307      	adds	r3, #7
 800502c:	2b00      	cmp	r3, #0
 800502e:	da00      	bge.n	8005032 <DrawChar+0x72>
 8005030:	3307      	adds	r3, #7
 8005032:	10db      	asrs	r3, r3, #3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d002      	beq.n	800503e <DrawChar+0x7e>
 8005038:	2b02      	cmp	r3, #2
 800503a:	d004      	beq.n	8005046 <DrawChar+0x86>
 800503c:	e00c      	b.n	8005058 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	61fb      	str	r3, [r7, #28]
			break;
 8005044:	e016      	b.n	8005074 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	3201      	adds	r2, #1
 8005050:	7812      	ldrb	r2, [r2, #0]
 8005052:	4313      	orrs	r3, r2
 8005054:	61fb      	str	r3, [r7, #28]
			break;
 8005056:	e00d      	b.n	8005074 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	041a      	lsls	r2, r3, #16
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3301      	adds	r3, #1
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	4313      	orrs	r3, r2
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	3202      	adds	r2, #2
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	4313      	orrs	r3, r2
 8005070:	61fb      	str	r3, [r7, #28]
			break;
 8005072:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8005074:	2300      	movs	r3, #0
 8005076:	623b      	str	r3, [r7, #32]
 8005078:	e030      	b.n	80050dc <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 800507a:	8b3a      	ldrh	r2, [r7, #24]
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	4413      	add	r3, r2
 8005084:	3b01      	subs	r3, #1
 8005086:	2201      	movs	r2, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	461a      	mov	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4013      	ands	r3, r2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d012      	beq.n	80050bc <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 8005096:	4b1c      	ldr	r3, [pc, #112]	; (8005108 <DrawChar+0x148>)
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <DrawChar+0x14c>)
 800509c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800509e:	89ba      	ldrh	r2, [r7, #12]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	015b      	lsls	r3, r3, #5
 80050a8:	461c      	mov	r4, r3
 80050aa:	89fa      	ldrh	r2, [r7, #14]
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	4413      	add	r3, r2
 80050b0:	4423      	add	r3, r4
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	440b      	add	r3, r1
 80050b6:	b282      	uxth	r2, r0
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	e00c      	b.n	80050d6 <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d109      	bne.n	80050d6 <DrawChar+0x116>
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	89fb      	ldrh	r3, [r7, #14]
 80050c8:	4413      	add	r3, r2
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	89ba      	ldrh	r2, [r7, #12]
 80050ce:	4611      	mov	r1, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fdd1 	bl	8004c78 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	3301      	adds	r3, #1
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	8b3b      	ldrh	r3, [r7, #24]
 80050de:	6a3a      	ldr	r2, [r7, #32]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d3ca      	bcc.n	800507a <DrawChar+0xba>
			}
		}
		Ypos++;
 80050e4:	89bb      	ldrh	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	3301      	adds	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
 80050f0:	8b7b      	ldrh	r3, [r7, #26]
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d38a      	bcc.n	800500e <DrawChar+0x4e>
	}

	__CleanDCache();
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	372c      	adds	r7, #44	; 0x2c
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd90      	pop	{r4, r7, pc}
 8005102:	bf00      	nop
 8005104:	2001f3b4 	.word	0x2001f3b4
 8005108:	2001f3a8 	.word	0x2001f3a8
 800510c:	2001ec1c 	.word	0x2001ec1c

08005110 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 800511e:	4b16      	ldr	r3, [pc, #88]	; (8005178 <LL_FillBuffer+0x68>)
 8005120:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005124:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8005126:	4b14      	ldr	r3, [pc, #80]	; (8005178 <LL_FillBuffer+0x68>)
 8005128:	2202      	movs	r2, #2
 800512a:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 800512c:	4a12      	ldr	r2, [pc, #72]	; (8005178 <LL_FillBuffer+0x68>)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8005132:	4b11      	ldr	r3, [pc, #68]	; (8005178 <LL_FillBuffer+0x68>)
 8005134:	4a11      	ldr	r2, [pc, #68]	; (800517c <LL_FillBuffer+0x6c>)
 8005136:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8005138:	480f      	ldr	r0, [pc, #60]	; (8005178 <LL_FillBuffer+0x68>)
 800513a:	f003 f9e5 	bl	8008508 <HAL_DMA2D_Init>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d115      	bne.n	8005170 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8005144:	2100      	movs	r1, #0
 8005146:	480c      	ldr	r0, [pc, #48]	; (8005178 <LL_FillBuffer+0x68>)
 8005148:	f003 fc4c 	bl	80089e4 <HAL_DMA2D_ConfigLayer>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10e      	bne.n	8005170 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	69b9      	ldr	r1, [r7, #24]
 800515c:	4806      	ldr	r0, [pc, #24]	; (8005178 <LL_FillBuffer+0x68>)
 800515e:	f003 fa1d 	bl	800859c <HAL_DMA2D_Start>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8005168:	210a      	movs	r1, #10
 800516a:	4803      	ldr	r0, [pc, #12]	; (8005178 <LL_FillBuffer+0x68>)
 800516c:	f003 fa41 	bl	80085f2 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	2001eb44 	.word	0x2001eb44
 800517c:	4002b000 	.word	0x4002b000

08005180 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	0c1b      	lsrs	r3, r3, #16
 800518c:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	0a1b      	lsrs	r3, r3, #8
 8005192:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8005198:	7d7b      	ldrb	r3, [r7, #21]
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 80051a6:	7dbb      	ldrb	r3, [r7, #22]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	015b      	lsls	r3, r3, #5
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80051b4:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	08db      	lsrs	r3, r3, #3
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	02db      	lsls	r3, r3, #11
 80051be:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 80051c0:	89fa      	ldrh	r2, [r7, #14]
 80051c2:	8a3b      	ldrh	r3, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	8a7b      	ldrh	r3, [r7, #18]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	b29b      	uxth	r3, r3
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b090      	sub	sp, #64	; 0x40
 80051e0:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80051e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80051e8:	23eb      	movs	r3, #235	; 0xeb
 80051ea:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80051ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80051f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051f6:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80051fc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8005202:	230a      	movs	r3, #10
 8005204:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800520a:	2300      	movs	r3, #0
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800520e:	2300      	movs	r3, #0
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800521a:	463a      	mov	r2, r7
 800521c:	f107 0308 	add.w	r3, r7, #8
 8005220:	4619      	mov	r1, r3
 8005222:	4806      	ldr	r0, [pc, #24]	; (800523c <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8005224:	f007 fa8c 	bl	800c740 <HAL_QSPI_MemoryMapped>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3740      	adds	r7, #64	; 0x40
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	2001ecc4 	.word	0x2001ecc4

08005240 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b090      	sub	sp, #64	; 0x40
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800524c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 800524e:	2366      	movs	r3, #102	; 0x66
 8005250:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005256:	2300      	movs	r3, #0
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800525a:	2300      	movs	r3, #0
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005262:	2300      	movs	r3, #0
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005266:	2300      	movs	r3, #0
 8005268:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800526a:	2300      	movs	r3, #0
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800526e:	f107 0308 	add.w	r3, r7, #8
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f007 f853 	bl	800c324 <HAL_QSPI_Command>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e019      	b.n	80052bc <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8005288:	2399      	movs	r3, #153	; 0x99
 800528a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800528c:	f107 0308 	add.w	r3, r7, #8
 8005290:	f241 3288 	movw	r2, #5000	; 0x1388
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f007 f844 	bl	800c324 <HAL_QSPI_Command>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e00a      	b.n	80052bc <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8c7 	bl	800543e <QSPI_AutoPollingMemReady>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3740      	adds	r7, #64	; 0x40
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b094      	sub	sp, #80	; 0x50
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80052cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80052d2:	2385      	movs	r3, #133	; 0x85
 80052d4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80052da:	2300      	movs	r3, #0
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80052de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80052e8:	2301      	movs	r3, #1
 80052ea:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80052ec:	2300      	movs	r3, #0
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80052f0:	2300      	movs	r3, #0
 80052f2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80052f4:	2300      	movs	r3, #0
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052f8:	f107 0310 	add.w	r3, r7, #16
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f007 f80e 	bl	800c324 <HAL_QSPI_Command>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e048      	b.n	80053a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005312:	f107 030f 	add.w	r3, r7, #15
 8005316:	f241 3288 	movw	r2, #5000	; 0x1388
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f007 f8f6 	bl	800c50e <HAL_QSPI_Receive>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e03b      	b.n	80053a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f83d 	bl	80053ac <QSPI_WriteEnable>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e033      	b.n	80053a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 800533c:	2381      	movs	r3, #129	; 0x81
 800533e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	b25b      	sxtb	r3, r3
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	b25a      	sxtb	r2, r3
 800534a:	23f0      	movs	r3, #240	; 0xf0
 800534c:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005350:	fa93 f3a3 	rbit	r3, r3
 8005354:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005358:	fab3 f383 	clz	r3, r3
 800535c:	b2db      	uxtb	r3, r3
 800535e:	4619      	mov	r1, r3
 8005360:	230a      	movs	r3, #10
 8005362:	408b      	lsls	r3, r1
 8005364:	b25b      	sxtb	r3, r3
 8005366:	4313      	orrs	r3, r2
 8005368:	b25b      	sxtb	r3, r3
 800536a:	b2db      	uxtb	r3, r3
 800536c:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800536e:	f107 0310 	add.w	r3, r7, #16
 8005372:	f241 3288 	movw	r2, #5000	; 0x1388
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f006 ffd3 	bl	800c324 <HAL_QSPI_Command>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e00d      	b.n	80053a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005388:	f107 030f 	add.w	r3, r7, #15
 800538c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f007 f824 	bl	800c3e0 <HAL_QSPI_Transmit>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3750      	adds	r7, #80	; 0x50
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b096      	sub	sp, #88	; 0x58
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80053b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80053ba:	2306      	movs	r3, #6
 80053bc:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80053be:	2300      	movs	r3, #0
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80053d2:	2300      	movs	r3, #0
 80053d4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80053d6:	2300      	movs	r3, #0
 80053d8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053da:	f107 0320 	add.w	r3, r7, #32
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f006 ff9d 	bl	800c324 <HAL_QSPI_Command>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e020      	b.n	8005436 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 80053f4:	2302      	movs	r3, #2
 80053f6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 80053f8:	2302      	movs	r3, #2
 80053fa:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8005400:	2301      	movs	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005404:	2310      	movs	r3, #16
 8005406:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005408:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800540c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 800540e:	2305      	movs	r3, #5
 8005410:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8005412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005416:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005418:	f107 0208 	add.w	r2, r7, #8
 800541c:	f107 0120 	add.w	r1, r7, #32
 8005420:	f241 3388 	movw	r3, #5000	; 0x1388
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f007 f914 	bl	800c652 <HAL_QSPI_AutoPolling>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3758      	adds	r7, #88	; 0x58
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b096      	sub	sp, #88	; 0x58
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800544c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800544e:	2305      	movs	r3, #5
 8005450:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005452:	2300      	movs	r3, #0
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005456:	2300      	movs	r3, #0
 8005458:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800545a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800545e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005464:	2300      	movs	r3, #0
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005468:	2300      	movs	r3, #0
 800546a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800546c:	2300      	movs	r3, #0
 800546e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8005474:	2301      	movs	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005478:	2300      	movs	r3, #0
 800547a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800547c:	2301      	movs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005480:	2310      	movs	r3, #16
 8005482:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005484:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005488:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800548a:	f107 0208 	add.w	r2, r7, #8
 800548e:	f107 0120 	add.w	r1, r7, #32
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f007 f8dc 	bl	800c652 <HAL_QSPI_AutoPolling>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3758      	adds	r7, #88	; 0x58
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 80054be:	887b      	ldrh	r3, [r7, #2]
 80054c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c4:	d005      	beq.n	80054d2 <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80054c6:	887b      	ldrh	r3, [r7, #2]
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054cc:	d001      	beq.n	80054d2 <start_Audio_Processing+0x22>
		Error_Handler();
 80054ce:	f7fd fd1d 	bl	8002f0c <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <start_Audio_Processing+0xb4>)
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	4a23      	ldr	r2, [pc, #140]	; (8005564 <start_Audio_Processing+0xb4>)
 80054d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054dc:	6453      	str	r3, [r2, #68]	; 0x44
 80054de:	4b21      	ldr	r3, [pc, #132]	; (8005564 <start_Audio_Processing+0xb4>)
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 80054ea:	2034      	movs	r0, #52	; 0x34
 80054ec:	f001 fb6c 	bl	8006bc8 <wm8994_ReadID>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f648 1294 	movw	r2, #35220	; 0x8994
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d001      	beq.n	80054fe <start_Audio_Processing+0x4e>
 80054fa:	f7fd fd07 	bl	8002f0c <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 80054fe:	2034      	movs	r0, #52	; 0x34
 8005500:	f001 fce4 	bl	8006ecc <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8005504:	887b      	ldrh	r3, [r7, #2]
 8005506:	f043 0302 	orr.w	r3, r3, #2
 800550a:	b299      	uxth	r1, r3
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	2264      	movs	r2, #100	; 0x64
 8005510:	2034      	movs	r0, #52	; 0x34
 8005512:	f000 fc9f 	bl	8005e54 <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 8005516:	887b      	ldrh	r3, [r7, #2]
 8005518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800551c:	d104      	bne.n	8005528 <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 800551e:	214b      	movs	r1, #75	; 0x4b
 8005520:	2034      	movs	r0, #52	; 0x34
 8005522:	f001 fb61 	bl	8006be8 <wm8994_SetVolume>
 8005526:	e007      	b.n	8005538 <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8005528:	887b      	ldrh	r3, [r7, #2]
 800552a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552e:	d103      	bne.n	8005538 <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 8005530:	21c8      	movs	r1, #200	; 0xc8
 8005532:	2034      	movs	r0, #52	; 0x34
 8005534:	f001 fb58 	bl	8006be8 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 8005538:	2100      	movs	r1, #0
 800553a:	2034      	movs	r0, #52	; 0x34
 800553c:	f001 fc78 	bl	8006e30 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4807      	ldr	r0, [pc, #28]	; (8005568 <start_Audio_Processing+0xb8>)
 800554a:	f009 fc69 	bl	800ee20 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	b29b      	uxth	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	4805      	ldr	r0, [pc, #20]	; (800556c <start_Audio_Processing+0xbc>)
 8005558:	f009 fbb2 	bl	800ecc0 <HAL_SAI_Transmit_DMA>

}
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40023800 	.word	0x40023800
 8005568:	2001edb4 	.word	0x2001edb4
 800556c:	2001ed30 	.word	0x2001ed30

08005570 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <HAL_SAI_ErrorCallback+0x30>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d103      	bne.n	80055b0 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 80055a8:	4808      	ldr	r0, [pc, #32]	; (80055cc <HAL_SAI_ErrorCallback+0x34>)
 80055aa:	f014 f9f3 	bl	8019994 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 80055ae:	e006      	b.n	80055be <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <HAL_SAI_ErrorCallback+0x38>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d102      	bne.n	80055be <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 80055b8:	4806      	ldr	r0, [pc, #24]	; (80055d4 <HAL_SAI_ErrorCallback+0x3c>)
 80055ba:	f014 f9eb 	bl	8019994 <puts>
}
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	2001ed30 	.word	0x2001ed30
 80055cc:	0801ac64 	.word	0x0801ac64
 80055d0:	2001edb4 	.word	0x2001edb4
 80055d4:	0801ac74 	.word	0x0801ac74

080055d8 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80055e4:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80055ea:	4b29      	ldr	r3, [pc, #164]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055ec:	2210      	movs	r2, #16
 80055ee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80055f0:	4b27      	ldr	r3, [pc, #156]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80055f6:	4b26      	ldr	r3, [pc, #152]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80055fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005600:	4923      	ldr	r1, [pc, #140]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005602:	4824      	ldr	r0, [pc, #144]	; (8005694 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005604:	f00a fe8b 	bl	801031e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005608:	2001      	movs	r0, #1
 800560a:	f001 fcf7 	bl	8006ffc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005610:	2202      	movs	r2, #2
 8005612:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005614:	4b1e      	ldr	r3, [pc, #120]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005616:	2210      	movs	r2, #16
 8005618:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800561c:	2201      	movs	r2, #1
 800561e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005620:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005622:	2200      	movs	r2, #0
 8005624:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800562a:	4919      	ldr	r1, [pc, #100]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800562c:	4819      	ldr	r0, [pc, #100]	; (8005694 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 800562e:	f00a fe76 	bl	801031e <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005632:	4b17      	ldr	r3, [pc, #92]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005634:	2203      	movs	r2, #3
 8005636:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005638:	4b15      	ldr	r3, [pc, #84]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800563a:	2210      	movs	r2, #16
 800563c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800563e:	4b14      	ldr	r3, [pc, #80]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005640:	2208      	movs	r2, #8
 8005642:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005644:	4b12      	ldr	r3, [pc, #72]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005646:	2200      	movs	r2, #0
 8005648:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800564a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800564e:	4910      	ldr	r1, [pc, #64]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005650:	4810      	ldr	r0, [pc, #64]	; (8005694 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005652:	f00a fe64 	bl	801031e <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005656:	f44f 7308 	mov.w	r3, #544	; 0x220
 800565a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800565e:	2204      	movs	r2, #4
 8005660:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005662:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005664:	2210      	movs	r2, #16
 8005666:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800566a:	2201      	movs	r2, #1
 800566c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4a07      	ldr	r2, [pc, #28]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005672:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005678:	4905      	ldr	r1, [pc, #20]	; (8005690 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800567a:	4806      	ldr	r0, [pc, #24]	; (8005694 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 800567c:	f00a fe4f 	bl	801031e <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	4804      	ldr	r0, [pc, #16]	; (8005694 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005684:	f00a fe76 	bl	8010374 <HAL_SDRAM_ProgramRefreshRate>
}
 8005688:	bf00      	nop
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	2001f3b8 	.word	0x2001f3b8
 8005694:	2001f2f8 	.word	0x2001f2f8

08005698 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 800569c:	20c8      	movs	r0, #200	; 0xc8
 800569e:	f001 fcad 	bl	8006ffc <HAL_Delay>

	TS_DisableIT();
 80056a2:	f000 faa9 	bl	8005bf8 <TS_DisableIT>

}
 80056a6:	bf00      	nop
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <TS_GetState>:
 * @brief  Returns status and positions of the touch screen.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_GetState(TS_StateTypeDef *TS_State)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b096      	sub	sp, #88	; 0x58
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
	static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
	uint8_t ts_status = TS_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint16_t brute_x[TS_MAX_NB_TOUCH];
	uint16_t brute_y[TS_MAX_NB_TOUCH];
	uint16_t x_diff;
	uint16_t y_diff;
	uint32_t index;
	uint32_t weight = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
	uint32_t area = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
	uint32_t event = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]

	/* Read register FT5336_TD_STAT_REG to check number of touches detection */
	volatile uint8_t nbTouch = TS_I2C_Read(FT5336_TD_STAT_REG) & FT5336_TD_STAT_MASK;
 80056c6:	2002      	movs	r0, #2
 80056c8:	f7ff f9fe 	bl	8004ac8 <TS_I2C_Read>
 80056cc:	4603      	mov	r3, r0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	73fb      	strb	r3, [r7, #15]

	if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH){
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d901      	bls.n	80056e4 <TS_GetState+0x38>
		/* If invalid number of touch detected, set it to zero */
		nbTouch = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	73fb      	strb	r3, [r7, #15]
	}

	/* Update current number of active touches */
	currActiveTouchNb = nbTouch;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	4b8e      	ldr	r3, [pc, #568]	; (8005924 <TS_GetState+0x278>)
 80056ea:	701a      	strb	r2, [r3, #0]

	/* Reset current active touch index on which to work on */
	currActiveTouchIdx = 0;
 80056ec:	4b8e      	ldr	r3, [pc, #568]	; (8005928 <TS_GetState+0x27c>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]

	/* Check and update the number of touches active detected */
	TS_State->touchDetected = nbTouch; // ft5336_TS_DetectTouch();
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	701a      	strb	r2, [r3, #0]

	if(TS_State->touchDetected)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 810a 	beq.w	8005918 <TS_GetState+0x26c>
	{
		for(index=0; index < TS_State->touchDetected; index++)
 8005704:	2300      	movs	r3, #0
 8005706:	653b      	str	r3, [r7, #80]	; 0x50
 8005708:	e0f9      	b.n	80058fe <TS_GetState+0x252>
		{
			/* Get each touch coordinates */
			TS_GetXY(&(brute_x[index]), &(brute_y[index]));
 800570a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	18d0      	adds	r0, r2, r3
 8005714:	f107 021c 	add.w	r2, r7, #28
 8005718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4413      	add	r3, r2
 800571e:	4619      	mov	r1, r3
 8005720:	f000 f982 	bl	8005a28 <TS_GetXY>
				y[index] = 4096 - brute_y[index];
			}

			if(TS_ORIENTATION & TS_SWAP_XY)
			{
				y[index] = brute_x[index];
 8005724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	3358      	adds	r3, #88	; 0x58
 800572a:	443b      	add	r3, r7
 800572c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	3358      	adds	r3, #88	; 0x58
 8005736:	443b      	add	r3, r7
 8005738:	f823 2c24 	strh.w	r2, [r3, #-36]
				x[index] = brute_y[index];
 800573c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	3358      	adds	r3, #88	; 0x58
 8005742:	443b      	add	r3, r7
 8005744:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	3358      	adds	r3, #88	; 0x58
 800574e:	443b      	add	r3, r7
 8005750:	f823 2c18 	strh.w	r2, [r3, #-24]
			}

			x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	3358      	adds	r3, #88	; 0x58
 800575a:	443b      	add	r3, r7
 800575c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005760:	4619      	mov	r1, r3
 8005762:	4a72      	ldr	r2, [pc, #456]	; (800592c <TS_GetState+0x280>)
 8005764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576a:	4299      	cmp	r1, r3
 800576c:	d90d      	bls.n	800578a <TS_GetState+0xde>
 800576e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	3358      	adds	r3, #88	; 0x58
 8005774:	443b      	add	r3, r7
 8005776:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800577a:	496c      	ldr	r1, [pc, #432]	; (800592c <TS_GetState+0x280>)
 800577c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005782:	b29b      	uxth	r3, r3
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	b29b      	uxth	r3, r3
 8005788:	e00c      	b.n	80057a4 <TS_GetState+0xf8>
 800578a:	4a68      	ldr	r2, [pc, #416]	; (800592c <TS_GetState+0x280>)
 800578c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005792:	b29a      	uxth	r2, r3
 8005794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	3358      	adds	r3, #88	; 0x58
 800579a:	443b      	add	r3, r7
 800579c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80057a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	3358      	adds	r3, #88	; 0x58
 80057ae:	443b      	add	r3, r7
 80057b0:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80057b4:	4619      	mov	r1, r3
 80057b6:	4a5e      	ldr	r2, [pc, #376]	; (8005930 <TS_GetState+0x284>)
 80057b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057be:	4299      	cmp	r1, r3
 80057c0:	d90d      	bls.n	80057de <TS_GetState+0x132>
 80057c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	3358      	adds	r3, #88	; 0x58
 80057c8:	443b      	add	r3, r7
 80057ca:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80057ce:	4958      	ldr	r1, [pc, #352]	; (8005930 <TS_GetState+0x284>)
 80057d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	b29b      	uxth	r3, r3
 80057dc:	e00c      	b.n	80057f8 <TS_GetState+0x14c>
 80057de:	4a54      	ldr	r2, [pc, #336]	; (8005930 <TS_GetState+0x284>)
 80057e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	3358      	adds	r3, #88	; 0x58
 80057ee:	443b      	add	r3, r7
 80057f0:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			if ((x_diff + y_diff) > 5)
 80057fc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8005800:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005804:	4413      	add	r3, r2
 8005806:	2b05      	cmp	r3, #5
 8005808:	dd15      	ble.n	8005836 <TS_GetState+0x18a>
			{
				_x[index] = x[index];
 800580a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	3358      	adds	r3, #88	; 0x58
 8005810:	443b      	add	r3, r7
 8005812:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005816:	4619      	mov	r1, r3
 8005818:	4a44      	ldr	r2, [pc, #272]	; (800592c <TS_GetState+0x280>)
 800581a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				_y[index] = y[index];
 8005820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	3358      	adds	r3, #88	; 0x58
 8005826:	443b      	add	r3, r7
 8005828:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800582c:	4619      	mov	r1, r3
 800582e:	4a40      	ldr	r2, [pc, #256]	; (8005930 <TS_GetState+0x284>)
 8005830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			TS_State->touchX[index] = x[index];
 8005836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	3358      	adds	r3, #88	; 0x58
 800583c:	443b      	add	r3, r7
 800583e:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	460a      	mov	r2, r1
 800584c:	805a      	strh	r2, [r3, #2]
			TS_State->touchY[index] = y[index];
 800584e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	3358      	adds	r3, #88	; 0x58
 8005854:	443b      	add	r3, r7
 8005856:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585e:	3304      	adds	r3, #4
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	460a      	mov	r2, r1
 8005866:	809a      	strh	r2, [r3, #4]

			/* Get touch info related to the current touch */
			TS_GetTouchInfo(index, &weight, &area, &event);
 8005868:	f107 0310 	add.w	r3, r7, #16
 800586c:	f107 0214 	add.w	r2, r7, #20
 8005870:	f107 0118 	add.w	r1, r7, #24
 8005874:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005876:	f000 f9cf 	bl	8005c18 <TS_GetTouchInfo>

			/* Update TS_State structure */
			TS_State->touchWeight[index] = weight;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	b2d9      	uxtb	r1, r3
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005882:	4413      	add	r3, r2
 8005884:	3316      	adds	r3, #22
 8005886:	460a      	mov	r2, r1
 8005888:	701a      	strb	r2, [r3, #0]
			TS_State->touchArea[index]   = area;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	b2d9      	uxtb	r1, r3
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005892:	4413      	add	r3, r2
 8005894:	3320      	adds	r3, #32
 8005896:	460a      	mov	r2, r1
 8005898:	701a      	strb	r2, [r3, #0]

			/* Remap touch event */
			switch(event)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d827      	bhi.n	80058f0 <TS_GetState+0x244>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <TS_GetState+0x1fc>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058b9 	.word	0x080058b9
 80058ac:	080058c7 	.word	0x080058c7
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058e3 	.word	0x080058e3
			{
			case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
				TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058bc:	4413      	add	r3, r2
 80058be:	331b      	adds	r3, #27
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
				break;
 80058c4:	e018      	b.n	80058f8 <TS_GetState+0x24c>
			case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
				TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ca:	4413      	add	r3, r2
 80058cc:	331b      	adds	r3, #27
 80058ce:	2202      	movs	r2, #2
 80058d0:	701a      	strb	r2, [r3, #0]
				break;
 80058d2:	e011      	b.n	80058f8 <TS_GetState+0x24c>
			case FT5336_TOUCH_EVT_FLAG_CONTACT :
				TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d8:	4413      	add	r3, r2
 80058da:	331b      	adds	r3, #27
 80058dc:	2203      	movs	r2, #3
 80058de:	701a      	strb	r2, [r3, #0]
				break;
 80058e0:	e00a      	b.n	80058f8 <TS_GetState+0x24c>
			case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
				TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e6:	4413      	add	r3, r2
 80058e8:	331b      	adds	r3, #27
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
				break;
 80058ee:	e003      	b.n	80058f8 <TS_GetState+0x24c>
			default :
				ts_status = TS_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80058f6:	bf00      	nop
		for(index=0; index < TS_State->touchDetected; index++)
 80058f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fa:	3301      	adds	r3, #1
 80058fc:	653b      	str	r3, [r7, #80]	; 0x50
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005906:	4293      	cmp	r3, r2
 8005908:	f4ff aeff 	bcc.w	800570a <TS_GetState+0x5e>


		} /* of for(index=0; index < TS_State->touchDetected; index++) */

		/* Get gesture Id */
		ts_status = TS_Get_GestureId(TS_State);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f811 	bl	8005934 <TS_Get_GestureId>
 8005912:	4603      	mov	r3, r0
 8005914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	} /* end of if(TS_State->touchDetected != 0) */

	return (ts_status);
 8005918:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800591c:	4618      	mov	r0, r3
 800591e:	3758      	adds	r7, #88	; 0x58
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	2001f3c8 	.word	0x2001f3c8
 8005928:	2001f3c9 	.word	0x2001f3c9
 800592c:	2001f3cc 	.word	0x2001f3cc
 8005930:	2001f3e0 	.word	0x2001f3e0

08005934 <TS_Get_GestureId>:
 * @brief  Update gesture Id following a touch detected.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	uint32_t gestureId = TS_I2C_Read(FT5336_GEST_ID_REG);
 800593c:	2001      	movs	r0, #1
 800593e:	f7ff f8c3 	bl	8004ac8 <TS_I2C_Read>
 8005942:	4603      	mov	r3, r0
 8005944:	60fb      	str	r3, [r7, #12]

	//ft5336_TS_GetGestureID(&gestureId);

	/* Remap gesture Id to a TS_GestureIdTypeDef value */
	switch(gestureId)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b49      	cmp	r3, #73	; 0x49
 800594a:	d061      	beq.n	8005a10 <TS_Get_GestureId+0xdc>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b49      	cmp	r3, #73	; 0x49
 8005950:	d862      	bhi.n	8005a18 <TS_Get_GestureId+0xe4>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b1c      	cmp	r3, #28
 8005956:	d83f      	bhi.n	80059d8 <TS_Get_GestureId+0xa4>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b1c      	cmp	r3, #28
 800595c:	d85c      	bhi.n	8005a18 <TS_Get_GestureId+0xe4>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <TS_Get_GestureId+0x30>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	080059e1 	.word	0x080059e1
 8005968:	08005a19 	.word	0x08005a19
 800596c:	08005a19 	.word	0x08005a19
 8005970:	08005a19 	.word	0x08005a19
 8005974:	08005a19 	.word	0x08005a19
 8005978:	08005a19 	.word	0x08005a19
 800597c:	08005a19 	.word	0x08005a19
 8005980:	08005a19 	.word	0x08005a19
 8005984:	08005a19 	.word	0x08005a19
 8005988:	08005a19 	.word	0x08005a19
 800598c:	08005a19 	.word	0x08005a19
 8005990:	08005a19 	.word	0x08005a19
 8005994:	08005a19 	.word	0x08005a19
 8005998:	08005a19 	.word	0x08005a19
 800599c:	08005a19 	.word	0x08005a19
 80059a0:	08005a19 	.word	0x08005a19
 80059a4:	080059e9 	.word	0x080059e9
 80059a8:	08005a19 	.word	0x08005a19
 80059ac:	08005a19 	.word	0x08005a19
 80059b0:	08005a19 	.word	0x08005a19
 80059b4:	080059f1 	.word	0x080059f1
 80059b8:	08005a19 	.word	0x08005a19
 80059bc:	08005a19 	.word	0x08005a19
 80059c0:	08005a19 	.word	0x08005a19
 80059c4:	080059f9 	.word	0x080059f9
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	08005a19 	.word	0x08005a19
 80059d0:	08005a19 	.word	0x08005a19
 80059d4:	08005a01 	.word	0x08005a01
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d014      	beq.n	8005a08 <TS_Get_GestureId+0xd4>
 80059de:	e01b      	b.n	8005a18 <TS_Get_GestureId+0xe4>
	{
	case FT5336_GEST_ID_NO_GESTURE :
		TS_State->gestureId = GEST_ID_NO_GESTURE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80059e6:	e019      	b.n	8005a1c <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_UP :
		TS_State->gestureId = GEST_ID_MOVE_UP;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80059ee:	e015      	b.n	8005a1c <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_RIGHT :
		TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80059f6:	e011      	b.n	8005a1c <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_DOWN :
		TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2203      	movs	r2, #3
 80059fc:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80059fe:	e00d      	b.n	8005a1c <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_LEFT :
		TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2204      	movs	r2, #4
 8005a04:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005a06:	e009      	b.n	8005a1c <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_IN :
		TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2205      	movs	r2, #5
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005a0e:	e005      	b.n	8005a1c <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_OUT :
		TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2206      	movs	r2, #6
 8005a14:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005a16:	e001      	b.n	8005a1c <TS_Get_GestureId+0xe8>
	default :
		return TS_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <TS_Get_GestureId+0xea>
	} /* of switch(gestureId) */

	return TS_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop

08005a28 <TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
static void TS_GetXY(uint16_t *X, uint16_t *Y)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  volatile uint8_t ucReadData = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	72fb      	strb	r3, [r7, #11]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
  uint8_t regAddressXHigh = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73bb      	strb	r3, [r7, #14]
  uint8_t regAddressYLow = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	737b      	strb	r3, [r7, #13]
  uint8_t regAddressYHigh = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	733b      	strb	r3, [r7, #12]

  if(currActiveTouchIdx < currActiveTouchNb)
 8005a46:	4b69      	ldr	r3, [pc, #420]	; (8005bec <TS_GetXY+0x1c4>)
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	4b69      	ldr	r3, [pc, #420]	; (8005bf0 <TS_GetXY+0x1c8>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	f080 80c7 	bcs.w	8005be2 <TS_GetXY+0x1ba>
  {
    switch(currActiveTouchIdx)
 8005a54:	4b65      	ldr	r3, [pc, #404]	; (8005bec <TS_GetXY+0x1c4>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	d871      	bhi.n	8005b40 <TS_GetXY+0x118>
 8005a5c:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <TS_GetXY+0x3c>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a8d 	.word	0x08005a8d
 8005a68:	08005a9f 	.word	0x08005a9f
 8005a6c:	08005ab1 	.word	0x08005ab1
 8005a70:	08005ac3 	.word	0x08005ac3
 8005a74:	08005ad5 	.word	0x08005ad5
 8005a78:	08005ae7 	.word	0x08005ae7
 8005a7c:	08005af9 	.word	0x08005af9
 8005a80:	08005b0b 	.word	0x08005b0b
 8005a84:	08005b1d 	.word	0x08005b1d
 8005a88:	08005b2f 	.word	0x08005b2f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P1_XH_REG;
 8005a90:	2303      	movs	r3, #3
 8005a92:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P1_YL_REG;
 8005a94:	2306      	movs	r3, #6
 8005a96:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P1_YH_REG;
 8005a98:	2305      	movs	r3, #5
 8005a9a:	733b      	strb	r3, [r7, #12]
      break;
 8005a9c:	e051      	b.n	8005b42 <TS_GetXY+0x11a>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8005a9e:	230a      	movs	r3, #10
 8005aa0:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P2_XH_REG;
 8005aa2:	2309      	movs	r3, #9
 8005aa4:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P2_YL_REG;
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P2_YH_REG;
 8005aaa:	230b      	movs	r3, #11
 8005aac:	733b      	strb	r3, [r7, #12]
      break;
 8005aae:	e048      	b.n	8005b42 <TS_GetXY+0x11a>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P3_XH_REG;
 8005ab4:	230f      	movs	r3, #15
 8005ab6:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P3_YL_REG;
 8005ab8:	2312      	movs	r3, #18
 8005aba:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P3_YH_REG;
 8005abc:	2311      	movs	r3, #17
 8005abe:	733b      	strb	r3, [r7, #12]
      break;
 8005ac0:	e03f      	b.n	8005b42 <TS_GetXY+0x11a>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8005ac2:	2316      	movs	r3, #22
 8005ac4:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P4_XH_REG;
 8005ac6:	2315      	movs	r3, #21
 8005ac8:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P4_YL_REG;
 8005aca:	2318      	movs	r3, #24
 8005acc:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P4_YH_REG;
 8005ace:	2317      	movs	r3, #23
 8005ad0:	733b      	strb	r3, [r7, #12]
      break;
 8005ad2:	e036      	b.n	8005b42 <TS_GetXY+0x11a>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8005ad4:	231c      	movs	r3, #28
 8005ad6:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P5_XH_REG;
 8005ad8:	231b      	movs	r3, #27
 8005ada:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P5_YL_REG;
 8005adc:	231e      	movs	r3, #30
 8005ade:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P5_YH_REG;
 8005ae0:	231d      	movs	r3, #29
 8005ae2:	733b      	strb	r3, [r7, #12]
      break;
 8005ae4:	e02d      	b.n	8005b42 <TS_GetXY+0x11a>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8005ae6:	2322      	movs	r3, #34	; 0x22
 8005ae8:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P6_XH_REG;
 8005aea:	2321      	movs	r3, #33	; 0x21
 8005aec:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P6_YL_REG;
 8005aee:	2324      	movs	r3, #36	; 0x24
 8005af0:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P6_YH_REG;
 8005af2:	2323      	movs	r3, #35	; 0x23
 8005af4:	733b      	strb	r3, [r7, #12]
      break;
 8005af6:	e024      	b.n	8005b42 <TS_GetXY+0x11a>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8005af8:	2328      	movs	r3, #40	; 0x28
 8005afa:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P7_XH_REG;
 8005afc:	2327      	movs	r3, #39	; 0x27
 8005afe:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P7_YL_REG;
 8005b00:	232a      	movs	r3, #42	; 0x2a
 8005b02:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P7_YH_REG;
 8005b04:	2329      	movs	r3, #41	; 0x29
 8005b06:	733b      	strb	r3, [r7, #12]
      break;
 8005b08:	e01b      	b.n	8005b42 <TS_GetXY+0x11a>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8005b0a:	232e      	movs	r3, #46	; 0x2e
 8005b0c:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P8_XH_REG;
 8005b0e:	232d      	movs	r3, #45	; 0x2d
 8005b10:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P8_YL_REG;
 8005b12:	2330      	movs	r3, #48	; 0x30
 8005b14:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P8_YH_REG;
 8005b16:	232f      	movs	r3, #47	; 0x2f
 8005b18:	733b      	strb	r3, [r7, #12]
      break;
 8005b1a:	e012      	b.n	8005b42 <TS_GetXY+0x11a>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8005b1c:	2334      	movs	r3, #52	; 0x34
 8005b1e:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P9_XH_REG;
 8005b20:	2333      	movs	r3, #51	; 0x33
 8005b22:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P9_YL_REG;
 8005b24:	2336      	movs	r3, #54	; 0x36
 8005b26:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P9_YH_REG;
 8005b28:	2335      	movs	r3, #53	; 0x35
 8005b2a:	733b      	strb	r3, [r7, #12]
      break;
 8005b2c:	e009      	b.n	8005b42 <TS_GetXY+0x11a>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8005b2e:	233a      	movs	r3, #58	; 0x3a
 8005b30:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P10_XH_REG;
 8005b32:	2339      	movs	r3, #57	; 0x39
 8005b34:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P10_YL_REG;
 8005b36:	233c      	movs	r3, #60	; 0x3c
 8005b38:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P10_YH_REG;
 8005b3a:	233b      	movs	r3, #59	; 0x3b
 8005b3c:	733b      	strb	r3, [r7, #12]
      break;
 8005b3e:	e000      	b.n	8005b42 <TS_GetXY+0x11a>

    default :
      break;
 8005b40:	bf00      	nop

    } /* end switch(currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_I2C_Read(regAddressXLow);
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fe ffbf 	bl	8004ac8 <TS_I2C_Read>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005b50:	7afb      	ldrb	r3, [r7, #11]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <TS_GetXY+0x1cc>)
 8005b58:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe ffb3 	bl	8004ac8 <TS_I2C_Read>
 8005b62:	4603      	mov	r3, r0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b72:	b21a      	sxth	r2, r3
 8005b74:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <TS_GetXY+0x1cc>)
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b21b      	sxth	r3, r3
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b21b      	sxth	r3, r3
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <TS_GetXY+0x1cc>)
 8005b82:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8005b84:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <TS_GetXY+0x1cc>)
 8005b86:	881a      	ldrh	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_I2C_Read(regAddressYLow);
 8005b8c:	7b7b      	ldrb	r3, [r7, #13]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe ff9a 	bl	8004ac8 <TS_I2C_Read>
 8005b94:	4603      	mov	r3, r0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005b9a:	7afb      	ldrb	r3, [r7, #11]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <TS_GetXY+0x1cc>)
 8005ba2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_I2C_Read(regAddressYHigh);
 8005ba4:	7b3b      	ldrb	r3, [r7, #12]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe ff8e 	bl	8004ac8 <TS_I2C_Read>
 8005bac:	4603      	mov	r3, r0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005bb2:	7afb      	ldrb	r3, [r7, #11]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bbc:	b21a      	sxth	r2, r3
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <TS_GetXY+0x1cc>)
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b21b      	sxth	r3, r3
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	b21b      	sxth	r3, r3
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <TS_GetXY+0x1cc>)
 8005bcc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <TS_GetXY+0x1cc>)
 8005bd0:	881a      	ldrh	r2, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	801a      	strh	r2, [r3, #0]

    currActiveTouchIdx++; /* next call will work on next touch */
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <TS_GetXY+0x1c4>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	4b03      	ldr	r3, [pc, #12]	; (8005bec <TS_GetXY+0x1c4>)
 8005be0:	701a      	strb	r2, [r3, #0]

  } /* of if(currActiveTouchIdx < currActiveTouchNb) */
}
 8005be2:	bf00      	nop
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	2001f3c9 	.word	0x2001f3c9
 8005bf0:	2001f3c8 	.word	0x2001f3c8
 8005bf4:	2001f3f4 	.word	0x2001f3f4

08005bf8 <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8005c02:	2300      	movs	r3, #0
 8005c04:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	20a4      	movs	r0, #164	; 0xa4
 8005c0c:	f7fe ff42 	bl	8004a94 <TS_I2C_Write>
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <TS_GetTouchInfo>:
  * @param  pEvent  : Pointer to to get the event information of 'touchIdx'.

  * @retval None.
  */
static void TS_GetTouchInfo(uint32_t   touchIdx, uint32_t * pWeight, uint32_t * pArea, uint32_t * pEvent)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
  volatile uint8_t ucReadData = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	757b      	strb	r3, [r7, #21]

  if(touchIdx < currActiveTouchNb)
 8005c36:	4b4a      	ldr	r3, [pc, #296]	; (8005d60 <TS_GetTouchInfo+0x148>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	f080 8089 	bcs.w	8005d56 <TS_GetTouchInfo+0x13e>
  {
    switch(touchIdx)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b09      	cmp	r3, #9
 8005c48:	d85c      	bhi.n	8005d04 <TS_GetTouchInfo+0xec>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <TS_GetTouchInfo+0x38>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c87 	.word	0x08005c87
 8005c58:	08005c95 	.word	0x08005c95
 8005c5c:	08005ca3 	.word	0x08005ca3
 8005c60:	08005cb1 	.word	0x08005cb1
 8005c64:	08005cbf 	.word	0x08005cbf
 8005c68:	08005ccd 	.word	0x08005ccd
 8005c6c:	08005cdb 	.word	0x08005cdb
 8005c70:	08005ce9 	.word	0x08005ce9
 8005c74:	08005cf7 	.word	0x08005cf7
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8005c7c:	2307      	movs	r3, #7
 8005c7e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8005c80:	2308      	movs	r3, #8
 8005c82:	757b      	strb	r3, [r7, #21]
      break;
 8005c84:	e03f      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8005c86:	2309      	movs	r3, #9
 8005c88:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8005c8a:	230d      	movs	r3, #13
 8005c8c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8005c8e:	230e      	movs	r3, #14
 8005c90:	757b      	strb	r3, [r7, #21]
      break;
 8005c92:	e038      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8005c94:	230f      	movs	r3, #15
 8005c96:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8005c98:	2313      	movs	r3, #19
 8005c9a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8005c9c:	2314      	movs	r3, #20
 8005c9e:	757b      	strb	r3, [r7, #21]
      break;
 8005ca0:	e031      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8005ca2:	2315      	movs	r3, #21
 8005ca4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8005ca6:	2319      	movs	r3, #25
 8005ca8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8005caa:	231a      	movs	r3, #26
 8005cac:	757b      	strb	r3, [r7, #21]
      break;
 8005cae:	e02a      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8005cb0:	231b      	movs	r3, #27
 8005cb2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8005cb4:	231f      	movs	r3, #31
 8005cb6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8005cb8:	2320      	movs	r3, #32
 8005cba:	757b      	strb	r3, [r7, #21]
      break;
 8005cbc:	e023      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8005cbe:	2321      	movs	r3, #33	; 0x21
 8005cc0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8005cc2:	2325      	movs	r3, #37	; 0x25
 8005cc4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8005cc6:	2326      	movs	r3, #38	; 0x26
 8005cc8:	757b      	strb	r3, [r7, #21]
      break;
 8005cca:	e01c      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8005ccc:	2327      	movs	r3, #39	; 0x27
 8005cce:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8005cd0:	232b      	movs	r3, #43	; 0x2b
 8005cd2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8005cd4:	232c      	movs	r3, #44	; 0x2c
 8005cd6:	757b      	strb	r3, [r7, #21]
      break;
 8005cd8:	e015      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8005cda:	232d      	movs	r3, #45	; 0x2d
 8005cdc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8005cde:	2331      	movs	r3, #49	; 0x31
 8005ce0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8005ce2:	2332      	movs	r3, #50	; 0x32
 8005ce4:	757b      	strb	r3, [r7, #21]
      break;
 8005ce6:	e00e      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8005ce8:	2333      	movs	r3, #51	; 0x33
 8005cea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8005cec:	2337      	movs	r3, #55	; 0x37
 8005cee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8005cf0:	2338      	movs	r3, #56	; 0x38
 8005cf2:	757b      	strb	r3, [r7, #21]
      break;
 8005cf4:	e007      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8005cf6:	2339      	movs	r3, #57	; 0x39
 8005cf8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8005cfa:	233d      	movs	r3, #61	; 0x3d
 8005cfc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8005cfe:	233e      	movs	r3, #62	; 0x3e
 8005d00:	757b      	strb	r3, [r7, #21]
      break;
 8005d02:	e000      	b.n	8005d06 <TS_GetTouchInfo+0xee>

    default :
      break;
 8005d04:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe fedd 	bl	8004ac8 <TS_I2C_Read>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8005d14:	7d3b      	ldrb	r3, [r7, #20]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	119b      	asrs	r3, r3, #6
 8005d1a:	f003 0203 	and.w	r2, r3, #3
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_I2C_Read(regAddressPWeight);
 8005d22:	7dbb      	ldrb	r3, [r7, #22]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe fecf 	bl	8004ac8 <TS_I2C_Read>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8005d30:	7d3b      	ldrb	r3, [r7, #20]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_I2C_Read(regAddressPMisc);
 8005d3a:	7d7b      	ldrb	r3, [r7, #21]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe fec3 	bl	8004ac8 <TS_I2C_Read>
 8005d42:	4603      	mov	r3, r0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8005d48:	7d3b      	ldrb	r3, [r7, #20]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	111b      	asrs	r3, r3, #4
 8005d4e:	f003 0204 	and.w	r2, r3, #4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < currActiveTouchNb) */
}
 8005d56:	bf00      	nop
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	2001f3c8 	.word	0x2001f3c8

08005d64 <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 8005d6a:	f001 fd07 	bl	800777c <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8005d72:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8005d76:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8005d78:	231b      	movs	r3, #27
 8005d7a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005d94:	2300      	movs	r3, #0
 8005d96:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 fd24 	bl	80077ec <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8005da8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8005dac:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8005dae:	2317      	movs	r3, #23
 8005db0:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005db2:	2303      	movs	r3, #3
 8005db4:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fd09 	bl	80077ec <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 8005dde:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8005de2:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8005de4:	2316      	movs	r3, #22
 8005de6:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005de8:	2303      	movs	r3, #3
 8005dea:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005e00:	2300      	movs	r3, #0
 8005e02:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005e08:	463b      	mov	r3, r7
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 fcee 	bl	80077ec <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 8005e14:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005e18:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8005e1a:	2312      	movs	r3, #18
 8005e1c:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005e36:	2300      	movs	r3, #0
 8005e38:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005e3e:	463b      	mov	r3, r7
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 fcd3 	bl	80077ec <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005e46:	2004      	movs	r0, #4
 8005e48:	f001 fcb0 	bl	80077ac <HAL_MPU_Enable>

}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	607b      	str	r3, [r7, #4]
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	81fb      	strh	r3, [r7, #14]
 8005e60:	460b      	mov	r3, r1
 8005e62:	81bb      	strh	r3, [r7, #12]
 8005e64:	4613      	mov	r3, r2
 8005e66:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8005e6c:	89bb      	ldrh	r3, [r7, #12]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8005e72:	89bb      	ldrh	r3, [r7, #12]
 8005e74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e78:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8005e7e:	89fb      	ldrh	r3, [r7, #14]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2203      	movs	r2, #3
 8005e84:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 f83f 	bl	8006f0c <CODEC_IO_Write>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	461a      	mov	r2, r3
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8005e98:	89fb      	ldrh	r3, [r7, #14]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f640 0117 	movw	r1, #2071	; 0x817
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 f832 	bl	8006f0c <CODEC_IO_Write>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8005eb2:	89fb      	ldrh	r3, [r7, #14]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f825 	bl	8006f0c <CODEC_IO_Write>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8005ecc:	89fb      	ldrh	r3, [r7, #14]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	226c      	movs	r2, #108	; 0x6c
 8005ed2:	2139      	movs	r1, #57	; 0x39
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 f819 	bl	8006f0c <CODEC_IO_Write>
 8005eda:	4603      	mov	r3, r0
 8005edc:	461a      	mov	r2, r3
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8005ee4:	8afb      	ldrh	r3, [r7, #22]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8005eea:	89fb      	ldrh	r3, [r7, #14]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2213      	movs	r2, #19
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 f80a 	bl	8006f0c <CODEC_IO_Write>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	61fb      	str	r3, [r7, #28]
 8005f02:	e00b      	b.n	8005f1c <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8005f04:	89fb      	ldrh	r3, [r7, #14]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2203      	movs	r2, #3
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fffd 	bl	8006f0c <CODEC_IO_Write>
 8005f12:	4603      	mov	r3, r0
 8005f14:	461a      	mov	r2, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 8005f1c:	2032      	movs	r0, #50	; 0x32
 8005f1e:	f001 f86d 	bl	8006ffc <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8005f22:	8b3b      	ldrh	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 815f 	beq.w	80061e8 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 8005f2a:	4bae      	ldr	r3, [pc, #696]	; (80061e4 <wm8994_Init+0x390>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8005f30:	8b3b      	ldrh	r3, [r7, #24]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	f000 808c 	beq.w	8006050 <wm8994_Init+0x1fc>
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	f300 8111 	bgt.w	8006160 <wm8994_Init+0x30c>
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d002      	beq.n	8005f48 <wm8994_Init+0xf4>
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d042      	beq.n	8005fcc <wm8994_Init+0x178>
 8005f46:	e10b      	b.n	8006160 <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005f48:	89fb      	ldrh	r3, [r7, #14]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005f50:	2105      	movs	r1, #5
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 ffda 	bl	8006f0c <CODEC_IO_Write>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005f62:	89fb      	ldrh	r3, [r7, #14]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2200      	movs	r2, #0
 8005f68:	f240 6101 	movw	r1, #1537	; 0x601
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 ffcd 	bl	8006f0c <CODEC_IO_Write>
 8005f72:	4603      	mov	r3, r0
 8005f74:	461a      	mov	r2, r3
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005f7c:	89fb      	ldrh	r3, [r7, #14]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2200      	movs	r2, #0
 8005f82:	f240 6102 	movw	r1, #1538	; 0x602
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 ffc0 	bl	8006f0c <CODEC_IO_Write>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	461a      	mov	r2, r3
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005f96:	89fb      	ldrh	r3, [r7, #14]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f240 6104 	movw	r1, #1540	; 0x604
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 ffb3 	bl	8006f0c <CODEC_IO_Write>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f240 6105 	movw	r1, #1541	; 0x605
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 ffa6 	bl	8006f0c <CODEC_IO_Write>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	61fb      	str	r3, [r7, #28]
      break;
 8005fca:	e110      	b.n	80061ee <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f240 3203 	movw	r2, #771	; 0x303
 8005fd4:	2105      	movs	r1, #5
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 ff98 	bl	8006f0c <CODEC_IO_Write>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	461a      	mov	r2, r3
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005fe6:	89fb      	ldrh	r3, [r7, #14]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2201      	movs	r2, #1
 8005fec:	f240 6101 	movw	r1, #1537	; 0x601
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 ff8b 	bl	8006f0c <CODEC_IO_Write>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006000:	89fb      	ldrh	r3, [r7, #14]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2201      	movs	r2, #1
 8006006:	f240 6102 	movw	r1, #1538	; 0x602
 800600a:	4618      	mov	r0, r3
 800600c:	f000 ff7e 	bl	8006f0c <CODEC_IO_Write>
 8006010:	4603      	mov	r3, r0
 8006012:	461a      	mov	r2, r3
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800601a:	89fb      	ldrh	r3, [r7, #14]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2200      	movs	r2, #0
 8006020:	f240 6104 	movw	r1, #1540	; 0x604
 8006024:	4618      	mov	r0, r3
 8006026:	f000 ff71 	bl	8006f0c <CODEC_IO_Write>
 800602a:	4603      	mov	r3, r0
 800602c:	461a      	mov	r2, r3
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006034:	89fb      	ldrh	r3, [r7, #14]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2200      	movs	r2, #0
 800603a:	f240 6105 	movw	r1, #1541	; 0x605
 800603e:	4618      	mov	r0, r3
 8006040:	f000 ff64 	bl	8006f0c <CODEC_IO_Write>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	4413      	add	r3, r2
 800604c:	61fb      	str	r3, [r7, #28]
      break;
 800604e:	e0ce      	b.n	80061ee <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006050:	8afb      	ldrh	r3, [r7, #22]
 8006052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006056:	d141      	bne.n	80060dc <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006058:	89fb      	ldrh	r3, [r7, #14]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006060:	2105      	movs	r1, #5
 8006062:	4618      	mov	r0, r3
 8006064:	f000 ff52 	bl	8006f0c <CODEC_IO_Write>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8006072:	89fb      	ldrh	r3, [r7, #14]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2203      	movs	r2, #3
 8006078:	f240 6101 	movw	r1, #1537	; 0x601
 800607c:	4618      	mov	r0, r3
 800607e:	f000 ff45 	bl	8006f0c <CODEC_IO_Write>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800608c:	89fb      	ldrh	r3, [r7, #14]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2203      	movs	r2, #3
 8006092:	f240 6102 	movw	r1, #1538	; 0x602
 8006096:	4618      	mov	r0, r3
 8006098:	f000 ff38 	bl	8006f0c <CODEC_IO_Write>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80060a6:	89fb      	ldrh	r3, [r7, #14]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2203      	movs	r2, #3
 80060ac:	f240 6104 	movw	r1, #1540	; 0x604
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 ff2b 	bl	8006f0c <CODEC_IO_Write>
 80060b6:	4603      	mov	r3, r0
 80060b8:	461a      	mov	r2, r3
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2203      	movs	r2, #3
 80060c6:	f240 6105 	movw	r1, #1541	; 0x605
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 ff1e 	bl	8006f0c <CODEC_IO_Write>
 80060d0:	4603      	mov	r3, r0
 80060d2:	461a      	mov	r2, r3
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	4413      	add	r3, r2
 80060d8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 80060da:	e088      	b.n	80061ee <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80060dc:	89fb      	ldrh	r3, [r7, #14]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f640 720f 	movw	r2, #3855	; 0xf0f
 80060e4:	2105      	movs	r1, #5
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 ff10 	bl	8006f0c <CODEC_IO_Write>
 80060ec:	4603      	mov	r3, r0
 80060ee:	461a      	mov	r2, r3
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80060f6:	89fb      	ldrh	r3, [r7, #14]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2201      	movs	r2, #1
 80060fc:	f240 6101 	movw	r1, #1537	; 0x601
 8006100:	4618      	mov	r0, r3
 8006102:	f000 ff03 	bl	8006f0c <CODEC_IO_Write>
 8006106:	4603      	mov	r3, r0
 8006108:	461a      	mov	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006110:	89fb      	ldrh	r3, [r7, #14]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2201      	movs	r2, #1
 8006116:	f240 6102 	movw	r1, #1538	; 0x602
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fef6 	bl	8006f0c <CODEC_IO_Write>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800612a:	89fb      	ldrh	r3, [r7, #14]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2202      	movs	r2, #2
 8006130:	f240 6104 	movw	r1, #1540	; 0x604
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fee9 	bl	8006f0c <CODEC_IO_Write>
 800613a:	4603      	mov	r3, r0
 800613c:	461a      	mov	r2, r3
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	4413      	add	r3, r2
 8006142:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006144:	89fb      	ldrh	r3, [r7, #14]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2202      	movs	r2, #2
 800614a:	f240 6105 	movw	r1, #1541	; 0x605
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fedc 	bl	8006f0c <CODEC_IO_Write>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	61fb      	str	r3, [r7, #28]
      break;
 800615e:	e046      	b.n	80061ee <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006160:	89fb      	ldrh	r3, [r7, #14]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	f240 3203 	movw	r2, #771	; 0x303
 8006168:	2105      	movs	r1, #5
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fece 	bl	8006f0c <CODEC_IO_Write>
 8006170:	4603      	mov	r3, r0
 8006172:	461a      	mov	r2, r3
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	4413      	add	r3, r2
 8006178:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800617a:	89fb      	ldrh	r3, [r7, #14]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2201      	movs	r2, #1
 8006180:	f240 6101 	movw	r1, #1537	; 0x601
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fec1 	bl	8006f0c <CODEC_IO_Write>
 800618a:	4603      	mov	r3, r0
 800618c:	461a      	mov	r2, r3
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2201      	movs	r2, #1
 800619a:	f240 6102 	movw	r1, #1538	; 0x602
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 feb4 	bl	8006f0c <CODEC_IO_Write>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2200      	movs	r2, #0
 80061b4:	f240 6104 	movw	r1, #1540	; 0x604
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fea7 	bl	8006f0c <CODEC_IO_Write>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80061c8:	89fb      	ldrh	r3, [r7, #14]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2200      	movs	r2, #0
 80061ce:	f240 6105 	movw	r1, #1541	; 0x605
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fe9a 	bl	8006f0c <CODEC_IO_Write>
 80061d8:	4603      	mov	r3, r0
 80061da:	461a      	mov	r2, r3
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	61fb      	str	r3, [r7, #28]
      break;
 80061e2:	e004      	b.n	80061ee <wm8994_Init+0x39a>
 80061e4:	2001f3f8 	.word	0x2001f3f8
    }
  }
  else
  {
    outputEnabled = 0;
 80061e8:	4b99      	ldr	r3, [pc, #612]	; (8006450 <wm8994_Init+0x5fc>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80061ee:	8afb      	ldrh	r3, [r7, #22]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 81ab 	beq.w	800654c <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 80061f6:	4b97      	ldr	r3, [pc, #604]	; (8006454 <wm8994_Init+0x600>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80061fc:	8afb      	ldrh	r3, [r7, #22]
 80061fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006202:	f000 8129 	beq.w	8006458 <wm8994_Init+0x604>
 8006206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620a:	f300 819b 	bgt.w	8006544 <wm8994_Init+0x6f0>
 800620e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006212:	d05a      	beq.n	80062ca <wm8994_Init+0x476>
 8006214:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006218:	f300 8194 	bgt.w	8006544 <wm8994_Init+0x6f0>
 800621c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006220:	f000 80c6 	beq.w	80063b0 <wm8994_Init+0x55c>
 8006224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006228:	f040 818c 	bne.w	8006544 <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 800622c:	89fb      	ldrh	r3, [r7, #14]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8006234:	2104      	movs	r1, #4
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fe68 	bl	8006f0c <CODEC_IO_Write>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006246:	89fb      	ldrh	r3, [r7, #14]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	22db      	movs	r2, #219	; 0xdb
 800624c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fe5b 	bl	8006f0c <CODEC_IO_Write>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8006260:	89fb      	ldrh	r3, [r7, #14]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8006268:	2102      	movs	r1, #2
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fe4e 	bl	8006f0c <CODEC_IO_Write>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800627a:	89fb      	ldrh	r3, [r7, #14]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2202      	movs	r2, #2
 8006280:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fe41 	bl	8006f0c <CODEC_IO_Write>
 800628a:	4603      	mov	r3, r0
 800628c:	461a      	mov	r2, r3
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006294:	89fb      	ldrh	r3, [r7, #14]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2202      	movs	r2, #2
 800629a:	f240 6109 	movw	r1, #1545	; 0x609
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fe34 	bl	8006f0c <CODEC_IO_Write>
 80062a4:	4603      	mov	r3, r0
 80062a6:	461a      	mov	r2, r3
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80062ae:	89fb      	ldrh	r3, [r7, #14]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	220e      	movs	r2, #14
 80062b4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fe27 	bl	8006f0c <CODEC_IO_Write>
 80062be:	4603      	mov	r3, r0
 80062c0:	461a      	mov	r2, r3
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	61fb      	str	r3, [r7, #28]
      break;
 80062c8:	e143      	b.n	8006552 <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80062ca:	89fb      	ldrh	r3, [r7, #14]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2211      	movs	r2, #17
 80062d0:	2128      	movs	r1, #40	; 0x28
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fe1a 	bl	8006f0c <CODEC_IO_Write>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 80062e2:	89fb      	ldrh	r3, [r7, #14]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2220      	movs	r2, #32
 80062e8:	2129      	movs	r1, #41	; 0x29
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fe0e 	bl	8006f0c <CODEC_IO_Write>
 80062f0:	4603      	mov	r3, r0
 80062f2:	461a      	mov	r2, r3
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 80062fa:	89fb      	ldrh	r3, [r7, #14]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2220      	movs	r2, #32
 8006300:	212a      	movs	r1, #42	; 0x2a
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fe02 	bl	8006f0c <CODEC_IO_Write>
 8006308:	4603      	mov	r3, r0
 800630a:	461a      	mov	r2, r3
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8006312:	89fb      	ldrh	r3, [r7, #14]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f240 3203 	movw	r2, #771	; 0x303
 800631a:	2104      	movs	r1, #4
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fdf5 	bl	8006f0c <CODEC_IO_Write>
 8006322:	4603      	mov	r3, r0
 8006324:	461a      	mov	r2, r3
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800632c:	89fb      	ldrh	r3, [r7, #14]
 800632e:	b2db      	uxtb	r3, r3
 8006330:	22db      	movs	r2, #219	; 0xdb
 8006332:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fde8 	bl	8006f0c <CODEC_IO_Write>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8006346:	89fb      	ldrh	r3, [r7, #14]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f246 3250 	movw	r2, #25424	; 0x6350
 800634e:	2102      	movs	r1, #2
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fddb 	bl	8006f0c <CODEC_IO_Write>
 8006356:	4603      	mov	r3, r0
 8006358:	461a      	mov	r2, r3
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	4413      	add	r3, r2
 800635e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006360:	89fb      	ldrh	r3, [r7, #14]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2202      	movs	r2, #2
 8006366:	f240 6106 	movw	r1, #1542	; 0x606
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fdce 	bl	8006f0c <CODEC_IO_Write>
 8006370:	4603      	mov	r3, r0
 8006372:	461a      	mov	r2, r3
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800637a:	89fb      	ldrh	r3, [r7, #14]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2202      	movs	r2, #2
 8006380:	f240 6107 	movw	r1, #1543	; 0x607
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fdc1 	bl	8006f0c <CODEC_IO_Write>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006394:	89fb      	ldrh	r3, [r7, #14]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	220d      	movs	r2, #13
 800639a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fdb4 	bl	8006f0c <CODEC_IO_Write>
 80063a4:	4603      	mov	r3, r0
 80063a6:	461a      	mov	r2, r3
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	61fb      	str	r3, [r7, #28]
      break;
 80063ae:	e0d0      	b.n	8006552 <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80063b0:	89fb      	ldrh	r3, [r7, #14]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80063b8:	2104      	movs	r1, #4
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fda6 	bl	8006f0c <CODEC_IO_Write>
 80063c0:	4603      	mov	r3, r0
 80063c2:	461a      	mov	r2, r3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80063ca:	89fb      	ldrh	r3, [r7, #14]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	22db      	movs	r2, #219	; 0xdb
 80063d0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fd99 	bl	8006f0c <CODEC_IO_Write>
 80063da:	4603      	mov	r3, r0
 80063dc:	461a      	mov	r2, r3
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	4413      	add	r3, r2
 80063e2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80063e4:	89fb      	ldrh	r3, [r7, #14]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f246 3250 	movw	r2, #25424	; 0x6350
 80063ec:	2102      	movs	r1, #2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fd8c 	bl	8006f0c <CODEC_IO_Write>
 80063f4:	4603      	mov	r3, r0
 80063f6:	461a      	mov	r2, r3
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80063fe:	89fb      	ldrh	r3, [r7, #14]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2202      	movs	r2, #2
 8006404:	f240 6106 	movw	r1, #1542	; 0x606
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fd7f 	bl	8006f0c <CODEC_IO_Write>
 800640e:	4603      	mov	r3, r0
 8006410:	461a      	mov	r2, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006418:	89fb      	ldrh	r3, [r7, #14]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2202      	movs	r2, #2
 800641e:	f240 6107 	movw	r1, #1543	; 0x607
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fd72 	bl	8006f0c <CODEC_IO_Write>
 8006428:	4603      	mov	r3, r0
 800642a:	461a      	mov	r2, r3
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006432:	89fb      	ldrh	r3, [r7, #14]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	220d      	movs	r2, #13
 8006438:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fd65 	bl	8006f0c <CODEC_IO_Write>
 8006442:	4603      	mov	r3, r0
 8006444:	461a      	mov	r2, r3
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	61fb      	str	r3, [r7, #28]
      break;
 800644c:	e081      	b.n	8006552 <wm8994_Init+0x6fe>
 800644e:	bf00      	nop
 8006450:	2001f3f8 	.word	0x2001f3f8
 8006454:	2001f3fc 	.word	0x2001f3fc
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8006458:	89fb      	ldrh	r3, [r7, #14]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f640 723c 	movw	r2, #3900	; 0xf3c
 8006460:	2104      	movs	r1, #4
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fd52 	bl	8006f0c <CODEC_IO_Write>
 8006468:	4603      	mov	r3, r0
 800646a:	461a      	mov	r2, r3
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006472:	89fb      	ldrh	r3, [r7, #14]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	22db      	movs	r2, #219	; 0xdb
 8006478:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fd45 	bl	8006f0c <CODEC_IO_Write>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800648c:	89fb      	ldrh	r3, [r7, #14]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	22db      	movs	r2, #219	; 0xdb
 8006492:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fd38 	bl	8006f0c <CODEC_IO_Write>
 800649c:	4603      	mov	r3, r0
 800649e:	461a      	mov	r2, r3
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80064a6:	89fb      	ldrh	r3, [r7, #14]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80064ae:	2102      	movs	r1, #2
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fd2b 	bl	8006f0c <CODEC_IO_Write>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80064c0:	89fb      	ldrh	r3, [r7, #14]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2202      	movs	r2, #2
 80064c6:	f240 6106 	movw	r1, #1542	; 0x606
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fd1e 	bl	8006f0c <CODEC_IO_Write>
 80064d0:	4603      	mov	r3, r0
 80064d2:	461a      	mov	r2, r3
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80064da:	89fb      	ldrh	r3, [r7, #14]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2202      	movs	r2, #2
 80064e0:	f240 6107 	movw	r1, #1543	; 0x607
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fd11 	bl	8006f0c <CODEC_IO_Write>
 80064ea:	4603      	mov	r3, r0
 80064ec:	461a      	mov	r2, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80064f4:	89fb      	ldrh	r3, [r7, #14]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2202      	movs	r2, #2
 80064fa:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fd04 	bl	8006f0c <CODEC_IO_Write>
 8006504:	4603      	mov	r3, r0
 8006506:	461a      	mov	r2, r3
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800650e:	89fb      	ldrh	r3, [r7, #14]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2202      	movs	r2, #2
 8006514:	f240 6109 	movw	r1, #1545	; 0x609
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fcf7 	bl	8006f0c <CODEC_IO_Write>
 800651e:	4603      	mov	r3, r0
 8006520:	461a      	mov	r2, r3
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006528:	89fb      	ldrh	r3, [r7, #14]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	220d      	movs	r2, #13
 800652e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fcea 	bl	8006f0c <CODEC_IO_Write>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	61fb      	str	r3, [r7, #28]
      break;
 8006542:	e006      	b.n	8006552 <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
      break;
 800654a:	e002      	b.n	8006552 <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 800654c:	4ba4      	ldr	r3, [pc, #656]	; (80067e0 <wm8994_Init+0x98c>)
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4aa3      	ldr	r2, [pc, #652]	; (80067e4 <wm8994_Init+0x990>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d079      	beq.n	800664e <wm8994_Init+0x7fa>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4aa1      	ldr	r2, [pc, #644]	; (80067e4 <wm8994_Init+0x990>)
 800655e:	4293      	cmp	r3, r2
 8006560:	f200 80ad 	bhi.w	80066be <wm8994_Init+0x86a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800656a:	4293      	cmp	r3, r2
 800656c:	d061      	beq.n	8006632 <wm8994_Init+0x7de>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006574:	4293      	cmp	r3, r2
 8006576:	f200 80a2 	bhi.w	80066be <wm8994_Init+0x86a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006580:	4293      	cmp	r3, r2
 8006582:	f000 808e 	beq.w	80066a2 <wm8994_Init+0x84e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f64a 4244 	movw	r2, #44100	; 0xac44
 800658c:	4293      	cmp	r3, r2
 800658e:	f200 8096 	bhi.w	80066be <wm8994_Init+0x86a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006598:	d03d      	beq.n	8006616 <wm8994_Init+0x7c2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80065a0:	f200 808d 	bhi.w	80066be <wm8994_Init+0x86a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f245 6222 	movw	r2, #22050	; 0x5622
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d06b      	beq.n	8006686 <wm8994_Init+0x832>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f245 6222 	movw	r2, #22050	; 0x5622
 80065b4:	4293      	cmp	r3, r2
 80065b6:	f200 8082 	bhi.w	80066be <wm8994_Init+0x86a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80065c0:	d01b      	beq.n	80065fa <wm8994_Init+0x7a6>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80065c8:	d879      	bhi.n	80066be <wm8994_Init+0x86a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80065d0:	d005      	beq.n	80065de <wm8994_Init+0x78a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f642 3211 	movw	r2, #11025	; 0x2b11
 80065d8:	4293      	cmp	r3, r2
 80065da:	d046      	beq.n	800666a <wm8994_Init+0x816>
 80065dc:	e06f      	b.n	80066be <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80065de:	89fb      	ldrh	r3, [r7, #14]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2203      	movs	r2, #3
 80065e4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fc8f 	bl	8006f0c <CODEC_IO_Write>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	61fb      	str	r3, [r7, #28]
    break;
 80065f8:	e06f      	b.n	80066da <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80065fa:	89fb      	ldrh	r3, [r7, #14]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2233      	movs	r2, #51	; 0x33
 8006600:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fc81 	bl	8006f0c <CODEC_IO_Write>
 800660a:	4603      	mov	r3, r0
 800660c:	461a      	mov	r2, r3
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	61fb      	str	r3, [r7, #28]
    break;
 8006614:	e061      	b.n	80066da <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8006616:	89fb      	ldrh	r3, [r7, #14]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2263      	movs	r2, #99	; 0x63
 800661c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fc73 	bl	8006f0c <CODEC_IO_Write>
 8006626:	4603      	mov	r3, r0
 8006628:	461a      	mov	r2, r3
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	61fb      	str	r3, [r7, #28]
    break;
 8006630:	e053      	b.n	80066da <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006632:	89fb      	ldrh	r3, [r7, #14]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2283      	movs	r2, #131	; 0x83
 8006638:	f44f 7104 	mov.w	r1, #528	; 0x210
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fc65 	bl	8006f0c <CODEC_IO_Write>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	61fb      	str	r3, [r7, #28]
    break;
 800664c:	e045      	b.n	80066da <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800664e:	89fb      	ldrh	r3, [r7, #14]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	22a3      	movs	r2, #163	; 0xa3
 8006654:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fc57 	bl	8006f0c <CODEC_IO_Write>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	61fb      	str	r3, [r7, #28]
    break;
 8006668:	e037      	b.n	80066da <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800666a:	89fb      	ldrh	r3, [r7, #14]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2213      	movs	r2, #19
 8006670:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fc49 	bl	8006f0c <CODEC_IO_Write>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	61fb      	str	r3, [r7, #28]
    break;
 8006684:	e029      	b.n	80066da <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8006686:	89fb      	ldrh	r3, [r7, #14]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2243      	movs	r2, #67	; 0x43
 800668c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fc3b 	bl	8006f0c <CODEC_IO_Write>
 8006696:	4603      	mov	r3, r0
 8006698:	461a      	mov	r2, r3
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	61fb      	str	r3, [r7, #28]
    break;
 80066a0:	e01b      	b.n	80066da <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80066a2:	89fb      	ldrh	r3, [r7, #14]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2273      	movs	r2, #115	; 0x73
 80066a8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fc2d 	bl	8006f0c <CODEC_IO_Write>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461a      	mov	r2, r3
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	4413      	add	r3, r2
 80066ba:	61fb      	str	r3, [r7, #28]
    break;
 80066bc:	e00d      	b.n	80066da <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80066be:	89fb      	ldrh	r3, [r7, #14]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2283      	movs	r2, #131	; 0x83
 80066c4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fc1f 	bl	8006f0c <CODEC_IO_Write>
 80066ce:	4603      	mov	r3, r0
 80066d0:	461a      	mov	r2, r3
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	61fb      	str	r3, [r7, #28]
    break;
 80066d8:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80066da:	8afb      	ldrh	r3, [r7, #22]
 80066dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e0:	d10e      	bne.n	8006700 <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 80066e2:	89fb      	ldrh	r3, [r7, #14]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f244 0218 	movw	r2, #16408	; 0x4018
 80066ea:	f44f 7140 	mov.w	r1, #768	; 0x300
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fc0c 	bl	8006f0c <CODEC_IO_Write>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	4413      	add	r3, r2
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	e00d      	b.n	800671c <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8006700:	89fb      	ldrh	r3, [r7, #14]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f244 0210 	movw	r2, #16400	; 0x4010
 8006708:	f44f 7140 	mov.w	r1, #768	; 0x300
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fbfd 	bl	8006f0c <CODEC_IO_Write>
 8006712:	4603      	mov	r3, r0
 8006714:	461a      	mov	r2, r3
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4413      	add	r3, r2
 800671a:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 800671c:	89fb      	ldrh	r3, [r7, #14]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2200      	movs	r2, #0
 8006722:	f240 3102 	movw	r1, #770	; 0x302
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fbf0 	bl	8006f0c <CODEC_IO_Write>
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8006736:	89fb      	ldrh	r3, [r7, #14]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	220a      	movs	r2, #10
 800673c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fbe3 	bl	8006f0c <CODEC_IO_Write>
 8006746:	4603      	mov	r3, r0
 8006748:	461a      	mov	r2, r3
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8006750:	89fb      	ldrh	r3, [r7, #14]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2201      	movs	r2, #1
 8006756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fbd6 	bl	8006f0c <CODEC_IO_Write>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800676a:	8b3b      	ldrh	r3, [r7, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 817b 	beq.w	8006a68 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8006772:	8b3b      	ldrh	r3, [r7, #24]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d157      	bne.n	8006828 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8006778:	89fb      	ldrh	r3, [r7, #14]
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006780:	212d      	movs	r1, #45	; 0x2d
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fbc2 	bl	8006f0c <CODEC_IO_Write>
 8006788:	4603      	mov	r3, r0
 800678a:	461a      	mov	r2, r3
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 8006792:	89fb      	ldrh	r3, [r7, #14]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800679a:	212e      	movs	r1, #46	; 0x2e
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fbb5 	bl	8006f0c <CODEC_IO_Write>
 80067a2:	4603      	mov	r3, r0
 80067a4:	461a      	mov	r2, r3
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 80067ac:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <wm8994_Init+0x994>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01b      	beq.n	80067ec <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80067b4:	89fb      	ldrh	r3, [r7, #14]
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80067bc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fba3 	bl	8006f0c <CODEC_IO_Write>
 80067c6:	4603      	mov	r3, r0
 80067c8:	461a      	mov	r2, r3
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <wm8994_Init+0x994>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 80067d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80067da:	f000 fc0f 	bl	8006ffc <HAL_Delay>
 80067de:	e016      	b.n	800680e <wm8994_Init+0x9ba>
 80067e0:	2001f3fc 	.word	0x2001f3fc
 80067e4:	00017700 	.word	0x00017700
 80067e8:	20000038 	.word	0x20000038
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80067ec:	89fb      	ldrh	r3, [r7, #14]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	f248 1208 	movw	r2, #33032	; 0x8108
 80067f4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fb87 	bl	8006f0c <CODEC_IO_Write>
 80067fe:	4603      	mov	r3, r0
 8006800:	461a      	mov	r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 8006808:	2032      	movs	r0, #50	; 0x32
 800680a:	f000 fbf7 	bl	8006ffc <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800680e:	89fb      	ldrh	r3, [r7, #14]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2200      	movs	r2, #0
 8006814:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fb77 	bl	8006f0c <CODEC_IO_Write>
 800681e:	4603      	mov	r3, r0
 8006820:	461a      	mov	r2, r3
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8006828:	89fb      	ldrh	r3, [r7, #14]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006830:	2103      	movs	r1, #3
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fb6a 	bl	8006f0c <CODEC_IO_Write>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8006842:	89fb      	ldrh	r3, [r7, #14]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2200      	movs	r2, #0
 8006848:	2122      	movs	r1, #34	; 0x22
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fb5e 	bl	8006f0c <CODEC_IO_Write>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800685a:	89fb      	ldrh	r3, [r7, #14]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2200      	movs	r2, #0
 8006860:	2123      	movs	r1, #35	; 0x23
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fb52 	bl	8006f0c <CODEC_IO_Write>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4413      	add	r3, r2
 8006870:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8006872:	89fb      	ldrh	r3, [r7, #14]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f44f 7240 	mov.w	r2, #768	; 0x300
 800687a:	2136      	movs	r1, #54	; 0x36
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fb45 	bl	8006f0c <CODEC_IO_Write>
 8006882:	4603      	mov	r3, r0
 8006884:	461a      	mov	r2, r3
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	4413      	add	r3, r2
 800688a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800688c:	89fb      	ldrh	r3, [r7, #14]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f243 0203 	movw	r2, #12291	; 0x3003
 8006894:	2101      	movs	r1, #1
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fb38 	bl	8006f0c <CODEC_IO_Write>
 800689c:	4603      	mov	r3, r0
 800689e:	461a      	mov	r2, r3
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80068a6:	8afb      	ldrh	r3, [r7, #22]
 80068a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ac:	d10d      	bne.n	80068ca <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80068ae:	89fb      	ldrh	r3, [r7, #14]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f240 2205 	movw	r2, #517	; 0x205
 80068b6:	2151      	movs	r1, #81	; 0x51
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fb27 	bl	8006f0c <CODEC_IO_Write>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e00b      	b.n	80068e2 <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 80068ca:	89fb      	ldrh	r3, [r7, #14]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2205      	movs	r2, #5
 80068d0:	2151      	movs	r1, #81	; 0x51
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fb1a 	bl	8006f0c <CODEC_IO_Write>
 80068d8:	4603      	mov	r3, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4413      	add	r3, r2
 80068e0:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80068e2:	8b7b      	ldrh	r3, [r7, #26]
 80068e4:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80068e8:	f043 0303 	orr.w	r3, r3, #3
 80068ec:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80068ee:	89fb      	ldrh	r3, [r7, #14]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	8b7a      	ldrh	r2, [r7, #26]
 80068f4:	2101      	movs	r1, #1
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fb08 	bl	8006f0c <CODEC_IO_Write>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	4413      	add	r3, r2
 8006904:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8006906:	89fb      	ldrh	r3, [r7, #14]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2222      	movs	r2, #34	; 0x22
 800690c:	2160      	movs	r1, #96	; 0x60
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fafc 	bl	8006f0c <CODEC_IO_Write>
 8006914:	4603      	mov	r3, r0
 8006916:	461a      	mov	r2, r3
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800691e:	89fb      	ldrh	r3, [r7, #14]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	f649 7225 	movw	r2, #40741	; 0x9f25
 8006926:	214c      	movs	r1, #76	; 0x4c
 8006928:	4618      	mov	r0, r3
 800692a:	f000 faef 	bl	8006f0c <CODEC_IO_Write>
 800692e:	4603      	mov	r3, r0
 8006930:	461a      	mov	r2, r3
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 8006938:	200f      	movs	r0, #15
 800693a:	f000 fb5f 	bl	8006ffc <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800693e:	89fb      	ldrh	r3, [r7, #14]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2201      	movs	r2, #1
 8006944:	212d      	movs	r1, #45	; 0x2d
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fae0 	bl	8006f0c <CODEC_IO_Write>
 800694c:	4603      	mov	r3, r0
 800694e:	461a      	mov	r2, r3
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	4413      	add	r3, r2
 8006954:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8006956:	89fb      	ldrh	r3, [r7, #14]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2201      	movs	r2, #1
 800695c:	212e      	movs	r1, #46	; 0x2e
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fad4 	bl	8006f0c <CODEC_IO_Write>
 8006964:	4603      	mov	r3, r0
 8006966:	461a      	mov	r2, r3
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800696e:	89fb      	ldrh	r3, [r7, #14]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f44f 724c 	mov.w	r2, #816	; 0x330
 8006976:	2103      	movs	r1, #3
 8006978:	4618      	mov	r0, r3
 800697a:	f000 fac7 	bl	8006f0c <CODEC_IO_Write>
 800697e:	4603      	mov	r3, r0
 8006980:	461a      	mov	r2, r3
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8006988:	89fb      	ldrh	r3, [r7, #14]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2233      	movs	r2, #51	; 0x33
 800698e:	2154      	movs	r1, #84	; 0x54
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fabb 	bl	8006f0c <CODEC_IO_Write>
 8006996:	4603      	mov	r3, r0
 8006998:	461a      	mov	r2, r3
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 80069a0:	f240 1001 	movw	r0, #257	; 0x101
 80069a4:	f000 fb2a 	bl	8006ffc <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80069a8:	89fb      	ldrh	r3, [r7, #14]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	22ee      	movs	r2, #238	; 0xee
 80069ae:	2160      	movs	r1, #96	; 0x60
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 faab 	bl	8006f0c <CODEC_IO_Write>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80069c0:	89fb      	ldrh	r3, [r7, #14]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	22c0      	movs	r2, #192	; 0xc0
 80069c6:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fa9e 	bl	8006f0c <CODEC_IO_Write>
 80069d0:	4603      	mov	r3, r0
 80069d2:	461a      	mov	r2, r3
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80069da:	89fb      	ldrh	r3, [r7, #14]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	22c0      	movs	r2, #192	; 0xc0
 80069e0:	f240 6111 	movw	r1, #1553	; 0x611
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fa91 	bl	8006f0c <CODEC_IO_Write>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80069f4:	89fb      	ldrh	r3, [r7, #14]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2210      	movs	r2, #16
 80069fa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fa84 	bl	8006f0c <CODEC_IO_Write>
 8006a04:	4603      	mov	r3, r0
 8006a06:	461a      	mov	r2, r3
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8006a0e:	89fb      	ldrh	r3, [r7, #14]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	22c0      	movs	r2, #192	; 0xc0
 8006a14:	f240 6112 	movw	r1, #1554	; 0x612
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fa77 	bl	8006f0c <CODEC_IO_Write>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	461a      	mov	r2, r3
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8006a28:	89fb      	ldrh	r3, [r7, #14]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	22c0      	movs	r2, #192	; 0xc0
 8006a2e:	f240 6113 	movw	r1, #1555	; 0x613
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fa6a 	bl	8006f0c <CODEC_IO_Write>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	4413      	add	r3, r2
 8006a40:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006a42:	89fb      	ldrh	r3, [r7, #14]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2210      	movs	r2, #16
 8006a48:	f240 4122 	movw	r1, #1058	; 0x422
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fa5d 	bl	8006f0c <CODEC_IO_Write>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006a5c:	7afa      	ldrb	r2, [r7, #11]
 8006a5e:	89fb      	ldrh	r3, [r7, #14]
 8006a60:	4611      	mov	r1, r2
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 f8c0 	bl	8006be8 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8006a68:	8afb      	ldrh	r3, [r7, #22]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 80a6 	beq.w	8006bbc <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8006a70:	8afb      	ldrh	r3, [r7, #22]
 8006a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a76:	d003      	beq.n	8006a80 <wm8994_Init+0xc2c>
 8006a78:	8afb      	ldrh	r3, [r7, #22]
 8006a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7e:	d12b      	bne.n	8006ad8 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8006a80:	8b7b      	ldrh	r3, [r7, #26]
 8006a82:	f043 0313 	orr.w	r3, r3, #19
 8006a86:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006a88:	89fb      	ldrh	r3, [r7, #14]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	8b7a      	ldrh	r2, [r7, #26]
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fa3b 	bl	8006f0c <CODEC_IO_Write>
 8006a96:	4603      	mov	r3, r0
 8006a98:	461a      	mov	r2, r3
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006aa0:	89fb      	ldrh	r3, [r7, #14]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fa2e 	bl	8006f0c <CODEC_IO_Write>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8006aba:	89fb      	ldrh	r3, [r7, #14]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006ac2:	f240 4111 	movw	r1, #1041	; 0x411
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fa20 	bl	8006f0c <CODEC_IO_Write>
 8006acc:	4603      	mov	r3, r0
 8006ace:	461a      	mov	r2, r3
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	e06b      	b.n	8006bb0 <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006ad8:	8afb      	ldrh	r3, [r7, #22]
 8006ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ade:	d139      	bne.n	8006b54 <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8006ae0:	8b7b      	ldrh	r3, [r7, #26]
 8006ae2:	f043 0313 	orr.w	r3, r3, #19
 8006ae6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006ae8:	89fb      	ldrh	r3, [r7, #14]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	8b7a      	ldrh	r2, [r7, #26]
 8006aee:	2101      	movs	r1, #1
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fa0b 	bl	8006f0c <CODEC_IO_Write>
 8006af6:	4603      	mov	r3, r0
 8006af8:	461a      	mov	r2, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4413      	add	r3, r2
 8006afe:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006b00:	89fb      	ldrh	r3, [r7, #14]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2202      	movs	r2, #2
 8006b06:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 f9fe 	bl	8006f0c <CODEC_IO_Write>
 8006b10:	4603      	mov	r3, r0
 8006b12:	461a      	mov	r2, r3
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006b1a:	89fb      	ldrh	r3, [r7, #14]
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006b22:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f9f0 	bl	8006f0c <CODEC_IO_Write>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 8006b36:	89fb      	ldrh	r3, [r7, #14]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006b3e:	f240 4111 	movw	r1, #1041	; 0x411
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 f9e2 	bl	8006f0c <CODEC_IO_Write>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	61fb      	str	r3, [r7, #28]
 8006b52:	e02d      	b.n	8006bb0 <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8006b54:	8afb      	ldrh	r3, [r7, #22]
 8006b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b5a:	d003      	beq.n	8006b64 <wm8994_Init+0xd10>
 8006b5c:	8afb      	ldrh	r3, [r7, #22]
 8006b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b62:	d125      	bne.n	8006bb0 <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8006b64:	89fb      	ldrh	r3, [r7, #14]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	220b      	movs	r2, #11
 8006b6a:	2118      	movs	r1, #24
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 f9cd 	bl	8006f0c <CODEC_IO_Write>
 8006b72:	4603      	mov	r3, r0
 8006b74:	461a      	mov	r2, r3
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8006b7c:	89fb      	ldrh	r3, [r7, #14]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	220b      	movs	r2, #11
 8006b82:	211a      	movs	r1, #26
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f9c1 	bl	8006f0c <CODEC_IO_Write>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	4413      	add	r3, r2
 8006b92:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006b94:	89fb      	ldrh	r3, [r7, #14]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006b9c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 f9b3 	bl	8006f0c <CODEC_IO_Write>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	461a      	mov	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006bb0:	7afa      	ldrb	r2, [r7, #11]
 8006bb2:	89fb      	ldrh	r3, [r7, #14]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f816 	bl	8006be8 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop

08006bc8 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fd ff2f 	bl	8004a3c <AUDIO_I2C_Read>
 8006bde:	4603      	mov	r3, r0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	460a      	mov	r2, r1
 8006bf2:	80fb      	strh	r3, [r7, #6]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8006bfc:	797b      	ldrb	r3, [r7, #5]
 8006bfe:	2b64      	cmp	r3, #100	; 0x64
 8006c00:	d80b      	bhi.n	8006c1a <wm8994_SetVolume+0x32>
 8006c02:	797a      	ldrb	r2, [r7, #5]
 8006c04:	4613      	mov	r3, r2
 8006c06:	019b      	lsls	r3, r3, #6
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	4a86      	ldr	r2, [pc, #536]	; (8006e24 <wm8994_SetVolume+0x23c>)
 8006c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8006c10:	1152      	asrs	r2, r2, #5
 8006c12:	17db      	asrs	r3, r3, #31
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	e000      	b.n	8006c1c <wm8994_SetVolume+0x34>
 8006c1a:	2364      	movs	r3, #100	; 0x64
 8006c1c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8006c1e:	4b82      	ldr	r3, [pc, #520]	; (8006e28 <wm8994_SetVolume+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 809b 	beq.w	8006d5e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8006c28:	7afb      	ldrb	r3, [r7, #11]
 8006c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c2c:	d93d      	bls.n	8006caa <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	2100      	movs	r1, #0
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 f8fc 	bl	8006e30 <wm8994_SetMute>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8006c40:	88fb      	ldrh	r3, [r7, #6]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f240 127f 	movw	r2, #383	; 0x17f
 8006c48:	211c      	movs	r1, #28
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 f95e 	bl	8006f0c <CODEC_IO_Write>
 8006c50:	4603      	mov	r3, r0
 8006c52:	461a      	mov	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f240 127f 	movw	r2, #383	; 0x17f
 8006c62:	211d      	movs	r1, #29
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 f951 	bl	8006f0c <CODEC_IO_Write>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f240 127f 	movw	r2, #383	; 0x17f
 8006c7c:	2126      	movs	r1, #38	; 0x26
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f944 	bl	8006f0c <CODEC_IO_Write>
 8006c84:	4603      	mov	r3, r0
 8006c86:	461a      	mov	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f240 127f 	movw	r2, #383	; 0x17f
 8006c96:	2127      	movs	r1, #39	; 0x27
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 f937 	bl	8006f0c <CODEC_IO_Write>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e059      	b.n	8006d5e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8006caa:	797b      	ldrb	r3, [r7, #5]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d109      	bne.n	8006cc4 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 f8bb 	bl	8006e30 <wm8994_SetMute>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e04c      	b.n	8006d5e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 f8b1 	bl	8006e30 <wm8994_SetMute>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	b2d8      	uxtb	r0, r3
 8006cda:	7afb      	ldrb	r3, [r7, #11]
 8006cdc:	b21b      	sxth	r3, r3
 8006cde:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006ce2:	b21b      	sxth	r3, r3
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	211c      	movs	r1, #28
 8006cea:	f000 f90f 	bl	8006f0c <CODEC_IO_Write>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	b2d8      	uxtb	r0, r3
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	b21b      	sxth	r3, r3
 8006d00:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006d04:	b21b      	sxth	r3, r3
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	211d      	movs	r1, #29
 8006d0c:	f000 f8fe 	bl	8006f0c <CODEC_IO_Write>
 8006d10:	4603      	mov	r3, r0
 8006d12:	461a      	mov	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	b2d8      	uxtb	r0, r3
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	b21b      	sxth	r3, r3
 8006d22:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006d26:	b21b      	sxth	r3, r3
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	2126      	movs	r1, #38	; 0x26
 8006d2e:	f000 f8ed 	bl	8006f0c <CODEC_IO_Write>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4413      	add	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	b2d8      	uxtb	r0, r3
 8006d40:	7afb      	ldrb	r3, [r7, #11]
 8006d42:	b21b      	sxth	r3, r3
 8006d44:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2127      	movs	r1, #39	; 0x27
 8006d50:	f000 f8dc 	bl	8006f0c <CODEC_IO_Write>
 8006d54:	4603      	mov	r3, r0
 8006d56:	461a      	mov	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8006d5e:	4b33      	ldr	r3, [pc, #204]	; (8006e2c <wm8994_SetVolume+0x244>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d059      	beq.n	8006e1a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8006d66:	797b      	ldrb	r3, [r7, #5]
 8006d68:	2b63      	cmp	r3, #99	; 0x63
 8006d6a:	d80c      	bhi.n	8006d86 <wm8994_SetVolume+0x19e>
 8006d6c:	797a      	ldrb	r2, [r7, #5]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	4a2b      	ldr	r2, [pc, #172]	; (8006e24 <wm8994_SetVolume+0x23c>)
 8006d78:	fb82 1203 	smull	r1, r2, r2, r3
 8006d7c:	1152      	asrs	r2, r2, #5
 8006d7e:	17db      	asrs	r3, r3, #31
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	e000      	b.n	8006d88 <wm8994_SetVolume+0x1a0>
 8006d86:	23ef      	movs	r3, #239	; 0xef
 8006d88:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	b2d8      	uxtb	r0, r3
 8006d8e:	7afb      	ldrb	r3, [r7, #11]
 8006d90:	b21b      	sxth	r3, r3
 8006d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d96:	b21b      	sxth	r3, r3
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006da0:	f000 f8b4 	bl	8006f0c <CODEC_IO_Write>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	b2d8      	uxtb	r0, r3
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	b21b      	sxth	r3, r3
 8006db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dba:	b21b      	sxth	r3, r3
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f240 4101 	movw	r1, #1025	; 0x401
 8006dc4:	f000 f8a2 	bl	8006f0c <CODEC_IO_Write>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8006dd2:	88fb      	ldrh	r3, [r7, #6]
 8006dd4:	b2d8      	uxtb	r0, r3
 8006dd6:	7afb      	ldrb	r3, [r7, #11]
 8006dd8:	b21b      	sxth	r3, r3
 8006dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dde:	b21b      	sxth	r3, r3
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	f240 4104 	movw	r1, #1028	; 0x404
 8006de8:	f000 f890 	bl	8006f0c <CODEC_IO_Write>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	b2d8      	uxtb	r0, r3
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	b21b      	sxth	r3, r3
 8006dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e02:	b21b      	sxth	r3, r3
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	f240 4105 	movw	r1, #1029	; 0x405
 8006e0c:	f000 f87e 	bl	8006f0c <CODEC_IO_Write>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	51eb851f 	.word	0x51eb851f
 8006e28:	2001f3f8 	.word	0x2001f3f8
 8006e2c:	2001f3fc 	.word	0x2001f3fc

08006e30 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	6039      	str	r1, [r7, #0]
 8006e3a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8006e40:	4b21      	ldr	r3, [pc, #132]	; (8006ec8 <wm8994_SetMute+0x98>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d039      	beq.n	8006ebc <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d11c      	bne.n	8006e88 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e56:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 f856 	bl	8006f0c <CODEC_IO_Write>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e72:	f240 4122 	movw	r1, #1058	; 0x422
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f848 	bl	8006f0c <CODEC_IO_Write>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	e019      	b.n	8006ebc <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2210      	movs	r2, #16
 8006e8e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 f83a 	bl	8006f0c <CODEC_IO_Write>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2210      	movs	r2, #16
 8006ea8:	f240 4122 	movw	r1, #1058	; 0x422
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f82d 	bl	8006f0c <CODEC_IO_Write>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	2001f3f8 	.word	0x2001f3f8

08006ecc <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f812 	bl	8006f0c <CODEC_IO_Write>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <wm8994_Reset+0x38>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8006ef2:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <wm8994_Reset+0x3c>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

  return counter;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	2001f3f8 	.word	0x2001f3f8
 8006f08:	2001f3fc 	.word	0x2001f3fc

08006f0c <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	71fb      	strb	r3, [r7, #7]
 8006f16:	460b      	mov	r3, r1
 8006f18:	80bb      	strh	r3, [r7, #4]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 8006f22:	887a      	ldrh	r2, [r7, #2]
 8006f24:	88b9      	ldrh	r1, [r7, #4]
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fd fd5d 	bl	80049e8 <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	b2db      	uxtb	r3, r3
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006f40:	480d      	ldr	r0, [pc, #52]	; (8006f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006f42:	490e      	ldr	r1, [pc, #56]	; (8006f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006f44:	4a0e      	ldr	r2, [pc, #56]	; (8006f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f48:	e002      	b.n	8006f50 <LoopCopyDataInit>

08006f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f4e:	3304      	adds	r3, #4

08006f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f54:	d3f9      	bcc.n	8006f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f56:	4a0b      	ldr	r2, [pc, #44]	; (8006f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006f58:	4c0b      	ldr	r4, [pc, #44]	; (8006f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f5c:	e001      	b.n	8006f62 <LoopFillZerobss>

08006f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f60:	3204      	adds	r2, #4

08006f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f64:	d3fb      	bcc.n	8006f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006f66:	f7fd f967 	bl	8004238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f6a:	f012 fb4d 	bl	8019608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f6e:	f7fa fc83 	bl	8001878 <main>
  bx  lr    
 8006f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006f74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f7c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8006f80:	08030d18 	.word	0x08030d18
  ldr r2, =_sbss
 8006f84:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8006f88:	20027c64 	.word	0x20027c64

08006f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f8c:	e7fe      	b.n	8006f8c <ADC_IRQHandler>
	...

08006f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8006f94:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <HAL_Init+0x28>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a07      	ldr	r2, [pc, #28]	; (8006fb8 <HAL_Init+0x28>)
 8006f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f9e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fa0:	2003      	movs	r0, #3
 8006fa2:	f000 fba8 	bl	80076f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	f7fc ffd2 	bl	8003f50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006fac:	f7fb ffb6 	bl	8002f1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40023c00 	.word	0x40023c00

08006fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006fc0:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <HAL_IncTick+0x20>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <HAL_IncTick+0x24>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4413      	add	r3, r2
 8006fcc:	4a04      	ldr	r2, [pc, #16]	; (8006fe0 <HAL_IncTick+0x24>)
 8006fce:	6013      	str	r3, [r2, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	20000058 	.word	0x20000058
 8006fe0:	2001f400 	.word	0x2001f400

08006fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8006fe8:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <HAL_GetTick+0x14>)
 8006fea:	681b      	ldr	r3, [r3, #0]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	2001f400 	.word	0x2001f400

08006ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007004:	f7ff ffee 	bl	8006fe4 <HAL_GetTick>
 8007008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d005      	beq.n	8007022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007016:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <HAL_Delay+0x44>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007022:	bf00      	nop
 8007024:	f7ff ffde 	bl	8006fe4 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	429a      	cmp	r2, r3
 8007032:	d8f7      	bhi.n	8007024 <HAL_Delay+0x28>
  {
  }
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000058 	.word	0x20000058

08007044 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e031      	b.n	80070be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fb ff82 	bl	8002f6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	2b00      	cmp	r3, #0
 8007080:	d116      	bne.n	80070b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007086:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <HAL_ADC_Init+0x84>)
 8007088:	4013      	ands	r3, r2
 800708a:	f043 0202 	orr.w	r2, r3, #2
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f964 	bl	8007360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	f043 0201 	orr.w	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	641a      	str	r2, [r3, #64]	; 0x40
 80070ae:	e001      	b.n	80070b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	ffffeefd 	.word	0xffffeefd

080070cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_ADC_ConfigChannel+0x1c>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e12a      	b.n	800733e <HAL_ADC_ConfigChannel+0x272>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b09      	cmp	r3, #9
 80070f6:	d93a      	bls.n	800716e <HAL_ADC_ConfigChannel+0xa2>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007100:	d035      	beq.n	800716e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68d9      	ldr	r1, [r3, #12]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	4613      	mov	r3, r2
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	4413      	add	r3, r2
 8007116:	3b1e      	subs	r3, #30
 8007118:	2207      	movs	r2, #7
 800711a:	fa02 f303 	lsl.w	r3, r2, r3
 800711e:	43da      	mvns	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	400a      	ands	r2, r1
 8007126:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a87      	ldr	r2, [pc, #540]	; (800734c <HAL_ADC_ConfigChannel+0x280>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10a      	bne.n	8007148 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68d9      	ldr	r1, [r3, #12]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	061a      	lsls	r2, r3, #24
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007146:	e035      	b.n	80071b4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68d9      	ldr	r1, [r3, #12]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	4618      	mov	r0, r3
 800715a:	4603      	mov	r3, r0
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	4403      	add	r3, r0
 8007160:	3b1e      	subs	r3, #30
 8007162:	409a      	lsls	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800716c:	e022      	b.n	80071b4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6919      	ldr	r1, [r3, #16]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	4613      	mov	r3, r2
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	4413      	add	r3, r2
 8007182:	2207      	movs	r2, #7
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	43da      	mvns	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	400a      	ands	r2, r1
 8007190:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6919      	ldr	r1, [r3, #16]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	4618      	mov	r0, r3
 80071a4:	4603      	mov	r3, r0
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	4403      	add	r3, r0
 80071aa:	409a      	lsls	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b06      	cmp	r3, #6
 80071ba:	d824      	bhi.n	8007206 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	3b05      	subs	r3, #5
 80071ce:	221f      	movs	r2, #31
 80071d0:	fa02 f303 	lsl.w	r3, r2, r3
 80071d4:	43da      	mvns	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	400a      	ands	r2, r1
 80071dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4618      	mov	r0, r3
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	3b05      	subs	r3, #5
 80071f8:	fa00 f203 	lsl.w	r2, r0, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	635a      	str	r2, [r3, #52]	; 0x34
 8007204:	e04c      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b0c      	cmp	r3, #12
 800720c:	d824      	bhi.n	8007258 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	3b23      	subs	r3, #35	; 0x23
 8007220:	221f      	movs	r2, #31
 8007222:	fa02 f303 	lsl.w	r3, r2, r3
 8007226:	43da      	mvns	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	400a      	ands	r2, r1
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	4618      	mov	r0, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	3b23      	subs	r3, #35	; 0x23
 800724a:	fa00 f203 	lsl.w	r2, r0, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
 8007256:	e023      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	3b41      	subs	r3, #65	; 0x41
 800726a:	221f      	movs	r2, #31
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	43da      	mvns	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	400a      	ands	r2, r1
 8007278:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	4618      	mov	r0, r3
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	3b41      	subs	r3, #65	; 0x41
 8007294:	fa00 f203 	lsl.w	r2, r0, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a2a      	ldr	r2, [pc, #168]	; (8007350 <HAL_ADC_ConfigChannel+0x284>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d10a      	bne.n	80072c0 <HAL_ADC_ConfigChannel+0x1f4>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072b2:	d105      	bne.n	80072c0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80072b4:	4b27      	ldr	r3, [pc, #156]	; (8007354 <HAL_ADC_ConfigChannel+0x288>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	4a26      	ldr	r2, [pc, #152]	; (8007354 <HAL_ADC_ConfigChannel+0x288>)
 80072ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80072be:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a22      	ldr	r2, [pc, #136]	; (8007350 <HAL_ADC_ConfigChannel+0x284>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d109      	bne.n	80072de <HAL_ADC_ConfigChannel+0x212>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b12      	cmp	r3, #18
 80072d0:	d105      	bne.n	80072de <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80072d2:	4b20      	ldr	r3, [pc, #128]	; (8007354 <HAL_ADC_ConfigChannel+0x288>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4a1f      	ldr	r2, [pc, #124]	; (8007354 <HAL_ADC_ConfigChannel+0x288>)
 80072d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a1b      	ldr	r2, [pc, #108]	; (8007350 <HAL_ADC_ConfigChannel+0x284>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d125      	bne.n	8007334 <HAL_ADC_ConfigChannel+0x268>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a17      	ldr	r2, [pc, #92]	; (800734c <HAL_ADC_ConfigChannel+0x280>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <HAL_ADC_ConfigChannel+0x22e>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b11      	cmp	r3, #17
 80072f8:	d11c      	bne.n	8007334 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80072fa:	4b16      	ldr	r3, [pc, #88]	; (8007354 <HAL_ADC_ConfigChannel+0x288>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	4a15      	ldr	r2, [pc, #84]	; (8007354 <HAL_ADC_ConfigChannel+0x288>)
 8007300:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007304:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a10      	ldr	r2, [pc, #64]	; (800734c <HAL_ADC_ConfigChannel+0x280>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d111      	bne.n	8007334 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007310:	4b11      	ldr	r3, [pc, #68]	; (8007358 <HAL_ADC_ConfigChannel+0x28c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a11      	ldr	r2, [pc, #68]	; (800735c <HAL_ADC_ConfigChannel+0x290>)
 8007316:	fba2 2303 	umull	r2, r3, r2, r3
 800731a:	0c9a      	lsrs	r2, r3, #18
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007326:	e002      	b.n	800732e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3b01      	subs	r3, #1
 800732c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f9      	bne.n	8007328 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	10000012 	.word	0x10000012
 8007350:	40012000 	.word	0x40012000
 8007354:	40012300 	.word	0x40012300
 8007358:	2000002c 	.word	0x2000002c
 800735c:	431bde83 	.word	0x431bde83

08007360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007368:	4b78      	ldr	r3, [pc, #480]	; (800754c <ADC_Init+0x1ec>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	4a77      	ldr	r2, [pc, #476]	; (800754c <ADC_Init+0x1ec>)
 800736e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007372:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007374:	4b75      	ldr	r3, [pc, #468]	; (800754c <ADC_Init+0x1ec>)
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4973      	ldr	r1, [pc, #460]	; (800754c <ADC_Init+0x1ec>)
 800737e:	4313      	orrs	r3, r2
 8007380:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6859      	ldr	r1, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	021a      	lsls	r2, r3, #8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80073b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6899      	ldr	r1, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	4a58      	ldr	r2, [pc, #352]	; (8007550 <ADC_Init+0x1f0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d022      	beq.n	800743a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007402:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6899      	ldr	r1, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6899      	ldr	r1, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	609a      	str	r2, [r3, #8]
 8007438:	e00f      	b.n	800745a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007458:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0202 	bic.w	r2, r2, #2
 8007468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6899      	ldr	r1, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	005a      	lsls	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01b      	beq.n	80074c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007496:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80074a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6859      	ldr	r1, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	3b01      	subs	r3, #1
 80074b4:	035a      	lsls	r2, r3, #13
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
 80074be:	e007      	b.n	80074d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80074de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	051a      	lsls	r2, r3, #20
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6899      	ldr	r1, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007512:	025a      	lsls	r2, r3, #9
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6899      	ldr	r1, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	029a      	lsls	r2, r3, #10
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	40012300 	.word	0x40012300
 8007550:	0f000001 	.word	0x0f000001

08007554 <__NVIC_SetPriorityGrouping>:
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007564:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <__NVIC_SetPriorityGrouping+0x40>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007570:	4013      	ands	r3, r2
 8007572:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <__NVIC_SetPriorityGrouping+0x44>)
 800757e:	4313      	orrs	r3, r2
 8007580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007582:	4a04      	ldr	r2, [pc, #16]	; (8007594 <__NVIC_SetPriorityGrouping+0x40>)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	60d3      	str	r3, [r2, #12]
}
 8007588:	bf00      	nop
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	e000ed00 	.word	0xe000ed00
 8007598:	05fa0000 	.word	0x05fa0000

0800759c <__NVIC_GetPriorityGrouping>:
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075a0:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <__NVIC_GetPriorityGrouping+0x18>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	0a1b      	lsrs	r3, r3, #8
 80075a6:	f003 0307 	and.w	r3, r3, #7
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	e000ed00 	.word	0xe000ed00

080075b8 <__NVIC_EnableIRQ>:
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	db0b      	blt.n	80075e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	f003 021f 	and.w	r2, r3, #31
 80075d0:	4907      	ldr	r1, [pc, #28]	; (80075f0 <__NVIC_EnableIRQ+0x38>)
 80075d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	2001      	movs	r0, #1
 80075da:	fa00 f202 	lsl.w	r2, r0, r2
 80075de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	e000e100 	.word	0xe000e100

080075f4 <__NVIC_DisableIRQ>:
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	db12      	blt.n	800762c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	f003 021f 	and.w	r2, r3, #31
 800760c:	490a      	ldr	r1, [pc, #40]	; (8007638 <__NVIC_DisableIRQ+0x44>)
 800760e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	2001      	movs	r0, #1
 8007616:	fa00 f202 	lsl.w	r2, r0, r2
 800761a:	3320      	adds	r3, #32
 800761c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007620:	f3bf 8f4f 	dsb	sy
}
 8007624:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007626:	f3bf 8f6f 	isb	sy
}
 800762a:	bf00      	nop
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	e000e100 	.word	0xe000e100

0800763c <__NVIC_SetPriority>:
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	6039      	str	r1, [r7, #0]
 8007646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764c:	2b00      	cmp	r3, #0
 800764e:	db0a      	blt.n	8007666 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	b2da      	uxtb	r2, r3
 8007654:	490c      	ldr	r1, [pc, #48]	; (8007688 <__NVIC_SetPriority+0x4c>)
 8007656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800765a:	0112      	lsls	r2, r2, #4
 800765c:	b2d2      	uxtb	r2, r2
 800765e:	440b      	add	r3, r1
 8007660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007664:	e00a      	b.n	800767c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	b2da      	uxtb	r2, r3
 800766a:	4908      	ldr	r1, [pc, #32]	; (800768c <__NVIC_SetPriority+0x50>)
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	3b04      	subs	r3, #4
 8007674:	0112      	lsls	r2, r2, #4
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	440b      	add	r3, r1
 800767a:	761a      	strb	r2, [r3, #24]
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	e000e100 	.word	0xe000e100
 800768c:	e000ed00 	.word	0xe000ed00

08007690 <NVIC_EncodePriority>:
{
 8007690:	b480      	push	{r7}
 8007692:	b089      	sub	sp, #36	; 0x24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f1c3 0307 	rsb	r3, r3, #7
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	bf28      	it	cs
 80076ae:	2304      	movcs	r3, #4
 80076b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	3304      	adds	r3, #4
 80076b6:	2b06      	cmp	r3, #6
 80076b8:	d902      	bls.n	80076c0 <NVIC_EncodePriority+0x30>
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	3b03      	subs	r3, #3
 80076be:	e000      	b.n	80076c2 <NVIC_EncodePriority+0x32>
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076c4:	f04f 32ff 	mov.w	r2, #4294967295
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	43da      	mvns	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	401a      	ands	r2, r3
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076d8:	f04f 31ff 	mov.w	r1, #4294967295
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	fa01 f303 	lsl.w	r3, r1, r3
 80076e2:	43d9      	mvns	r1, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076e8:	4313      	orrs	r3, r2
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3724      	adds	r7, #36	; 0x24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff ff28 	bl	8007554 <__NVIC_SetPriorityGrouping>
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800771e:	f7ff ff3d 	bl	800759c <__NVIC_GetPriorityGrouping>
 8007722:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	6978      	ldr	r0, [r7, #20]
 800772a:	f7ff ffb1 	bl	8007690 <NVIC_EncodePriority>
 800772e:	4602      	mov	r2, r0
 8007730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007734:	4611      	mov	r1, r2
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff ff80 	bl	800763c <__NVIC_SetPriority>
}
 800773c:	bf00      	nop
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800774e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff ff30 	bl	80075b8 <__NVIC_EnableIRQ>
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800776a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff ff40 	bl	80075f4 <__NVIC_DisableIRQ>
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007780:	f3bf 8f5f 	dmb	sy
}
 8007784:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <HAL_MPU_Disable+0x28>)
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	4a06      	ldr	r2, [pc, #24]	; (80077a4 <HAL_MPU_Disable+0x28>)
 800778c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007790:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007792:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <HAL_MPU_Disable+0x2c>)
 8007794:	2200      	movs	r2, #0
 8007796:	605a      	str	r2, [r3, #4]
}
 8007798:	bf00      	nop
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	e000ed00 	.word	0xe000ed00
 80077a8:	e000ed90 	.word	0xe000ed90

080077ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80077b4:	4a0b      	ldr	r2, [pc, #44]	; (80077e4 <HAL_MPU_Enable+0x38>)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80077be:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <HAL_MPU_Enable+0x3c>)
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	4a09      	ldr	r2, [pc, #36]	; (80077e8 <HAL_MPU_Enable+0x3c>)
 80077c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80077ca:	f3bf 8f4f 	dsb	sy
}
 80077ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80077d0:	f3bf 8f6f 	isb	sy
}
 80077d4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	e000ed90 	.word	0xe000ed90
 80077e8:	e000ed00 	.word	0xe000ed00

080077ec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	785a      	ldrb	r2, [r3, #1]
 80077f8:	4b1d      	ldr	r3, [pc, #116]	; (8007870 <HAL_MPU_ConfigRegion+0x84>)
 80077fa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d029      	beq.n	8007858 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8007804:	4a1a      	ldr	r2, [pc, #104]	; (8007870 <HAL_MPU_ConfigRegion+0x84>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7b1b      	ldrb	r3, [r3, #12]
 8007810:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7adb      	ldrb	r3, [r3, #11]
 8007816:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007818:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7a9b      	ldrb	r3, [r3, #10]
 800781e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007820:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	7b5b      	ldrb	r3, [r3, #13]
 8007826:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007828:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7b9b      	ldrb	r3, [r3, #14]
 800782e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007830:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7bdb      	ldrb	r3, [r3, #15]
 8007836:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007838:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	7a5b      	ldrb	r3, [r3, #9]
 800783e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007840:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7a1b      	ldrb	r3, [r3, #8]
 8007846:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007848:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	7812      	ldrb	r2, [r2, #0]
 800784e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007850:	4a07      	ldr	r2, [pc, #28]	; (8007870 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007852:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007854:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8007856:	e005      	b.n	8007864 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8007858:	4b05      	ldr	r3, [pc, #20]	; (8007870 <HAL_MPU_ConfigRegion+0x84>)
 800785a:	2200      	movs	r2, #0
 800785c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800785e:	4b04      	ldr	r3, [pc, #16]	; (8007870 <HAL_MPU_ConfigRegion+0x84>)
 8007860:	2200      	movs	r2, #0
 8007862:	611a      	str	r2, [r3, #16]
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000ed90 	.word	0xe000ed90

08007874 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e054      	b.n	8007930 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7f5b      	ldrb	r3, [r3, #29]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7fb fbc2 	bl	8003020 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	791b      	ldrb	r3, [r3, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10c      	bne.n	80078c4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a22      	ldr	r2, [pc, #136]	; (8007938 <HAL_CRC_Init+0xc4>)
 80078b0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0218 	bic.w	r2, r2, #24
 80078c0:	609a      	str	r2, [r3, #8]
 80078c2:	e00c      	b.n	80078de <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6899      	ldr	r1, [r3, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f834 	bl	800793c <HAL_CRCEx_Polynomial_Set>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e028      	b.n	8007930 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	795b      	ldrb	r3, [r3, #5]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d105      	bne.n	80078f2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f04f 32ff 	mov.w	r2, #4294967295
 80078ee:	611a      	str	r2, [r3, #16]
 80078f0:	e004      	b.n	80078fc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6912      	ldr	r2, [r2, #16]
 80078fa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	695a      	ldr	r2, [r3, #20]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699a      	ldr	r2, [r3, #24]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	04c11db7 	.word	0x04c11db7

0800793c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800794c:	231f      	movs	r3, #31
 800794e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007950:	bf00      	nop
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	1e5a      	subs	r2, r3, #1
 8007956:	613a      	str	r2, [r7, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d009      	beq.n	8007970 <HAL_CRCEx_Polynomial_Set+0x34>
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	fa22 f303 	lsr.w	r3, r2, r3
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0f0      	beq.n	8007952 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b18      	cmp	r3, #24
 8007974:	d846      	bhi.n	8007a04 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007976:	a201      	add	r2, pc, #4	; (adr r2, 800797c <HAL_CRCEx_Polynomial_Set+0x40>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	08007a0b 	.word	0x08007a0b
 8007980:	08007a05 	.word	0x08007a05
 8007984:	08007a05 	.word	0x08007a05
 8007988:	08007a05 	.word	0x08007a05
 800798c:	08007a05 	.word	0x08007a05
 8007990:	08007a05 	.word	0x08007a05
 8007994:	08007a05 	.word	0x08007a05
 8007998:	08007a05 	.word	0x08007a05
 800799c:	080079f9 	.word	0x080079f9
 80079a0:	08007a05 	.word	0x08007a05
 80079a4:	08007a05 	.word	0x08007a05
 80079a8:	08007a05 	.word	0x08007a05
 80079ac:	08007a05 	.word	0x08007a05
 80079b0:	08007a05 	.word	0x08007a05
 80079b4:	08007a05 	.word	0x08007a05
 80079b8:	08007a05 	.word	0x08007a05
 80079bc:	080079ed 	.word	0x080079ed
 80079c0:	08007a05 	.word	0x08007a05
 80079c4:	08007a05 	.word	0x08007a05
 80079c8:	08007a05 	.word	0x08007a05
 80079cc:	08007a05 	.word	0x08007a05
 80079d0:	08007a05 	.word	0x08007a05
 80079d4:	08007a05 	.word	0x08007a05
 80079d8:	08007a05 	.word	0x08007a05
 80079dc:	080079e1 	.word	0x080079e1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2b06      	cmp	r3, #6
 80079e4:	d913      	bls.n	8007a0e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80079ea:	e010      	b.n	8007a0e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2b07      	cmp	r3, #7
 80079f0:	d90f      	bls.n	8007a12 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80079f6:	e00c      	b.n	8007a12 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2b0f      	cmp	r3, #15
 80079fc:	d90b      	bls.n	8007a16 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007a02:	e008      	b.n	8007a16 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	75fb      	strb	r3, [r7, #23]
      break;
 8007a08:	e006      	b.n	8007a18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a0a:	bf00      	nop
 8007a0c:	e004      	b.n	8007a18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a0e:	bf00      	nop
 8007a10:	e002      	b.n	8007a18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a12:	bf00      	nop
 8007a14:	e000      	b.n	8007a18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a16:	bf00      	nop
  }
  if (status == HAL_OK)
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10d      	bne.n	8007a3a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f023 0118 	bic.w	r1, r3, #24
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	371c      	adds	r7, #28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e069      	b.n	8007b2e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fb fafa 	bl	8003060 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6819      	ldr	r1, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4b2a      	ldr	r3, [pc, #168]	; (8007b38 <HAL_DCMI_Init+0xf0>)
 8007a8e:	400b      	ands	r3, r1
 8007a90:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6819      	ldr	r1, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007aa6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007ab2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007abe:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007aca:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8007ad6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	2b10      	cmp	r3, #16
 8007ae6:	d112      	bne.n	8007b0e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7f1b      	ldrb	r3, [r3, #28]
 8007aec:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	7f5b      	ldrb	r3, [r3, #29]
 8007af2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007af4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	7f9b      	ldrb	r3, [r3, #30]
 8007afa:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007afc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7fdb      	ldrb	r3, [r3, #31]
 8007b04:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8007b0a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007b0c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 021e 	orr.w	r2, r2, #30
 8007b1c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	ffe0f007 	.word	0xffe0f007

08007b3c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f003 0304 	and.w	r3, r3, #4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d016      	beq.n	8007b84 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b62:	f043 0202 	orr.w	r2, r3, #2
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2204      	movs	r2, #4
 8007b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b76:	4a35      	ldr	r2, [pc, #212]	; (8007c4c <HAL_DCMI_IRQHandler+0x110>)
 8007b78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fa2a 	bl	8007fd8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01e      	beq.n	8007bcc <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2202      	movs	r2, #2
 8007b94:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9a:	f043 0201 	orr.w	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2204      	movs	r2, #4
 8007ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bae:	4a27      	ldr	r2, [pc, #156]	; (8007c4c <HAL_DCMI_IRQHandler+0x110>)
 8007bb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fa0e 	bl	8007fd8 <HAL_DMA_Abort_IT>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d004      	beq.n	8007bcc <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f86a 	bl	8007ca0 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f003 0310 	and.w	r3, r3, #16
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d006      	beq.n	8007be4 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2210      	movs	r2, #16
 8007bdc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f840 	bl	8007c64 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d006      	beq.n	8007bfc <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2208      	movs	r2, #8
 8007bf4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f83e 	bl	8007c78 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d01d      	beq.n	8007c42 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d107      	bne.n	8007c24 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 021e 	bic.w	r2, r2, #30
 8007c22:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0201 	bic.w	r2, r2, #1
 8007c32:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f825 	bl	8007c8c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	08007ca1 	.word	0x08007ca1

08007c50 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d009      	beq.n	8007ccc <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7ff ffbf 	bl	8007c50 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ce8:	f7ff f97c 	bl	8006fe4 <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e099      	b.n	8007e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0201 	bic.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d18:	e00f      	b.n	8007d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d1a:	f7ff f963 	bl	8006fe4 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b05      	cmp	r3, #5
 8007d26:	d908      	bls.n	8007d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2203      	movs	r2, #3
 8007d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e078      	b.n	8007e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e8      	bne.n	8007d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4b38      	ldr	r3, [pc, #224]	; (8007e34 <HAL_DMA_Init+0x158>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d107      	bne.n	8007da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d117      	bne.n	8007dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00e      	beq.n	8007dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fb15 	bl	8008410 <DMA_CheckFifoParam>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d008      	beq.n	8007dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2240      	movs	r2, #64	; 0x40
 8007df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e016      	b.n	8007e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 facc 	bl	80083a4 <DMA_CalcBaseAndBitshift>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e14:	223f      	movs	r2, #63	; 0x3f
 8007e16:	409a      	lsls	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	f010803f 	.word	0xf010803f

08007e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_DMA_Start_IT+0x26>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e048      	b.n	8007ef0 <HAL_DMA_Start_IT+0xb8>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d137      	bne.n	8007ee2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 fa5e 	bl	8008348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e90:	223f      	movs	r2, #63	; 0x3f
 8007e92:	409a      	lsls	r2, r3
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0216 	orr.w	r2, r2, #22
 8007ea6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695a      	ldr	r2, [r3, #20]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007eb6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d007      	beq.n	8007ed0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0208 	orr.w	r2, r2, #8
 8007ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0201 	orr.w	r2, r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	e005      	b.n	8007eee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007eea:	2302      	movs	r3, #2
 8007eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007f06:	f7ff f86d 	bl	8006fe4 <HAL_GetTick>
 8007f0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d008      	beq.n	8007f2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2280      	movs	r2, #128	; 0x80
 8007f1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e052      	b.n	8007fd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0216 	bic.w	r2, r2, #22
 8007f38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	695a      	ldr	r2, [r3, #20]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d103      	bne.n	8007f5a <HAL_DMA_Abort+0x62>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d007      	beq.n	8007f6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0208 	bic.w	r2, r2, #8
 8007f68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0201 	bic.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f7a:	e013      	b.n	8007fa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f7c:	f7ff f832 	bl	8006fe4 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d90c      	bls.n	8007fa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e015      	b.n	8007fd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e4      	bne.n	8007f7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb6:	223f      	movs	r2, #63	; 0x3f
 8007fb8:	409a      	lsls	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d004      	beq.n	8007ff6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2280      	movs	r2, #128	; 0x80
 8007ff0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e00c      	b.n	8008010 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0201 	bic.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008028:	4b8e      	ldr	r3, [pc, #568]	; (8008264 <HAL_DMA_IRQHandler+0x248>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a8e      	ldr	r2, [pc, #568]	; (8008268 <HAL_DMA_IRQHandler+0x24c>)
 800802e:	fba2 2303 	umull	r2, r3, r2, r3
 8008032:	0a9b      	lsrs	r3, r3, #10
 8008034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008046:	2208      	movs	r2, #8
 8008048:	409a      	lsls	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4013      	ands	r3, r2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01a      	beq.n	8008088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b00      	cmp	r3, #0
 800805e:	d013      	beq.n	8008088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0204 	bic.w	r2, r2, #4
 800806e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008074:	2208      	movs	r2, #8
 8008076:	409a      	lsls	r2, r3
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	f043 0201 	orr.w	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808c:	2201      	movs	r2, #1
 800808e:	409a      	lsls	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4013      	ands	r3, r2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d012      	beq.n	80080be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080aa:	2201      	movs	r2, #1
 80080ac:	409a      	lsls	r2, r3
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b6:	f043 0202 	orr.w	r2, r3, #2
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080c2:	2204      	movs	r2, #4
 80080c4:	409a      	lsls	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4013      	ands	r3, r2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d012      	beq.n	80080f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e0:	2204      	movs	r2, #4
 80080e2:	409a      	lsls	r2, r3
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ec:	f043 0204 	orr.w	r2, r3, #4
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f8:	2210      	movs	r2, #16
 80080fa:	409a      	lsls	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4013      	ands	r3, r2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d043      	beq.n	800818c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d03c      	beq.n	800818c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008116:	2210      	movs	r2, #16
 8008118:	409a      	lsls	r2, r3
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d018      	beq.n	800815e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d108      	bne.n	800814c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	d024      	beq.n	800818c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	4798      	blx	r3
 800814a:	e01f      	b.n	800818c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
 800815c:	e016      	b.n	800818c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008168:	2b00      	cmp	r3, #0
 800816a:	d107      	bne.n	800817c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0208 	bic.w	r2, r2, #8
 800817a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008190:	2220      	movs	r2, #32
 8008192:	409a      	lsls	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4013      	ands	r3, r2
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 808f 	beq.w	80082bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8087 	beq.w	80082bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b2:	2220      	movs	r2, #32
 80081b4:	409a      	lsls	r2, r3
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	d136      	bne.n	8008234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0216 	bic.w	r2, r2, #22
 80081d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695a      	ldr	r2, [r3, #20]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d103      	bne.n	80081f6 <HAL_DMA_IRQHandler+0x1da>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0208 	bic.w	r2, r2, #8
 8008204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820a:	223f      	movs	r2, #63	; 0x3f
 800820c:	409a      	lsls	r2, r3
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008226:	2b00      	cmp	r3, #0
 8008228:	d07e      	beq.n	8008328 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
        }
        return;
 8008232:	e079      	b.n	8008328 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d01d      	beq.n	800827e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10d      	bne.n	800826c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008254:	2b00      	cmp	r3, #0
 8008256:	d031      	beq.n	80082bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	4798      	blx	r3
 8008260:	e02c      	b.n	80082bc <HAL_DMA_IRQHandler+0x2a0>
 8008262:	bf00      	nop
 8008264:	2000002c 	.word	0x2000002c
 8008268:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d023      	beq.n	80082bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	4798      	blx	r3
 800827c:	e01e      	b.n	80082bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10f      	bne.n	80082ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0210 	bic.w	r2, r2, #16
 800829a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d032      	beq.n	800832a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d022      	beq.n	8008316 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2205      	movs	r2, #5
 80082d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60bb      	str	r3, [r7, #8]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d307      	bcc.n	8008304 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f2      	bne.n	80082e8 <HAL_DMA_IRQHandler+0x2cc>
 8008302:	e000      	b.n	8008306 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008304:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4798      	blx	r3
 8008326:	e000      	b.n	800832a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008328:	bf00      	nop
    }
  }
}
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800833c:	4618      	mov	r0, r3
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	2b40      	cmp	r3, #64	; 0x40
 8008374:	d108      	bne.n	8008388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008386:	e007      	b.n	8008398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	60da      	str	r2, [r3, #12]
}
 8008398:	bf00      	nop
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	3b10      	subs	r3, #16
 80083b4:	4a13      	ldr	r2, [pc, #76]	; (8008404 <DMA_CalcBaseAndBitshift+0x60>)
 80083b6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ba:	091b      	lsrs	r3, r3, #4
 80083bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80083be:	4a12      	ldr	r2, [pc, #72]	; (8008408 <DMA_CalcBaseAndBitshift+0x64>)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4413      	add	r3, r2
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d908      	bls.n	80083e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	4b0c      	ldr	r3, [pc, #48]	; (800840c <DMA_CalcBaseAndBitshift+0x68>)
 80083da:	4013      	ands	r3, r2
 80083dc:	1d1a      	adds	r2, r3, #4
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	659a      	str	r2, [r3, #88]	; 0x58
 80083e2:	e006      	b.n	80083f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	4b08      	ldr	r3, [pc, #32]	; (800840c <DMA_CalcBaseAndBitshift+0x68>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	aaaaaaab 	.word	0xaaaaaaab
 8008408:	0801d7fc 	.word	0x0801d7fc
 800840c:	fffffc00 	.word	0xfffffc00

08008410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d11f      	bne.n	800846a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b03      	cmp	r3, #3
 800842e:	d856      	bhi.n	80084de <DMA_CheckFifoParam+0xce>
 8008430:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <DMA_CheckFifoParam+0x28>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	08008449 	.word	0x08008449
 800843c:	0800845b 	.word	0x0800845b
 8008440:	08008449 	.word	0x08008449
 8008444:	080084df 	.word	0x080084df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d046      	beq.n	80084e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008458:	e043      	b.n	80084e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008462:	d140      	bne.n	80084e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008468:	e03d      	b.n	80084e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008472:	d121      	bne.n	80084b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b03      	cmp	r3, #3
 8008478:	d837      	bhi.n	80084ea <DMA_CheckFifoParam+0xda>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <DMA_CheckFifoParam+0x70>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008491 	.word	0x08008491
 8008484:	08008497 	.word	0x08008497
 8008488:	08008491 	.word	0x08008491
 800848c:	080084a9 	.word	0x080084a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	73fb      	strb	r3, [r7, #15]
      break;
 8008494:	e030      	b.n	80084f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d025      	beq.n	80084ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084a6:	e022      	b.n	80084ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084b0:	d11f      	bne.n	80084f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80084b6:	e01c      	b.n	80084f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d903      	bls.n	80084c6 <DMA_CheckFifoParam+0xb6>
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d003      	beq.n	80084cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80084c4:	e018      	b.n	80084f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ca:	e015      	b.n	80084f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00e      	beq.n	80084f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	73fb      	strb	r3, [r7, #15]
      break;
 80084dc:	e00b      	b.n	80084f6 <DMA_CheckFifoParam+0xe6>
      break;
 80084de:	bf00      	nop
 80084e0:	e00a      	b.n	80084f8 <DMA_CheckFifoParam+0xe8>
      break;
 80084e2:	bf00      	nop
 80084e4:	e008      	b.n	80084f8 <DMA_CheckFifoParam+0xe8>
      break;
 80084e6:	bf00      	nop
 80084e8:	e006      	b.n	80084f8 <DMA_CheckFifoParam+0xe8>
      break;
 80084ea:	bf00      	nop
 80084ec:	e004      	b.n	80084f8 <DMA_CheckFifoParam+0xe8>
      break;
 80084ee:	bf00      	nop
 80084f0:	e002      	b.n	80084f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80084f2:	bf00      	nop
 80084f4:	e000      	b.n	80084f8 <DMA_CheckFifoParam+0xe8>
      break;
 80084f6:	bf00      	nop
    }
  } 
  
  return status; 
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop

08008508 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e039      	b.n	800858e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fa fe90 	bl	8003254 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008558:	f023 0107 	bic.w	r1, r3, #7
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800856e:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <HAL_DMA2D_Init+0x90>)
 8008570:	4013      	ands	r3, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	68d1      	ldr	r1, [r2, #12]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	430b      	orrs	r3, r1
 800857c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	ffffc000 	.word	0xffffc000

0800859c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <HAL_DMA2D_Start+0x1c>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e018      	b.n	80085ea <HAL_DMA2D_Start+0x4e>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	68b9      	ldr	r1, [r7, #8]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 fa98 	bl	8008b08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0201 	orr.w	r2, r2, #1
 80085e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b086      	sub	sp, #24
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d056      	beq.n	80086bc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800860e:	f7fe fce9 	bl	8006fe4 <HAL_GetTick>
 8008612:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008614:	e04b      	b.n	80086ae <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008624:	2b00      	cmp	r3, #0
 8008626:	d023      	beq.n	8008670 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	f043 0202 	orr.w	r2, r3, #2
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864c:	f043 0201 	orr.w	r2, r3, #1
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2221      	movs	r2, #33	; 0x21
 800865a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2204      	movs	r2, #4
 8008660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e0a5      	b.n	80087bc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008676:	d01a      	beq.n	80086ae <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008678:	f7fe fcb4 	bl	8006fe4 <HAL_GetTick>
 800867c:	4602      	mov	r2, r0
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	429a      	cmp	r2, r3
 8008686:	d302      	bcc.n	800868e <HAL_DMA2D_PollForTransfer+0x9c>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10f      	bne.n	80086ae <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	f043 0220 	orr.w	r2, r3, #32
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2203      	movs	r2, #3
 800869e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e086      	b.n	80087bc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f003 0302 	and.w	r3, r3, #2
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0ac      	beq.n	8008616 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d061      	beq.n	80087a2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80086de:	f7fe fc81 	bl	8006fe4 <HAL_GetTick>
 80086e2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80086e4:	e056      	b.n	8008794 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d02e      	beq.n	8008756 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008706:	f043 0204 	orr.w	r2, r3, #4
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871c:	f043 0202 	orr.w	r2, r3, #2
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008732:	f043 0201 	orr.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2229      	movs	r2, #41	; 0x29
 8008740:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2204      	movs	r2, #4
 8008746:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e032      	b.n	80087bc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875c:	d01a      	beq.n	8008794 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800875e:	f7fe fc41 	bl	8006fe4 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	429a      	cmp	r2, r3
 800876c:	d302      	bcc.n	8008774 <HAL_DMA2D_PollForTransfer+0x182>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10f      	bne.n	8008794 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008778:	f043 0220 	orr.w	r2, r3, #32
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2203      	movs	r2, #3
 8008784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e013      	b.n	80087bc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f003 0310 	and.w	r3, r3, #16
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0a1      	beq.n	80086e6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2212      	movs	r2, #18
 80087a8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d026      	beq.n	8008834 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d021      	beq.n	8008834 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087fe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008804:	f043 0201 	orr.w	r2, r3, #1
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2201      	movs	r2, #1
 8008812:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2204      	movs	r2, #4
 8008818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d026      	beq.n	800888c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d021      	beq.n	800888c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008856:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2220      	movs	r2, #32
 800885e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	f043 0202 	orr.w	r2, r3, #2
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2204      	movs	r2, #4
 8008870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d026      	beq.n	80088e4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800889c:	2b00      	cmp	r3, #0
 800889e:	d021      	beq.n	80088e4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088ae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2208      	movs	r2, #8
 80088b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088bc:	f043 0204 	orr.w	r2, r3, #4
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2204      	movs	r2, #4
 80088c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d013      	beq.n	8008916 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00e      	beq.n	8008916 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008906:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2204      	movs	r2, #4
 800890e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f853 	bl	80089bc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d024      	beq.n	800896a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008926:	2b00      	cmp	r3, #0
 8008928:	d01f      	beq.n	800896a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008938:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2202      	movs	r2, #2
 8008940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f003 0310 	and.w	r3, r3, #16
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01f      	beq.n	80089b4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d01a      	beq.n	80089b4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800898c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2210      	movs	r2, #16
 8008994:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f80e 	bl	80089d0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d101      	bne.n	8008a04 <HAL_DMA2D_ConfigLayer+0x20>
 8008a00:	2302      	movs	r3, #2
 8008a02:	e079      	b.n	8008af8 <HAL_DMA2D_ConfigLayer+0x114>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	3318      	adds	r3, #24
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	041b      	lsls	r3, r3, #16
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008a2e:	4b35      	ldr	r3, [pc, #212]	; (8008b04 <HAL_DMA2D_ConfigLayer+0x120>)
 8008a30:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b0a      	cmp	r3, #10
 8008a38:	d003      	beq.n	8008a42 <HAL_DMA2D_ConfigLayer+0x5e>
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b09      	cmp	r3, #9
 8008a40:	d107      	bne.n	8008a52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	e005      	b.n	8008a5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	061b      	lsls	r3, r3, #24
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d120      	bne.n	8008aa6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	43db      	mvns	r3, r3
 8008a6e:	ea02 0103 	and.w	r1, r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	6812      	ldr	r2, [r2, #0]
 8008a84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2b0a      	cmp	r3, #10
 8008a8c:	d003      	beq.n	8008a96 <HAL_DMA2D_ConfigLayer+0xb2>
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	2b09      	cmp	r3, #9
 8008a94:	d127      	bne.n	8008ae6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8008aa4:	e01f      	b.n	8008ae6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69da      	ldr	r2, [r3, #28]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	43db      	mvns	r3, r3
 8008ab0:	ea02 0103 	and.w	r1, r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	6812      	ldr	r2, [r2, #0]
 8008ac6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	2b0a      	cmp	r3, #10
 8008ace:	d003      	beq.n	8008ad8 <HAL_DMA2D_ConfigLayer+0xf4>
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	d106      	bne.n	8008ae6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008ae4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	371c      	adds	r7, #28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	ff03000f 	.word	0xff03000f

08008b08 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b08b      	sub	sp, #44	; 0x2c
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	041a      	lsls	r2, r3, #16
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	431a      	orrs	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b40:	d174      	bne.n	8008c2c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008b48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d108      	bne.n	8008b7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24
 8008b78:	e053      	b.n	8008c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d106      	bne.n	8008b90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8e:	e048      	b.n	8008c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d111      	bne.n	8008bbc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	0cdb      	lsrs	r3, r3, #19
 8008b9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	0a9b      	lsrs	r3, r3, #10
 8008ba2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	08db      	lsrs	r3, r3, #3
 8008ba8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	02db      	lsls	r3, r3, #11
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008bba:	e032      	b.n	8008c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d117      	bne.n	8008bf4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	0fdb      	lsrs	r3, r3, #31
 8008bc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	0cdb      	lsrs	r3, r3, #19
 8008bce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	0adb      	lsrs	r3, r3, #11
 8008bd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	08db      	lsrs	r3, r3, #3
 8008bda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	029b      	lsls	r3, r3, #10
 8008be4:	431a      	orrs	r2, r3
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	03db      	lsls	r3, r3, #15
 8008bea:	4313      	orrs	r3, r2
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf2:	e016      	b.n	8008c22 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	0f1b      	lsrs	r3, r3, #28
 8008bf8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	0d1b      	lsrs	r3, r3, #20
 8008bfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	0b1b      	lsrs	r3, r3, #12
 8008c04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	091b      	lsrs	r3, r3, #4
 8008c0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	011a      	lsls	r2, r3, #4
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	431a      	orrs	r2, r3
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	031b      	lsls	r3, r3, #12
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c28:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008c2a:	e003      	b.n	8008c34 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	60da      	str	r2, [r3, #12]
}
 8008c34:	bf00      	nop
 8008c36:	372c      	adds	r7, #44	; 0x2c
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b089      	sub	sp, #36	; 0x24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008c56:	2300      	movs	r3, #0
 8008c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	e175      	b.n	8008f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008c60:	2201      	movs	r2, #1
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	fa02 f303 	lsl.w	r3, r2, r3
 8008c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4013      	ands	r3, r2
 8008c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	f040 8164 	bne.w	8008f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d00b      	beq.n	8008c9e <HAL_GPIO_Init+0x5e>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d007      	beq.n	8008c9e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c92:	2b11      	cmp	r3, #17
 8008c94:	d003      	beq.n	8008c9e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2b12      	cmp	r3, #18
 8008c9c:	d130      	bne.n	8008d00 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	2203      	movs	r2, #3
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	091b      	lsrs	r3, r3, #4
 8008cea:	f003 0201 	and.w	r2, r3, #1
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d10:	43db      	mvns	r3, r3
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4013      	ands	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	689a      	ldr	r2, [r3, #8]
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	fa02 f303 	lsl.w	r3, r2, r3
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d003      	beq.n	8008d40 <HAL_GPIO_Init+0x100>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b12      	cmp	r3, #18
 8008d3e:	d123      	bne.n	8008d88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	08da      	lsrs	r2, r3, #3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3208      	adds	r2, #8
 8008d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	220f      	movs	r2, #15
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4013      	ands	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	08da      	lsrs	r2, r3, #3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3208      	adds	r2, #8
 8008d82:	69b9      	ldr	r1, [r7, #24]
 8008d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	2203      	movs	r2, #3
 8008d94:	fa02 f303 	lsl.w	r3, r2, r3
 8008d98:	43db      	mvns	r3, r3
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f003 0203 	and.w	r2, r3, #3
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	fa02 f303 	lsl.w	r3, r2, r3
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 80be 	beq.w	8008f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dca:	4b66      	ldr	r3, [pc, #408]	; (8008f64 <HAL_GPIO_Init+0x324>)
 8008dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dce:	4a65      	ldr	r2, [pc, #404]	; (8008f64 <HAL_GPIO_Init+0x324>)
 8008dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8008dd6:	4b63      	ldr	r3, [pc, #396]	; (8008f64 <HAL_GPIO_Init+0x324>)
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008de2:	4a61      	ldr	r2, [pc, #388]	; (8008f68 <HAL_GPIO_Init+0x328>)
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	089b      	lsrs	r3, r3, #2
 8008de8:	3302      	adds	r3, #2
 8008dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	220f      	movs	r2, #15
 8008dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfe:	43db      	mvns	r3, r3
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	4013      	ands	r3, r2
 8008e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a58      	ldr	r2, [pc, #352]	; (8008f6c <HAL_GPIO_Init+0x32c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d037      	beq.n	8008e7e <HAL_GPIO_Init+0x23e>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a57      	ldr	r2, [pc, #348]	; (8008f70 <HAL_GPIO_Init+0x330>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d031      	beq.n	8008e7a <HAL_GPIO_Init+0x23a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a56      	ldr	r2, [pc, #344]	; (8008f74 <HAL_GPIO_Init+0x334>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d02b      	beq.n	8008e76 <HAL_GPIO_Init+0x236>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a55      	ldr	r2, [pc, #340]	; (8008f78 <HAL_GPIO_Init+0x338>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d025      	beq.n	8008e72 <HAL_GPIO_Init+0x232>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a54      	ldr	r2, [pc, #336]	; (8008f7c <HAL_GPIO_Init+0x33c>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d01f      	beq.n	8008e6e <HAL_GPIO_Init+0x22e>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a53      	ldr	r2, [pc, #332]	; (8008f80 <HAL_GPIO_Init+0x340>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d019      	beq.n	8008e6a <HAL_GPIO_Init+0x22a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a52      	ldr	r2, [pc, #328]	; (8008f84 <HAL_GPIO_Init+0x344>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d013      	beq.n	8008e66 <HAL_GPIO_Init+0x226>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a51      	ldr	r2, [pc, #324]	; (8008f88 <HAL_GPIO_Init+0x348>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d00d      	beq.n	8008e62 <HAL_GPIO_Init+0x222>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a50      	ldr	r2, [pc, #320]	; (8008f8c <HAL_GPIO_Init+0x34c>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d007      	beq.n	8008e5e <HAL_GPIO_Init+0x21e>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a4f      	ldr	r2, [pc, #316]	; (8008f90 <HAL_GPIO_Init+0x350>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d101      	bne.n	8008e5a <HAL_GPIO_Init+0x21a>
 8008e56:	2309      	movs	r3, #9
 8008e58:	e012      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e5a:	230a      	movs	r3, #10
 8008e5c:	e010      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e5e:	2308      	movs	r3, #8
 8008e60:	e00e      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e62:	2307      	movs	r3, #7
 8008e64:	e00c      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e66:	2306      	movs	r3, #6
 8008e68:	e00a      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e6a:	2305      	movs	r3, #5
 8008e6c:	e008      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e6e:	2304      	movs	r3, #4
 8008e70:	e006      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e72:	2303      	movs	r3, #3
 8008e74:	e004      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e002      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	69fa      	ldr	r2, [r7, #28]
 8008e82:	f002 0203 	and.w	r2, r2, #3
 8008e86:	0092      	lsls	r2, r2, #2
 8008e88:	4093      	lsls	r3, r2
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008e90:	4935      	ldr	r1, [pc, #212]	; (8008f68 <HAL_GPIO_Init+0x328>)
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	089b      	lsrs	r3, r3, #2
 8008e96:	3302      	adds	r3, #2
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e9e:	4b3d      	ldr	r3, [pc, #244]	; (8008f94 <HAL_GPIO_Init+0x354>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	43db      	mvns	r3, r3
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ec2:	4a34      	ldr	r2, [pc, #208]	; (8008f94 <HAL_GPIO_Init+0x354>)
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ec8:	4b32      	ldr	r3, [pc, #200]	; (8008f94 <HAL_GPIO_Init+0x354>)
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008eec:	4a29      	ldr	r2, [pc, #164]	; (8008f94 <HAL_GPIO_Init+0x354>)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008ef2:	4b28      	ldr	r3, [pc, #160]	; (8008f94 <HAL_GPIO_Init+0x354>)
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	43db      	mvns	r3, r3
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	4013      	ands	r3, r2
 8008f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f16:	4a1f      	ldr	r2, [pc, #124]	; (8008f94 <HAL_GPIO_Init+0x354>)
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f1c:	4b1d      	ldr	r3, [pc, #116]	; (8008f94 <HAL_GPIO_Init+0x354>)
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	43db      	mvns	r3, r3
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f40:	4a14      	ldr	r2, [pc, #80]	; (8008f94 <HAL_GPIO_Init+0x354>)
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	61fb      	str	r3, [r7, #28]
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	2b0f      	cmp	r3, #15
 8008f50:	f67f ae86 	bls.w	8008c60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	3724      	adds	r7, #36	; 0x24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	40023800 	.word	0x40023800
 8008f68:	40013800 	.word	0x40013800
 8008f6c:	40020000 	.word	0x40020000
 8008f70:	40020400 	.word	0x40020400
 8008f74:	40020800 	.word	0x40020800
 8008f78:	40020c00 	.word	0x40020c00
 8008f7c:	40021000 	.word	0x40021000
 8008f80:	40021400 	.word	0x40021400
 8008f84:	40021800 	.word	0x40021800
 8008f88:	40021c00 	.word	0x40021c00
 8008f8c:	40022000 	.word	0x40022000
 8008f90:	40022400 	.word	0x40022400
 8008f94:	40013c00 	.word	0x40013c00

08008f98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
 8008fb2:	e0d9      	b.n	8009168 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	f040 80c9 	bne.w	8009162 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008fd0:	4a6b      	ldr	r2, [pc, #428]	; (8009180 <HAL_GPIO_DeInit+0x1e8>)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	089b      	lsrs	r3, r3, #2
 8008fd6:	3302      	adds	r3, #2
 8008fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fdc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	220f      	movs	r2, #15
 8008fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a63      	ldr	r2, [pc, #396]	; (8009184 <HAL_GPIO_DeInit+0x1ec>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d037      	beq.n	800906a <HAL_GPIO_DeInit+0xd2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a62      	ldr	r2, [pc, #392]	; (8009188 <HAL_GPIO_DeInit+0x1f0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d031      	beq.n	8009066 <HAL_GPIO_DeInit+0xce>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a61      	ldr	r2, [pc, #388]	; (800918c <HAL_GPIO_DeInit+0x1f4>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d02b      	beq.n	8009062 <HAL_GPIO_DeInit+0xca>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a60      	ldr	r2, [pc, #384]	; (8009190 <HAL_GPIO_DeInit+0x1f8>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d025      	beq.n	800905e <HAL_GPIO_DeInit+0xc6>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a5f      	ldr	r2, [pc, #380]	; (8009194 <HAL_GPIO_DeInit+0x1fc>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d01f      	beq.n	800905a <HAL_GPIO_DeInit+0xc2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a5e      	ldr	r2, [pc, #376]	; (8009198 <HAL_GPIO_DeInit+0x200>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d019      	beq.n	8009056 <HAL_GPIO_DeInit+0xbe>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a5d      	ldr	r2, [pc, #372]	; (800919c <HAL_GPIO_DeInit+0x204>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d013      	beq.n	8009052 <HAL_GPIO_DeInit+0xba>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a5c      	ldr	r2, [pc, #368]	; (80091a0 <HAL_GPIO_DeInit+0x208>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00d      	beq.n	800904e <HAL_GPIO_DeInit+0xb6>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a5b      	ldr	r2, [pc, #364]	; (80091a4 <HAL_GPIO_DeInit+0x20c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d007      	beq.n	800904a <HAL_GPIO_DeInit+0xb2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a5a      	ldr	r2, [pc, #360]	; (80091a8 <HAL_GPIO_DeInit+0x210>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d101      	bne.n	8009046 <HAL_GPIO_DeInit+0xae>
 8009042:	2309      	movs	r3, #9
 8009044:	e012      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 8009046:	230a      	movs	r3, #10
 8009048:	e010      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 800904a:	2308      	movs	r3, #8
 800904c:	e00e      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 800904e:	2307      	movs	r3, #7
 8009050:	e00c      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 8009052:	2306      	movs	r3, #6
 8009054:	e00a      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 8009056:	2305      	movs	r3, #5
 8009058:	e008      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 800905a:	2304      	movs	r3, #4
 800905c:	e006      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 800905e:	2303      	movs	r3, #3
 8009060:	e004      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 8009062:	2302      	movs	r3, #2
 8009064:	e002      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 8009066:	2301      	movs	r3, #1
 8009068:	e000      	b.n	800906c <HAL_GPIO_DeInit+0xd4>
 800906a:	2300      	movs	r3, #0
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	f002 0203 	and.w	r2, r2, #3
 8009072:	0092      	lsls	r2, r2, #2
 8009074:	4093      	lsls	r3, r2
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	429a      	cmp	r2, r3
 800907a:	d132      	bne.n	80090e2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800907c:	4b4b      	ldr	r3, [pc, #300]	; (80091ac <HAL_GPIO_DeInit+0x214>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	43db      	mvns	r3, r3
 8009084:	4949      	ldr	r1, [pc, #292]	; (80091ac <HAL_GPIO_DeInit+0x214>)
 8009086:	4013      	ands	r3, r2
 8009088:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800908a:	4b48      	ldr	r3, [pc, #288]	; (80091ac <HAL_GPIO_DeInit+0x214>)
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	43db      	mvns	r3, r3
 8009092:	4946      	ldr	r1, [pc, #280]	; (80091ac <HAL_GPIO_DeInit+0x214>)
 8009094:	4013      	ands	r3, r2
 8009096:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009098:	4b44      	ldr	r3, [pc, #272]	; (80091ac <HAL_GPIO_DeInit+0x214>)
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	43db      	mvns	r3, r3
 80090a0:	4942      	ldr	r1, [pc, #264]	; (80091ac <HAL_GPIO_DeInit+0x214>)
 80090a2:	4013      	ands	r3, r2
 80090a4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80090a6:	4b41      	ldr	r3, [pc, #260]	; (80091ac <HAL_GPIO_DeInit+0x214>)
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	43db      	mvns	r3, r3
 80090ae:	493f      	ldr	r1, [pc, #252]	; (80091ac <HAL_GPIO_DeInit+0x214>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	220f      	movs	r2, #15
 80090be:	fa02 f303 	lsl.w	r3, r2, r3
 80090c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80090c4:	4a2e      	ldr	r2, [pc, #184]	; (8009180 <HAL_GPIO_DeInit+0x1e8>)
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	089b      	lsrs	r3, r3, #2
 80090ca:	3302      	adds	r3, #2
 80090cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	43da      	mvns	r2, r3
 80090d4:	482a      	ldr	r0, [pc, #168]	; (8009180 <HAL_GPIO_DeInit+0x1e8>)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	089b      	lsrs	r3, r3, #2
 80090da:	400a      	ands	r2, r1
 80090dc:	3302      	adds	r3, #2
 80090de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	2103      	movs	r1, #3
 80090ec:	fa01 f303 	lsl.w	r3, r1, r3
 80090f0:	43db      	mvns	r3, r3
 80090f2:	401a      	ands	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	08da      	lsrs	r2, r3, #3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3208      	adds	r2, #8
 8009100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	220f      	movs	r2, #15
 800910e:	fa02 f303 	lsl.w	r3, r2, r3
 8009112:	43db      	mvns	r3, r3
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	08d2      	lsrs	r2, r2, #3
 8009118:	4019      	ands	r1, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3208      	adds	r2, #8
 800911e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	2103      	movs	r1, #3
 800912c:	fa01 f303 	lsl.w	r3, r1, r3
 8009130:	43db      	mvns	r3, r3
 8009132:	401a      	ands	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	2101      	movs	r1, #1
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	fa01 f303 	lsl.w	r3, r1, r3
 8009144:	43db      	mvns	r3, r3
 8009146:	401a      	ands	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	2103      	movs	r1, #3
 8009156:	fa01 f303 	lsl.w	r3, r1, r3
 800915a:	43db      	mvns	r3, r3
 800915c:	401a      	ands	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	3301      	adds	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2b0f      	cmp	r3, #15
 800916c:	f67f af22 	bls.w	8008fb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	40013800 	.word	0x40013800
 8009184:	40020000 	.word	0x40020000
 8009188:	40020400 	.word	0x40020400
 800918c:	40020800 	.word	0x40020800
 8009190:	40020c00 	.word	0x40020c00
 8009194:	40021000 	.word	0x40021000
 8009198:	40021400 	.word	0x40021400
 800919c:	40021800 	.word	0x40021800
 80091a0:	40021c00 	.word	0x40021c00
 80091a4:	40022000 	.word	0x40022000
 80091a8:	40022400 	.word	0x40022400
 80091ac:	40013c00 	.word	0x40013c00

080091b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	460b      	mov	r3, r1
 80091ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691a      	ldr	r2, [r3, #16]
 80091c0:	887b      	ldrh	r3, [r7, #2]
 80091c2:	4013      	ands	r3, r2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80091c8:	2301      	movs	r3, #1
 80091ca:	73fb      	strb	r3, [r7, #15]
 80091cc:	e001      	b.n	80091d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	807b      	strh	r3, [r7, #2]
 80091ec:	4613      	mov	r3, r2
 80091ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80091f0:	787b      	ldrb	r3, [r7, #1]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80091f6:	887a      	ldrh	r2, [r7, #2]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80091fc:	e003      	b.n	8009206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80091fe:	887b      	ldrh	r3, [r7, #2]
 8009200:	041a      	lsls	r2, r3, #16
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	619a      	str	r2, [r3, #24]
}
 8009206:	bf00      	nop
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009212:	b480      	push	{r7}
 8009214:	b085      	sub	sp, #20
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	460b      	mov	r3, r1
 800921c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009224:	887a      	ldrh	r2, [r7, #2]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	4013      	ands	r3, r2
 800922a:	041a      	lsls	r2, r3, #16
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	43d9      	mvns	r1, r3
 8009230:	887b      	ldrh	r3, [r7, #2]
 8009232:	400b      	ands	r3, r1
 8009234:	431a      	orrs	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	619a      	str	r2, [r3, #24]
}
 800923a:	bf00      	nop
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
	...

08009248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009252:	4b08      	ldr	r3, [pc, #32]	; (8009274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009254:	695a      	ldr	r2, [r3, #20]
 8009256:	88fb      	ldrh	r3, [r7, #6]
 8009258:	4013      	ands	r3, r2
 800925a:	2b00      	cmp	r3, #0
 800925c:	d006      	beq.n	800926c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800925e:	4a05      	ldr	r2, [pc, #20]	; (8009274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009264:	88fb      	ldrh	r3, [r7, #6]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f806 	bl	8009278 <HAL_GPIO_EXTI_Callback>
  }
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	40013c00 	.word	0x40013c00

08009278 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800928e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009290:	b08f      	sub	sp, #60	; 0x3c
 8009292:	af0a      	add	r7, sp, #40	; 0x28
 8009294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e054      	b.n	800934a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d106      	bne.n	80092c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f00f fe48 	bl	8018f50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2203      	movs	r2, #3
 80092c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4618      	mov	r0, r3
 80092e0:	f009 fd5b 	bl	8012d9a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	603b      	str	r3, [r7, #0]
 80092ea:	687e      	ldr	r6, [r7, #4]
 80092ec:	466d      	mov	r5, sp
 80092ee:	f106 0410 	add.w	r4, r6, #16
 80092f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80092fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8009302:	1d33      	adds	r3, r6, #4
 8009304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009306:	6838      	ldr	r0, [r7, #0]
 8009308:	f009 fcde 	bl	8012cc8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2101      	movs	r1, #1
 8009312:	4618      	mov	r0, r3
 8009314:	f009 fd52 	bl	8012dbc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	603b      	str	r3, [r7, #0]
 800931e:	687e      	ldr	r6, [r7, #4]
 8009320:	466d      	mov	r5, sp
 8009322:	f106 0410 	add.w	r4, r6, #16
 8009326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800932a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800932c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800932e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009332:	e885 0003 	stmia.w	r5, {r0, r1}
 8009336:	1d33      	adds	r3, r6, #4
 8009338:	cb0e      	ldmia	r3, {r1, r2, r3}
 800933a:	6838      	ldr	r0, [r7, #0]
 800933c:	f009 fe64 	bl	8013008 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009352 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8009352:	b590      	push	{r4, r7, lr}
 8009354:	b089      	sub	sp, #36	; 0x24
 8009356:	af04      	add	r7, sp, #16
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	4608      	mov	r0, r1
 800935c:	4611      	mov	r1, r2
 800935e:	461a      	mov	r2, r3
 8009360:	4603      	mov	r3, r0
 8009362:	70fb      	strb	r3, [r7, #3]
 8009364:	460b      	mov	r3, r1
 8009366:	70bb      	strb	r3, [r7, #2]
 8009368:	4613      	mov	r3, r2
 800936a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009372:	2b01      	cmp	r3, #1
 8009374:	d101      	bne.n	800937a <HAL_HCD_HC_Init+0x28>
 8009376:	2302      	movs	r3, #2
 8009378:	e076      	b.n	8009468 <HAL_HCD_HC_Init+0x116>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8009382:	78fb      	ldrb	r3, [r7, #3]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	212c      	movs	r1, #44	; 0x2c
 8009388:	fb01 f303 	mul.w	r3, r1, r3
 800938c:	4413      	add	r3, r2
 800938e:	333d      	adds	r3, #61	; 0x3d
 8009390:	2200      	movs	r2, #0
 8009392:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	212c      	movs	r1, #44	; 0x2c
 800939a:	fb01 f303 	mul.w	r3, r1, r3
 800939e:	4413      	add	r3, r2
 80093a0:	3338      	adds	r3, #56	; 0x38
 80093a2:	787a      	ldrb	r2, [r7, #1]
 80093a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	212c      	movs	r1, #44	; 0x2c
 80093ac:	fb01 f303 	mul.w	r3, r1, r3
 80093b0:	4413      	add	r3, r2
 80093b2:	3340      	adds	r3, #64	; 0x40
 80093b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80093b6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	212c      	movs	r1, #44	; 0x2c
 80093be:	fb01 f303 	mul.w	r3, r1, r3
 80093c2:	4413      	add	r3, r2
 80093c4:	3339      	adds	r3, #57	; 0x39
 80093c6:	78fa      	ldrb	r2, [r7, #3]
 80093c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80093ca:	78fb      	ldrb	r3, [r7, #3]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	212c      	movs	r1, #44	; 0x2c
 80093d0:	fb01 f303 	mul.w	r3, r1, r3
 80093d4:	4413      	add	r3, r2
 80093d6:	333f      	adds	r3, #63	; 0x3f
 80093d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80093dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	78ba      	ldrb	r2, [r7, #2]
 80093e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80093e6:	b2d0      	uxtb	r0, r2
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	212c      	movs	r1, #44	; 0x2c
 80093ec:	fb01 f303 	mul.w	r3, r1, r3
 80093f0:	4413      	add	r3, r2
 80093f2:	333a      	adds	r3, #58	; 0x3a
 80093f4:	4602      	mov	r2, r0
 80093f6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80093f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	da09      	bge.n	8009414 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	212c      	movs	r1, #44	; 0x2c
 8009406:	fb01 f303 	mul.w	r3, r1, r3
 800940a:	4413      	add	r3, r2
 800940c:	333b      	adds	r3, #59	; 0x3b
 800940e:	2201      	movs	r2, #1
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	e008      	b.n	8009426 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	212c      	movs	r1, #44	; 0x2c
 800941a:	fb01 f303 	mul.w	r3, r1, r3
 800941e:	4413      	add	r3, r2
 8009420:	333b      	adds	r3, #59	; 0x3b
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009426:	78fb      	ldrb	r3, [r7, #3]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	212c      	movs	r1, #44	; 0x2c
 800942c:	fb01 f303 	mul.w	r3, r1, r3
 8009430:	4413      	add	r3, r2
 8009432:	333c      	adds	r3, #60	; 0x3c
 8009434:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009438:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	787c      	ldrb	r4, [r7, #1]
 8009440:	78ba      	ldrb	r2, [r7, #2]
 8009442:	78f9      	ldrb	r1, [r7, #3]
 8009444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009446:	9302      	str	r3, [sp, #8]
 8009448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	4623      	mov	r3, r4
 8009456:	f009 ff4d 	bl	80132f4 <USB_HC_Init>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	bd90      	pop	{r4, r7, pc}

08009470 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <HAL_HCD_HC_Halt+0x1e>
 800948a:	2302      	movs	r3, #2
 800948c:	e00f      	b.n	80094ae <HAL_HCD_HC_Halt+0x3e>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	78fa      	ldrb	r2, [r7, #3]
 800949c:	4611      	mov	r1, r2
 800949e:	4618      	mov	r0, r3
 80094a0:	f00a f989 	bl	80137b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
	...

080094b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	4608      	mov	r0, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	70fb      	strb	r3, [r7, #3]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70bb      	strb	r3, [r7, #2]
 80094ce:	4613      	mov	r3, r2
 80094d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	212c      	movs	r1, #44	; 0x2c
 80094d8:	fb01 f303 	mul.w	r3, r1, r3
 80094dc:	4413      	add	r3, r2
 80094de:	333b      	adds	r3, #59	; 0x3b
 80094e0:	78ba      	ldrb	r2, [r7, #2]
 80094e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	212c      	movs	r1, #44	; 0x2c
 80094ea:	fb01 f303 	mul.w	r3, r1, r3
 80094ee:	4413      	add	r3, r2
 80094f0:	333f      	adds	r3, #63	; 0x3f
 80094f2:	787a      	ldrb	r2, [r7, #1]
 80094f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80094f6:	7c3b      	ldrb	r3, [r7, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d112      	bne.n	8009522 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	212c      	movs	r1, #44	; 0x2c
 8009502:	fb01 f303 	mul.w	r3, r1, r3
 8009506:	4413      	add	r3, r2
 8009508:	3342      	adds	r3, #66	; 0x42
 800950a:	2203      	movs	r2, #3
 800950c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800950e:	78fb      	ldrb	r3, [r7, #3]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	212c      	movs	r1, #44	; 0x2c
 8009514:	fb01 f303 	mul.w	r3, r1, r3
 8009518:	4413      	add	r3, r2
 800951a:	333d      	adds	r3, #61	; 0x3d
 800951c:	7f3a      	ldrb	r2, [r7, #28]
 800951e:	701a      	strb	r2, [r3, #0]
 8009520:	e008      	b.n	8009534 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009522:	78fb      	ldrb	r3, [r7, #3]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	212c      	movs	r1, #44	; 0x2c
 8009528:	fb01 f303 	mul.w	r3, r1, r3
 800952c:	4413      	add	r3, r2
 800952e:	3342      	adds	r3, #66	; 0x42
 8009530:	2202      	movs	r2, #2
 8009532:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009534:	787b      	ldrb	r3, [r7, #1]
 8009536:	2b03      	cmp	r3, #3
 8009538:	f200 80c6 	bhi.w	80096c8 <HAL_HCD_HC_SubmitRequest+0x210>
 800953c:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800953e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009542:	bf00      	nop
 8009544:	08009555 	.word	0x08009555
 8009548:	080096b5 	.word	0x080096b5
 800954c:	080095b9 	.word	0x080095b9
 8009550:	08009637 	.word	0x08009637
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009554:	7c3b      	ldrb	r3, [r7, #16]
 8009556:	2b01      	cmp	r3, #1
 8009558:	f040 80b8 	bne.w	80096cc <HAL_HCD_HC_SubmitRequest+0x214>
 800955c:	78bb      	ldrb	r3, [r7, #2]
 800955e:	2b00      	cmp	r3, #0
 8009560:	f040 80b4 	bne.w	80096cc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009564:	8b3b      	ldrh	r3, [r7, #24]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d108      	bne.n	800957c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	212c      	movs	r1, #44	; 0x2c
 8009570:	fb01 f303 	mul.w	r3, r1, r3
 8009574:	4413      	add	r3, r2
 8009576:	3355      	adds	r3, #85	; 0x55
 8009578:	2201      	movs	r2, #1
 800957a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	212c      	movs	r1, #44	; 0x2c
 8009582:	fb01 f303 	mul.w	r3, r1, r3
 8009586:	4413      	add	r3, r2
 8009588:	3355      	adds	r3, #85	; 0x55
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d109      	bne.n	80095a4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	212c      	movs	r1, #44	; 0x2c
 8009596:	fb01 f303 	mul.w	r3, r1, r3
 800959a:	4413      	add	r3, r2
 800959c:	3342      	adds	r3, #66	; 0x42
 800959e:	2200      	movs	r2, #0
 80095a0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80095a2:	e093      	b.n	80096cc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	212c      	movs	r1, #44	; 0x2c
 80095aa:	fb01 f303 	mul.w	r3, r1, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	3342      	adds	r3, #66	; 0x42
 80095b2:	2202      	movs	r2, #2
 80095b4:	701a      	strb	r2, [r3, #0]
      break;
 80095b6:	e089      	b.n	80096cc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80095b8:	78bb      	ldrb	r3, [r7, #2]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d11d      	bne.n	80095fa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	212c      	movs	r1, #44	; 0x2c
 80095c4:	fb01 f303 	mul.w	r3, r1, r3
 80095c8:	4413      	add	r3, r2
 80095ca:	3355      	adds	r3, #85	; 0x55
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d109      	bne.n	80095e6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	212c      	movs	r1, #44	; 0x2c
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	4413      	add	r3, r2
 80095de:	3342      	adds	r3, #66	; 0x42
 80095e0:	2200      	movs	r2, #0
 80095e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80095e4:	e073      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	212c      	movs	r1, #44	; 0x2c
 80095ec:	fb01 f303 	mul.w	r3, r1, r3
 80095f0:	4413      	add	r3, r2
 80095f2:	3342      	adds	r3, #66	; 0x42
 80095f4:	2202      	movs	r2, #2
 80095f6:	701a      	strb	r2, [r3, #0]
      break;
 80095f8:	e069      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	212c      	movs	r1, #44	; 0x2c
 8009600:	fb01 f303 	mul.w	r3, r1, r3
 8009604:	4413      	add	r3, r2
 8009606:	3354      	adds	r3, #84	; 0x54
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d109      	bne.n	8009622 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	212c      	movs	r1, #44	; 0x2c
 8009614:	fb01 f303 	mul.w	r3, r1, r3
 8009618:	4413      	add	r3, r2
 800961a:	3342      	adds	r3, #66	; 0x42
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]
      break;
 8009620:	e055      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	212c      	movs	r1, #44	; 0x2c
 8009628:	fb01 f303 	mul.w	r3, r1, r3
 800962c:	4413      	add	r3, r2
 800962e:	3342      	adds	r3, #66	; 0x42
 8009630:	2202      	movs	r2, #2
 8009632:	701a      	strb	r2, [r3, #0]
      break;
 8009634:	e04b      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009636:	78bb      	ldrb	r3, [r7, #2]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11d      	bne.n	8009678 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	212c      	movs	r1, #44	; 0x2c
 8009642:	fb01 f303 	mul.w	r3, r1, r3
 8009646:	4413      	add	r3, r2
 8009648:	3355      	adds	r3, #85	; 0x55
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d109      	bne.n	8009664 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	212c      	movs	r1, #44	; 0x2c
 8009656:	fb01 f303 	mul.w	r3, r1, r3
 800965a:	4413      	add	r3, r2
 800965c:	3342      	adds	r3, #66	; 0x42
 800965e:	2200      	movs	r2, #0
 8009660:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009662:	e034      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009664:	78fb      	ldrb	r3, [r7, #3]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	212c      	movs	r1, #44	; 0x2c
 800966a:	fb01 f303 	mul.w	r3, r1, r3
 800966e:	4413      	add	r3, r2
 8009670:	3342      	adds	r3, #66	; 0x42
 8009672:	2202      	movs	r2, #2
 8009674:	701a      	strb	r2, [r3, #0]
      break;
 8009676:	e02a      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	212c      	movs	r1, #44	; 0x2c
 800967e:	fb01 f303 	mul.w	r3, r1, r3
 8009682:	4413      	add	r3, r2
 8009684:	3354      	adds	r3, #84	; 0x54
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d109      	bne.n	80096a0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	212c      	movs	r1, #44	; 0x2c
 8009692:	fb01 f303 	mul.w	r3, r1, r3
 8009696:	4413      	add	r3, r2
 8009698:	3342      	adds	r3, #66	; 0x42
 800969a:	2200      	movs	r2, #0
 800969c:	701a      	strb	r2, [r3, #0]
      break;
 800969e:	e016      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	212c      	movs	r1, #44	; 0x2c
 80096a6:	fb01 f303 	mul.w	r3, r1, r3
 80096aa:	4413      	add	r3, r2
 80096ac:	3342      	adds	r3, #66	; 0x42
 80096ae:	2202      	movs	r2, #2
 80096b0:	701a      	strb	r2, [r3, #0]
      break;
 80096b2:	e00c      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	212c      	movs	r1, #44	; 0x2c
 80096ba:	fb01 f303 	mul.w	r3, r1, r3
 80096be:	4413      	add	r3, r2
 80096c0:	3342      	adds	r3, #66	; 0x42
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
      break;
 80096c6:	e002      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80096c8:	bf00      	nop
 80096ca:	e000      	b.n	80096ce <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80096cc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	212c      	movs	r1, #44	; 0x2c
 80096d4:	fb01 f303 	mul.w	r3, r1, r3
 80096d8:	4413      	add	r3, r2
 80096da:	3344      	adds	r3, #68	; 0x44
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	8b3a      	ldrh	r2, [r7, #24]
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	202c      	movs	r0, #44	; 0x2c
 80096e8:	fb00 f303 	mul.w	r3, r0, r3
 80096ec:	440b      	add	r3, r1
 80096ee:	334c      	adds	r3, #76	; 0x4c
 80096f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	212c      	movs	r1, #44	; 0x2c
 80096f8:	fb01 f303 	mul.w	r3, r1, r3
 80096fc:	4413      	add	r3, r2
 80096fe:	3360      	adds	r3, #96	; 0x60
 8009700:	2200      	movs	r2, #0
 8009702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	212c      	movs	r1, #44	; 0x2c
 800970a:	fb01 f303 	mul.w	r3, r1, r3
 800970e:	4413      	add	r3, r2
 8009710:	3350      	adds	r3, #80	; 0x50
 8009712:	2200      	movs	r2, #0
 8009714:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009716:	78fb      	ldrb	r3, [r7, #3]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	212c      	movs	r1, #44	; 0x2c
 800971c:	fb01 f303 	mul.w	r3, r1, r3
 8009720:	4413      	add	r3, r2
 8009722:	3339      	adds	r3, #57	; 0x39
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	212c      	movs	r1, #44	; 0x2c
 800972e:	fb01 f303 	mul.w	r3, r1, r3
 8009732:	4413      	add	r3, r2
 8009734:	3361      	adds	r3, #97	; 0x61
 8009736:	2200      	movs	r2, #0
 8009738:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	222c      	movs	r2, #44	; 0x2c
 8009742:	fb02 f303 	mul.w	r3, r2, r3
 8009746:	3338      	adds	r3, #56	; 0x38
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	18d1      	adds	r1, r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	461a      	mov	r2, r3
 8009754:	f009 fedc 	bl	8013510 <USB_HC_StartXfer>
 8009758:	4603      	mov	r3, r0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop

08009764 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4618      	mov	r0, r3
 800977c:	f009 fc01 	bl	8012f82 <USB_GetMode>
 8009780:	4603      	mov	r3, r0
 8009782:	2b01      	cmp	r3, #1
 8009784:	f040 80ef 	bne.w	8009966 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4618      	mov	r0, r3
 800978e:	f009 fbe5 	bl	8012f5c <USB_ReadInterrupts>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80e5 	beq.w	8009964 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f009 fbdc 	bl	8012f5c <USB_ReadInterrupts>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097ae:	d104      	bne.n	80097ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80097b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4618      	mov	r0, r3
 80097c0:	f009 fbcc 	bl	8012f5c <USB_ReadInterrupts>
 80097c4:	4603      	mov	r3, r0
 80097c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097ce:	d104      	bne.n	80097da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80097d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4618      	mov	r0, r3
 80097e0:	f009 fbbc 	bl	8012f5c <USB_ReadInterrupts>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097ee:	d104      	bne.n	80097fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80097f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4618      	mov	r0, r3
 8009800:	f009 fbac 	bl	8012f5c <USB_ReadInterrupts>
 8009804:	4603      	mov	r3, r0
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b02      	cmp	r3, #2
 800980c:	d103      	bne.n	8009816 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2202      	movs	r2, #2
 8009814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f009 fb9e 	bl	8012f5c <USB_ReadInterrupts>
 8009820:	4603      	mov	r3, r0
 8009822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800982a:	d115      	bne.n	8009858 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009834:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	d108      	bne.n	8009858 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f00f fbf4 	bl	8019034 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2101      	movs	r1, #1
 8009852:	4618      	mov	r0, r3
 8009854:	f009 fc88 	bl	8013168 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f009 fb7d 	bl	8012f5c <USB_ReadInterrupts>
 8009862:	4603      	mov	r3, r0
 8009864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800986c:	d102      	bne.n	8009874 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 f9ff 	bl	800ac72 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4618      	mov	r0, r3
 800987a:	f009 fb6f 	bl	8012f5c <USB_ReadInterrupts>
 800987e:	4603      	mov	r3, r0
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b08      	cmp	r3, #8
 8009886:	d106      	bne.n	8009896 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f00f fbb7 	bl	8018ffc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2208      	movs	r2, #8
 8009894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4618      	mov	r0, r3
 800989c:	f009 fb5e 	bl	8012f5c <USB_ReadInterrupts>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	2b10      	cmp	r3, #16
 80098a8:	d101      	bne.n	80098ae <HAL_HCD_IRQHandler+0x14a>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e000      	b.n	80098b0 <HAL_HCD_IRQHandler+0x14c>
 80098ae:	2300      	movs	r3, #0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d012      	beq.n	80098da <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699a      	ldr	r2, [r3, #24]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0210 	bic.w	r2, r2, #16
 80098c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f001 f902 	bl	800aace <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699a      	ldr	r2, [r3, #24]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f042 0210 	orr.w	r2, r2, #16
 80098d8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f009 fb3c 	bl	8012f5c <USB_ReadInterrupts>
 80098e4:	4603      	mov	r3, r0
 80098e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ee:	d13a      	bne.n	8009966 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f009 ff4d 	bl	8013794 <USB_HC_ReadInterrupt>
 80098fa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	e025      	b.n	800994e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f003 030f 	and.w	r3, r3, #15
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	fa22 f303 	lsr.w	r3, r2, r3
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d018      	beq.n	8009948 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4413      	add	r3, r2
 800991e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800992c:	d106      	bne.n	800993c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f8ab 	bl	8009a90 <HCD_HC_IN_IRQHandler>
 800993a:	e005      	b.n	8009948 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fcc6 	bl	800a2d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	3301      	adds	r3, #1
 800994c:	617b      	str	r3, [r7, #20]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	429a      	cmp	r2, r3
 8009956:	d3d4      	bcc.n	8009902 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009960:	615a      	str	r2, [r3, #20]
 8009962:	e000      	b.n	8009966 <HAL_HCD_IRQHandler+0x202>
      return;
 8009964:	bf00      	nop
    }
  }
}
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800997a:	2b01      	cmp	r3, #1
 800997c:	d101      	bne.n	8009982 <HAL_HCD_Start+0x16>
 800997e:	2302      	movs	r3, #2
 8009980:	e013      	b.n	80099aa <HAL_HCD_Start+0x3e>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f009 f9f2 	bl	8012d78 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2101      	movs	r1, #1
 800999a:	4618      	mov	r0, r3
 800999c:	f009 fc48 	bl	8013230 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b082      	sub	sp, #8
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d101      	bne.n	80099c8 <HAL_HCD_Stop+0x16>
 80099c4:	2302      	movs	r3, #2
 80099c6:	e00d      	b.n	80099e4 <HAL_HCD_Stop+0x32>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f00a f847 	bl	8013a68 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f009 fbef 	bl	80131dc <USB_ResetPort>
 80099fe:	4603      	mov	r3, r0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	212c      	movs	r1, #44	; 0x2c
 8009a1a:	fb01 f303 	mul.w	r3, r1, r3
 8009a1e:	4413      	add	r3, r2
 8009a20:	3360      	adds	r3, #96	; 0x60
 8009a22:	781b      	ldrb	r3, [r3, #0]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009a3c:	78fb      	ldrb	r3, [r7, #3]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	212c      	movs	r1, #44	; 0x2c
 8009a42:	fb01 f303 	mul.w	r3, r1, r3
 8009a46:	4413      	add	r3, r2
 8009a48:	3350      	adds	r3, #80	; 0x50
 8009a4a:	681b      	ldr	r3, [r3, #0]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f009 fc33 	bl	80132d0 <USB_GetCurrentFrame>
 8009a6a:	4603      	mov	r3, r0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f009 fc0e 	bl	80132a2 <USB_GetHostSpeed>
 8009a86:	4603      	mov	r3, r0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009aa6:	78fb      	ldrb	r3, [r7, #3]
 8009aa8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f003 0304 	and.w	r3, r3, #4
 8009abc:	2b04      	cmp	r3, #4
 8009abe:	d119      	bne.n	8009af4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009acc:	461a      	mov	r2, r3
 8009ace:	2304      	movs	r3, #4
 8009ad0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	0151      	lsls	r1, r2, #5
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	440a      	add	r2, r1
 8009ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aec:	f043 0302 	orr.w	r3, r3, #2
 8009af0:	60d3      	str	r3, [r2, #12]
 8009af2:	e101      	b.n	8009cf8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b0a:	d12b      	bne.n	8009b64 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	212c      	movs	r1, #44	; 0x2c
 8009b26:	fb01 f303 	mul.w	r3, r1, r3
 8009b2a:	4413      	add	r3, r2
 8009b2c:	3361      	adds	r3, #97	; 0x61
 8009b2e:	2207      	movs	r2, #7
 8009b30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	0151      	lsls	r1, r2, #5
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	440a      	add	r2, r1
 8009b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b4c:	f043 0302 	orr.w	r3, r3, #2
 8009b50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	b2d2      	uxtb	r2, r2
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f009 fe2a 	bl	80137b6 <USB_HC_Halt>
 8009b62:	e0c9      	b.n	8009cf8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d109      	bne.n	8009b8e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b86:	461a      	mov	r2, r3
 8009b88:	2320      	movs	r3, #32
 8009b8a:	6093      	str	r3, [r2, #8]
 8009b8c:	e0b4      	b.n	8009cf8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d133      	bne.n	8009c0c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	0151      	lsls	r1, r2, #5
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	440a      	add	r2, r1
 8009bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bbe:	f043 0302 	orr.w	r3, r3, #2
 8009bc2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	212c      	movs	r1, #44	; 0x2c
 8009bca:	fb01 f303 	mul.w	r3, r1, r3
 8009bce:	4413      	add	r3, r2
 8009bd0:	3361      	adds	r3, #97	; 0x61
 8009bd2:	2205      	movs	r2, #5
 8009bd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be2:	461a      	mov	r2, r3
 8009be4:	2310      	movs	r3, #16
 8009be6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	2308      	movs	r3, #8
 8009bf8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	b2d2      	uxtb	r2, r2
 8009c02:	4611      	mov	r1, r2
 8009c04:	4618      	mov	r0, r3
 8009c06:	f009 fdd6 	bl	80137b6 <USB_HC_Halt>
 8009c0a:	e075      	b.n	8009cf8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c22:	d134      	bne.n	8009c8e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c3e:	f043 0302 	orr.w	r3, r3, #2
 8009c42:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	212c      	movs	r1, #44	; 0x2c
 8009c4a:	fb01 f303 	mul.w	r3, r1, r3
 8009c4e:	4413      	add	r3, r2
 8009c50:	3361      	adds	r3, #97	; 0x61
 8009c52:	2208      	movs	r2, #8
 8009c54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c62:	461a      	mov	r2, r3
 8009c64:	2310      	movs	r3, #16
 8009c66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c74:	461a      	mov	r2, r3
 8009c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	b2d2      	uxtb	r2, r2
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f009 fd95 	bl	80137b6 <USB_HC_Halt>
 8009c8c:	e034      	b.n	8009cf8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca0:	2b80      	cmp	r3, #128	; 0x80
 8009ca2:	d129      	bne.n	8009cf8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	0151      	lsls	r1, r2, #5
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	440a      	add	r2, r1
 8009cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cbe:	f043 0302 	orr.w	r3, r3, #2
 8009cc2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	212c      	movs	r1, #44	; 0x2c
 8009cca:	fb01 f303 	mul.w	r3, r1, r3
 8009cce:	4413      	add	r3, r2
 8009cd0:	3361      	adds	r3, #97	; 0x61
 8009cd2:	2206      	movs	r2, #6
 8009cd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	b2d2      	uxtb	r2, r2
 8009cde:	4611      	mov	r1, r2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f009 fd68 	bl	80137b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	2380      	movs	r3, #128	; 0x80
 8009cf6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d0e:	d122      	bne.n	8009d56 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	0151      	lsls	r1, r2, #5
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	440a      	add	r2, r1
 8009d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d2a:	f043 0302 	orr.w	r3, r3, #2
 8009d2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f009 fd3b 	bl	80137b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d52:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8009d54:	e2ba      	b.n	800a2cc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	f040 811b 	bne.w	8009fa4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d019      	beq.n	8009daa <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	212c      	movs	r1, #44	; 0x2c
 8009d7c:	fb01 f303 	mul.w	r3, r1, r3
 8009d80:	4413      	add	r3, r2
 8009d82:	3348      	adds	r3, #72	; 0x48
 8009d84:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	0159      	lsls	r1, r3, #5
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	440b      	add	r3, r1
 8009d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8009d98:	1ad2      	subs	r2, r2, r3
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	202c      	movs	r0, #44	; 0x2c
 8009da0:	fb00 f303 	mul.w	r3, r0, r3
 8009da4:	440b      	add	r3, r1
 8009da6:	3350      	adds	r3, #80	; 0x50
 8009da8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	212c      	movs	r1, #44	; 0x2c
 8009db0:	fb01 f303 	mul.w	r3, r1, r3
 8009db4:	4413      	add	r3, r2
 8009db6:	3361      	adds	r3, #97	; 0x61
 8009db8:	2201      	movs	r2, #1
 8009dba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	212c      	movs	r1, #44	; 0x2c
 8009dc2:	fb01 f303 	mul.w	r3, r1, r3
 8009dc6:	4413      	add	r3, r2
 8009dc8:	335c      	adds	r3, #92	; 0x5c
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dda:	461a      	mov	r2, r3
 8009ddc:	2301      	movs	r3, #1
 8009dde:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	212c      	movs	r1, #44	; 0x2c
 8009de6:	fb01 f303 	mul.w	r3, r1, r3
 8009dea:	4413      	add	r3, r2
 8009dec:	333f      	adds	r3, #63	; 0x3f
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d009      	beq.n	8009e08 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	212c      	movs	r1, #44	; 0x2c
 8009dfa:	fb01 f303 	mul.w	r3, r1, r3
 8009dfe:	4413      	add	r3, r2
 8009e00:	333f      	adds	r3, #63	; 0x3f
 8009e02:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d121      	bne.n	8009e4c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	0151      	lsls	r1, r2, #5
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	440a      	add	r2, r1
 8009e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e22:	f043 0302 	orr.w	r3, r3, #2
 8009e26:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	4611      	mov	r1, r2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f009 fcbf 	bl	80137b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e44:	461a      	mov	r2, r3
 8009e46:	2310      	movs	r3, #16
 8009e48:	6093      	str	r3, [r2, #8]
 8009e4a:	e066      	b.n	8009f1a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	212c      	movs	r1, #44	; 0x2c
 8009e52:	fb01 f303 	mul.w	r3, r1, r3
 8009e56:	4413      	add	r3, r2
 8009e58:	333f      	adds	r3, #63	; 0x3f
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d127      	bne.n	8009eb0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	0151      	lsls	r1, r2, #5
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	440a      	add	r2, r1
 8009e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e7e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	212c      	movs	r1, #44	; 0x2c
 8009e86:	fb01 f303 	mul.w	r3, r1, r3
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3360      	adds	r3, #96	; 0x60
 8009e8e:	2201      	movs	r2, #1
 8009e90:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	b2d9      	uxtb	r1, r3
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	202c      	movs	r0, #44	; 0x2c
 8009e9c:	fb00 f303 	mul.w	r3, r0, r3
 8009ea0:	4413      	add	r3, r2
 8009ea2:	3360      	adds	r3, #96	; 0x60
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f00f f8d1 	bl	8019050 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009eae:	e034      	b.n	8009f1a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	212c      	movs	r1, #44	; 0x2c
 8009eb6:	fb01 f303 	mul.w	r3, r1, r3
 8009eba:	4413      	add	r3, r2
 8009ebc:	333f      	adds	r3, #63	; 0x3f
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d12a      	bne.n	8009f1a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	212c      	movs	r1, #44	; 0x2c
 8009eca:	fb01 f303 	mul.w	r3, r1, r3
 8009ece:	4413      	add	r3, r2
 8009ed0:	3360      	adds	r3, #96	; 0x60
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	212c      	movs	r1, #44	; 0x2c
 8009edc:	fb01 f303 	mul.w	r3, r1, r3
 8009ee0:	4413      	add	r3, r2
 8009ee2:	3354      	adds	r3, #84	; 0x54
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	f083 0301 	eor.w	r3, r3, #1
 8009eea:	b2d8      	uxtb	r0, r3
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	212c      	movs	r1, #44	; 0x2c
 8009ef2:	fb01 f303 	mul.w	r3, r1, r3
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3354      	adds	r3, #84	; 0x54
 8009efa:	4602      	mov	r2, r0
 8009efc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	b2d9      	uxtb	r1, r3
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	202c      	movs	r0, #44	; 0x2c
 8009f08:	fb00 f303 	mul.w	r3, r0, r3
 8009f0c:	4413      	add	r3, r2
 8009f0e:	3360      	adds	r3, #96	; 0x60
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f00f f89b 	bl	8019050 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d12b      	bne.n	8009f7a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	212c      	movs	r1, #44	; 0x2c
 8009f28:	fb01 f303 	mul.w	r3, r1, r3
 8009f2c:	4413      	add	r3, r2
 8009f2e:	3348      	adds	r3, #72	; 0x48
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6879      	ldr	r1, [r7, #4]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	202c      	movs	r0, #44	; 0x2c
 8009f38:	fb00 f202 	mul.w	r2, r0, r2
 8009f3c:	440a      	add	r2, r1
 8009f3e:	3240      	adds	r2, #64	; 0x40
 8009f40:	8812      	ldrh	r2, [r2, #0]
 8009f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 81be 	beq.w	800a2cc <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	212c      	movs	r1, #44	; 0x2c
 8009f56:	fb01 f303 	mul.w	r3, r1, r3
 8009f5a:	4413      	add	r3, r2
 8009f5c:	3354      	adds	r3, #84	; 0x54
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	f083 0301 	eor.w	r3, r3, #1
 8009f64:	b2d8      	uxtb	r0, r3
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	212c      	movs	r1, #44	; 0x2c
 8009f6c:	fb01 f303 	mul.w	r3, r1, r3
 8009f70:	4413      	add	r3, r2
 8009f72:	3354      	adds	r3, #84	; 0x54
 8009f74:	4602      	mov	r2, r0
 8009f76:	701a      	strb	r2, [r3, #0]
}
 8009f78:	e1a8      	b.n	800a2cc <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	212c      	movs	r1, #44	; 0x2c
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	4413      	add	r3, r2
 8009f86:	3354      	adds	r3, #84	; 0x54
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	f083 0301 	eor.w	r3, r3, #1
 8009f8e:	b2d8      	uxtb	r0, r3
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	212c      	movs	r1, #44	; 0x2c
 8009f96:	fb01 f303 	mul.w	r3, r1, r3
 8009f9a:	4413      	add	r3, r2
 8009f9c:	3354      	adds	r3, #84	; 0x54
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	701a      	strb	r2, [r3, #0]
}
 8009fa2:	e193      	b.n	800a2cc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	f040 8106 	bne.w	800a1c8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	0151      	lsls	r1, r2, #5
 8009fce:	693a      	ldr	r2, [r7, #16]
 8009fd0:	440a      	add	r2, r1
 8009fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fd6:	f023 0302 	bic.w	r3, r3, #2
 8009fda:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	212c      	movs	r1, #44	; 0x2c
 8009fe2:	fb01 f303 	mul.w	r3, r1, r3
 8009fe6:	4413      	add	r3, r2
 8009fe8:	3361      	adds	r3, #97	; 0x61
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d109      	bne.n	800a004 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	212c      	movs	r1, #44	; 0x2c
 8009ff6:	fb01 f303 	mul.w	r3, r1, r3
 8009ffa:	4413      	add	r3, r2
 8009ffc:	3360      	adds	r3, #96	; 0x60
 8009ffe:	2201      	movs	r2, #1
 800a000:	701a      	strb	r2, [r3, #0]
 800a002:	e0c9      	b.n	800a198 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	212c      	movs	r1, #44	; 0x2c
 800a00a:	fb01 f303 	mul.w	r3, r1, r3
 800a00e:	4413      	add	r3, r2
 800a010:	3361      	adds	r3, #97	; 0x61
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	2b05      	cmp	r3, #5
 800a016:	d109      	bne.n	800a02c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	212c      	movs	r1, #44	; 0x2c
 800a01e:	fb01 f303 	mul.w	r3, r1, r3
 800a022:	4413      	add	r3, r2
 800a024:	3360      	adds	r3, #96	; 0x60
 800a026:	2205      	movs	r2, #5
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	e0b5      	b.n	800a198 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	212c      	movs	r1, #44	; 0x2c
 800a032:	fb01 f303 	mul.w	r3, r1, r3
 800a036:	4413      	add	r3, r2
 800a038:	3361      	adds	r3, #97	; 0x61
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	2b06      	cmp	r3, #6
 800a03e:	d009      	beq.n	800a054 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	212c      	movs	r1, #44	; 0x2c
 800a046:	fb01 f303 	mul.w	r3, r1, r3
 800a04a:	4413      	add	r3, r2
 800a04c:	3361      	adds	r3, #97	; 0x61
 800a04e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a050:	2b08      	cmp	r3, #8
 800a052:	d150      	bne.n	800a0f6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	212c      	movs	r1, #44	; 0x2c
 800a05a:	fb01 f303 	mul.w	r3, r1, r3
 800a05e:	4413      	add	r3, r2
 800a060:	335c      	adds	r3, #92	; 0x5c
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	1c5a      	adds	r2, r3, #1
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	202c      	movs	r0, #44	; 0x2c
 800a06c:	fb00 f303 	mul.w	r3, r0, r3
 800a070:	440b      	add	r3, r1
 800a072:	335c      	adds	r3, #92	; 0x5c
 800a074:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	212c      	movs	r1, #44	; 0x2c
 800a07c:	fb01 f303 	mul.w	r3, r1, r3
 800a080:	4413      	add	r3, r2
 800a082:	335c      	adds	r3, #92	; 0x5c
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b02      	cmp	r3, #2
 800a088:	d912      	bls.n	800a0b0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	212c      	movs	r1, #44	; 0x2c
 800a090:	fb01 f303 	mul.w	r3, r1, r3
 800a094:	4413      	add	r3, r2
 800a096:	335c      	adds	r3, #92	; 0x5c
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	212c      	movs	r1, #44	; 0x2c
 800a0a2:	fb01 f303 	mul.w	r3, r1, r3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	3360      	adds	r3, #96	; 0x60
 800a0aa:	2204      	movs	r2, #4
 800a0ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a0ae:	e073      	b.n	800a198 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	212c      	movs	r1, #44	; 0x2c
 800a0b6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3360      	adds	r3, #96	; 0x60
 800a0be:	2202      	movs	r2, #2
 800a0c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0d8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0e0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	015a      	lsls	r2, r3, #5
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a0f4:	e050      	b.n	800a198 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	212c      	movs	r1, #44	; 0x2c
 800a0fc:	fb01 f303 	mul.w	r3, r1, r3
 800a100:	4413      	add	r3, r2
 800a102:	3361      	adds	r3, #97	; 0x61
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	2b03      	cmp	r3, #3
 800a108:	d122      	bne.n	800a150 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	212c      	movs	r1, #44	; 0x2c
 800a110:	fb01 f303 	mul.w	r3, r1, r3
 800a114:	4413      	add	r3, r2
 800a116:	3360      	adds	r3, #96	; 0x60
 800a118:	2202      	movs	r2, #2
 800a11a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	4413      	add	r3, r2
 800a124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a132:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a13a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	4413      	add	r3, r2
 800a144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a148:	461a      	mov	r2, r3
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	e023      	b.n	800a198 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	212c      	movs	r1, #44	; 0x2c
 800a156:	fb01 f303 	mul.w	r3, r1, r3
 800a15a:	4413      	add	r3, r2
 800a15c:	3361      	adds	r3, #97	; 0x61
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b07      	cmp	r3, #7
 800a162:	d119      	bne.n	800a198 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	212c      	movs	r1, #44	; 0x2c
 800a16a:	fb01 f303 	mul.w	r3, r1, r3
 800a16e:	4413      	add	r3, r2
 800a170:	335c      	adds	r3, #92	; 0x5c
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	202c      	movs	r0, #44	; 0x2c
 800a17c:	fb00 f303 	mul.w	r3, r0, r3
 800a180:	440b      	add	r3, r1
 800a182:	335c      	adds	r3, #92	; 0x5c
 800a184:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	212c      	movs	r1, #44	; 0x2c
 800a18c:	fb01 f303 	mul.w	r3, r1, r3
 800a190:	4413      	add	r3, r2
 800a192:	3360      	adds	r3, #96	; 0x60
 800a194:	2204      	movs	r2, #4
 800a196:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	b2d9      	uxtb	r1, r3
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	202c      	movs	r0, #44	; 0x2c
 800a1b4:	fb00 f303 	mul.w	r3, r0, r3
 800a1b8:	4413      	add	r3, r2
 800a1ba:	3360      	adds	r3, #96	; 0x60
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f00e ff45 	bl	8019050 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a1c6:	e081      	b.n	800a2cc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f003 0310 	and.w	r3, r3, #16
 800a1da:	2b10      	cmp	r3, #16
 800a1dc:	d176      	bne.n	800a2cc <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	212c      	movs	r1, #44	; 0x2c
 800a1e4:	fb01 f303 	mul.w	r3, r1, r3
 800a1e8:	4413      	add	r3, r2
 800a1ea:	333f      	adds	r3, #63	; 0x3f
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d121      	bne.n	800a236 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	212c      	movs	r1, #44	; 0x2c
 800a1f8:	fb01 f303 	mul.w	r3, r1, r3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	335c      	adds	r3, #92	; 0x5c
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	0151      	lsls	r1, r2, #5
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	440a      	add	r2, r1
 800a21a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a21e:	f043 0302 	orr.w	r3, r3, #2
 800a222:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	b2d2      	uxtb	r2, r2
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f009 fac1 	bl	80137b6 <USB_HC_Halt>
 800a234:	e041      	b.n	800a2ba <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	212c      	movs	r1, #44	; 0x2c
 800a23c:	fb01 f303 	mul.w	r3, r1, r3
 800a240:	4413      	add	r3, r2
 800a242:	333f      	adds	r3, #63	; 0x3f
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d009      	beq.n	800a25e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	212c      	movs	r1, #44	; 0x2c
 800a250:	fb01 f303 	mul.w	r3, r1, r3
 800a254:	4413      	add	r3, r2
 800a256:	333f      	adds	r3, #63	; 0x3f
 800a258:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d12d      	bne.n	800a2ba <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	212c      	movs	r1, #44	; 0x2c
 800a264:	fb01 f303 	mul.w	r3, r1, r3
 800a268:	4413      	add	r3, r2
 800a26a:	335c      	adds	r3, #92	; 0x5c
 800a26c:	2200      	movs	r2, #0
 800a26e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d120      	bne.n	800a2ba <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	212c      	movs	r1, #44	; 0x2c
 800a27e:	fb01 f303 	mul.w	r3, r1, r3
 800a282:	4413      	add	r3, r2
 800a284:	3361      	adds	r3, #97	; 0x61
 800a286:	2203      	movs	r2, #3
 800a288:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	4413      	add	r3, r2
 800a292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	0151      	lsls	r1, r2, #5
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	440a      	add	r2, r1
 800a2a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2a4:	f043 0302 	orr.w	r3, r3, #2
 800a2a8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	b2d2      	uxtb	r2, r2
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f009 fa7e 	bl	80137b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	015a      	lsls	r2, r3, #5
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	2310      	movs	r3, #16
 800a2ca:	6093      	str	r3, [r2, #8]
}
 800a2cc:	bf00      	nop
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b088      	sub	sp, #32
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b04      	cmp	r3, #4
 800a302:	d119      	bne.n	800a338 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a310:	461a      	mov	r2, r3
 800a312:	2304      	movs	r3, #4
 800a314:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	0151      	lsls	r1, r2, #5
 800a328:	69ba      	ldr	r2, [r7, #24]
 800a32a:	440a      	add	r2, r1
 800a32c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a330:	f043 0302 	orr.w	r3, r3, #2
 800a334:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800a336:	e3c6      	b.n	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d13e      	bne.n	800a3cc <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	4413      	add	r3, r2
 800a356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a35a:	461a      	mov	r2, r3
 800a35c:	2320      	movs	r3, #32
 800a35e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	212c      	movs	r1, #44	; 0x2c
 800a366:	fb01 f303 	mul.w	r3, r1, r3
 800a36a:	4413      	add	r3, r2
 800a36c:	333d      	adds	r3, #61	; 0x3d
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2b01      	cmp	r3, #1
 800a372:	f040 83a8 	bne.w	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	212c      	movs	r1, #44	; 0x2c
 800a37c:	fb01 f303 	mul.w	r3, r1, r3
 800a380:	4413      	add	r3, r2
 800a382:	333d      	adds	r3, #61	; 0x3d
 800a384:	2200      	movs	r2, #0
 800a386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	212c      	movs	r1, #44	; 0x2c
 800a38e:	fb01 f303 	mul.w	r3, r1, r3
 800a392:	4413      	add	r3, r2
 800a394:	3360      	adds	r3, #96	; 0x60
 800a396:	2202      	movs	r2, #2
 800a398:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3b4:	f043 0302 	orr.w	r3, r3, #2
 800a3b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	b2d2      	uxtb	r2, r2
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f009 f9f6 	bl	80137b6 <USB_HC_Halt>
}
 800a3ca:	e37c      	b.n	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3e2:	d122      	bne.n	800a42a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	0151      	lsls	r1, r2, #5
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	440a      	add	r2, r1
 800a3fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3fe:	f043 0302 	orr.w	r3, r3, #2
 800a402:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	b2d2      	uxtb	r2, r2
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f009 f9d1 	bl	80137b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	015a      	lsls	r2, r3, #5
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	4413      	add	r3, r2
 800a41c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a420:	461a      	mov	r2, r3
 800a422:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a426:	6093      	str	r3, [r2, #8]
}
 800a428:	e34d      	b.n	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	015a      	lsls	r2, r3, #5
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	4413      	add	r3, r2
 800a432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d150      	bne.n	800a4e2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	212c      	movs	r1, #44	; 0x2c
 800a446:	fb01 f303 	mul.w	r3, r1, r3
 800a44a:	4413      	add	r3, r2
 800a44c:	335c      	adds	r3, #92	; 0x5c
 800a44e:	2200      	movs	r2, #0
 800a450:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a464:	2b40      	cmp	r3, #64	; 0x40
 800a466:	d111      	bne.n	800a48c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	212c      	movs	r1, #44	; 0x2c
 800a46e:	fb01 f303 	mul.w	r3, r1, r3
 800a472:	4413      	add	r3, r2
 800a474:	333d      	adds	r3, #61	; 0x3d
 800a476:	2201      	movs	r2, #1
 800a478:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	015a      	lsls	r2, r3, #5
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	4413      	add	r3, r2
 800a482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a486:	461a      	mov	r2, r3
 800a488:	2340      	movs	r3, #64	; 0x40
 800a48a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	4413      	add	r3, r2
 800a494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	0151      	lsls	r1, r2, #5
 800a49e:	69ba      	ldr	r2, [r7, #24]
 800a4a0:	440a      	add	r2, r1
 800a4a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4a6:	f043 0302 	orr.w	r3, r3, #2
 800a4aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	b2d2      	uxtb	r2, r2
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f009 f97d 	bl	80137b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	212c      	movs	r1, #44	; 0x2c
 800a4d4:	fb01 f303 	mul.w	r3, r1, r3
 800a4d8:	4413      	add	r3, r2
 800a4da:	3361      	adds	r3, #97	; 0x61
 800a4dc:	2201      	movs	r2, #1
 800a4de:	701a      	strb	r2, [r3, #0]
}
 800a4e0:	e2f1      	b.n	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d13c      	bne.n	800a572 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	212c      	movs	r1, #44	; 0x2c
 800a4fe:	fb01 f303 	mul.w	r3, r1, r3
 800a502:	4413      	add	r3, r2
 800a504:	3361      	adds	r3, #97	; 0x61
 800a506:	2204      	movs	r2, #4
 800a508:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	212c      	movs	r1, #44	; 0x2c
 800a510:	fb01 f303 	mul.w	r3, r1, r3
 800a514:	4413      	add	r3, r2
 800a516:	333d      	adds	r3, #61	; 0x3d
 800a518:	2201      	movs	r2, #1
 800a51a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	212c      	movs	r1, #44	; 0x2c
 800a522:	fb01 f303 	mul.w	r3, r1, r3
 800a526:	4413      	add	r3, r2
 800a528:	335c      	adds	r3, #92	; 0x5c
 800a52a:	2200      	movs	r2, #0
 800a52c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	4413      	add	r3, r2
 800a536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	0151      	lsls	r1, r2, #5
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	440a      	add	r2, r1
 800a544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a548:	f043 0302 	orr.w	r3, r3, #2
 800a54c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	b2d2      	uxtb	r2, r2
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f009 f92c 	bl	80137b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	4413      	add	r3, r2
 800a566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a56a:	461a      	mov	r2, r3
 800a56c:	2340      	movs	r3, #64	; 0x40
 800a56e:	6093      	str	r3, [r2, #8]
}
 800a570:	e2a9      	b.n	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f003 0308 	and.w	r3, r3, #8
 800a584:	2b08      	cmp	r3, #8
 800a586:	d12a      	bne.n	800a5de <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a594:	461a      	mov	r2, r3
 800a596:	2308      	movs	r3, #8
 800a598:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	0151      	lsls	r1, r2, #5
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	440a      	add	r2, r1
 800a5b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5b4:	f043 0302 	orr.w	r3, r3, #2
 800a5b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	b2d2      	uxtb	r2, r2
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f009 f8f6 	bl	80137b6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	212c      	movs	r1, #44	; 0x2c
 800a5d0:	fb01 f303 	mul.w	r3, r1, r3
 800a5d4:	4413      	add	r3, r2
 800a5d6:	3361      	adds	r3, #97	; 0x61
 800a5d8:	2205      	movs	r2, #5
 800a5da:	701a      	strb	r2, [r3, #0]
}
 800a5dc:	e273      	b.n	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f003 0310 	and.w	r3, r3, #16
 800a5f0:	2b10      	cmp	r3, #16
 800a5f2:	d150      	bne.n	800a696 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	212c      	movs	r1, #44	; 0x2c
 800a5fa:	fb01 f303 	mul.w	r3, r1, r3
 800a5fe:	4413      	add	r3, r2
 800a600:	335c      	adds	r3, #92	; 0x5c
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	212c      	movs	r1, #44	; 0x2c
 800a60c:	fb01 f303 	mul.w	r3, r1, r3
 800a610:	4413      	add	r3, r2
 800a612:	3361      	adds	r3, #97	; 0x61
 800a614:	2203      	movs	r2, #3
 800a616:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	212c      	movs	r1, #44	; 0x2c
 800a61e:	fb01 f303 	mul.w	r3, r1, r3
 800a622:	4413      	add	r3, r2
 800a624:	333d      	adds	r3, #61	; 0x3d
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d112      	bne.n	800a652 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	212c      	movs	r1, #44	; 0x2c
 800a632:	fb01 f303 	mul.w	r3, r1, r3
 800a636:	4413      	add	r3, r2
 800a638:	333c      	adds	r3, #60	; 0x3c
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d108      	bne.n	800a652 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	212c      	movs	r1, #44	; 0x2c
 800a646:	fb01 f303 	mul.w	r3, r1, r3
 800a64a:	4413      	add	r3, r2
 800a64c:	333d      	adds	r3, #61	; 0x3d
 800a64e:	2201      	movs	r2, #1
 800a650:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	0151      	lsls	r1, r2, #5
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	440a      	add	r2, r1
 800a668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a66c:	f043 0302 	orr.w	r3, r3, #2
 800a670:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	b2d2      	uxtb	r2, r2
 800a67a:	4611      	mov	r1, r2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f009 f89a 	bl	80137b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	015a      	lsls	r2, r3, #5
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	4413      	add	r3, r2
 800a68a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a68e:	461a      	mov	r2, r3
 800a690:	2310      	movs	r3, #16
 800a692:	6093      	str	r3, [r2, #8]
}
 800a694:	e217      	b.n	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a8:	2b80      	cmp	r3, #128	; 0x80
 800a6aa:	d174      	bne.n	800a796 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d121      	bne.n	800a6f8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	212c      	movs	r1, #44	; 0x2c
 800a6ba:	fb01 f303 	mul.w	r3, r1, r3
 800a6be:	4413      	add	r3, r2
 800a6c0:	3361      	adds	r3, #97	; 0x61
 800a6c2:	2206      	movs	r2, #6
 800a6c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	0151      	lsls	r1, r2, #5
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	440a      	add	r2, r1
 800a6dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6e0:	f043 0302 	orr.w	r3, r3, #2
 800a6e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	b2d2      	uxtb	r2, r2
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f009 f860 	bl	80137b6 <USB_HC_Halt>
 800a6f6:	e044      	b.n	800a782 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	212c      	movs	r1, #44	; 0x2c
 800a6fe:	fb01 f303 	mul.w	r3, r1, r3
 800a702:	4413      	add	r3, r2
 800a704:	335c      	adds	r3, #92	; 0x5c
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	202c      	movs	r0, #44	; 0x2c
 800a710:	fb00 f303 	mul.w	r3, r0, r3
 800a714:	440b      	add	r3, r1
 800a716:	335c      	adds	r3, #92	; 0x5c
 800a718:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	212c      	movs	r1, #44	; 0x2c
 800a720:	fb01 f303 	mul.w	r3, r1, r3
 800a724:	4413      	add	r3, r2
 800a726:	335c      	adds	r3, #92	; 0x5c
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d920      	bls.n	800a770 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	212c      	movs	r1, #44	; 0x2c
 800a734:	fb01 f303 	mul.w	r3, r1, r3
 800a738:	4413      	add	r3, r2
 800a73a:	335c      	adds	r3, #92	; 0x5c
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	212c      	movs	r1, #44	; 0x2c
 800a746:	fb01 f303 	mul.w	r3, r1, r3
 800a74a:	4413      	add	r3, r2
 800a74c:	3360      	adds	r3, #96	; 0x60
 800a74e:	2204      	movs	r2, #4
 800a750:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	b2d9      	uxtb	r1, r3
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	202c      	movs	r0, #44	; 0x2c
 800a75c:	fb00 f303 	mul.w	r3, r0, r3
 800a760:	4413      	add	r3, r2
 800a762:	3360      	adds	r3, #96	; 0x60
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f00e fc71 	bl	8019050 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a76e:	e008      	b.n	800a782 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	212c      	movs	r1, #44	; 0x2c
 800a776:	fb01 f303 	mul.w	r3, r1, r3
 800a77a:	4413      	add	r3, r2
 800a77c:	3360      	adds	r3, #96	; 0x60
 800a77e:	2202      	movs	r2, #2
 800a780:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a78e:	461a      	mov	r2, r3
 800a790:	2380      	movs	r3, #128	; 0x80
 800a792:	6093      	str	r3, [r2, #8]
}
 800a794:	e197      	b.n	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ac:	d134      	bne.n	800a818 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	0151      	lsls	r1, r2, #5
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	440a      	add	r2, r1
 800a7c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7c8:	f043 0302 	orr.w	r3, r3, #2
 800a7cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	b2d2      	uxtb	r2, r2
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f008 ffec 	bl	80137b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	2310      	movs	r3, #16
 800a7ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a802:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	212c      	movs	r1, #44	; 0x2c
 800a80a:	fb01 f303 	mul.w	r3, r1, r3
 800a80e:	4413      	add	r3, r2
 800a810:	3361      	adds	r3, #97	; 0x61
 800a812:	2208      	movs	r2, #8
 800a814:	701a      	strb	r2, [r3, #0]
}
 800a816:	e156      	b.n	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	f040 814b 	bne.w	800aac6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	4413      	add	r3, r2
 800a838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	0151      	lsls	r1, r2, #5
 800a842:	69ba      	ldr	r2, [r7, #24]
 800a844:	440a      	add	r2, r1
 800a846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a84a:	f023 0302 	bic.w	r3, r3, #2
 800a84e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	212c      	movs	r1, #44	; 0x2c
 800a856:	fb01 f303 	mul.w	r3, r1, r3
 800a85a:	4413      	add	r3, r2
 800a85c:	3361      	adds	r3, #97	; 0x61
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d179      	bne.n	800a958 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	212c      	movs	r1, #44	; 0x2c
 800a86a:	fb01 f303 	mul.w	r3, r1, r3
 800a86e:	4413      	add	r3, r2
 800a870:	3360      	adds	r3, #96	; 0x60
 800a872:	2201      	movs	r2, #1
 800a874:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	212c      	movs	r1, #44	; 0x2c
 800a87c:	fb01 f303 	mul.w	r3, r1, r3
 800a880:	4413      	add	r3, r2
 800a882:	333f      	adds	r3, #63	; 0x3f
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d00a      	beq.n	800a8a0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	212c      	movs	r1, #44	; 0x2c
 800a890:	fb01 f303 	mul.w	r3, r1, r3
 800a894:	4413      	add	r3, r2
 800a896:	333f      	adds	r3, #63	; 0x3f
 800a898:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	f040 80fc 	bne.w	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d142      	bne.n	800a92e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	212c      	movs	r1, #44	; 0x2c
 800a8ae:	fb01 f303 	mul.w	r3, r1, r3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	334c      	adds	r3, #76	; 0x4c
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 80ed 	beq.w	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	212c      	movs	r1, #44	; 0x2c
 800a8c4:	fb01 f303 	mul.w	r3, r1, r3
 800a8c8:	4413      	add	r3, r2
 800a8ca:	334c      	adds	r3, #76	; 0x4c
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6879      	ldr	r1, [r7, #4]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	202c      	movs	r0, #44	; 0x2c
 800a8d4:	fb00 f202 	mul.w	r2, r0, r2
 800a8d8:	440a      	add	r2, r1
 800a8da:	3240      	adds	r2, #64	; 0x40
 800a8dc:	8812      	ldrh	r2, [r2, #0]
 800a8de:	4413      	add	r3, r2
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	202c      	movs	r0, #44	; 0x2c
 800a8e8:	fb00 f202 	mul.w	r2, r0, r2
 800a8ec:	440a      	add	r2, r1
 800a8ee:	3240      	adds	r2, #64	; 0x40
 800a8f0:	8812      	ldrh	r2, [r2, #0]
 800a8f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 80ca 	beq.w	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	212c      	movs	r1, #44	; 0x2c
 800a90a:	fb01 f303 	mul.w	r3, r1, r3
 800a90e:	4413      	add	r3, r2
 800a910:	3355      	adds	r3, #85	; 0x55
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	f083 0301 	eor.w	r3, r3, #1
 800a918:	b2d8      	uxtb	r0, r3
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	212c      	movs	r1, #44	; 0x2c
 800a920:	fb01 f303 	mul.w	r3, r1, r3
 800a924:	4413      	add	r3, r2
 800a926:	3355      	adds	r3, #85	; 0x55
 800a928:	4602      	mov	r2, r0
 800a92a:	701a      	strb	r2, [r3, #0]
 800a92c:	e0b4      	b.n	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	212c      	movs	r1, #44	; 0x2c
 800a934:	fb01 f303 	mul.w	r3, r1, r3
 800a938:	4413      	add	r3, r2
 800a93a:	3355      	adds	r3, #85	; 0x55
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	f083 0301 	eor.w	r3, r3, #1
 800a942:	b2d8      	uxtb	r0, r3
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	212c      	movs	r1, #44	; 0x2c
 800a94a:	fb01 f303 	mul.w	r3, r1, r3
 800a94e:	4413      	add	r3, r2
 800a950:	3355      	adds	r3, #85	; 0x55
 800a952:	4602      	mov	r2, r0
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	e09f      	b.n	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	212c      	movs	r1, #44	; 0x2c
 800a95e:	fb01 f303 	mul.w	r3, r1, r3
 800a962:	4413      	add	r3, r2
 800a964:	3361      	adds	r3, #97	; 0x61
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d109      	bne.n	800a980 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	212c      	movs	r1, #44	; 0x2c
 800a972:	fb01 f303 	mul.w	r3, r1, r3
 800a976:	4413      	add	r3, r2
 800a978:	3360      	adds	r3, #96	; 0x60
 800a97a:	2202      	movs	r2, #2
 800a97c:	701a      	strb	r2, [r3, #0]
 800a97e:	e08b      	b.n	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	212c      	movs	r1, #44	; 0x2c
 800a986:	fb01 f303 	mul.w	r3, r1, r3
 800a98a:	4413      	add	r3, r2
 800a98c:	3361      	adds	r3, #97	; 0x61
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b04      	cmp	r3, #4
 800a992:	d109      	bne.n	800a9a8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	212c      	movs	r1, #44	; 0x2c
 800a99a:	fb01 f303 	mul.w	r3, r1, r3
 800a99e:	4413      	add	r3, r2
 800a9a0:	3360      	adds	r3, #96	; 0x60
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	701a      	strb	r2, [r3, #0]
 800a9a6:	e077      	b.n	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	212c      	movs	r1, #44	; 0x2c
 800a9ae:	fb01 f303 	mul.w	r3, r1, r3
 800a9b2:	4413      	add	r3, r2
 800a9b4:	3361      	adds	r3, #97	; 0x61
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2b05      	cmp	r3, #5
 800a9ba:	d109      	bne.n	800a9d0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	212c      	movs	r1, #44	; 0x2c
 800a9c2:	fb01 f303 	mul.w	r3, r1, r3
 800a9c6:	4413      	add	r3, r2
 800a9c8:	3360      	adds	r3, #96	; 0x60
 800a9ca:	2205      	movs	r2, #5
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	e063      	b.n	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	212c      	movs	r1, #44	; 0x2c
 800a9d6:	fb01 f303 	mul.w	r3, r1, r3
 800a9da:	4413      	add	r3, r2
 800a9dc:	3361      	adds	r3, #97	; 0x61
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b06      	cmp	r3, #6
 800a9e2:	d009      	beq.n	800a9f8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	212c      	movs	r1, #44	; 0x2c
 800a9ea:	fb01 f303 	mul.w	r3, r1, r3
 800a9ee:	4413      	add	r3, r2
 800a9f0:	3361      	adds	r3, #97	; 0x61
 800a9f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a9f4:	2b08      	cmp	r3, #8
 800a9f6:	d14f      	bne.n	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	212c      	movs	r1, #44	; 0x2c
 800a9fe:	fb01 f303 	mul.w	r3, r1, r3
 800aa02:	4413      	add	r3, r2
 800aa04:	335c      	adds	r3, #92	; 0x5c
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	202c      	movs	r0, #44	; 0x2c
 800aa10:	fb00 f303 	mul.w	r3, r0, r3
 800aa14:	440b      	add	r3, r1
 800aa16:	335c      	adds	r3, #92	; 0x5c
 800aa18:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	212c      	movs	r1, #44	; 0x2c
 800aa20:	fb01 f303 	mul.w	r3, r1, r3
 800aa24:	4413      	add	r3, r2
 800aa26:	335c      	adds	r3, #92	; 0x5c
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d912      	bls.n	800aa54 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	212c      	movs	r1, #44	; 0x2c
 800aa34:	fb01 f303 	mul.w	r3, r1, r3
 800aa38:	4413      	add	r3, r2
 800aa3a:	335c      	adds	r3, #92	; 0x5c
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	212c      	movs	r1, #44	; 0x2c
 800aa46:	fb01 f303 	mul.w	r3, r1, r3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	3360      	adds	r3, #96	; 0x60
 800aa4e:	2204      	movs	r2, #4
 800aa50:	701a      	strb	r2, [r3, #0]
 800aa52:	e021      	b.n	800aa98 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	212c      	movs	r1, #44	; 0x2c
 800aa5a:	fb01 f303 	mul.w	r3, r1, r3
 800aa5e:	4413      	add	r3, r2
 800aa60:	3360      	adds	r3, #96	; 0x60
 800aa62:	2202      	movs	r2, #2
 800aa64:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa7c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa84:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa92:	461a      	mov	r2, r3
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	b2d9      	uxtb	r1, r3
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	202c      	movs	r0, #44	; 0x2c
 800aab4:	fb00 f303 	mul.w	r3, r0, r3
 800aab8:	4413      	add	r3, r2
 800aaba:	3360      	adds	r3, #96	; 0x60
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f00e fac5 	bl	8019050 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800aac6:	bf00      	nop
 800aac8:	3720      	adds	r7, #32
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b08a      	sub	sp, #40	; 0x28
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	f003 030f 	and.w	r3, r3, #15
 800aaee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	0c5b      	lsrs	r3, r3, #17
 800aaf4:	f003 030f 	and.w	r3, r3, #15
 800aaf8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	091b      	lsrs	r3, r3, #4
 800aafe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab02:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d004      	beq.n	800ab14 <HCD_RXQLVL_IRQHandler+0x46>
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b05      	cmp	r3, #5
 800ab0e:	f000 80a9 	beq.w	800ac64 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800ab12:	e0aa      	b.n	800ac6a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80a6 	beq.w	800ac68 <HCD_RXQLVL_IRQHandler+0x19a>
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	212c      	movs	r1, #44	; 0x2c
 800ab22:	fb01 f303 	mul.w	r3, r1, r3
 800ab26:	4413      	add	r3, r2
 800ab28:	3344      	adds	r3, #68	; 0x44
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 809b 	beq.w	800ac68 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	212c      	movs	r1, #44	; 0x2c
 800ab38:	fb01 f303 	mul.w	r3, r1, r3
 800ab3c:	4413      	add	r3, r2
 800ab3e:	3350      	adds	r3, #80	; 0x50
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	441a      	add	r2, r3
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	202c      	movs	r0, #44	; 0x2c
 800ab4c:	fb00 f303 	mul.w	r3, r0, r3
 800ab50:	440b      	add	r3, r1
 800ab52:	334c      	adds	r3, #76	; 0x4c
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d87a      	bhi.n	800ac50 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6818      	ldr	r0, [r3, #0]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	212c      	movs	r1, #44	; 0x2c
 800ab64:	fb01 f303 	mul.w	r3, r1, r3
 800ab68:	4413      	add	r3, r2
 800ab6a:	3344      	adds	r3, #68	; 0x44
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	b292      	uxth	r2, r2
 800ab72:	4619      	mov	r1, r3
 800ab74:	f008 f9c9 	bl	8012f0a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	212c      	movs	r1, #44	; 0x2c
 800ab7e:	fb01 f303 	mul.w	r3, r1, r3
 800ab82:	4413      	add	r3, r2
 800ab84:	3344      	adds	r3, #68	; 0x44
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	441a      	add	r2, r3
 800ab8c:	6879      	ldr	r1, [r7, #4]
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	202c      	movs	r0, #44	; 0x2c
 800ab92:	fb00 f303 	mul.w	r3, r0, r3
 800ab96:	440b      	add	r3, r1
 800ab98:	3344      	adds	r3, #68	; 0x44
 800ab9a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	212c      	movs	r1, #44	; 0x2c
 800aba2:	fb01 f303 	mul.w	r3, r1, r3
 800aba6:	4413      	add	r3, r2
 800aba8:	3350      	adds	r3, #80	; 0x50
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	441a      	add	r2, r3
 800abb0:	6879      	ldr	r1, [r7, #4]
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	202c      	movs	r0, #44	; 0x2c
 800abb6:	fb00 f303 	mul.w	r3, r0, r3
 800abba:	440b      	add	r3, r1
 800abbc:	3350      	adds	r3, #80	; 0x50
 800abbe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	015a      	lsls	r2, r3, #5
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	0cdb      	lsrs	r3, r3, #19
 800abd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abd4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	212c      	movs	r1, #44	; 0x2c
 800abdc:	fb01 f303 	mul.w	r3, r1, r3
 800abe0:	4413      	add	r3, r2
 800abe2:	3340      	adds	r3, #64	; 0x40
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	4293      	cmp	r3, r2
 800abec:	d13c      	bne.n	800ac68 <HCD_RXQLVL_IRQHandler+0x19a>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d039      	beq.n	800ac68 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	6a3b      	ldr	r3, [r7, #32]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac0a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac12:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac20:	461a      	mov	r2, r3
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	212c      	movs	r1, #44	; 0x2c
 800ac2c:	fb01 f303 	mul.w	r3, r1, r3
 800ac30:	4413      	add	r3, r2
 800ac32:	3354      	adds	r3, #84	; 0x54
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	f083 0301 	eor.w	r3, r3, #1
 800ac3a:	b2d8      	uxtb	r0, r3
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	212c      	movs	r1, #44	; 0x2c
 800ac42:	fb01 f303 	mul.w	r3, r1, r3
 800ac46:	4413      	add	r3, r2
 800ac48:	3354      	adds	r3, #84	; 0x54
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	701a      	strb	r2, [r3, #0]
      break;
 800ac4e:	e00b      	b.n	800ac68 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	212c      	movs	r1, #44	; 0x2c
 800ac56:	fb01 f303 	mul.w	r3, r1, r3
 800ac5a:	4413      	add	r3, r2
 800ac5c:	3360      	adds	r3, #96	; 0x60
 800ac5e:	2204      	movs	r2, #4
 800ac60:	701a      	strb	r2, [r3, #0]
      break;
 800ac62:	e001      	b.n	800ac68 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800ac64:	bf00      	nop
 800ac66:	e000      	b.n	800ac6a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800ac68:	bf00      	nop
  }
}
 800ac6a:	bf00      	nop
 800ac6c:	3728      	adds	r7, #40	; 0x28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b086      	sub	sp, #24
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ac9e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f003 0302 	and.w	r3, r3, #2
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d10b      	bne.n	800acc2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d102      	bne.n	800acba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f00e f9af 	bl	8019018 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	f043 0302 	orr.w	r3, r3, #2
 800acc0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f003 0308 	and.w	r3, r3, #8
 800acc8:	2b08      	cmp	r3, #8
 800acca:	d132      	bne.n	800ad32 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	f043 0308 	orr.w	r3, r3, #8
 800acd2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f003 0304 	and.w	r3, r3, #4
 800acda:	2b04      	cmp	r3, #4
 800acdc:	d126      	bne.n	800ad2c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d113      	bne.n	800ad0e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800acec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acf0:	d106      	bne.n	800ad00 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2102      	movs	r1, #2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f008 fa35 	bl	8013168 <USB_InitFSLSPClkSel>
 800acfe:	e011      	b.n	800ad24 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2101      	movs	r1, #1
 800ad06:	4618      	mov	r0, r3
 800ad08:	f008 fa2e 	bl	8013168 <USB_InitFSLSPClkSel>
 800ad0c:	e00a      	b.n	800ad24 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d106      	bne.n	800ad24 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ad22:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f00e f9a5 	bl	8019074 <HAL_HCD_PortEnabled_Callback>
 800ad2a:	e002      	b.n	800ad32 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f00e f9af 	bl	8019090 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f003 0320 	and.w	r3, r3, #32
 800ad38:	2b20      	cmp	r3, #32
 800ad3a:	d103      	bne.n	800ad44 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	f043 0320 	orr.w	r3, r3, #32
 800ad42:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6013      	str	r3, [r2, #0]
}
 800ad50:	bf00      	nop
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e07f      	b.n	800ae6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7f8 fa8e 	bl	80032a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2224      	movs	r2, #36	; 0x24
 800ad88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 0201 	bic.w	r2, r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ada8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800adb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d107      	bne.n	800add2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	689a      	ldr	r2, [r3, #8]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adce:	609a      	str	r2, [r3, #8]
 800add0:	e006      	b.n	800ade0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	689a      	ldr	r2, [r3, #8]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800adde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d104      	bne.n	800adf2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6859      	ldr	r1, [r3, #4]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	4b1d      	ldr	r3, [pc, #116]	; (800ae74 <HAL_I2C_Init+0x11c>)
 800adfe:	430b      	orrs	r3, r1
 800ae00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	691a      	ldr	r2, [r3, #16]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	ea42 0103 	orr.w	r1, r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	021a      	lsls	r2, r3, #8
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	69d9      	ldr	r1, [r3, #28]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a1a      	ldr	r2, [r3, #32]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f042 0201 	orr.w	r2, r2, #1
 800ae4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2220      	movs	r2, #32
 800ae56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	02008000 	.word	0x02008000

0800ae78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e021      	b.n	800aece <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2224      	movs	r2, #36	; 0x24
 800ae8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 0201 	bic.w	r2, r2, #1
 800aea0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7f8 fa74 	bl	8003390 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af02      	add	r7, sp, #8
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	4608      	mov	r0, r1
 800aee2:	4611      	mov	r1, r2
 800aee4:	461a      	mov	r2, r3
 800aee6:	4603      	mov	r3, r0
 800aee8:	817b      	strh	r3, [r7, #10]
 800aeea:	460b      	mov	r3, r1
 800aeec:	813b      	strh	r3, [r7, #8]
 800aeee:	4613      	mov	r3, r2
 800aef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b20      	cmp	r3, #32
 800aefc:	f040 80f9 	bne.w	800b0f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d002      	beq.n	800af0c <HAL_I2C_Mem_Write+0x34>
 800af06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d105      	bne.n	800af18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e0ed      	b.n	800b0f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d101      	bne.n	800af26 <HAL_I2C_Mem_Write+0x4e>
 800af22:	2302      	movs	r3, #2
 800af24:	e0e6      	b.n	800b0f4 <HAL_I2C_Mem_Write+0x21c>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800af2e:	f7fc f859 	bl	8006fe4 <HAL_GetTick>
 800af32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	2319      	movs	r3, #25
 800af3a:	2201      	movs	r2, #1
 800af3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f000 fac3 	bl	800b4cc <I2C_WaitOnFlagUntilTimeout>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	e0d1      	b.n	800b0f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2221      	movs	r2, #33	; 0x21
 800af54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2240      	movs	r2, #64	; 0x40
 800af5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6a3a      	ldr	r2, [r7, #32]
 800af6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2200      	movs	r2, #0
 800af76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800af78:	88f8      	ldrh	r0, [r7, #6]
 800af7a:	893a      	ldrh	r2, [r7, #8]
 800af7c:	8979      	ldrh	r1, [r7, #10]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	4603      	mov	r3, r0
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f000 f9d3 	bl	800b334 <I2C_RequestMemoryWrite>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d005      	beq.n	800afa0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e0a9      	b.n	800b0f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	2bff      	cmp	r3, #255	; 0xff
 800afa8:	d90e      	bls.n	800afc8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	22ff      	movs	r2, #255	; 0xff
 800afae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	8979      	ldrh	r1, [r7, #10]
 800afb8:	2300      	movs	r3, #0
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 fba5 	bl	800b710 <I2C_TransferConfig>
 800afc6:	e00f      	b.n	800afe8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afcc:	b29a      	uxth	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	8979      	ldrh	r1, [r7, #10]
 800afda:	2300      	movs	r3, #0
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f000 fb94 	bl	800b710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 faad 	bl	800b54c <I2C_WaitOnTXISFlagUntilTimeout>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e07b      	b.n	800b0f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b000:	781a      	ldrb	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b016:	b29b      	uxth	r3, r3
 800b018:	3b01      	subs	r3, #1
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b024:	3b01      	subs	r3, #1
 800b026:	b29a      	uxth	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b030:	b29b      	uxth	r3, r3
 800b032:	2b00      	cmp	r3, #0
 800b034:	d034      	beq.n	800b0a0 <HAL_I2C_Mem_Write+0x1c8>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d130      	bne.n	800b0a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b044:	2200      	movs	r2, #0
 800b046:	2180      	movs	r1, #128	; 0x80
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 fa3f 	bl	800b4cc <I2C_WaitOnFlagUntilTimeout>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e04d      	b.n	800b0f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	2bff      	cmp	r3, #255	; 0xff
 800b060:	d90e      	bls.n	800b080 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	22ff      	movs	r2, #255	; 0xff
 800b066:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	8979      	ldrh	r1, [r7, #10]
 800b070:	2300      	movs	r3, #0
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 fb49 	bl	800b710 <I2C_TransferConfig>
 800b07e:	e00f      	b.n	800b0a0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b084:	b29a      	uxth	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	8979      	ldrh	r1, [r7, #10]
 800b092:	2300      	movs	r3, #0
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f000 fb38 	bl	800b710 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d19e      	bne.n	800afe8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f000 fa8c 	bl	800b5cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e01a      	b.n	800b0f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2220      	movs	r2, #32
 800b0c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	6859      	ldr	r1, [r3, #4]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <HAL_I2C_Mem_Write+0x224>)
 800b0d2:	400b      	ands	r3, r1
 800b0d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2220      	movs	r2, #32
 800b0da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e000      	b.n	800b0f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b0f2:	2302      	movs	r3, #2
  }
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3718      	adds	r7, #24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	fe00e800 	.word	0xfe00e800

0800b100 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af02      	add	r7, sp, #8
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	4608      	mov	r0, r1
 800b10a:	4611      	mov	r1, r2
 800b10c:	461a      	mov	r2, r3
 800b10e:	4603      	mov	r3, r0
 800b110:	817b      	strh	r3, [r7, #10]
 800b112:	460b      	mov	r3, r1
 800b114:	813b      	strh	r3, [r7, #8]
 800b116:	4613      	mov	r3, r2
 800b118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b120:	b2db      	uxtb	r3, r3
 800b122:	2b20      	cmp	r3, #32
 800b124:	f040 80fd 	bne.w	800b322 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b128:	6a3b      	ldr	r3, [r7, #32]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <HAL_I2C_Mem_Read+0x34>
 800b12e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b130:	2b00      	cmp	r3, #0
 800b132:	d105      	bne.n	800b140 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b13a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e0f1      	b.n	800b324 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b146:	2b01      	cmp	r3, #1
 800b148:	d101      	bne.n	800b14e <HAL_I2C_Mem_Read+0x4e>
 800b14a:	2302      	movs	r3, #2
 800b14c:	e0ea      	b.n	800b324 <HAL_I2C_Mem_Read+0x224>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b156:	f7fb ff45 	bl	8006fe4 <HAL_GetTick>
 800b15a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	2319      	movs	r3, #25
 800b162:	2201      	movs	r2, #1
 800b164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 f9af 	bl	800b4cc <I2C_WaitOnFlagUntilTimeout>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e0d5      	b.n	800b324 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2222      	movs	r2, #34	; 0x22
 800b17c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2240      	movs	r2, #64	; 0x40
 800b184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6a3a      	ldr	r2, [r7, #32]
 800b192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b1a0:	88f8      	ldrh	r0, [r7, #6]
 800b1a2:	893a      	ldrh	r2, [r7, #8]
 800b1a4:	8979      	ldrh	r1, [r7, #10]
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 f913 	bl	800b3dc <I2C_RequestMemoryRead>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d005      	beq.n	800b1c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e0ad      	b.n	800b324 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	2bff      	cmp	r3, #255	; 0xff
 800b1d0:	d90e      	bls.n	800b1f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	22ff      	movs	r2, #255	; 0xff
 800b1d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	8979      	ldrh	r1, [r7, #10]
 800b1e0:	4b52      	ldr	r3, [pc, #328]	; (800b32c <HAL_I2C_Mem_Read+0x22c>)
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f000 fa91 	bl	800b710 <I2C_TransferConfig>
 800b1ee:	e00f      	b.n	800b210 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	8979      	ldrh	r1, [r7, #10]
 800b202:	4b4a      	ldr	r3, [pc, #296]	; (800b32c <HAL_I2C_Mem_Read+0x22c>)
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f000 fa80 	bl	800b710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	2200      	movs	r2, #0
 800b218:	2104      	movs	r1, #4
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 f956 	bl	800b4cc <I2C_WaitOnFlagUntilTimeout>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e07c      	b.n	800b324 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b234:	b2d2      	uxtb	r2, r2
 800b236:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b246:	3b01      	subs	r3, #1
 800b248:	b29a      	uxth	r2, r3
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b252:	b29b      	uxth	r3, r3
 800b254:	3b01      	subs	r3, #1
 800b256:	b29a      	uxth	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b260:	b29b      	uxth	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d034      	beq.n	800b2d0 <HAL_I2C_Mem_Read+0x1d0>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d130      	bne.n	800b2d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	2200      	movs	r2, #0
 800b276:	2180      	movs	r1, #128	; 0x80
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f000 f927 	bl	800b4cc <I2C_WaitOnFlagUntilTimeout>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	e04d      	b.n	800b324 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	2bff      	cmp	r3, #255	; 0xff
 800b290:	d90e      	bls.n	800b2b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	22ff      	movs	r2, #255	; 0xff
 800b296:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29c:	b2da      	uxtb	r2, r3
 800b29e:	8979      	ldrh	r1, [r7, #10]
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 fa31 	bl	800b710 <I2C_TransferConfig>
 800b2ae:	e00f      	b.n	800b2d0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	8979      	ldrh	r1, [r7, #10]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 fa20 	bl	800b710 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d19a      	bne.n	800b210 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f000 f974 	bl	800b5cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e01a      	b.n	800b324 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2220      	movs	r2, #32
 800b2f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6859      	ldr	r1, [r3, #4]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	4b0b      	ldr	r3, [pc, #44]	; (800b330 <HAL_I2C_Mem_Read+0x230>)
 800b302:	400b      	ands	r3, r1
 800b304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2220      	movs	r2, #32
 800b30a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	e000      	b.n	800b324 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b322:	2302      	movs	r3, #2
  }
}
 800b324:	4618      	mov	r0, r3
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	80002400 	.word	0x80002400
 800b330:	fe00e800 	.word	0xfe00e800

0800b334 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af02      	add	r7, sp, #8
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	4608      	mov	r0, r1
 800b33e:	4611      	mov	r1, r2
 800b340:	461a      	mov	r2, r3
 800b342:	4603      	mov	r3, r0
 800b344:	817b      	strh	r3, [r7, #10]
 800b346:	460b      	mov	r3, r1
 800b348:	813b      	strh	r3, [r7, #8]
 800b34a:	4613      	mov	r3, r2
 800b34c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b34e:	88fb      	ldrh	r3, [r7, #6]
 800b350:	b2da      	uxtb	r2, r3
 800b352:	8979      	ldrh	r1, [r7, #10]
 800b354:	4b20      	ldr	r3, [pc, #128]	; (800b3d8 <I2C_RequestMemoryWrite+0xa4>)
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 f9d7 	bl	800b710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	69b9      	ldr	r1, [r7, #24]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 f8f0 	bl	800b54c <I2C_WaitOnTXISFlagUntilTimeout>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e02c      	b.n	800b3d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b376:	88fb      	ldrh	r3, [r7, #6]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d105      	bne.n	800b388 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b37c:	893b      	ldrh	r3, [r7, #8]
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	629a      	str	r2, [r3, #40]	; 0x28
 800b386:	e015      	b.n	800b3b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b388:	893b      	ldrh	r3, [r7, #8]
 800b38a:	0a1b      	lsrs	r3, r3, #8
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b396:	69fa      	ldr	r2, [r7, #28]
 800b398:	69b9      	ldr	r1, [r7, #24]
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f000 f8d6 	bl	800b54c <I2C_WaitOnTXISFlagUntilTimeout>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d001      	beq.n	800b3aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e012      	b.n	800b3d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b3aa:	893b      	ldrh	r3, [r7, #8]
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2180      	movs	r1, #128	; 0x80
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f000 f884 	bl	800b4cc <I2C_WaitOnFlagUntilTimeout>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e000      	b.n	800b3d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	80002000 	.word	0x80002000

0800b3dc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af02      	add	r7, sp, #8
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	817b      	strh	r3, [r7, #10]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	813b      	strh	r3, [r7, #8]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b3f6:	88fb      	ldrh	r3, [r7, #6]
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	8979      	ldrh	r1, [r7, #10]
 800b3fc:	4b20      	ldr	r3, [pc, #128]	; (800b480 <I2C_RequestMemoryRead+0xa4>)
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	2300      	movs	r3, #0
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 f984 	bl	800b710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	69b9      	ldr	r1, [r7, #24]
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f000 f89d 	bl	800b54c <I2C_WaitOnTXISFlagUntilTimeout>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	e02c      	b.n	800b476 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b41c:	88fb      	ldrh	r3, [r7, #6]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d105      	bne.n	800b42e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b422:	893b      	ldrh	r3, [r7, #8]
 800b424:	b2da      	uxtb	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	629a      	str	r2, [r3, #40]	; 0x28
 800b42c:	e015      	b.n	800b45a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b42e:	893b      	ldrh	r3, [r7, #8]
 800b430:	0a1b      	lsrs	r3, r3, #8
 800b432:	b29b      	uxth	r3, r3
 800b434:	b2da      	uxtb	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b43c:	69fa      	ldr	r2, [r7, #28]
 800b43e:	69b9      	ldr	r1, [r7, #24]
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f000 f883 	bl	800b54c <I2C_WaitOnTXISFlagUntilTimeout>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e012      	b.n	800b476 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b450:	893b      	ldrh	r3, [r7, #8]
 800b452:	b2da      	uxtb	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	2200      	movs	r2, #0
 800b462:	2140      	movs	r1, #64	; 0x40
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 f831 	bl	800b4cc <I2C_WaitOnFlagUntilTimeout>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e000      	b.n	800b476 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	80002000 	.word	0x80002000

0800b484 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b02      	cmp	r3, #2
 800b498:	d103      	bne.n	800b4a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d007      	beq.n	800b4c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699a      	ldr	r2, [r3, #24]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f042 0201 	orr.w	r2, r2, #1
 800b4be:	619a      	str	r2, [r3, #24]
  }
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b4dc:	e022      	b.n	800b524 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e4:	d01e      	beq.n	800b524 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4e6:	f7fb fd7d 	bl	8006fe4 <HAL_GetTick>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d302      	bcc.n	800b4fc <I2C_WaitOnFlagUntilTimeout+0x30>
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d113      	bne.n	800b524 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b500:	f043 0220 	orr.w	r2, r3, #32
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2220      	movs	r2, #32
 800b50c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	e00f      	b.n	800b544 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	699a      	ldr	r2, [r3, #24]
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	4013      	ands	r3, r2
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	429a      	cmp	r2, r3
 800b532:	bf0c      	ite	eq
 800b534:	2301      	moveq	r3, #1
 800b536:	2300      	movne	r3, #0
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	461a      	mov	r2, r3
 800b53c:	79fb      	ldrb	r3, [r7, #7]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d0cd      	beq.n	800b4de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b558:	e02c      	b.n	800b5b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	68b9      	ldr	r1, [r7, #8]
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 f870 	bl	800b644 <I2C_IsAcknowledgeFailed>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e02a      	b.n	800b5c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b574:	d01e      	beq.n	800b5b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b576:	f7fb fd35 	bl	8006fe4 <HAL_GetTick>
 800b57a:	4602      	mov	r2, r0
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	429a      	cmp	r2, r3
 800b584:	d302      	bcc.n	800b58c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d113      	bne.n	800b5b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b590:	f043 0220 	orr.w	r2, r3, #32
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2220      	movs	r2, #32
 800b59c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e007      	b.n	800b5c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	699b      	ldr	r3, [r3, #24]
 800b5ba:	f003 0302 	and.w	r3, r3, #2
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d1cb      	bne.n	800b55a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5d8:	e028      	b.n	800b62c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	68b9      	ldr	r1, [r7, #8]
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f000 f830 	bl	800b644 <I2C_IsAcknowledgeFailed>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e026      	b.n	800b63c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5ee:	f7fb fcf9 	bl	8006fe4 <HAL_GetTick>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d302      	bcc.n	800b604 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d113      	bne.n	800b62c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b608:	f043 0220 	orr.w	r2, r3, #32
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2220      	movs	r2, #32
 800b614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	e007      	b.n	800b63c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	f003 0320 	and.w	r3, r3, #32
 800b636:	2b20      	cmp	r3, #32
 800b638:	d1cf      	bne.n	800b5da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	f003 0310 	and.w	r3, r3, #16
 800b65a:	2b10      	cmp	r3, #16
 800b65c:	d151      	bne.n	800b702 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b65e:	e022      	b.n	800b6a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b666:	d01e      	beq.n	800b6a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b668:	f7fb fcbc 	bl	8006fe4 <HAL_GetTick>
 800b66c:	4602      	mov	r2, r0
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	429a      	cmp	r2, r3
 800b676:	d302      	bcc.n	800b67e <I2C_IsAcknowledgeFailed+0x3a>
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d113      	bne.n	800b6a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b682:	f043 0220 	orr.w	r2, r3, #32
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2220      	movs	r2, #32
 800b68e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e02e      	b.n	800b704 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	f003 0320 	and.w	r3, r3, #32
 800b6b0:	2b20      	cmp	r3, #32
 800b6b2:	d1d5      	bne.n	800b660 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2210      	movs	r2, #16
 800b6ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2220      	movs	r2, #32
 800b6c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f7ff fedd 	bl	800b484 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6859      	ldr	r1, [r3, #4]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	4b0d      	ldr	r3, [pc, #52]	; (800b70c <I2C_IsAcknowledgeFailed+0xc8>)
 800b6d6:	400b      	ands	r3, r1
 800b6d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6de:	f043 0204 	orr.w	r2, r3, #4
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2220      	movs	r2, #32
 800b6ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e000      	b.n	800b704 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	fe00e800 	.word	0xfe00e800

0800b710 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	607b      	str	r3, [r7, #4]
 800b71a:	460b      	mov	r3, r1
 800b71c:	817b      	strh	r3, [r7, #10]
 800b71e:	4613      	mov	r3, r2
 800b720:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	0d5b      	lsrs	r3, r3, #21
 800b72c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b730:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <I2C_TransferConfig+0x58>)
 800b732:	430b      	orrs	r3, r1
 800b734:	43db      	mvns	r3, r3
 800b736:	ea02 0103 	and.w	r1, r2, r3
 800b73a:	897b      	ldrh	r3, [r7, #10]
 800b73c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b740:	7a7b      	ldrb	r3, [r7, #9]
 800b742:	041b      	lsls	r3, r3, #16
 800b744:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b748:	431a      	orrs	r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	431a      	orrs	r2, r3
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	431a      	orrs	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b75a:	bf00      	nop
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	03ff63ff 	.word	0x03ff63ff

0800b76c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b20      	cmp	r3, #32
 800b780:	d138      	bne.n	800b7f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d101      	bne.n	800b790 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b78c:	2302      	movs	r3, #2
 800b78e:	e032      	b.n	800b7f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2224      	movs	r2, #36	; 0x24
 800b79c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0201 	bic.w	r2, r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b7be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6819      	ldr	r1, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f042 0201 	orr.w	r2, r2, #1
 800b7de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2220      	movs	r2, #32
 800b7e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	e000      	b.n	800b7f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b7f4:	2302      	movs	r3, #2
  }
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b802:	b480      	push	{r7}
 800b804:	b085      	sub	sp, #20
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b812:	b2db      	uxtb	r3, r3
 800b814:	2b20      	cmp	r3, #32
 800b816:	d139      	bne.n	800b88c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d101      	bne.n	800b826 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b822:	2302      	movs	r3, #2
 800b824:	e033      	b.n	800b88e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2224      	movs	r2, #36	; 0x24
 800b832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f022 0201 	bic.w	r2, r2, #1
 800b844:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b854:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	021b      	lsls	r3, r3, #8
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2220      	movs	r2, #32
 800b87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	e000      	b.n	800b88e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b88c:	2302      	movs	r3, #2
  }
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
	...

0800b89c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e0bf      	b.n	800ba2e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d106      	bne.n	800b8c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7f7 fda0 	bl	8003408 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	699a      	ldr	r2, [r3, #24]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b8de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6999      	ldr	r1, [r3, #24]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b8f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6899      	ldr	r1, [r3, #8]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	4b4a      	ldr	r3, [pc, #296]	; (800ba38 <HAL_LTDC_Init+0x19c>)
 800b910:	400b      	ands	r3, r1
 800b912:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	041b      	lsls	r3, r3, #16
 800b91a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6899      	ldr	r1, [r3, #8]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	699a      	ldr	r2, [r3, #24]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	431a      	orrs	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	430a      	orrs	r2, r1
 800b930:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	68d9      	ldr	r1, [r3, #12]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	4b3e      	ldr	r3, [pc, #248]	; (800ba38 <HAL_LTDC_Init+0x19c>)
 800b93e:	400b      	ands	r3, r1
 800b940:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	69db      	ldr	r3, [r3, #28]
 800b946:	041b      	lsls	r3, r3, #16
 800b948:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68d9      	ldr	r1, [r3, #12]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a1a      	ldr	r2, [r3, #32]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	431a      	orrs	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	430a      	orrs	r2, r1
 800b95e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6919      	ldr	r1, [r3, #16]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	4b33      	ldr	r3, [pc, #204]	; (800ba38 <HAL_LTDC_Init+0x19c>)
 800b96c:	400b      	ands	r3, r1
 800b96e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	041b      	lsls	r3, r3, #16
 800b976:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6919      	ldr	r1, [r3, #16]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	431a      	orrs	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	6959      	ldr	r1, [r3, #20]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	4b27      	ldr	r3, [pc, #156]	; (800ba38 <HAL_LTDC_Init+0x19c>)
 800b99a:	400b      	ands	r3, r1
 800b99c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a2:	041b      	lsls	r3, r3, #16
 800b9a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6959      	ldr	r1, [r3, #20]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	431a      	orrs	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	430a      	orrs	r2, r1
 800b9ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b9cc:	041b      	lsls	r3, r3, #16
 800b9ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b9de:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b9e6:	68ba      	ldr	r2, [r7, #8]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	430a      	orrs	r2, r1
 800b9fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f042 0206 	orr.w	r2, r2, #6
 800ba0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	699a      	ldr	r2, [r3, #24]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f042 0201 	orr.w	r2, r2, #1
 800ba1a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	f000f800 	.word	0xf000f800

0800ba3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ba3c:	b5b0      	push	{r4, r5, r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d101      	bne.n	800ba56 <HAL_LTDC_ConfigLayer+0x1a>
 800ba52:	2302      	movs	r3, #2
 800ba54:	e02c      	b.n	800bab0 <HAL_LTDC_ConfigLayer+0x74>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2202      	movs	r2, #2
 800ba62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2134      	movs	r1, #52	; 0x34
 800ba6c:	fb01 f303 	mul.w	r3, r1, r3
 800ba70:	4413      	add	r3, r2
 800ba72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	4614      	mov	r4, r2
 800ba7a:	461d      	mov	r5, r3
 800ba7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	68b9      	ldr	r1, [r7, #8]
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 f811 	bl	800bab8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bdb0      	pop	{r4, r5, r7, pc}

0800bab8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bab8:	b480      	push	{r7}
 800baba:	b089      	sub	sp, #36	; 0x24
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	685a      	ldr	r2, [r3, #4]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	0c1b      	lsrs	r3, r3, #16
 800bad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bad4:	4413      	add	r3, r2
 800bad6:	041b      	lsls	r3, r3, #16
 800bad8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	01db      	lsls	r3, r3, #7
 800bae4:	4413      	add	r3, r2
 800bae6:	3384      	adds	r3, #132	; 0x84
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	6812      	ldr	r2, [r2, #0]
 800baee:	4611      	mov	r1, r2
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	01d2      	lsls	r2, r2, #7
 800baf4:	440a      	add	r2, r1
 800baf6:	3284      	adds	r2, #132	; 0x84
 800baf8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bafc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	0c1b      	lsrs	r3, r3, #16
 800bb0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb0e:	4413      	add	r3, r2
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4619      	mov	r1, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	01db      	lsls	r3, r3, #7
 800bb1c:	440b      	add	r3, r1
 800bb1e:	3384      	adds	r3, #132	; 0x84
 800bb20:	4619      	mov	r1, r3
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	68da      	ldr	r2, [r3, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb36:	4413      	add	r3, r2
 800bb38:	041b      	lsls	r3, r3, #16
 800bb3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	461a      	mov	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	01db      	lsls	r3, r3, #7
 800bb46:	4413      	add	r3, r2
 800bb48:	3384      	adds	r3, #132	; 0x84
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	6812      	ldr	r2, [r2, #0]
 800bb50:	4611      	mov	r1, r2
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	01d2      	lsls	r2, r2, #7
 800bb56:	440a      	add	r2, r1
 800bb58:	3284      	adds	r2, #132	; 0x84
 800bb5a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bb5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	689a      	ldr	r2, [r3, #8]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb6e:	4413      	add	r3, r2
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4619      	mov	r1, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	01db      	lsls	r3, r3, #7
 800bb7c:	440b      	add	r3, r1
 800bb7e:	3384      	adds	r3, #132	; 0x84
 800bb80:	4619      	mov	r1, r3
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	01db      	lsls	r3, r3, #7
 800bb92:	4413      	add	r3, r2
 800bb94:	3384      	adds	r3, #132	; 0x84
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	6812      	ldr	r2, [r2, #0]
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	01d2      	lsls	r2, r2, #7
 800bba2:	440a      	add	r2, r1
 800bba4:	3284      	adds	r2, #132	; 0x84
 800bba6:	f023 0307 	bic.w	r3, r3, #7
 800bbaa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	01db      	lsls	r3, r3, #7
 800bbb6:	4413      	add	r3, r2
 800bbb8:	3384      	adds	r3, #132	; 0x84
 800bbba:	461a      	mov	r2, r3
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bbc8:	021b      	lsls	r3, r3, #8
 800bbca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bbd2:	041b      	lsls	r3, r3, #16
 800bbd4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	061b      	lsls	r3, r3, #24
 800bbdc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	01db      	lsls	r3, r3, #7
 800bbe8:	4413      	add	r3, r2
 800bbea:	3384      	adds	r3, #132	; 0x84
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	01db      	lsls	r3, r3, #7
 800bbf8:	4413      	add	r3, r2
 800bbfa:	3384      	adds	r3, #132	; 0x84
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	2300      	movs	r3, #0
 800bc00:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc08:	461a      	mov	r2, r3
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	431a      	orrs	r2, r3
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	431a      	orrs	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4619      	mov	r1, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	01db      	lsls	r3, r3, #7
 800bc1c:	440b      	add	r3, r1
 800bc1e:	3384      	adds	r3, #132	; 0x84
 800bc20:	4619      	mov	r1, r3
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	01db      	lsls	r3, r3, #7
 800bc32:	4413      	add	r3, r2
 800bc34:	3384      	adds	r3, #132	; 0x84
 800bc36:	695b      	ldr	r3, [r3, #20]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	6812      	ldr	r2, [r2, #0]
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	01d2      	lsls	r2, r2, #7
 800bc42:	440a      	add	r2, r1
 800bc44:	3284      	adds	r2, #132	; 0x84
 800bc46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc4a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	01db      	lsls	r3, r3, #7
 800bc56:	4413      	add	r3, r2
 800bc58:	3384      	adds	r3, #132	; 0x84
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	01db      	lsls	r3, r3, #7
 800bc6c:	4413      	add	r3, r2
 800bc6e:	3384      	adds	r3, #132	; 0x84
 800bc70:	69da      	ldr	r2, [r3, #28]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4619      	mov	r1, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	01db      	lsls	r3, r3, #7
 800bc7c:	440b      	add	r3, r1
 800bc7e:	3384      	adds	r3, #132	; 0x84
 800bc80:	4619      	mov	r1, r3
 800bc82:	4b58      	ldr	r3, [pc, #352]	; (800bde4 <LTDC_SetConfig+0x32c>)
 800bc84:	4013      	ands	r3, r2
 800bc86:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	69da      	ldr	r2, [r3, #28]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	6a1b      	ldr	r3, [r3, #32]
 800bc90:	68f9      	ldr	r1, [r7, #12]
 800bc92:	6809      	ldr	r1, [r1, #0]
 800bc94:	4608      	mov	r0, r1
 800bc96:	6879      	ldr	r1, [r7, #4]
 800bc98:	01c9      	lsls	r1, r1, #7
 800bc9a:	4401      	add	r1, r0
 800bc9c:	3184      	adds	r1, #132	; 0x84
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	01db      	lsls	r3, r3, #7
 800bcac:	4413      	add	r3, r2
 800bcae:	3384      	adds	r3, #132	; 0x84
 800bcb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	01db      	lsls	r3, r3, #7
 800bcbc:	4413      	add	r3, r2
 800bcbe:	3384      	adds	r3, #132	; 0x84
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	01db      	lsls	r3, r3, #7
 800bcd0:	4413      	add	r3, r2
 800bcd2:	3384      	adds	r3, #132	; 0x84
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcda:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d102      	bne.n	800bcea <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800bce4:	2304      	movs	r3, #4
 800bce6:	61fb      	str	r3, [r7, #28]
 800bce8:	e01b      	b.n	800bd22 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d102      	bne.n	800bcf8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	61fb      	str	r3, [r7, #28]
 800bcf6:	e014      	b.n	800bd22 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d00b      	beq.n	800bd18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d007      	beq.n	800bd18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bd0c:	2b03      	cmp	r3, #3
 800bd0e:	d003      	beq.n	800bd18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bd14:	2b07      	cmp	r3, #7
 800bd16:	d102      	bne.n	800bd1e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800bd18:	2302      	movs	r3, #2
 800bd1a:	61fb      	str	r3, [r7, #28]
 800bd1c:	e001      	b.n	800bd22 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	461a      	mov	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	01db      	lsls	r3, r3, #7
 800bd2c:	4413      	add	r3, r2
 800bd2e:	3384      	adds	r3, #132	; 0x84
 800bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	6812      	ldr	r2, [r2, #0]
 800bd36:	4611      	mov	r1, r2
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	01d2      	lsls	r2, r2, #7
 800bd3c:	440a      	add	r2, r1
 800bd3e:	3284      	adds	r2, #132	; 0x84
 800bd40:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800bd44:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4a:	69fa      	ldr	r2, [r7, #28]
 800bd4c:	fb02 f303 	mul.w	r3, r2, r3
 800bd50:	041a      	lsls	r2, r3, #16
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	6859      	ldr	r1, [r3, #4]
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	1acb      	subs	r3, r1, r3
 800bd5c:	69f9      	ldr	r1, [r7, #28]
 800bd5e:	fb01 f303 	mul.w	r3, r1, r3
 800bd62:	3303      	adds	r3, #3
 800bd64:	68f9      	ldr	r1, [r7, #12]
 800bd66:	6809      	ldr	r1, [r1, #0]
 800bd68:	4608      	mov	r0, r1
 800bd6a:	6879      	ldr	r1, [r7, #4]
 800bd6c:	01c9      	lsls	r1, r1, #7
 800bd6e:	4401      	add	r1, r0
 800bd70:	3184      	adds	r1, #132	; 0x84
 800bd72:	4313      	orrs	r3, r2
 800bd74:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	01db      	lsls	r3, r3, #7
 800bd80:	4413      	add	r3, r2
 800bd82:	3384      	adds	r3, #132	; 0x84
 800bd84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	01db      	lsls	r3, r3, #7
 800bd90:	440b      	add	r3, r1
 800bd92:	3384      	adds	r3, #132	; 0x84
 800bd94:	4619      	mov	r1, r3
 800bd96:	4b14      	ldr	r3, [pc, #80]	; (800bde8 <LTDC_SetConfig+0x330>)
 800bd98:	4013      	ands	r3, r2
 800bd9a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	461a      	mov	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	01db      	lsls	r3, r3, #7
 800bda6:	4413      	add	r3, r2
 800bda8:	3384      	adds	r3, #132	; 0x84
 800bdaa:	461a      	mov	r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	01db      	lsls	r3, r3, #7
 800bdbc:	4413      	add	r3, r2
 800bdbe:	3384      	adds	r3, #132	; 0x84
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	6812      	ldr	r2, [r2, #0]
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	01d2      	lsls	r2, r2, #7
 800bdcc:	440a      	add	r2, r1
 800bdce:	3284      	adds	r2, #132	; 0x84
 800bdd0:	f043 0301 	orr.w	r3, r3, #1
 800bdd4:	6013      	str	r3, [r2, #0]
}
 800bdd6:	bf00      	nop
 800bdd8:	3724      	adds	r7, #36	; 0x24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	fffff8f8 	.word	0xfffff8f8
 800bde8:	fffff800 	.word	0xfffff800

0800bdec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdf0:	4b05      	ldr	r3, [pc, #20]	; (800be08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a04      	ldr	r2, [pc, #16]	; (800be08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdfa:	6013      	str	r3, [r2, #0]
}
 800bdfc:	bf00      	nop
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	40007000 	.word	0x40007000

0800be0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800be12:	2300      	movs	r3, #0
 800be14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800be16:	4b23      	ldr	r3, [pc, #140]	; (800bea4 <HAL_PWREx_EnableOverDrive+0x98>)
 800be18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1a:	4a22      	ldr	r2, [pc, #136]	; (800bea4 <HAL_PWREx_EnableOverDrive+0x98>)
 800be1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be20:	6413      	str	r3, [r2, #64]	; 0x40
 800be22:	4b20      	ldr	r3, [pc, #128]	; (800bea4 <HAL_PWREx_EnableOverDrive+0x98>)
 800be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be2a:	603b      	str	r3, [r7, #0]
 800be2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800be2e:	4b1e      	ldr	r3, [pc, #120]	; (800bea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a1d      	ldr	r2, [pc, #116]	; (800bea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be3a:	f7fb f8d3 	bl	8006fe4 <HAL_GetTick>
 800be3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be40:	e009      	b.n	800be56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be42:	f7fb f8cf 	bl	8006fe4 <HAL_GetTick>
 800be46:	4602      	mov	r2, r0
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be50:	d901      	bls.n	800be56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e022      	b.n	800be9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be56:	4b14      	ldr	r3, [pc, #80]	; (800bea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be62:	d1ee      	bne.n	800be42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800be64:	4b10      	ldr	r3, [pc, #64]	; (800bea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a0f      	ldr	r2, [pc, #60]	; (800bea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be70:	f7fb f8b8 	bl	8006fe4 <HAL_GetTick>
 800be74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be76:	e009      	b.n	800be8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be78:	f7fb f8b4 	bl	8006fe4 <HAL_GetTick>
 800be7c:	4602      	mov	r2, r0
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be86:	d901      	bls.n	800be8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800be88:	2303      	movs	r3, #3
 800be8a:	e007      	b.n	800be9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be8c:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be98:	d1ee      	bne.n	800be78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	40023800 	.word	0x40023800
 800bea8:	40007000 	.word	0x40007000

0800beac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af02      	add	r7, sp, #8
 800beb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800beb4:	f7fb f896 	bl	8006fe4 <HAL_GetTick>
 800beb8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e067      	b.n	800bf94 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10b      	bne.n	800bee8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7f7 fb55 	bl	8003588 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800bede:	f241 3188 	movw	r1, #5000	; 0x1388
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fda8 	bl	800ca38 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	3b01      	subs	r3, #1
 800bef8:	021a      	lsls	r2, r3, #8
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	430a      	orrs	r2, r1
 800bf00:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf06:	9300      	str	r3, [sp, #0]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2120      	movs	r1, #32
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fdd3 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800bf14:	4603      	mov	r3, r0
 800bf16:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800bf18:	7afb      	ldrb	r3, [r7, #11]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d135      	bne.n	800bf8a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	4b1d      	ldr	r3, [pc, #116]	; (800bf9c <HAL_QSPI_Init+0xf0>)
 800bf26:	4013      	ands	r3, r2
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	6852      	ldr	r2, [r2, #4]
 800bf2c:	0611      	lsls	r1, r2, #24
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	68d2      	ldr	r2, [r2, #12]
 800bf32:	4311      	orrs	r1, r2
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	69d2      	ldr	r2, [r2, #28]
 800bf38:	4311      	orrs	r1, r2
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	6a12      	ldr	r2, [r2, #32]
 800bf3e:	4311      	orrs	r1, r2
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	6812      	ldr	r2, [r2, #0]
 800bf44:	430b      	orrs	r3, r1
 800bf46:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	4b14      	ldr	r3, [pc, #80]	; (800bfa0 <HAL_QSPI_Init+0xf4>)
 800bf50:	4013      	ands	r3, r2
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	6912      	ldr	r2, [r2, #16]
 800bf56:	0411      	lsls	r1, r2, #16
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	6952      	ldr	r2, [r2, #20]
 800bf5c:	4311      	orrs	r1, r2
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	6992      	ldr	r2, [r2, #24]
 800bf62:	4311      	orrs	r1, r2
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	6812      	ldr	r2, [r2, #0]
 800bf68:	430b      	orrs	r3, r1
 800bf6a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f042 0201 	orr.w	r2, r2, #1
 800bf7a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800bf92:	7afb      	ldrb	r3, [r7, #11]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	00ffff2f 	.word	0x00ffff2f
 800bfa0:	ffe0f8fe 	.word	0xffe0f8fe

0800bfa4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	f003 0304 	and.w	r3, r3, #4
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d064      	beq.n	800c090 <HAL_QSPI_IRQHandler+0xec>
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d05f      	beq.n	800c090 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3320      	adds	r3, #32
 800bfd6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	2b12      	cmp	r3, #18
 800bfe2:	d125      	bne.n	800c030 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800bfe4:	e01c      	b.n	800c020 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00f      	beq.n	800c00e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff2:	781a      	ldrb	r2, [r3, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c006:	1e5a      	subs	r2, r3, #1
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	62da      	str	r2, [r3, #44]	; 0x2c
 800c00c:	e008      	b.n	800c020 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c01c:	601a      	str	r2, [r3, #0]
          break;
 800c01e:	e033      	b.n	800c088 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f003 0304 	and.w	r3, r3, #4
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1db      	bne.n	800bfe6 <HAL_QSPI_IRQHandler+0x42>
 800c02e:	e02b      	b.n	800c088 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c036:	b2db      	uxtb	r3, r3
 800c038:	2b22      	cmp	r3, #34	; 0x22
 800c03a:	d125      	bne.n	800c088 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c03c:	e01d      	b.n	800c07a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c042:	2b00      	cmp	r3, #0
 800c044:	d010      	beq.n	800c068 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	7812      	ldrb	r2, [r2, #0]
 800c04e:	b2d2      	uxtb	r2, r2
 800c050:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c056:	1c5a      	adds	r2, r3, #1
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c060:	1e5a      	subs	r2, r3, #1
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	639a      	str	r2, [r3, #56]	; 0x38
 800c066:	e008      	b.n	800c07a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c076:	601a      	str	r2, [r3, #0]
          break;
 800c078:	e006      	b.n	800c088 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	f003 0304 	and.w	r3, r3, #4
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1da      	bne.n	800c03e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fbed 	bl	800c868 <HAL_QSPI_FifoThresholdCallback>
 800c08e:	e142      	b.n	800c316 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f003 0302 	and.w	r3, r3, #2
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 80b6 	beq.w	800c208 <HAL_QSPI_IRQHandler+0x264>
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 80b0 	beq.w	800c208 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800c0be:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	2b12      	cmp	r3, #18
 800c0ca:	d123      	bne.n	800c114 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 0304 	and.w	r3, r3, #4
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d011      	beq.n	800c0fe <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f022 0204 	bic.w	r2, r2, #4
 800c0e8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f022 0201 	bic.w	r2, r2, #1
 800c0fc:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fc3e 	bl	800c980 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fba1 	bl	800c854 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c112:	e0fd      	b.n	800c310 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b22      	cmp	r3, #34	; 0x22
 800c11e:	d146      	bne.n	800c1ae <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 0304 	and.w	r3, r3, #4
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d012      	beq.n	800c154 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f022 0204 	bic.w	r2, r2, #4
 800c13c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f022 0201 	bic.w	r2, r2, #1
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	e021      	b.n	800c198 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3320      	adds	r3, #32
 800c15a:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800c15c:	e013      	b.n	800c186 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c162:	2b00      	cmp	r3, #0
 800c164:	d017      	beq.n	800c196 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	7812      	ldrb	r2, [r2, #0]
 800c16e:	b2d2      	uxtb	r2, r2
 800c170:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c180:	1e5a      	subs	r2, r3, #1
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1e4      	bne.n	800c15e <HAL_QSPI_IRQHandler+0x1ba>
 800c194:	e000      	b.n	800c198 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800c196:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fbf1 	bl	800c980 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fb4a 	bl	800c840 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c1ac:	e0b0      	b.n	800c310 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d107      	bne.n	800c1ca <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fb32 	bl	800c82c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c1c8:	e0a2      	b.n	800c310 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b08      	cmp	r3, #8
 800c1d4:	f040 809c 	bne.w	800c310 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	695a      	ldr	r2, [r3, #20]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c1e6:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d103      	bne.n	800c200 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 fb0d 	bl	800c818 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c1fe:	e087      	b.n	800c310 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 faff 	bl	800c804 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c206:	e083      	b.n	800c310 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	f003 0308 	and.w	r3, r3, #8
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d01f      	beq.n	800c252 <HAL_QSPI_IRQHandler+0x2ae>
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d01a      	beq.n	800c252 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2208      	movs	r2, #8
 800c222:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d00b      	beq.n	800c24a <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800c240:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fb16 	bl	800c87c <HAL_QSPI_StatusMatchCallback>
 800c250:	e061      	b.n	800c316 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d047      	beq.n	800c2ec <HAL_QSPI_IRQHandler+0x348>
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d042      	beq.n	800c2ec <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2201      	movs	r2, #1
 800c26c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800c27c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c282:	f043 0202 	orr.w	r2, r3, #2
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 0304 	and.w	r3, r3, #4
 800c294:	2b00      	cmp	r3, #0
 800c296:	d021      	beq.n	800c2dc <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f022 0204 	bic.w	r2, r2, #4
 800c2a6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ac:	4a1c      	ldr	r2, [pc, #112]	; (800c320 <HAL_QSPI_IRQHandler+0x37c>)
 800c2ae:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7fb fe8f 	bl	8007fd8 <HAL_DMA_Abort_IT>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d029      	beq.n	800c314 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2c4:	f043 0204 	orr.w	r2, r3, #4
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fa95 	bl	800c804 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c2da:	e01b      	b.n	800c314 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fa8d 	bl	800c804 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c2ea:	e013      	b.n	800c314 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	f003 0310 	and.w	r3, r3, #16
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00f      	beq.n	800c316 <HAL_QSPI_IRQHandler+0x372>
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00a      	beq.n	800c316 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2210      	movs	r2, #16
 800c306:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fac1 	bl	800c890 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800c30e:	e002      	b.n	800c316 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c310:	bf00      	nop
 800c312:	e000      	b.n	800c316 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c314:	bf00      	nop
}
 800c316:	bf00      	nop
 800c318:	3718      	adds	r7, #24
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	0800ca55 	.word	0x0800ca55

0800c324 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b088      	sub	sp, #32
 800c328:	af02      	add	r7, sp, #8
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c330:	f7fa fe58 	bl	8006fe4 <HAL_GetTick>
 800c334:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d101      	bne.n	800c346 <HAL_QSPI_Command+0x22>
 800c342:	2302      	movs	r3, #2
 800c344:	e048      	b.n	800c3d8 <HAL_QSPI_Command+0xb4>
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b01      	cmp	r3, #1
 800c358:	d137      	bne.n	800c3ca <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2200      	movs	r2, #0
 800c35e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2202      	movs	r2, #2
 800c364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	2200      	movs	r2, #0
 800c370:	2120      	movs	r1, #32
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f000 fba1 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c378:	4603      	mov	r3, r0
 800c37a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d125      	bne.n	800c3ce <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c382:	2200      	movs	r2, #0
 800c384:	68b9      	ldr	r1, [r7, #8]
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 fbce 	bl	800cb28 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c390:	2b00      	cmp	r3, #0
 800c392:	d115      	bne.n	800c3c0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	2201      	movs	r2, #1
 800c39c:	2102      	movs	r1, #2
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f000 fb8b 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10f      	bne.n	800c3ce <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3be:	e006      	b.n	800c3ce <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3c8:	e001      	b.n	800c3ce <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c3ca:	2302      	movs	r3, #2
 800c3cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08a      	sub	sp, #40	; 0x28
 800c3e4:	af02      	add	r7, sp, #8
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c3f0:	f7fa fdf8 	bl	8006fe4 <HAL_GetTick>
 800c3f4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3320      	adds	r3, #32
 800c3fc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b01      	cmp	r3, #1
 800c408:	d101      	bne.n	800c40e <HAL_QSPI_Transmit+0x2e>
 800c40a:	2302      	movs	r3, #2
 800c40c:	e07b      	b.n	800c506 <HAL_QSPI_Transmit+0x126>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d16a      	bne.n	800c4f8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d05b      	beq.n	800c4e6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2212      	movs	r2, #18
 800c432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	1c5a      	adds	r2, r3, #1
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	1c5a      	adds	r2, r3, #1
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	695a      	ldr	r2, [r3, #20]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c462:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c464:	e01b      	b.n	800c49e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	2201      	movs	r2, #1
 800c46e:	2104      	movs	r1, #4
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f000 fb22 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c476:	4603      	mov	r3, r0
 800c478:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c47a:	7ffb      	ldrb	r3, [r7, #31]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d113      	bne.n	800c4a8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c484:	781a      	ldrb	r2, [r3, #0]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48e:	1c5a      	adds	r2, r3, #1
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	1e5a      	subs	r2, r3, #1
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1df      	bne.n	800c466 <HAL_QSPI_Transmit+0x86>
 800c4a6:	e000      	b.n	800c4aa <HAL_QSPI_Transmit+0xca>
          break;
 800c4a8:	bf00      	nop
      }

      if (status == HAL_OK)
 800c4aa:	7ffb      	ldrb	r3, [r7, #31]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d115      	bne.n	800c4dc <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	2102      	movs	r1, #2
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f000 fafd 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c4c4:	7ffb      	ldrb	r3, [r7, #31]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d108      	bne.n	800c4dc <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f000 f9e6 	bl	800c8a4 <HAL_QSPI_Abort>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4e4:	e00a      	b.n	800c4fc <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ea:	f043 0208 	orr.w	r2, r3, #8
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	77fb      	strb	r3, [r7, #31]
 800c4f6:	e001      	b.n	800c4fc <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c4f8:	2302      	movs	r3, #2
 800c4fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c504:	7ffb      	ldrb	r3, [r7, #31]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3720      	adds	r7, #32
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b08a      	sub	sp, #40	; 0x28
 800c512:	af02      	add	r7, sp, #8
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	60b9      	str	r1, [r7, #8]
 800c518:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c51e:	f7fa fd61 	bl	8006fe4 <HAL_GetTick>
 800c522:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3320      	adds	r3, #32
 800c532:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d101      	bne.n	800c544 <HAL_QSPI_Receive+0x36>
 800c540:	2302      	movs	r3, #2
 800c542:	e082      	b.n	800c64a <HAL_QSPI_Receive+0x13c>
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c552:	b2db      	uxtb	r3, r3
 800c554:	2b01      	cmp	r3, #1
 800c556:	d171      	bne.n	800c63c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d062      	beq.n	800c62a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2222      	movs	r2, #34	; 0x22
 800c568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c59c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c5a6:	e01c      	b.n	800c5e2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	2106      	movs	r1, #6
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f000 fa81 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c5bc:	7ffb      	ldrb	r3, [r7, #31]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d114      	bne.n	800c5ec <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	7812      	ldrb	r2, [r2, #0]
 800c5ca:	b2d2      	uxtb	r2, r2
 800c5cc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d2:	1c5a      	adds	r2, r3, #1
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5dc:	1e5a      	subs	r2, r3, #1
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1de      	bne.n	800c5a8 <HAL_QSPI_Receive+0x9a>
 800c5ea:	e000      	b.n	800c5ee <HAL_QSPI_Receive+0xe0>
          break;
 800c5ec:	bf00      	nop
      }

      if (status == HAL_OK)
 800c5ee:	7ffb      	ldrb	r3, [r7, #31]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d115      	bne.n	800c620 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	2102      	movs	r1, #2
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 fa5b 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c604:	4603      	mov	r3, r0
 800c606:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c608:	7ffb      	ldrb	r3, [r7, #31]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d108      	bne.n	800c620 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2202      	movs	r2, #2
 800c614:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f000 f944 	bl	800c8a4 <HAL_QSPI_Abort>
 800c61c:	4603      	mov	r3, r0
 800c61e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c628:	e00a      	b.n	800c640 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c62e:	f043 0208 	orr.w	r2, r3, #8
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	77fb      	strb	r3, [r7, #31]
 800c63a:	e001      	b.n	800c640 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c63c:	2302      	movs	r3, #2
 800c63e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c648:	7ffb      	ldrb	r3, [r7, #31]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3720      	adds	r7, #32
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b088      	sub	sp, #32
 800c656:	af02      	add	r7, sp, #8
 800c658:	60f8      	str	r0, [r7, #12]
 800c65a:	60b9      	str	r1, [r7, #8]
 800c65c:	607a      	str	r2, [r7, #4]
 800c65e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c660:	f7fa fcc0 	bl	8006fe4 <HAL_GetTick>
 800c664:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d101      	bne.n	800c676 <HAL_QSPI_AutoPolling+0x24>
 800c672:	2302      	movs	r3, #2
 800c674:	e060      	b.n	800c738 <HAL_QSPI_AutoPolling+0xe6>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2201      	movs	r2, #1
 800c67a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c684:	b2db      	uxtb	r3, r3
 800c686:	2b01      	cmp	r3, #1
 800c688:	d14f      	bne.n	800c72a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2242      	movs	r2, #66	; 0x42
 800c694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	2120      	movs	r1, #32
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f000 fa09 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c6ac:	7dfb      	ldrb	r3, [r7, #23]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d13d      	bne.n	800c72e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	6812      	ldr	r2, [r2, #0]
 800c6ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	6852      	ldr	r2, [r2, #4]
 800c6c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	6892      	ldr	r2, [r2, #8]
 800c6ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	431a      	orrs	r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c6e8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68da      	ldr	r2, [r3, #12]
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c6f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c6f6:	68b9      	ldr	r1, [r7, #8]
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f000 fa15 	bl	800cb28 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	2201      	movs	r2, #1
 800c706:	2108      	movs	r1, #8
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f000 f9d6 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c70e:	4603      	mov	r3, r0
 800c710:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c712:	7dfb      	ldrb	r3, [r7, #23]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10a      	bne.n	800c72e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2208      	movs	r2, #8
 800c71e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c728:	e001      	b.n	800c72e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c72a:	2302      	movs	r3, #2
 800c72c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c736:	7dfb      	ldrb	r3, [r7, #23]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3718      	adds	r7, #24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b088      	sub	sp, #32
 800c744:	af02      	add	r7, sp, #8
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c74c:	f7fa fc4a 	bl	8006fe4 <HAL_GetTick>
 800c750:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d101      	bne.n	800c762 <HAL_QSPI_MemoryMapped+0x22>
 800c75e:	2302      	movs	r3, #2
 800c760:	e04c      	b.n	800c7fc <HAL_QSPI_MemoryMapped+0xbc>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2201      	movs	r2, #1
 800c766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b01      	cmp	r3, #1
 800c774:	d13b      	bne.n	800c7ee <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2200      	movs	r2, #0
 800c77a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2282      	movs	r2, #130	; 0x82
 800c780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	2200      	movs	r2, #0
 800c78e:	2120      	movs	r1, #32
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f000 f992 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c796:	4603      	mov	r3, r0
 800c798:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c79a:	7dfb      	ldrb	r3, [r7, #23]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d128      	bne.n	800c7f2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f023 0108 	bic.w	r1, r3, #8
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	430a      	orrs	r2, r1
 800c7b4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	2b08      	cmp	r3, #8
 800c7bc:	d110      	bne.n	800c7e0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	6812      	ldr	r2, [r2, #0]
 800c7c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2210      	movs	r2, #16
 800c7ce:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c7de:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800c7e0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800c7e4:	68b9      	ldr	r1, [r7, #8]
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f000 f99e 	bl	800cb28 <QSPI_Config>
 800c7ec:	e001      	b.n	800c7f2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c7ee:	2302      	movs	r3, #2
 800c7f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800c834:	bf00      	nop
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800c85c:	bf00      	nop
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800c870:	bf00      	nop
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800c884:	bf00      	nop
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800c898:	bf00      	nop
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c8b0:	f7fa fb98 	bl	8006fe4 <HAL_GetTick>
 800c8b4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	f003 0302 	and.w	r3, r3, #2
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d056      	beq.n	800c974 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 0304 	and.w	r3, r3, #4
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d017      	beq.n	800c90c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f022 0204 	bic.w	r2, r2, #4
 800c8ea:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fb fb01 	bl	8007ef8 <HAL_DMA_Abort>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d005      	beq.n	800c90c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c904:	f043 0204 	orr.w	r2, r3, #4
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f042 0202 	orr.w	r2, r2, #2
 800c91a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2201      	movs	r2, #1
 800c926:	2102      	movs	r1, #2
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f8c6 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c92e:	4603      	mov	r3, r0
 800c930:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c932:	7bfb      	ldrb	r3, [r7, #15]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10e      	bne.n	800c956 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2202      	movs	r2, #2
 800c93e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2200      	movs	r2, #0
 800c94a:	2120      	movs	r1, #32
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f8b4 	bl	800caba <QSPI_WaitFlagStateUntilTimeout>
 800c952:	4603      	mov	r3, r0
 800c954:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10b      	bne.n	800c974 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	695a      	ldr	r2, [r3, #20]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c96a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800c974:	7bfb      	ldrb	r3, [r7, #15]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
	...

0800c980 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c992:	b2db      	uxtb	r3, r3
 800c994:	f003 0302 	and.w	r3, r3, #2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d046      	beq.n	800ca2a <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2208      	movs	r2, #8
 800c9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800c9ba:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 0304 	and.w	r3, r3, #4
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d01b      	beq.n	800ca02 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f022 0204 	bic.w	r2, r2, #4
 800c9d8:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9de:	4a15      	ldr	r2, [pc, #84]	; (800ca34 <HAL_QSPI_Abort_IT+0xb4>)
 800c9e0:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fb faf6 	bl	8007fd8 <HAL_DMA_Abort_IT>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d01b      	beq.n	800ca2a <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff ff0c 	bl	800c818 <HAL_QSPI_AbortCpltCallback>
 800ca00:	e013      	b.n	800ca2a <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2202      	movs	r2, #2
 800ca08:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ca18:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f042 0202 	orr.w	r2, r2, #2
 800ca28:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	0800ca55 	.word	0x0800ca55

0800ca38 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ca48:	bf00      	nop
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca60:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b08      	cmp	r3, #8
 800ca78:	d114      	bne.n	800caa4 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ca90:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f042 0202 	orr.w	r2, r2, #2
 800caa0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800caa2:	e006      	b.n	800cab2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7ff fea9 	bl	800c804 <HAL_QSPI_ErrorCallback>
}
 800cab2:	bf00      	nop
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	60f8      	str	r0, [r7, #12]
 800cac2:	60b9      	str	r1, [r7, #8]
 800cac4:	603b      	str	r3, [r7, #0]
 800cac6:	4613      	mov	r3, r2
 800cac8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800caca:	e01a      	b.n	800cb02 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad2:	d016      	beq.n	800cb02 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cad4:	f7fa fa86 	bl	8006fe4 <HAL_GetTick>
 800cad8:	4602      	mov	r2, r0
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	69ba      	ldr	r2, [r7, #24]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d302      	bcc.n	800caea <QSPI_WaitFlagStateUntilTimeout+0x30>
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10b      	bne.n	800cb02 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2204      	movs	r2, #4
 800caee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caf6:	f043 0201 	orr.w	r2, r3, #1
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e00e      	b.n	800cb20 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	689a      	ldr	r2, [r3, #8]
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	bf14      	ite	ne
 800cb10:	2301      	movne	r3, #1
 800cb12:	2300      	moveq	r3, #0
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	461a      	mov	r2, r3
 800cb18:	79fb      	ldrb	r3, [r7, #7]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d1d6      	bne.n	800cacc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d009      	beq.n	800cb50 <QSPI_Config+0x28>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cb42:	d005      	beq.n	800cb50 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	3a01      	subs	r2, #1
 800cb4e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 80b9 	beq.w	800cccc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d05f      	beq.n	800cc22 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	6892      	ldr	r2, [r2, #8]
 800cb6a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	69db      	ldr	r3, [r3, #28]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d031      	beq.n	800cbd8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb7c:	431a      	orrs	r2, r3
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb82:	431a      	orrs	r2, r3
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	431a      	orrs	r2, r3
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	695b      	ldr	r3, [r3, #20]
 800cb8e:	049b      	lsls	r3, r3, #18
 800cb90:	431a      	orrs	r2, r3
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	431a      	orrs	r2, r3
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	6a1b      	ldr	r3, [r3, #32]
 800cb9c:	431a      	orrs	r2, r3
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	431a      	orrs	r2, r3
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	69db      	ldr	r3, [r3, #28]
 800cba8:	431a      	orrs	r2, r3
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	699b      	ldr	r3, [r3, #24]
 800cbae:	431a      	orrs	r2, r3
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	ea42 0103 	orr.w	r1, r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cbc8:	f000 812e 	beq.w	800ce28 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	6852      	ldr	r2, [r2, #4]
 800cbd4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800cbd6:	e127      	b.n	800ce28 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe0:	431a      	orrs	r2, r3
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbe6:	431a      	orrs	r2, r3
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbec:	431a      	orrs	r2, r3
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	049b      	lsls	r3, r3, #18
 800cbf4:	431a      	orrs	r2, r3
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	431a      	orrs	r2, r3
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	6a1b      	ldr	r3, [r3, #32]
 800cc00:	431a      	orrs	r2, r3
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	69db      	ldr	r3, [r3, #28]
 800cc06:	431a      	orrs	r2, r3
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	431a      	orrs	r2, r3
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	ea42 0103 	orr.w	r1, r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	430a      	orrs	r2, r1
 800cc1e:	615a      	str	r2, [r3, #20]
}
 800cc20:	e102      	b.n	800ce28 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	69db      	ldr	r3, [r3, #28]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d02e      	beq.n	800cc88 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc32:	431a      	orrs	r2, r3
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc38:	431a      	orrs	r2, r3
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3e:	431a      	orrs	r2, r3
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	695b      	ldr	r3, [r3, #20]
 800cc44:	049b      	lsls	r3, r3, #18
 800cc46:	431a      	orrs	r2, r3
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	6a1b      	ldr	r3, [r3, #32]
 800cc4c:	431a      	orrs	r2, r3
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	431a      	orrs	r2, r3
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	69db      	ldr	r3, [r3, #28]
 800cc58:	431a      	orrs	r2, r3
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	699b      	ldr	r3, [r3, #24]
 800cc5e:	431a      	orrs	r2, r3
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	ea42 0103 	orr.w	r1, r2, r3
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cc78:	f000 80d6 	beq.w	800ce28 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68ba      	ldr	r2, [r7, #8]
 800cc82:	6852      	ldr	r2, [r2, #4]
 800cc84:	619a      	str	r2, [r3, #24]
}
 800cc86:	e0cf      	b.n	800ce28 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc90:	431a      	orrs	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc96:	431a      	orrs	r2, r3
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	695b      	ldr	r3, [r3, #20]
 800cca2:	049b      	lsls	r3, r3, #18
 800cca4:	431a      	orrs	r2, r3
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	431a      	orrs	r2, r3
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	69db      	ldr	r3, [r3, #28]
 800ccb0:	431a      	orrs	r2, r3
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	431a      	orrs	r2, r3
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	ea42 0103 	orr.w	r1, r2, r3
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	430a      	orrs	r2, r1
 800ccc8:	615a      	str	r2, [r3, #20]
}
 800ccca:	e0ad      	b.n	800ce28 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	6a1b      	ldr	r3, [r3, #32]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d058      	beq.n	800cd86 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	6892      	ldr	r2, [r2, #8]
 800ccdc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	69db      	ldr	r3, [r3, #28]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d02d      	beq.n	800cd42 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccee:	431a      	orrs	r2, r3
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf4:	431a      	orrs	r2, r3
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfa:	431a      	orrs	r2, r3
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	695b      	ldr	r3, [r3, #20]
 800cd00:	049b      	lsls	r3, r3, #18
 800cd02:	431a      	orrs	r2, r3
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	431a      	orrs	r2, r3
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	431a      	orrs	r2, r3
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	69db      	ldr	r3, [r3, #28]
 800cd1a:	431a      	orrs	r2, r3
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	699b      	ldr	r3, [r3, #24]
 800cd20:	ea42 0103 	orr.w	r1, r2, r3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	430a      	orrs	r2, r1
 800cd2c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cd34:	d078      	beq.n	800ce28 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	6852      	ldr	r2, [r2, #4]
 800cd3e:	619a      	str	r2, [r3, #24]
}
 800cd40:	e072      	b.n	800ce28 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd50:	431a      	orrs	r2, r3
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd56:	431a      	orrs	r2, r3
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	695b      	ldr	r3, [r3, #20]
 800cd5c:	049b      	lsls	r3, r3, #18
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	431a      	orrs	r2, r3
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	431a      	orrs	r2, r3
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	69db      	ldr	r3, [r3, #28]
 800cd70:	431a      	orrs	r2, r3
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	699b      	ldr	r3, [r3, #24]
 800cd76:	ea42 0103 	orr.w	r1, r2, r3
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	430a      	orrs	r2, r1
 800cd82:	615a      	str	r2, [r3, #20]
}
 800cd84:	e050      	b.n	800ce28 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	69db      	ldr	r3, [r3, #28]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d02a      	beq.n	800cde4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd96:	431a      	orrs	r2, r3
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd9c:	431a      	orrs	r2, r3
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda2:	431a      	orrs	r2, r3
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	695b      	ldr	r3, [r3, #20]
 800cda8:	049b      	lsls	r3, r3, #18
 800cdaa:	431a      	orrs	r2, r3
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	6a1b      	ldr	r3, [r3, #32]
 800cdb0:	431a      	orrs	r2, r3
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	431a      	orrs	r2, r3
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	69db      	ldr	r3, [r3, #28]
 800cdbc:	431a      	orrs	r2, r3
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	ea42 0103 	orr.w	r1, r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cdd6:	d027      	beq.n	800ce28 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	6852      	ldr	r2, [r2, #4]
 800cde0:	619a      	str	r2, [r3, #24]
}
 800cde2:	e021      	b.n	800ce28 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d01d      	beq.n	800ce28 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf4:	431a      	orrs	r2, r3
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce00:	431a      	orrs	r2, r3
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	049b      	lsls	r3, r3, #18
 800ce08:	431a      	orrs	r2, r3
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	431a      	orrs	r2, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	69db      	ldr	r3, [r3, #28]
 800ce14:	431a      	orrs	r2, r3
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	ea42 0103 	orr.w	r1, r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	430a      	orrs	r2, r1
 800ce26:	615a      	str	r2, [r3, #20]
}
 800ce28:	bf00      	nop
 800ce2a:	3714      	adds	r7, #20
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e291      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 8087 	beq.w	800cf66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ce58:	4b96      	ldr	r3, [pc, #600]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	f003 030c 	and.w	r3, r3, #12
 800ce60:	2b04      	cmp	r3, #4
 800ce62:	d00c      	beq.n	800ce7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ce64:	4b93      	ldr	r3, [pc, #588]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	f003 030c 	and.w	r3, r3, #12
 800ce6c:	2b08      	cmp	r3, #8
 800ce6e:	d112      	bne.n	800ce96 <HAL_RCC_OscConfig+0x62>
 800ce70:	4b90      	ldr	r3, [pc, #576]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce7c:	d10b      	bne.n	800ce96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce7e:	4b8d      	ldr	r3, [pc, #564]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d06c      	beq.n	800cf64 <HAL_RCC_OscConfig+0x130>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d168      	bne.n	800cf64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e26b      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce9e:	d106      	bne.n	800ceae <HAL_RCC_OscConfig+0x7a>
 800cea0:	4b84      	ldr	r3, [pc, #528]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a83      	ldr	r2, [pc, #524]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	e02e      	b.n	800cf0c <HAL_RCC_OscConfig+0xd8>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10c      	bne.n	800ced0 <HAL_RCC_OscConfig+0x9c>
 800ceb6:	4b7f      	ldr	r3, [pc, #508]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a7e      	ldr	r2, [pc, #504]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cec0:	6013      	str	r3, [r2, #0]
 800cec2:	4b7c      	ldr	r3, [pc, #496]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a7b      	ldr	r2, [pc, #492]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	e01d      	b.n	800cf0c <HAL_RCC_OscConfig+0xd8>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ced8:	d10c      	bne.n	800cef4 <HAL_RCC_OscConfig+0xc0>
 800ceda:	4b76      	ldr	r3, [pc, #472]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a75      	ldr	r2, [pc, #468]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	4b73      	ldr	r3, [pc, #460]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a72      	ldr	r2, [pc, #456]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ceec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cef0:	6013      	str	r3, [r2, #0]
 800cef2:	e00b      	b.n	800cf0c <HAL_RCC_OscConfig+0xd8>
 800cef4:	4b6f      	ldr	r3, [pc, #444]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a6e      	ldr	r2, [pc, #440]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cefa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cefe:	6013      	str	r3, [r2, #0]
 800cf00:	4b6c      	ldr	r3, [pc, #432]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a6b      	ldr	r2, [pc, #428]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d013      	beq.n	800cf3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf14:	f7fa f866 	bl	8006fe4 <HAL_GetTick>
 800cf18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf1a:	e008      	b.n	800cf2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf1c:	f7fa f862 	bl	8006fe4 <HAL_GetTick>
 800cf20:	4602      	mov	r2, r0
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	2b64      	cmp	r3, #100	; 0x64
 800cf28:	d901      	bls.n	800cf2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e21f      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf2e:	4b61      	ldr	r3, [pc, #388]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0f0      	beq.n	800cf1c <HAL_RCC_OscConfig+0xe8>
 800cf3a:	e014      	b.n	800cf66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf3c:	f7fa f852 	bl	8006fe4 <HAL_GetTick>
 800cf40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf42:	e008      	b.n	800cf56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf44:	f7fa f84e 	bl	8006fe4 <HAL_GetTick>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	2b64      	cmp	r3, #100	; 0x64
 800cf50:	d901      	bls.n	800cf56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e20b      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf56:	4b57      	ldr	r3, [pc, #348]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1f0      	bne.n	800cf44 <HAL_RCC_OscConfig+0x110>
 800cf62:	e000      	b.n	800cf66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0302 	and.w	r3, r3, #2
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d069      	beq.n	800d046 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cf72:	4b50      	ldr	r3, [pc, #320]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f003 030c 	and.w	r3, r3, #12
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00b      	beq.n	800cf96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cf7e:	4b4d      	ldr	r3, [pc, #308]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	f003 030c 	and.w	r3, r3, #12
 800cf86:	2b08      	cmp	r3, #8
 800cf88:	d11c      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x190>
 800cf8a:	4b4a      	ldr	r3, [pc, #296]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d116      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf96:	4b47      	ldr	r3, [pc, #284]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 0302 	and.w	r3, r3, #2
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d005      	beq.n	800cfae <HAL_RCC_OscConfig+0x17a>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d001      	beq.n	800cfae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e1df      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfae:	4b41      	ldr	r3, [pc, #260]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	493d      	ldr	r1, [pc, #244]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cfc2:	e040      	b.n	800d046 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d023      	beq.n	800d014 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cfcc:	4b39      	ldr	r3, [pc, #228]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a38      	ldr	r2, [pc, #224]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cfd2:	f043 0301 	orr.w	r3, r3, #1
 800cfd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfd8:	f7fa f804 	bl	8006fe4 <HAL_GetTick>
 800cfdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfde:	e008      	b.n	800cff2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cfe0:	f7fa f800 	bl	8006fe4 <HAL_GetTick>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	1ad3      	subs	r3, r2, r3
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d901      	bls.n	800cff2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800cfee:	2303      	movs	r3, #3
 800cff0:	e1bd      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cff2:	4b30      	ldr	r3, [pc, #192]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d0f0      	beq.n	800cfe0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cffe:	4b2d      	ldr	r3, [pc, #180]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	4929      	ldr	r1, [pc, #164]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d00e:	4313      	orrs	r3, r2
 800d010:	600b      	str	r3, [r1, #0]
 800d012:	e018      	b.n	800d046 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d014:	4b27      	ldr	r3, [pc, #156]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a26      	ldr	r2, [pc, #152]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d01a:	f023 0301 	bic.w	r3, r3, #1
 800d01e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d020:	f7f9 ffe0 	bl	8006fe4 <HAL_GetTick>
 800d024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d026:	e008      	b.n	800d03a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d028:	f7f9 ffdc 	bl	8006fe4 <HAL_GetTick>
 800d02c:	4602      	mov	r2, r0
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	2b02      	cmp	r3, #2
 800d034:	d901      	bls.n	800d03a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d036:	2303      	movs	r3, #3
 800d038:	e199      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d03a:	4b1e      	ldr	r3, [pc, #120]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f003 0302 	and.w	r3, r3, #2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1f0      	bne.n	800d028 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 0308 	and.w	r3, r3, #8
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d038      	beq.n	800d0c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d019      	beq.n	800d08e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d05a:	4b16      	ldr	r3, [pc, #88]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d05e:	4a15      	ldr	r2, [pc, #84]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d060:	f043 0301 	orr.w	r3, r3, #1
 800d064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d066:	f7f9 ffbd 	bl	8006fe4 <HAL_GetTick>
 800d06a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d06c:	e008      	b.n	800d080 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d06e:	f7f9 ffb9 	bl	8006fe4 <HAL_GetTick>
 800d072:	4602      	mov	r2, r0
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d901      	bls.n	800d080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e176      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d080:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d084:	f003 0302 	and.w	r3, r3, #2
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d0f0      	beq.n	800d06e <HAL_RCC_OscConfig+0x23a>
 800d08c:	e01a      	b.n	800d0c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d08e:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d092:	4a08      	ldr	r2, [pc, #32]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d094:	f023 0301 	bic.w	r3, r3, #1
 800d098:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d09a:	f7f9 ffa3 	bl	8006fe4 <HAL_GetTick>
 800d09e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d0a0:	e00a      	b.n	800d0b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d0a2:	f7f9 ff9f 	bl	8006fe4 <HAL_GetTick>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	d903      	bls.n	800d0b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	e15c      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
 800d0b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d0b8:	4b91      	ldr	r3, [pc, #580]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0bc:	f003 0302 	and.w	r3, r3, #2
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1ee      	bne.n	800d0a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 0304 	and.w	r3, r3, #4
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f000 80a4 	beq.w	800d21a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d0d2:	4b8b      	ldr	r3, [pc, #556]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10d      	bne.n	800d0fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d0de:	4b88      	ldr	r3, [pc, #544]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e2:	4a87      	ldr	r2, [pc, #540]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0e8:	6413      	str	r3, [r2, #64]	; 0x40
 800d0ea:	4b85      	ldr	r3, [pc, #532]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0f2:	60bb      	str	r3, [r7, #8]
 800d0f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d0fa:	4b82      	ldr	r3, [pc, #520]	; (800d304 <HAL_RCC_OscConfig+0x4d0>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d102:	2b00      	cmp	r3, #0
 800d104:	d118      	bne.n	800d138 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d106:	4b7f      	ldr	r3, [pc, #508]	; (800d304 <HAL_RCC_OscConfig+0x4d0>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a7e      	ldr	r2, [pc, #504]	; (800d304 <HAL_RCC_OscConfig+0x4d0>)
 800d10c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d112:	f7f9 ff67 	bl	8006fe4 <HAL_GetTick>
 800d116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d118:	e008      	b.n	800d12c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d11a:	f7f9 ff63 	bl	8006fe4 <HAL_GetTick>
 800d11e:	4602      	mov	r2, r0
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	2b64      	cmp	r3, #100	; 0x64
 800d126:	d901      	bls.n	800d12c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d128:	2303      	movs	r3, #3
 800d12a:	e120      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d12c:	4b75      	ldr	r3, [pc, #468]	; (800d304 <HAL_RCC_OscConfig+0x4d0>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d134:	2b00      	cmp	r3, #0
 800d136:	d0f0      	beq.n	800d11a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d106      	bne.n	800d14e <HAL_RCC_OscConfig+0x31a>
 800d140:	4b6f      	ldr	r3, [pc, #444]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d144:	4a6e      	ldr	r2, [pc, #440]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d146:	f043 0301 	orr.w	r3, r3, #1
 800d14a:	6713      	str	r3, [r2, #112]	; 0x70
 800d14c:	e02d      	b.n	800d1aa <HAL_RCC_OscConfig+0x376>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10c      	bne.n	800d170 <HAL_RCC_OscConfig+0x33c>
 800d156:	4b6a      	ldr	r3, [pc, #424]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d15a:	4a69      	ldr	r2, [pc, #420]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d15c:	f023 0301 	bic.w	r3, r3, #1
 800d160:	6713      	str	r3, [r2, #112]	; 0x70
 800d162:	4b67      	ldr	r3, [pc, #412]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d166:	4a66      	ldr	r2, [pc, #408]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d168:	f023 0304 	bic.w	r3, r3, #4
 800d16c:	6713      	str	r3, [r2, #112]	; 0x70
 800d16e:	e01c      	b.n	800d1aa <HAL_RCC_OscConfig+0x376>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	2b05      	cmp	r3, #5
 800d176:	d10c      	bne.n	800d192 <HAL_RCC_OscConfig+0x35e>
 800d178:	4b61      	ldr	r3, [pc, #388]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17c:	4a60      	ldr	r2, [pc, #384]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d17e:	f043 0304 	orr.w	r3, r3, #4
 800d182:	6713      	str	r3, [r2, #112]	; 0x70
 800d184:	4b5e      	ldr	r3, [pc, #376]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d188:	4a5d      	ldr	r2, [pc, #372]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d18a:	f043 0301 	orr.w	r3, r3, #1
 800d18e:	6713      	str	r3, [r2, #112]	; 0x70
 800d190:	e00b      	b.n	800d1aa <HAL_RCC_OscConfig+0x376>
 800d192:	4b5b      	ldr	r3, [pc, #364]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d196:	4a5a      	ldr	r2, [pc, #360]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d198:	f023 0301 	bic.w	r3, r3, #1
 800d19c:	6713      	str	r3, [r2, #112]	; 0x70
 800d19e:	4b58      	ldr	r3, [pc, #352]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a2:	4a57      	ldr	r2, [pc, #348]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d1a4:	f023 0304 	bic.w	r3, r3, #4
 800d1a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d015      	beq.n	800d1de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1b2:	f7f9 ff17 	bl	8006fe4 <HAL_GetTick>
 800d1b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1b8:	e00a      	b.n	800d1d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1ba:	f7f9 ff13 	bl	8006fe4 <HAL_GetTick>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	1ad3      	subs	r3, r2, r3
 800d1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d901      	bls.n	800d1d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e0ce      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1d0:	4b4b      	ldr	r3, [pc, #300]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d4:	f003 0302 	and.w	r3, r3, #2
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d0ee      	beq.n	800d1ba <HAL_RCC_OscConfig+0x386>
 800d1dc:	e014      	b.n	800d208 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1de:	f7f9 ff01 	bl	8006fe4 <HAL_GetTick>
 800d1e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1e4:	e00a      	b.n	800d1fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1e6:	f7f9 fefd 	bl	8006fe4 <HAL_GetTick>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d901      	bls.n	800d1fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	e0b8      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1fc:	4b40      	ldr	r3, [pc, #256]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d200:	f003 0302 	and.w	r3, r3, #2
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1ee      	bne.n	800d1e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d208:	7dfb      	ldrb	r3, [r7, #23]
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d105      	bne.n	800d21a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d20e:	4b3c      	ldr	r3, [pc, #240]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d212:	4a3b      	ldr	r2, [pc, #236]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	699b      	ldr	r3, [r3, #24]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 80a4 	beq.w	800d36c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d224:	4b36      	ldr	r3, [pc, #216]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	f003 030c 	and.w	r3, r3, #12
 800d22c:	2b08      	cmp	r3, #8
 800d22e:	d06b      	beq.n	800d308 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d149      	bne.n	800d2cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d238:	4b31      	ldr	r3, [pc, #196]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a30      	ldr	r2, [pc, #192]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d23e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d244:	f7f9 fece 	bl	8006fe4 <HAL_GetTick>
 800d248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d24a:	e008      	b.n	800d25e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d24c:	f7f9 feca 	bl	8006fe4 <HAL_GetTick>
 800d250:	4602      	mov	r2, r0
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	2b02      	cmp	r3, #2
 800d258:	d901      	bls.n	800d25e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d25a:	2303      	movs	r3, #3
 800d25c:	e087      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d25e:	4b28      	ldr	r3, [pc, #160]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1f0      	bne.n	800d24c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	69da      	ldr	r2, [r3, #28]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	431a      	orrs	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d278:	019b      	lsls	r3, r3, #6
 800d27a:	431a      	orrs	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d280:	085b      	lsrs	r3, r3, #1
 800d282:	3b01      	subs	r3, #1
 800d284:	041b      	lsls	r3, r3, #16
 800d286:	431a      	orrs	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28c:	061b      	lsls	r3, r3, #24
 800d28e:	4313      	orrs	r3, r2
 800d290:	4a1b      	ldr	r2, [pc, #108]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d296:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d298:	4b19      	ldr	r3, [pc, #100]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a18      	ldr	r2, [pc, #96]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d29e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2a4:	f7f9 fe9e 	bl	8006fe4 <HAL_GetTick>
 800d2a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d2aa:	e008      	b.n	800d2be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2ac:	f7f9 fe9a 	bl	8006fe4 <HAL_GetTick>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d901      	bls.n	800d2be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800d2ba:	2303      	movs	r3, #3
 800d2bc:	e057      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d2be:	4b10      	ldr	r3, [pc, #64]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d0f0      	beq.n	800d2ac <HAL_RCC_OscConfig+0x478>
 800d2ca:	e04f      	b.n	800d36c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2cc:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a0b      	ldr	r2, [pc, #44]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d2d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2d8:	f7f9 fe84 	bl	8006fe4 <HAL_GetTick>
 800d2dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2de:	e008      	b.n	800d2f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2e0:	f7f9 fe80 	bl	8006fe4 <HAL_GetTick>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d901      	bls.n	800d2f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e03d      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2f2:	4b03      	ldr	r3, [pc, #12]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f0      	bne.n	800d2e0 <HAL_RCC_OscConfig+0x4ac>
 800d2fe:	e035      	b.n	800d36c <HAL_RCC_OscConfig+0x538>
 800d300:	40023800 	.word	0x40023800
 800d304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d308:	4b1b      	ldr	r3, [pc, #108]	; (800d378 <HAL_RCC_OscConfig+0x544>)
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	2b01      	cmp	r3, #1
 800d314:	d028      	beq.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d320:	429a      	cmp	r2, r3
 800d322:	d121      	bne.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d32e:	429a      	cmp	r2, r3
 800d330:	d11a      	bne.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d338:	4013      	ands	r3, r2
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d33e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d340:	4293      	cmp	r3, r2
 800d342:	d111      	bne.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34e:	085b      	lsrs	r3, r3, #1
 800d350:	3b01      	subs	r3, #1
 800d352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d354:	429a      	cmp	r2, r3
 800d356:	d107      	bne.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d364:	429a      	cmp	r2, r3
 800d366:	d001      	beq.n	800d36c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e000      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	40023800 	.word	0x40023800

0800d37c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	e0d0      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d394:	4b6a      	ldr	r3, [pc, #424]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f003 030f 	and.w	r3, r3, #15
 800d39c:	683a      	ldr	r2, [r7, #0]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d910      	bls.n	800d3c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d3a2:	4b67      	ldr	r3, [pc, #412]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f023 020f 	bic.w	r2, r3, #15
 800d3aa:	4965      	ldr	r1, [pc, #404]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3b2:	4b63      	ldr	r3, [pc, #396]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 030f 	and.w	r3, r3, #15
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d001      	beq.n	800d3c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e0b8      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f003 0302 	and.w	r3, r3, #2
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d020      	beq.n	800d412 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f003 0304 	and.w	r3, r3, #4
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d005      	beq.n	800d3e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d3dc:	4b59      	ldr	r3, [pc, #356]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	4a58      	ldr	r2, [pc, #352]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d3e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d3e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 0308 	and.w	r3, r3, #8
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d005      	beq.n	800d400 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d3f4:	4b53      	ldr	r3, [pc, #332]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	4a52      	ldr	r2, [pc, #328]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d3fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d3fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d400:	4b50      	ldr	r3, [pc, #320]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	494d      	ldr	r1, [pc, #308]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d40e:	4313      	orrs	r3, r2
 800d410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f003 0301 	and.w	r3, r3, #1
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d040      	beq.n	800d4a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d107      	bne.n	800d436 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d426:	4b47      	ldr	r3, [pc, #284]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d115      	bne.n	800d45e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	e07f      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	d107      	bne.n	800d44e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d43e:	4b41      	ldr	r3, [pc, #260]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d446:	2b00      	cmp	r3, #0
 800d448:	d109      	bne.n	800d45e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e073      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d44e:	4b3d      	ldr	r3, [pc, #244]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f003 0302 	and.w	r3, r3, #2
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e06b      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d45e:	4b39      	ldr	r3, [pc, #228]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	f023 0203 	bic.w	r2, r3, #3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	4936      	ldr	r1, [pc, #216]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d46c:	4313      	orrs	r3, r2
 800d46e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d470:	f7f9 fdb8 	bl	8006fe4 <HAL_GetTick>
 800d474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d476:	e00a      	b.n	800d48e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d478:	f7f9 fdb4 	bl	8006fe4 <HAL_GetTick>
 800d47c:	4602      	mov	r2, r0
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	f241 3288 	movw	r2, #5000	; 0x1388
 800d486:	4293      	cmp	r3, r2
 800d488:	d901      	bls.n	800d48e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d48a:	2303      	movs	r3, #3
 800d48c:	e053      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d48e:	4b2d      	ldr	r3, [pc, #180]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	f003 020c 	and.w	r2, r3, #12
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d1eb      	bne.n	800d478 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d4a0:	4b27      	ldr	r3, [pc, #156]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 030f 	and.w	r3, r3, #15
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d210      	bcs.n	800d4d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4ae:	4b24      	ldr	r3, [pc, #144]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f023 020f 	bic.w	r2, r3, #15
 800d4b6:	4922      	ldr	r1, [pc, #136]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4be:	4b20      	ldr	r3, [pc, #128]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f003 030f 	and.w	r3, r3, #15
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d001      	beq.n	800d4d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e032      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 0304 	and.w	r3, r3, #4
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d008      	beq.n	800d4ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d4dc:	4b19      	ldr	r3, [pc, #100]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d4de:	689b      	ldr	r3, [r3, #8]
 800d4e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	4916      	ldr	r1, [pc, #88]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f003 0308 	and.w	r3, r3, #8
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d009      	beq.n	800d50e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d4fa:	4b12      	ldr	r3, [pc, #72]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	490e      	ldr	r1, [pc, #56]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d50a:	4313      	orrs	r3, r2
 800d50c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d50e:	f000 f821 	bl	800d554 <HAL_RCC_GetSysClockFreq>
 800d512:	4602      	mov	r2, r0
 800d514:	4b0b      	ldr	r3, [pc, #44]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	091b      	lsrs	r3, r3, #4
 800d51a:	f003 030f 	and.w	r3, r3, #15
 800d51e:	490a      	ldr	r1, [pc, #40]	; (800d548 <HAL_RCC_ClockConfig+0x1cc>)
 800d520:	5ccb      	ldrb	r3, [r1, r3]
 800d522:	fa22 f303 	lsr.w	r3, r2, r3
 800d526:	4a09      	ldr	r2, [pc, #36]	; (800d54c <HAL_RCC_ClockConfig+0x1d0>)
 800d528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d52a:	4b09      	ldr	r3, [pc, #36]	; (800d550 <HAL_RCC_ClockConfig+0x1d4>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4618      	mov	r0, r3
 800d530:	f7f6 fd0e 	bl	8003f50 <HAL_InitTick>

  return HAL_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	40023c00 	.word	0x40023c00
 800d544:	40023800 	.word	0x40023800
 800d548:	0801acd8 	.word	0x0801acd8
 800d54c:	2000002c 	.word	0x2000002c
 800d550:	20000054 	.word	0x20000054

0800d554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d558:	b090      	sub	sp, #64	; 0x40
 800d55a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	637b      	str	r3, [r7, #52]	; 0x34
 800d560:	2300      	movs	r3, #0
 800d562:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d564:	2300      	movs	r3, #0
 800d566:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800d568:	2300      	movs	r3, #0
 800d56a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d56c:	4b59      	ldr	r3, [pc, #356]	; (800d6d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	f003 030c 	and.w	r3, r3, #12
 800d574:	2b08      	cmp	r3, #8
 800d576:	d00d      	beq.n	800d594 <HAL_RCC_GetSysClockFreq+0x40>
 800d578:	2b08      	cmp	r3, #8
 800d57a:	f200 80a1 	bhi.w	800d6c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <HAL_RCC_GetSysClockFreq+0x34>
 800d582:	2b04      	cmp	r3, #4
 800d584:	d003      	beq.n	800d58e <HAL_RCC_GetSysClockFreq+0x3a>
 800d586:	e09b      	b.n	800d6c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d588:	4b53      	ldr	r3, [pc, #332]	; (800d6d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800d58a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d58c:	e09b      	b.n	800d6c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d58e:	4b53      	ldr	r3, [pc, #332]	; (800d6dc <HAL_RCC_GetSysClockFreq+0x188>)
 800d590:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d592:	e098      	b.n	800d6c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d594:	4b4f      	ldr	r3, [pc, #316]	; (800d6d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d59c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d59e:	4b4d      	ldr	r3, [pc, #308]	; (800d6d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d028      	beq.n	800d5fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d5aa:	4b4a      	ldr	r3, [pc, #296]	; (800d6d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	099b      	lsrs	r3, r3, #6
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	623b      	str	r3, [r7, #32]
 800d5b4:	627a      	str	r2, [r7, #36]	; 0x24
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800d5bc:	2100      	movs	r1, #0
 800d5be:	4b47      	ldr	r3, [pc, #284]	; (800d6dc <HAL_RCC_GetSysClockFreq+0x188>)
 800d5c0:	fb03 f201 	mul.w	r2, r3, r1
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	fb00 f303 	mul.w	r3, r0, r3
 800d5ca:	4413      	add	r3, r2
 800d5cc:	4a43      	ldr	r2, [pc, #268]	; (800d6dc <HAL_RCC_GetSysClockFreq+0x188>)
 800d5ce:	fba0 1202 	umull	r1, r2, r0, r2
 800d5d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5d4:	460a      	mov	r2, r1
 800d5d6:	62ba      	str	r2, [r7, #40]	; 0x28
 800d5d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5da:	4413      	add	r3, r2
 800d5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	61bb      	str	r3, [r7, #24]
 800d5e4:	61fa      	str	r2, [r7, #28]
 800d5e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d5ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d5ee:	f7f3 fa4d 	bl	8000a8c <__aeabi_uldivmod>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5fa:	e053      	b.n	800d6a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d5fc:	4b35      	ldr	r3, [pc, #212]	; (800d6d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	099b      	lsrs	r3, r3, #6
 800d602:	2200      	movs	r2, #0
 800d604:	613b      	str	r3, [r7, #16]
 800d606:	617a      	str	r2, [r7, #20]
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800d60e:	f04f 0b00 	mov.w	fp, #0
 800d612:	4652      	mov	r2, sl
 800d614:	465b      	mov	r3, fp
 800d616:	f04f 0000 	mov.w	r0, #0
 800d61a:	f04f 0100 	mov.w	r1, #0
 800d61e:	0159      	lsls	r1, r3, #5
 800d620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d624:	0150      	lsls	r0, r2, #5
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	ebb2 080a 	subs.w	r8, r2, sl
 800d62e:	eb63 090b 	sbc.w	r9, r3, fp
 800d632:	f04f 0200 	mov.w	r2, #0
 800d636:	f04f 0300 	mov.w	r3, #0
 800d63a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800d63e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800d642:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800d646:	ebb2 0408 	subs.w	r4, r2, r8
 800d64a:	eb63 0509 	sbc.w	r5, r3, r9
 800d64e:	f04f 0200 	mov.w	r2, #0
 800d652:	f04f 0300 	mov.w	r3, #0
 800d656:	00eb      	lsls	r3, r5, #3
 800d658:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d65c:	00e2      	lsls	r2, r4, #3
 800d65e:	4614      	mov	r4, r2
 800d660:	461d      	mov	r5, r3
 800d662:	eb14 030a 	adds.w	r3, r4, sl
 800d666:	603b      	str	r3, [r7, #0]
 800d668:	eb45 030b 	adc.w	r3, r5, fp
 800d66c:	607b      	str	r3, [r7, #4]
 800d66e:	f04f 0200 	mov.w	r2, #0
 800d672:	f04f 0300 	mov.w	r3, #0
 800d676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d67a:	4629      	mov	r1, r5
 800d67c:	028b      	lsls	r3, r1, #10
 800d67e:	4621      	mov	r1, r4
 800d680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d684:	4621      	mov	r1, r4
 800d686:	028a      	lsls	r2, r1, #10
 800d688:	4610      	mov	r0, r2
 800d68a:	4619      	mov	r1, r3
 800d68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68e:	2200      	movs	r2, #0
 800d690:	60bb      	str	r3, [r7, #8]
 800d692:	60fa      	str	r2, [r7, #12]
 800d694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d698:	f7f3 f9f8 	bl	8000a8c <__aeabi_uldivmod>
 800d69c:	4602      	mov	r2, r0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d6a4:	4b0b      	ldr	r3, [pc, #44]	; (800d6d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	0c1b      	lsrs	r3, r3, #16
 800d6aa:	f003 0303 	and.w	r3, r3, #3
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800d6b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d6be:	e002      	b.n	800d6c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d6c0:	4b05      	ldr	r3, [pc, #20]	; (800d6d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800d6c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d6c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3740      	adds	r7, #64	; 0x40
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d6d2:	bf00      	nop
 800d6d4:	40023800 	.word	0x40023800
 800d6d8:	00f42400 	.word	0x00f42400
 800d6dc:	017d7840 	.word	0x017d7840

0800d6e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d6e4:	4b03      	ldr	r3, [pc, #12]	; (800d6f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	2000002c 	.word	0x2000002c

0800d6f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d6fc:	f7ff fff0 	bl	800d6e0 <HAL_RCC_GetHCLKFreq>
 800d700:	4602      	mov	r2, r0
 800d702:	4b05      	ldr	r3, [pc, #20]	; (800d718 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	0a9b      	lsrs	r3, r3, #10
 800d708:	f003 0307 	and.w	r3, r3, #7
 800d70c:	4903      	ldr	r1, [pc, #12]	; (800d71c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d70e:	5ccb      	ldrb	r3, [r1, r3]
 800d710:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d714:	4618      	mov	r0, r3
 800d716:	bd80      	pop	{r7, pc}
 800d718:	40023800 	.word	0x40023800
 800d71c:	0801ace8 	.word	0x0801ace8

0800d720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d724:	f7ff ffdc 	bl	800d6e0 <HAL_RCC_GetHCLKFreq>
 800d728:	4602      	mov	r2, r0
 800d72a:	4b05      	ldr	r3, [pc, #20]	; (800d740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	0b5b      	lsrs	r3, r3, #13
 800d730:	f003 0307 	and.w	r3, r3, #7
 800d734:	4903      	ldr	r1, [pc, #12]	; (800d744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d736:	5ccb      	ldrb	r3, [r1, r3]
 800d738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	40023800 	.word	0x40023800
 800d744:	0801ace8 	.word	0x0801ace8

0800d748 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	220f      	movs	r2, #15
 800d756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d758:	4b12      	ldr	r3, [pc, #72]	; (800d7a4 <HAL_RCC_GetClockConfig+0x5c>)
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	f003 0203 	and.w	r2, r3, #3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d764:	4b0f      	ldr	r3, [pc, #60]	; (800d7a4 <HAL_RCC_GetClockConfig+0x5c>)
 800d766:	689b      	ldr	r3, [r3, #8]
 800d768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d770:	4b0c      	ldr	r3, [pc, #48]	; (800d7a4 <HAL_RCC_GetClockConfig+0x5c>)
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d77c:	4b09      	ldr	r3, [pc, #36]	; (800d7a4 <HAL_RCC_GetClockConfig+0x5c>)
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	08db      	lsrs	r3, r3, #3
 800d782:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d78a:	4b07      	ldr	r3, [pc, #28]	; (800d7a8 <HAL_RCC_GetClockConfig+0x60>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f003 020f 	and.w	r2, r3, #15
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	601a      	str	r2, [r3, #0]
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	40023800 	.word	0x40023800
 800d7a8:	40023c00 	.word	0x40023c00

0800d7ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d012      	beq.n	800d7fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d7d4:	4b69      	ldr	r3, [pc, #420]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	4a68      	ldr	r2, [pc, #416]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d7de:	6093      	str	r3, [r2, #8]
 800d7e0:	4b66      	ldr	r3, [pc, #408]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7e2:	689a      	ldr	r2, [r3, #8]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e8:	4964      	ldr	r1, [pc, #400]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d101      	bne.n	800d7fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d802:	2b00      	cmp	r3, #0
 800d804:	d017      	beq.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d806:	4b5d      	ldr	r3, [pc, #372]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d80c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d814:	4959      	ldr	r1, [pc, #356]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d816:	4313      	orrs	r3, r2
 800d818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d824:	d101      	bne.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800d826:	2301      	movs	r3, #1
 800d828:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800d832:	2301      	movs	r3, #1
 800d834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d017      	beq.n	800d872 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d842:	4b4e      	ldr	r3, [pc, #312]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d848:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d850:	494a      	ldr	r1, [pc, #296]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d852:	4313      	orrs	r3, r2
 800d854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d860:	d101      	bne.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800d862:	2301      	movs	r3, #1
 800d864:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d101      	bne.n	800d872 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800d86e:	2301      	movs	r3, #1
 800d870:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800d87e:	2301      	movs	r3, #1
 800d880:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 0320 	and.w	r3, r3, #32
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 808b 	beq.w	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d890:	4b3a      	ldr	r3, [pc, #232]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d894:	4a39      	ldr	r2, [pc, #228]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d89a:	6413      	str	r3, [r2, #64]	; 0x40
 800d89c:	4b37      	ldr	r3, [pc, #220]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8a4:	60bb      	str	r3, [r7, #8]
 800d8a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d8a8:	4b35      	ldr	r3, [pc, #212]	; (800d980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a34      	ldr	r2, [pc, #208]	; (800d980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d8ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8b4:	f7f9 fb96 	bl	8006fe4 <HAL_GetTick>
 800d8b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d8ba:	e008      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8bc:	f7f9 fb92 	bl	8006fe4 <HAL_GetTick>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	2b64      	cmp	r3, #100	; 0x64
 800d8c8:	d901      	bls.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	e357      	b.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d8ce:	4b2c      	ldr	r3, [pc, #176]	; (800d980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d0f0      	beq.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d8da:	4b28      	ldr	r3, [pc, #160]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d035      	beq.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d02e      	beq.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d8f8:	4b20      	ldr	r3, [pc, #128]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d900:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d902:	4b1e      	ldr	r3, [pc, #120]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d906:	4a1d      	ldr	r2, [pc, #116]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d90c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d90e:	4b1b      	ldr	r3, [pc, #108]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d912:	4a1a      	ldr	r2, [pc, #104]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d918:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d91a:	4a18      	ldr	r2, [pc, #96]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d920:	4b16      	ldr	r3, [pc, #88]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d114      	bne.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d92c:	f7f9 fb5a 	bl	8006fe4 <HAL_GetTick>
 800d930:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d932:	e00a      	b.n	800d94a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d934:	f7f9 fb56 	bl	8006fe4 <HAL_GetTick>
 800d938:	4602      	mov	r2, r0
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d942:	4293      	cmp	r3, r2
 800d944:	d901      	bls.n	800d94a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d946:	2303      	movs	r3, #3
 800d948:	e319      	b.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d94a:	4b0c      	ldr	r3, [pc, #48]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d94e:	f003 0302 	and.w	r3, r3, #2
 800d952:	2b00      	cmp	r3, #0
 800d954:	d0ee      	beq.n	800d934 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d95e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d962:	d111      	bne.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d964:	4b05      	ldr	r3, [pc, #20]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d970:	4b04      	ldr	r3, [pc, #16]	; (800d984 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d972:	400b      	ands	r3, r1
 800d974:	4901      	ldr	r1, [pc, #4]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d976:	4313      	orrs	r3, r2
 800d978:	608b      	str	r3, [r1, #8]
 800d97a:	e00b      	b.n	800d994 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d97c:	40023800 	.word	0x40023800
 800d980:	40007000 	.word	0x40007000
 800d984:	0ffffcff 	.word	0x0ffffcff
 800d988:	4baa      	ldr	r3, [pc, #680]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	4aa9      	ldr	r2, [pc, #676]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d98e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d992:	6093      	str	r3, [r2, #8]
 800d994:	4ba7      	ldr	r3, [pc, #668]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d99c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d9a0:	49a4      	ldr	r1, [pc, #656]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f003 0310 	and.w	r3, r3, #16
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d010      	beq.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d9b2:	4ba0      	ldr	r3, [pc, #640]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9b8:	4a9e      	ldr	r2, [pc, #632]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d9ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d9be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d9c2:	4b9c      	ldr	r3, [pc, #624]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d9c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	4999      	ldr	r1, [pc, #612]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00a      	beq.n	800d9f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d9e0:	4b94      	ldr	r3, [pc, #592]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d9e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ee:	4991      	ldr	r1, [pc, #580]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00a      	beq.n	800da18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800da02:	4b8c      	ldr	r3, [pc, #560]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da10:	4988      	ldr	r1, [pc, #544]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da12:	4313      	orrs	r3, r2
 800da14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00a      	beq.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800da24:	4b83      	ldr	r3, [pc, #524]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da32:	4980      	ldr	r1, [pc, #512]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da34:	4313      	orrs	r3, r2
 800da36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00a      	beq.n	800da5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800da46:	4b7b      	ldr	r3, [pc, #492]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da54:	4977      	ldr	r1, [pc, #476]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da56:	4313      	orrs	r3, r2
 800da58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00a      	beq.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800da68:	4b72      	ldr	r3, [pc, #456]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da6e:	f023 0203 	bic.w	r2, r3, #3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da76:	496f      	ldr	r1, [pc, #444]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da78:	4313      	orrs	r3, r2
 800da7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00a      	beq.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800da8a:	4b6a      	ldr	r3, [pc, #424]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da90:	f023 020c 	bic.w	r2, r3, #12
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da98:	4966      	ldr	r1, [pc, #408]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da9a:	4313      	orrs	r3, r2
 800da9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00a      	beq.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800daac:	4b61      	ldr	r3, [pc, #388]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800daae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dab2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daba:	495e      	ldr	r1, [pc, #376]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dabc:	4313      	orrs	r3, r2
 800dabe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00a      	beq.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dace:	4b59      	ldr	r3, [pc, #356]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dad4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dadc:	4955      	ldr	r1, [pc, #340]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dade:	4313      	orrs	r3, r2
 800dae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00a      	beq.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800daf0:	4b50      	ldr	r3, [pc, #320]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800daf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dafe:	494d      	ldr	r1, [pc, #308]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db00:	4313      	orrs	r3, r2
 800db02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00a      	beq.n	800db28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800db12:	4b48      	ldr	r3, [pc, #288]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db20:	4944      	ldr	r1, [pc, #272]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db22:	4313      	orrs	r3, r2
 800db24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00a      	beq.n	800db4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800db34:	4b3f      	ldr	r3, [pc, #252]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db42:	493c      	ldr	r1, [pc, #240]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db44:	4313      	orrs	r3, r2
 800db46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00a      	beq.n	800db6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800db56:	4b37      	ldr	r3, [pc, #220]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db64:	4933      	ldr	r1, [pc, #204]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db66:	4313      	orrs	r3, r2
 800db68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00a      	beq.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800db78:	4b2e      	ldr	r3, [pc, #184]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db86:	492b      	ldr	r1, [pc, #172]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db88:	4313      	orrs	r3, r2
 800db8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db96:	2b00      	cmp	r3, #0
 800db98:	d011      	beq.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800db9a:	4b26      	ldr	r3, [pc, #152]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dba0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dba8:	4922      	ldr	r1, [pc, #136]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dbb8:	d101      	bne.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f003 0308 	and.w	r3, r3, #8
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00a      	beq.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dbda:	4b16      	ldr	r3, [pc, #88]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dbdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbe0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbe8:	4912      	ldr	r1, [pc, #72]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dbea:	4313      	orrs	r3, r2
 800dbec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00b      	beq.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dbfc:	4b0d      	ldr	r3, [pc, #52]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dbfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc0c:	4909      	ldr	r1, [pc, #36]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d006      	beq.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f000 80d9 	beq.w	800ddda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800dc28:	4b02      	ldr	r3, [pc, #8]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a01      	ldr	r2, [pc, #4]	; (800dc34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dc32:	e001      	b.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800dc34:	40023800 	.word	0x40023800
 800dc38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc3a:	f7f9 f9d3 	bl	8006fe4 <HAL_GetTick>
 800dc3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dc40:	e008      	b.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dc42:	f7f9 f9cf 	bl	8006fe4 <HAL_GetTick>
 800dc46:	4602      	mov	r2, r0
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	1ad3      	subs	r3, r2, r3
 800dc4c:	2b64      	cmp	r3, #100	; 0x64
 800dc4e:	d901      	bls.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dc50:	2303      	movs	r3, #3
 800dc52:	e194      	b.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dc54:	4b6c      	ldr	r3, [pc, #432]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1f0      	bne.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 0301 	and.w	r3, r3, #1
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d021      	beq.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d11d      	bne.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dc74:	4b64      	ldr	r3, [pc, #400]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dc76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc7a:	0c1b      	lsrs	r3, r3, #16
 800dc7c:	f003 0303 	and.w	r3, r3, #3
 800dc80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dc82:	4b61      	ldr	r3, [pc, #388]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dc84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc88:	0e1b      	lsrs	r3, r3, #24
 800dc8a:	f003 030f 	and.w	r3, r3, #15
 800dc8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	019a      	lsls	r2, r3, #6
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	041b      	lsls	r3, r3, #16
 800dc9a:	431a      	orrs	r2, r3
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	061b      	lsls	r3, r3, #24
 800dca0:	431a      	orrs	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	071b      	lsls	r3, r3, #28
 800dca8:	4957      	ldr	r1, [pc, #348]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d004      	beq.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcc4:	d00a      	beq.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d02e      	beq.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dcda:	d129      	bne.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dcdc:	4b4a      	ldr	r3, [pc, #296]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dcde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dce2:	0c1b      	lsrs	r3, r3, #16
 800dce4:	f003 0303 	and.w	r3, r3, #3
 800dce8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dcea:	4b47      	ldr	r3, [pc, #284]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dcec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcf0:	0f1b      	lsrs	r3, r3, #28
 800dcf2:	f003 0307 	and.w	r3, r3, #7
 800dcf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	019a      	lsls	r2, r3, #6
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	041b      	lsls	r3, r3, #16
 800dd02:	431a      	orrs	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	061b      	lsls	r3, r3, #24
 800dd0a:	431a      	orrs	r2, r3
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	071b      	lsls	r3, r3, #28
 800dd10:	493d      	ldr	r1, [pc, #244]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd12:	4313      	orrs	r3, r2
 800dd14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800dd18:	4b3b      	ldr	r3, [pc, #236]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd1e:	f023 021f 	bic.w	r2, r3, #31
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd26:	3b01      	subs	r3, #1
 800dd28:	4937      	ldr	r1, [pc, #220]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d01d      	beq.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dd3c:	4b32      	ldr	r3, [pc, #200]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd42:	0e1b      	lsrs	r3, r3, #24
 800dd44:	f003 030f 	and.w	r3, r3, #15
 800dd48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dd4a:	4b2f      	ldr	r3, [pc, #188]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd50:	0f1b      	lsrs	r3, r3, #28
 800dd52:	f003 0307 	and.w	r3, r3, #7
 800dd56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	019a      	lsls	r2, r3, #6
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	041b      	lsls	r3, r3, #16
 800dd64:	431a      	orrs	r2, r3
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	061b      	lsls	r3, r3, #24
 800dd6a:	431a      	orrs	r2, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	071b      	lsls	r3, r3, #28
 800dd70:	4925      	ldr	r1, [pc, #148]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd72:	4313      	orrs	r3, r2
 800dd74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d011      	beq.n	800dda8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	019a      	lsls	r2, r3, #6
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	691b      	ldr	r3, [r3, #16]
 800dd8e:	041b      	lsls	r3, r3, #16
 800dd90:	431a      	orrs	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	061b      	lsls	r3, r3, #24
 800dd98:	431a      	orrs	r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	071b      	lsls	r3, r3, #28
 800dda0:	4919      	ldr	r1, [pc, #100]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dda2:	4313      	orrs	r3, r2
 800dda4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800dda8:	4b17      	ldr	r3, [pc, #92]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a16      	ldr	r2, [pc, #88]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ddae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ddb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddb4:	f7f9 f916 	bl	8006fe4 <HAL_GetTick>
 800ddb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ddba:	e008      	b.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ddbc:	f7f9 f912 	bl	8006fe4 <HAL_GetTick>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	2b64      	cmp	r3, #100	; 0x64
 800ddc8:	d901      	bls.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	e0d7      	b.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ddce:	4b0e      	ldr	r3, [pc, #56]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0f0      	beq.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	f040 80cd 	bne.w	800df7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800dde2:	4b09      	ldr	r3, [pc, #36]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a08      	ldr	r2, [pc, #32]	; (800de08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dde8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ddec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddee:	f7f9 f8f9 	bl	8006fe4 <HAL_GetTick>
 800ddf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ddf4:	e00a      	b.n	800de0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ddf6:	f7f9 f8f5 	bl	8006fe4 <HAL_GetTick>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	2b64      	cmp	r3, #100	; 0x64
 800de02:	d903      	bls.n	800de0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800de04:	2303      	movs	r3, #3
 800de06:	e0ba      	b.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800de08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800de0c:	4b5e      	ldr	r3, [pc, #376]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de18:	d0ed      	beq.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800de22:	2b00      	cmp	r3, #0
 800de24:	d003      	beq.n	800de2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d009      	beq.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800de36:	2b00      	cmp	r3, #0
 800de38:	d02e      	beq.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d12a      	bne.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800de42:	4b51      	ldr	r3, [pc, #324]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de48:	0c1b      	lsrs	r3, r3, #16
 800de4a:	f003 0303 	and.w	r3, r3, #3
 800de4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800de50:	4b4d      	ldr	r3, [pc, #308]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de56:	0f1b      	lsrs	r3, r3, #28
 800de58:	f003 0307 	and.w	r3, r3, #7
 800de5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	695b      	ldr	r3, [r3, #20]
 800de62:	019a      	lsls	r2, r3, #6
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	041b      	lsls	r3, r3, #16
 800de68:	431a      	orrs	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	061b      	lsls	r3, r3, #24
 800de70:	431a      	orrs	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	071b      	lsls	r3, r3, #28
 800de76:	4944      	ldr	r1, [pc, #272]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de78:	4313      	orrs	r3, r2
 800de7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800de7e:	4b42      	ldr	r3, [pc, #264]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de8c:	3b01      	subs	r3, #1
 800de8e:	021b      	lsls	r3, r3, #8
 800de90:	493d      	ldr	r1, [pc, #244]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de92:	4313      	orrs	r3, r2
 800de94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d022      	beq.n	800deea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800deac:	d11d      	bne.n	800deea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800deae:	4b36      	ldr	r3, [pc, #216]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800deb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800deb4:	0e1b      	lsrs	r3, r3, #24
 800deb6:	f003 030f 	and.w	r3, r3, #15
 800deba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800debc:	4b32      	ldr	r3, [pc, #200]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800debe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dec2:	0f1b      	lsrs	r3, r3, #28
 800dec4:	f003 0307 	and.w	r3, r3, #7
 800dec8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	695b      	ldr	r3, [r3, #20]
 800dece:	019a      	lsls	r2, r3, #6
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a1b      	ldr	r3, [r3, #32]
 800ded4:	041b      	lsls	r3, r3, #16
 800ded6:	431a      	orrs	r2, r3
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	061b      	lsls	r3, r3, #24
 800dedc:	431a      	orrs	r2, r3
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	071b      	lsls	r3, r3, #28
 800dee2:	4929      	ldr	r1, [pc, #164]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800dee4:	4313      	orrs	r3, r2
 800dee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 0308 	and.w	r3, r3, #8
 800def2:	2b00      	cmp	r3, #0
 800def4:	d028      	beq.n	800df48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800def6:	4b24      	ldr	r3, [pc, #144]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800def8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800defc:	0e1b      	lsrs	r3, r3, #24
 800defe:	f003 030f 	and.w	r3, r3, #15
 800df02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800df04:	4b20      	ldr	r3, [pc, #128]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df0a:	0c1b      	lsrs	r3, r3, #16
 800df0c:	f003 0303 	and.w	r3, r3, #3
 800df10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	019a      	lsls	r2, r3, #6
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	041b      	lsls	r3, r3, #16
 800df1c:	431a      	orrs	r2, r3
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	061b      	lsls	r3, r3, #24
 800df22:	431a      	orrs	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	69db      	ldr	r3, [r3, #28]
 800df28:	071b      	lsls	r3, r3, #28
 800df2a:	4917      	ldr	r1, [pc, #92]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df2c:	4313      	orrs	r3, r2
 800df2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800df32:	4b15      	ldr	r3, [pc, #84]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df40:	4911      	ldr	r1, [pc, #68]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df42:	4313      	orrs	r3, r2
 800df44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800df48:	4b0f      	ldr	r3, [pc, #60]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a0e      	ldr	r2, [pc, #56]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df54:	f7f9 f846 	bl	8006fe4 <HAL_GetTick>
 800df58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800df5a:	e008      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800df5c:	f7f9 f842 	bl	8006fe4 <HAL_GetTick>
 800df60:	4602      	mov	r2, r0
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	2b64      	cmp	r3, #100	; 0x64
 800df68:	d901      	bls.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800df6a:	2303      	movs	r3, #3
 800df6c:	e007      	b.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800df6e:	4b06      	ldr	r3, [pc, #24]	; (800df88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df7a:	d1ef      	bne.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3720      	adds	r7, #32
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	40023800 	.word	0x40023800

0800df8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b087      	sub	sp, #28
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800df94:	2300      	movs	r3, #0
 800df96:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800df9c:	2300      	movs	r3, #0
 800df9e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800dfaa:	f040 808c 	bne.w	800e0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800dfae:	4b95      	ldr	r3, [pc, #596]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dfb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfb4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800dfbc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dfc4:	d07c      	beq.n	800e0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dfcc:	d87d      	bhi.n	800e0ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d004      	beq.n	800dfde <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfda:	d039      	beq.n	800e050 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800dfdc:	e075      	b.n	800e0ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800dfde:	4b89      	ldr	r3, [pc, #548]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d108      	bne.n	800dffc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800dfea:	4b86      	ldr	r3, [pc, #536]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dff2:	4a85      	ldr	r2, [pc, #532]	; (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800dff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff8:	613b      	str	r3, [r7, #16]
 800dffa:	e007      	b.n	800e00c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800dffc:	4b81      	ldr	r3, [pc, #516]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e004:	4a81      	ldr	r2, [pc, #516]	; (800e20c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e006:	fbb2 f3f3 	udiv	r3, r2, r3
 800e00a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800e00c:	4b7d      	ldr	r3, [pc, #500]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e012:	0e1b      	lsrs	r3, r3, #24
 800e014:	f003 030f 	and.w	r3, r3, #15
 800e018:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800e01a:	4b7a      	ldr	r3, [pc, #488]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e020:	099b      	lsrs	r3, r3, #6
 800e022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	fb03 f202 	mul.w	r2, r3, r2
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e032:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800e034:	4b73      	ldr	r3, [pc, #460]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e03a:	0a1b      	lsrs	r3, r3, #8
 800e03c:	f003 031f 	and.w	r3, r3, #31
 800e040:	3301      	adds	r3, #1
 800e042:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e044:	697a      	ldr	r2, [r7, #20]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	fbb2 f3f3 	udiv	r3, r2, r3
 800e04c:	617b      	str	r3, [r7, #20]
        break;
 800e04e:	e03d      	b.n	800e0cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e050:	4b6c      	ldr	r3, [pc, #432]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d108      	bne.n	800e06e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e05c:	4b69      	ldr	r3, [pc, #420]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e064:	4a68      	ldr	r2, [pc, #416]	; (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e066:	fbb2 f3f3 	udiv	r3, r2, r3
 800e06a:	613b      	str	r3, [r7, #16]
 800e06c:	e007      	b.n	800e07e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e06e:	4b65      	ldr	r3, [pc, #404]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e076:	4a65      	ldr	r2, [pc, #404]	; (800e20c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e078:	fbb2 f3f3 	udiv	r3, r2, r3
 800e07c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800e07e:	4b61      	ldr	r3, [pc, #388]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e084:	0e1b      	lsrs	r3, r3, #24
 800e086:	f003 030f 	and.w	r3, r3, #15
 800e08a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800e08c:	4b5d      	ldr	r3, [pc, #372]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e08e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e092:	099b      	lsrs	r3, r3, #6
 800e094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e098:	693a      	ldr	r2, [r7, #16]
 800e09a:	fb03 f202 	mul.w	r2, r3, r2
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0a4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800e0a6:	4b57      	ldr	r3, [pc, #348]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0ac:	f003 031f 	and.w	r3, r3, #31
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0bc:	617b      	str	r3, [r7, #20]
        break;
 800e0be:	e005      	b.n	800e0cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e0c0:	4b53      	ldr	r3, [pc, #332]	; (800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e0c2:	617b      	str	r3, [r7, #20]
        break;
 800e0c4:	e002      	b.n	800e0cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800e0c6:	bf00      	nop
 800e0c8:	e000      	b.n	800e0cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800e0ca:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0d2:	f040 808c 	bne.w	800e1ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800e0d6:	4b4b      	ldr	r3, [pc, #300]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0dc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800e0e4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e0ec:	d07c      	beq.n	800e1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e0f4:	d87d      	bhi.n	800e1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d004      	beq.n	800e106 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e102:	d039      	beq.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800e104:	e075      	b.n	800e1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e106:	4b3f      	ldr	r3, [pc, #252]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d108      	bne.n	800e124 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e112:	4b3c      	ldr	r3, [pc, #240]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e11a:	4a3b      	ldr	r2, [pc, #236]	; (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e11c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e120:	613b      	str	r3, [r7, #16]
 800e122:	e007      	b.n	800e134 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e124:	4b37      	ldr	r3, [pc, #220]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e12c:	4a37      	ldr	r2, [pc, #220]	; (800e20c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e132:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800e134:	4b33      	ldr	r3, [pc, #204]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e13a:	0e1b      	lsrs	r3, r3, #24
 800e13c:	f003 030f 	and.w	r3, r3, #15
 800e140:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800e142:	4b30      	ldr	r3, [pc, #192]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e148:	099b      	lsrs	r3, r3, #6
 800e14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e14e:	693a      	ldr	r2, [r7, #16]
 800e150:	fb03 f202 	mul.w	r2, r3, r2
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	fbb2 f3f3 	udiv	r3, r2, r3
 800e15a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800e15c:	4b29      	ldr	r3, [pc, #164]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e162:	0a1b      	lsrs	r3, r3, #8
 800e164:	f003 031f 	and.w	r3, r3, #31
 800e168:	3301      	adds	r3, #1
 800e16a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e16c:	697a      	ldr	r2, [r7, #20]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	fbb2 f3f3 	udiv	r3, r2, r3
 800e174:	617b      	str	r3, [r7, #20]
        break;
 800e176:	e03d      	b.n	800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e178:	4b22      	ldr	r3, [pc, #136]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e180:	2b00      	cmp	r3, #0
 800e182:	d108      	bne.n	800e196 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e184:	4b1f      	ldr	r3, [pc, #124]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e18c:	4a1e      	ldr	r2, [pc, #120]	; (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e192:	613b      	str	r3, [r7, #16]
 800e194:	e007      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e196:	4b1b      	ldr	r3, [pc, #108]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e19e:	4a1b      	ldr	r2, [pc, #108]	; (800e20c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e1a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800e1a6:	4b17      	ldr	r3, [pc, #92]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ac:	0e1b      	lsrs	r3, r3, #24
 800e1ae:	f003 030f 	and.w	r3, r3, #15
 800e1b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800e1b4:	4b13      	ldr	r3, [pc, #76]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e1b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ba:	099b      	lsrs	r3, r3, #6
 800e1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	fb03 f202 	mul.w	r2, r3, r2
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1cc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800e1ce:	4b0d      	ldr	r3, [pc, #52]	; (800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e1d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1d4:	f003 031f 	and.w	r3, r3, #31
 800e1d8:	3301      	adds	r3, #1
 800e1da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1e4:	617b      	str	r3, [r7, #20]
        break;
 800e1e6:	e005      	b.n	800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e1e8:	4b09      	ldr	r3, [pc, #36]	; (800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e1ea:	617b      	str	r3, [r7, #20]
        break;
 800e1ec:	e002      	b.n	800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800e1ee:	bf00      	nop
 800e1f0:	e000      	b.n	800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800e1f2:	bf00      	nop

  return frequency;
 800e1f4:	697b      	ldr	r3, [r7, #20]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	371c      	adds	r7, #28
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	40023800 	.word	0x40023800
 800e208:	00f42400 	.word	0x00f42400
 800e20c:	017d7840 	.word	0x017d7840
 800e210:	00bb8000 	.word	0x00bb8000

0800e214 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d101      	bne.n	800e226 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	e081      	b.n	800e32a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	7f5b      	ldrb	r3, [r3, #29]
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d105      	bne.n	800e23c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7f5 fa3e 	bl	80036b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2202      	movs	r2, #2
 800e240:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	22ca      	movs	r2, #202	; 0xca
 800e248:	625a      	str	r2, [r3, #36]	; 0x24
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2253      	movs	r2, #83	; 0x53
 800e250:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 fb16 	bl	800e884 <RTC_EnterInitMode>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d008      	beq.n	800e270 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	22ff      	movs	r2, #255	; 0xff
 800e264:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2204      	movs	r2, #4
 800e26a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e05c      	b.n	800e32a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6899      	ldr	r1, [r3, #8]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	4b2e      	ldr	r3, [pc, #184]	; (800e334 <HAL_RTC_Init+0x120>)
 800e27c:	400b      	ands	r3, r1
 800e27e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	6899      	ldr	r1, [r3, #8]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	685a      	ldr	r2, [r3, #4]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	431a      	orrs	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	695b      	ldr	r3, [r3, #20]
 800e294:	431a      	orrs	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	430a      	orrs	r2, r1
 800e29c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	68d2      	ldr	r2, [r2, #12]
 800e2a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	6919      	ldr	r1, [r3, #16]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	041a      	lsls	r2, r3, #16
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	430a      	orrs	r2, r1
 800e2ba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	68da      	ldr	r2, [r3, #12]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2ca:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	f003 0320 	and.w	r3, r3, #32
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10e      	bne.n	800e2f8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 faaa 	bl	800e834 <HAL_RTC_WaitForSynchro>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d008      	beq.n	800e2f8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	22ff      	movs	r2, #255	; 0xff
 800e2ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2204      	movs	r2, #4
 800e2f2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e018      	b.n	800e32a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f022 0208 	bic.w	r2, r2, #8
 800e306:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	699a      	ldr	r2, [r3, #24]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	430a      	orrs	r2, r1
 800e318:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	22ff      	movs	r2, #255	; 0xff
 800e320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2201      	movs	r2, #1
 800e326:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800e328:	2300      	movs	r3, #0
  }
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3708      	adds	r7, #8
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	ff8fffbf 	.word	0xff8fffbf

0800e338 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e338:	b590      	push	{r4, r7, lr}
 800e33a:	b087      	sub	sp, #28
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800e344:	2300      	movs	r3, #0
 800e346:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	7f1b      	ldrb	r3, [r3, #28]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d101      	bne.n	800e354 <HAL_RTC_SetTime+0x1c>
 800e350:	2302      	movs	r3, #2
 800e352:	e0a8      	b.n	800e4a6 <HAL_RTC_SetTime+0x16e>
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2201      	movs	r2, #1
 800e358:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2202      	movs	r2, #2
 800e35e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d126      	bne.n	800e3b4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e370:	2b00      	cmp	r3, #0
 800e372:	d102      	bne.n	800e37a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	2200      	movs	r2, #0
 800e378:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	4618      	mov	r0, r3
 800e380:	f000 faac 	bl	800e8dc <RTC_ByteToBcd2>
 800e384:	4603      	mov	r3, r0
 800e386:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	785b      	ldrb	r3, [r3, #1]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 faa5 	bl	800e8dc <RTC_ByteToBcd2>
 800e392:	4603      	mov	r3, r0
 800e394:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800e396:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	789b      	ldrb	r3, [r3, #2]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f000 fa9d 	bl	800e8dc <RTC_ByteToBcd2>
 800e3a2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800e3a4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	7b1b      	ldrb	r3, [r3, #12]
 800e3ac:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	617b      	str	r3, [r7, #20]
 800e3b2:	e018      	b.n	800e3e6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d102      	bne.n	800e3c8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	785b      	ldrb	r3, [r3, #1]
 800e3d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800e3d4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800e3d6:	68ba      	ldr	r2, [r7, #8]
 800e3d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800e3da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	7b1b      	ldrb	r3, [r3, #12]
 800e3e0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	22ca      	movs	r2, #202	; 0xca
 800e3ec:	625a      	str	r2, [r3, #36]	; 0x24
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2253      	movs	r2, #83	; 0x53
 800e3f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 fa44 	bl	800e884 <RTC_EnterInitMode>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00b      	beq.n	800e41a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	22ff      	movs	r2, #255	; 0xff
 800e408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2204      	movs	r2, #4
 800e40e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e045      	b.n	800e4a6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	6979      	ldr	r1, [r7, #20]
 800e420:	4b23      	ldr	r3, [pc, #140]	; (800e4b0 <HAL_RTC_SetTime+0x178>)
 800e422:	400b      	ands	r3, r1
 800e424:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	689a      	ldr	r2, [r3, #8]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e434:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6899      	ldr	r1, [r3, #8]
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	691a      	ldr	r2, [r3, #16]
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	695b      	ldr	r3, [r3, #20]
 800e444:	431a      	orrs	r2, r3
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	430a      	orrs	r2, r1
 800e44c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	68da      	ldr	r2, [r3, #12]
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e45c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	f003 0320 	and.w	r3, r3, #32
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d111      	bne.n	800e490 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f000 f9e1 	bl	800e834 <HAL_RTC_WaitForSynchro>
 800e472:	4603      	mov	r3, r0
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00b      	beq.n	800e490 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	22ff      	movs	r2, #255	; 0xff
 800e47e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2204      	movs	r2, #4
 800e484:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800e48c:	2301      	movs	r3, #1
 800e48e:	e00a      	b.n	800e4a6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	22ff      	movs	r2, #255	; 0xff
 800e496:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2201      	movs	r2, #1
 800e49c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800e4a4:	2300      	movs	r3, #0
  }
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	371c      	adds	r7, #28
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd90      	pop	{r4, r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	007f7f7f 	.word	0x007f7f7f

0800e4b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e4b4:	b590      	push	{r4, r7, lr}
 800e4b6:	b087      	sub	sp, #28
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	7f1b      	ldrb	r3, [r3, #28]
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d101      	bne.n	800e4d0 <HAL_RTC_SetDate+0x1c>
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	e092      	b.n	800e5f6 <HAL_RTC_SetDate+0x142>
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2202      	movs	r2, #2
 800e4da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d10e      	bne.n	800e500 <HAL_RTC_SetDate+0x4c>
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	785b      	ldrb	r3, [r3, #1]
 800e4e6:	f003 0310 	and.w	r3, r3, #16
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d008      	beq.n	800e500 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	785b      	ldrb	r3, [r3, #1]
 800e4f2:	f023 0310 	bic.w	r3, r3, #16
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	330a      	adds	r3, #10
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d11c      	bne.n	800e540 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	78db      	ldrb	r3, [r3, #3]
 800e50a:	4618      	mov	r0, r3
 800e50c:	f000 f9e6 	bl	800e8dc <RTC_ByteToBcd2>
 800e510:	4603      	mov	r3, r0
 800e512:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	785b      	ldrb	r3, [r3, #1]
 800e518:	4618      	mov	r0, r3
 800e51a:	f000 f9df 	bl	800e8dc <RTC_ByteToBcd2>
 800e51e:	4603      	mov	r3, r0
 800e520:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800e522:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	789b      	ldrb	r3, [r3, #2]
 800e528:	4618      	mov	r0, r3
 800e52a:	f000 f9d7 	bl	800e8dc <RTC_ByteToBcd2>
 800e52e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800e530:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800e53a:	4313      	orrs	r3, r2
 800e53c:	617b      	str	r3, [r7, #20]
 800e53e:	e00e      	b.n	800e55e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	78db      	ldrb	r3, [r3, #3]
 800e544:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	785b      	ldrb	r3, [r3, #1]
 800e54a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800e54c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800e54e:	68ba      	ldr	r2, [r7, #8]
 800e550:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800e552:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800e55a:	4313      	orrs	r3, r2
 800e55c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	22ca      	movs	r2, #202	; 0xca
 800e564:	625a      	str	r2, [r3, #36]	; 0x24
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2253      	movs	r2, #83	; 0x53
 800e56c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f000 f988 	bl	800e884 <RTC_EnterInitMode>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00b      	beq.n	800e592 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	22ff      	movs	r2, #255	; 0xff
 800e580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2204      	movs	r2, #4
 800e586:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2200      	movs	r2, #0
 800e58c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800e58e:	2301      	movs	r3, #1
 800e590:	e031      	b.n	800e5f6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	6979      	ldr	r1, [r7, #20]
 800e598:	4b19      	ldr	r3, [pc, #100]	; (800e600 <HAL_RTC_SetDate+0x14c>)
 800e59a:	400b      	ands	r3, r1
 800e59c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	68da      	ldr	r2, [r3, #12]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e5ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	f003 0320 	and.w	r3, r3, #32
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d111      	bne.n	800e5e0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f000 f939 	bl	800e834 <HAL_RTC_WaitForSynchro>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	22ff      	movs	r2, #255	; 0xff
 800e5ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2204      	movs	r2, #4
 800e5d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	e00a      	b.n	800e5f6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	22ff      	movs	r2, #255	; 0xff
 800e5e6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800e5f4:	2300      	movs	r3, #0
  }
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	371c      	adds	r7, #28
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd90      	pop	{r4, r7, pc}
 800e5fe:	bf00      	nop
 800e600:	00ffff3f 	.word	0x00ffff3f

0800e604 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800e604:	b590      	push	{r4, r7, lr}
 800e606:	b089      	sub	sp, #36	; 0x24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800e610:	2300      	movs	r3, #0
 800e612:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800e614:	2300      	movs	r3, #0
 800e616:	61fb      	str	r3, [r7, #28]
 800e618:	2300      	movs	r3, #0
 800e61a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	7f1b      	ldrb	r3, [r3, #28]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d101      	bne.n	800e628 <HAL_RTC_SetAlarm+0x24>
 800e624:	2302      	movs	r3, #2
 800e626:	e101      	b.n	800e82c <HAL_RTC_SetAlarm+0x228>
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2201      	movs	r2, #1
 800e62c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2202      	movs	r2, #2
 800e632:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d137      	bne.n	800e6aa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e644:	2b00      	cmp	r3, #0
 800e646:	d102      	bne.n	800e64e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	2200      	movs	r2, #0
 800e64c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	4618      	mov	r0, r3
 800e654:	f000 f942 	bl	800e8dc <RTC_ByteToBcd2>
 800e658:	4603      	mov	r3, r0
 800e65a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	785b      	ldrb	r3, [r3, #1]
 800e660:	4618      	mov	r0, r3
 800e662:	f000 f93b 	bl	800e8dc <RTC_ByteToBcd2>
 800e666:	4603      	mov	r3, r0
 800e668:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800e66a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	789b      	ldrb	r3, [r3, #2]
 800e670:	4618      	mov	r0, r3
 800e672:	f000 f933 	bl	800e8dc <RTC_ByteToBcd2>
 800e676:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800e678:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	7b1b      	ldrb	r3, [r3, #12]
 800e680:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800e682:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e68c:	4618      	mov	r0, r3
 800e68e:	f000 f925 	bl	800e8dc <RTC_ByteToBcd2>
 800e692:	4603      	mov	r3, r0
 800e694:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e696:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800e69e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	61fb      	str	r3, [r7, #28]
 800e6a8:	e023      	b.n	800e6f2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	785b      	ldrb	r3, [r3, #1]
 800e6c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800e6ca:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800e6d0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	7b1b      	ldrb	r3, [r3, #12]
 800e6d6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800e6d8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e6e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e6e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800e6e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	69db      	ldr	r3, [r3, #28]
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	22ca      	movs	r2, #202	; 0xca
 800e704:	625a      	str	r2, [r3, #36]	; 0x24
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2253      	movs	r2, #83	; 0x53
 800e70c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e716:	d13f      	bne.n	800e798 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	689a      	ldr	r2, [r3, #8]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e726:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	689a      	ldr	r2, [r3, #8]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e736:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e738:	f7f8 fc54 	bl	8006fe4 <HAL_GetTick>
 800e73c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800e73e:	e013      	b.n	800e768 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e740:	f7f8 fc50 	bl	8006fe4 <HAL_GetTick>
 800e744:	4602      	mov	r2, r0
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e74e:	d90b      	bls.n	800e768 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	22ff      	movs	r2, #255	; 0xff
 800e756:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2203      	movs	r2, #3
 800e75c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e764:	2303      	movs	r3, #3
 800e766:	e061      	b.n	800e82c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	f003 0301 	and.w	r3, r3, #1
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0e4      	beq.n	800e740 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	69fa      	ldr	r2, [r7, #28]
 800e77c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	697a      	ldr	r2, [r7, #20]
 800e784:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	689a      	ldr	r2, [r3, #8]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e794:	609a      	str	r2, [r3, #8]
 800e796:	e03e      	b.n	800e816 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	689a      	ldr	r2, [r3, #8]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e7a6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	689a      	ldr	r2, [r3, #8]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e7b6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e7b8:	f7f8 fc14 	bl	8006fe4 <HAL_GetTick>
 800e7bc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e7be:	e013      	b.n	800e7e8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e7c0:	f7f8 fc10 	bl	8006fe4 <HAL_GetTick>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7ce:	d90b      	bls.n	800e7e8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	22ff      	movs	r2, #255	; 0xff
 800e7d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2203      	movs	r2, #3
 800e7dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e7e4:	2303      	movs	r3, #3
 800e7e6:	e021      	b.n	800e82c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	f003 0302 	and.w	r3, r3, #2
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d0e4      	beq.n	800e7c0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	69fa      	ldr	r2, [r7, #28]
 800e7fc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	697a      	ldr	r2, [r7, #20]
 800e804:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	689a      	ldr	r2, [r3, #8]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e814:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	22ff      	movs	r2, #255	; 0xff
 800e81c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2201      	movs	r2, #1
 800e822:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3724      	adds	r7, #36	; 0x24
 800e830:	46bd      	mov	sp, r7
 800e832:	bd90      	pop	{r4, r7, pc}

0800e834 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e83c:	2300      	movs	r3, #0
 800e83e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	68da      	ldr	r2, [r3, #12]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e84e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e850:	f7f8 fbc8 	bl	8006fe4 <HAL_GetTick>
 800e854:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e856:	e009      	b.n	800e86c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e858:	f7f8 fbc4 	bl	8006fe4 <HAL_GetTick>
 800e85c:	4602      	mov	r2, r0
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e866:	d901      	bls.n	800e86c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800e868:	2303      	movs	r3, #3
 800e86a:	e007      	b.n	800e87c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	f003 0320 	and.w	r3, r3, #32
 800e876:	2b00      	cmp	r3, #0
 800e878:	d0ee      	beq.n	800e858 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e88c:	2300      	movs	r3, #0
 800e88e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d119      	bne.n	800e8d2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e8a8:	f7f8 fb9c 	bl	8006fe4 <HAL_GetTick>
 800e8ac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e8ae:	e009      	b.n	800e8c4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e8b0:	f7f8 fb98 	bl	8006fe4 <HAL_GetTick>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e8be:	d901      	bls.n	800e8c4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	e007      	b.n	800e8d4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d0ee      	beq.n	800e8b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3710      	adds	r7, #16
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b085      	sub	sp, #20
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800e8ea:	e005      	b.n	800e8f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800e8f2:	79fb      	ldrb	r3, [r7, #7]
 800e8f4:	3b0a      	subs	r3, #10
 800e8f6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	2b09      	cmp	r3, #9
 800e8fc:	d8f6      	bhi.n	800e8ec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	b2db      	uxtb	r3, r3
 800e902:	011b      	lsls	r3, r3, #4
 800e904:	b2da      	uxtb	r2, r3
 800e906:	79fb      	ldrb	r3, [r7, #7]
 800e908:	4313      	orrs	r3, r2
 800e90a:	b2db      	uxtb	r3, r3
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800e918:	b480      	push	{r7}
 800e91a:	b087      	sub	sp, #28
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800e924:	2300      	movs	r3, #0
 800e926:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	7f1b      	ldrb	r3, [r3, #28]
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d101      	bne.n	800e934 <HAL_RTCEx_SetTimeStamp+0x1c>
 800e930:	2302      	movs	r3, #2
 800e932:	e03e      	b.n	800e9b2 <HAL_RTCEx_SetTimeStamp+0x9a>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2201      	movs	r2, #1
 800e938:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2202      	movs	r2, #2
 800e93e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	689a      	ldr	r2, [r3, #8]
 800e946:	4b1e      	ldr	r3, [pc, #120]	; (800e9c0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800e948:	4013      	ands	r3, r2
 800e94a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800e94c:	697a      	ldr	r2, [r7, #20]
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	4313      	orrs	r3, r2
 800e952:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	22ca      	movs	r2, #202	; 0xca
 800e95a:	625a      	str	r2, [r3, #36]	; 0x24
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2253      	movs	r2, #83	; 0x53
 800e962:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f022 0206 	bic.w	r2, r2, #6
 800e972:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	430a      	orrs	r2, r1
 800e982:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	689a      	ldr	r2, [r3, #8]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e99a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	22ff      	movs	r2, #255	; 0xff
 800e9a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	371c      	adds	r7, #28
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	fffff7f7 	.word	0xfffff7f7

0800e9c4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b088      	sub	sp, #32
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d101      	bne.n	800e9e2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	e156      	b.n	800ec90 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d106      	bne.n	800e9fc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7f5 f9b0 	bl	8003d5c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2202      	movs	r2, #2
 800ea00:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 facf 	bl	800efa8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	2b02      	cmp	r3, #2
 800ea10:	d00c      	beq.n	800ea2c <HAL_SAI_Init+0x68>
 800ea12:	2b02      	cmp	r3, #2
 800ea14:	d80d      	bhi.n	800ea32 <HAL_SAI_Init+0x6e>
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d002      	beq.n	800ea20 <HAL_SAI_Init+0x5c>
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d003      	beq.n	800ea26 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800ea1e:	e008      	b.n	800ea32 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800ea20:	2300      	movs	r3, #0
 800ea22:	61fb      	str	r3, [r7, #28]
      break;
 800ea24:	e006      	b.n	800ea34 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ea26:	2310      	movs	r3, #16
 800ea28:	61fb      	str	r3, [r7, #28]
      break;
 800ea2a:	e003      	b.n	800ea34 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ea2c:	2320      	movs	r3, #32
 800ea2e:	61fb      	str	r3, [r7, #28]
      break;
 800ea30:	e000      	b.n	800ea34 <HAL_SAI_Init+0x70>
      break;
 800ea32:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	2b03      	cmp	r3, #3
 800ea3a:	d81e      	bhi.n	800ea7a <HAL_SAI_Init+0xb6>
 800ea3c:	a201      	add	r2, pc, #4	; (adr r2, 800ea44 <HAL_SAI_Init+0x80>)
 800ea3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea42:	bf00      	nop
 800ea44:	0800ea55 	.word	0x0800ea55
 800ea48:	0800ea5b 	.word	0x0800ea5b
 800ea4c:	0800ea63 	.word	0x0800ea63
 800ea50:	0800ea6b 	.word	0x0800ea6b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800ea54:	2300      	movs	r3, #0
 800ea56:	617b      	str	r3, [r7, #20]
    }
    break;
 800ea58:	e010      	b.n	800ea7c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ea5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea5e:	617b      	str	r3, [r7, #20]
    }
    break;
 800ea60:	e00c      	b.n	800ea7c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ea62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea66:	617b      	str	r3, [r7, #20]
    }
    break;
 800ea68:	e008      	b.n	800ea7c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ea6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea6e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	f043 0301 	orr.w	r3, r3, #1
 800ea76:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ea78:	e000      	b.n	800ea7c <HAL_SAI_Init+0xb8>
    default:
      break;
 800ea7a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a85      	ldr	r2, [pc, #532]	; (800ec98 <HAL_SAI_Init+0x2d4>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d004      	beq.n	800ea90 <HAL_SAI_Init+0xcc>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4a84      	ldr	r2, [pc, #528]	; (800ec9c <HAL_SAI_Init+0x2d8>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d103      	bne.n	800ea98 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ea90:	4a83      	ldr	r2, [pc, #524]	; (800eca0 <HAL_SAI_Init+0x2dc>)
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	6013      	str	r3, [r2, #0]
 800ea96:	e002      	b.n	800ea9e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ea98:	4a82      	ldr	r2, [pc, #520]	; (800eca4 <HAL_SAI_Init+0x2e0>)
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	69db      	ldr	r3, [r3, #28]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d04c      	beq.n	800eb40 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a7a      	ldr	r2, [pc, #488]	; (800ec98 <HAL_SAI_Init+0x2d4>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d004      	beq.n	800eabe <HAL_SAI_Init+0xfa>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a78      	ldr	r2, [pc, #480]	; (800ec9c <HAL_SAI_Init+0x2d8>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d104      	bne.n	800eac8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800eabe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800eac2:	f7ff fa63 	bl	800df8c <HAL_RCCEx_GetPeriphCLKFreq>
 800eac6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a76      	ldr	r2, [pc, #472]	; (800eca8 <HAL_SAI_Init+0x2e4>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d004      	beq.n	800eadc <HAL_SAI_Init+0x118>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a75      	ldr	r2, [pc, #468]	; (800ecac <HAL_SAI_Init+0x2e8>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d104      	bne.n	800eae6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800eadc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800eae0:	f7ff fa54 	bl	800df8c <HAL_RCCEx_GetPeriphCLKFreq>
 800eae4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800eae6:	693a      	ldr	r2, [r7, #16]
 800eae8:	4613      	mov	r3, r2
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	4413      	add	r3, r2
 800eaee:	005b      	lsls	r3, r3, #1
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	69db      	ldr	r3, [r3, #28]
 800eaf6:	025b      	lsls	r3, r3, #9
 800eaf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eafc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	4a6b      	ldr	r2, [pc, #428]	; (800ecb0 <HAL_SAI_Init+0x2ec>)
 800eb02:	fba2 2303 	umull	r2, r3, r2, r3
 800eb06:	08da      	lsrs	r2, r3, #3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800eb0c:	68f9      	ldr	r1, [r7, #12]
 800eb0e:	4b68      	ldr	r3, [pc, #416]	; (800ecb0 <HAL_SAI_Init+0x2ec>)
 800eb10:	fba3 2301 	umull	r2, r3, r3, r1
 800eb14:	08da      	lsrs	r2, r3, #3
 800eb16:	4613      	mov	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	4413      	add	r3, r2
 800eb1c:	005b      	lsls	r3, r3, #1
 800eb1e:	1aca      	subs	r2, r1, r3
 800eb20:	2a08      	cmp	r2, #8
 800eb22:	d904      	bls.n	800eb2e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6a1b      	ldr	r3, [r3, #32]
 800eb28:	1c5a      	adds	r2, r3, #1
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb32:	2b04      	cmp	r3, #4
 800eb34:	d104      	bne.n	800eb40 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a1b      	ldr	r3, [r3, #32]
 800eb3a:	085a      	lsrs	r2, r3, #1
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d003      	beq.n	800eb50 <HAL_SAI_Init+0x18c>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	d109      	bne.n	800eb64 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d101      	bne.n	800eb5c <HAL_SAI_Init+0x198>
 800eb58:	2300      	movs	r3, #0
 800eb5a:	e001      	b.n	800eb60 <HAL_SAI_Init+0x19c>
 800eb5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb60:	61bb      	str	r3, [r7, #24]
 800eb62:	e008      	b.n	800eb76 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d102      	bne.n	800eb72 <HAL_SAI_Init+0x1ae>
 800eb6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb70:	e000      	b.n	800eb74 <HAL_SAI_Init+0x1b0>
 800eb72:	2300      	movs	r3, #0
 800eb74:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	6819      	ldr	r1, [r3, #0]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	4b4c      	ldr	r3, [pc, #304]	; (800ecb4 <HAL_SAI_Init+0x2f0>)
 800eb82:	400b      	ands	r3, r1
 800eb84:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	6819      	ldr	r1, [r3, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb94:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eb9a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba0:	431a      	orrs	r2, r3
 800eba2:	69bb      	ldr	r3, [r7, #24]
 800eba4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800ebae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ebba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a1b      	ldr	r3, [r3, #32]
 800ebc0:	051b      	lsls	r3, r3, #20
 800ebc2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	430a      	orrs	r2, r1
 800ebca:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6859      	ldr	r1, [r3, #4]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	4b38      	ldr	r3, [pc, #224]	; (800ecb8 <HAL_SAI_Init+0x2f4>)
 800ebd8:	400b      	ands	r3, r1
 800ebda:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	6859      	ldr	r1, [r3, #4]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	699a      	ldr	r2, [r3, #24]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebea:	431a      	orrs	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf0:	431a      	orrs	r2, r3
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	430a      	orrs	r2, r1
 800ebf8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	6899      	ldr	r1, [r3, #8]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	4b2d      	ldr	r3, [pc, #180]	; (800ecbc <HAL_SAI_Init+0x2f8>)
 800ec06:	400b      	ands	r3, r1
 800ec08:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	6899      	ldr	r1, [r3, #8]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec14:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ec1a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800ec20:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800ec26:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ec30:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	430a      	orrs	r2, r1
 800ec38:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	68d9      	ldr	r1, [r3, #12]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ec48:	400b      	ands	r3, r1
 800ec4a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68d9      	ldr	r1, [r3, #12]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec5a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec60:	041b      	lsls	r3, r3, #16
 800ec62:	431a      	orrs	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	021b      	lsls	r3, r3, #8
 800ec6c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	430a      	orrs	r2, r1
 800ec74:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2201      	movs	r2, #1
 800ec82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3720      	adds	r7, #32
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	40015804 	.word	0x40015804
 800ec9c:	40015824 	.word	0x40015824
 800eca0:	40015800 	.word	0x40015800
 800eca4:	40015c00 	.word	0x40015c00
 800eca8:	40015c04 	.word	0x40015c04
 800ecac:	40015c24 	.word	0x40015c24
 800ecb0:	cccccccd 	.word	0xcccccccd
 800ecb4:	ff05c010 	.word	0xff05c010
 800ecb8:	ffff1ff0 	.word	0xffff1ff0
 800ecbc:	fff88000 	.word	0xfff88000

0800ecc0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	4613      	mov	r3, r2
 800eccc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800ecce:	f7f8 f989 	bl	8006fe4 <HAL_GetTick>
 800ecd2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d002      	beq.n	800ece0 <HAL_SAI_Transmit_DMA+0x20>
 800ecda:	88fb      	ldrh	r3, [r7, #6]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d101      	bne.n	800ece4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	e093      	b.n	800ee0c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	f040 808c 	bne.w	800ee0a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d101      	bne.n	800ed00 <HAL_SAI_Transmit_DMA+0x40>
 800ecfc:	2302      	movs	r3, #2
 800ecfe:	e085      	b.n	800ee0c <HAL_SAI_Transmit_DMA+0x14c>
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	88fa      	ldrh	r2, [r7, #6]
 800ed12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	88fa      	ldrh	r2, [r7, #6]
 800ed1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2200      	movs	r2, #0
 800ed22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2212      	movs	r2, #18
 800ed2a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed32:	4a38      	ldr	r2, [pc, #224]	; (800ee14 <HAL_SAI_Transmit_DMA+0x154>)
 800ed34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed3a:	4a37      	ldr	r2, [pc, #220]	; (800ee18 <HAL_SAI_Transmit_DMA+0x158>)
 800ed3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed42:	4a36      	ldr	r2, [pc, #216]	; (800ee1c <HAL_SAI_Transmit_DMA+0x15c>)
 800ed44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed56:	4619      	mov	r1, r3
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	331c      	adds	r3, #28
 800ed5e:	461a      	mov	r2, r3
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ed66:	f7f9 f867 	bl	8007e38 <HAL_DMA_Start_IT>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d005      	beq.n	800ed7c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e047      	b.n	800ee0c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f000 f8dc 	bl	800ef3c <SAI_InterruptFlag>
 800ed84:	4601      	mov	r1, r0
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	691a      	ldr	r2, [r3, #16]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	430a      	orrs	r2, r1
 800ed92:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eda2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800eda4:	e015      	b.n	800edd2 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800eda6:	f7f8 f91d 	bl	8006fe4 <HAL_GetTick>
 800edaa:	4602      	mov	r2, r0
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800edb4:	d90d      	bls.n	800edd2 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800edce:	2303      	movs	r3, #3
 800edd0:	e01c      	b.n	800ee0c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d0e2      	beq.n	800eda6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800edea:	2b00      	cmp	r3, #0
 800edec:	d107      	bne.n	800edfe <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800edfc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ee06:	2300      	movs	r3, #0
 800ee08:	e000      	b.n	800ee0c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800ee0a:	2302      	movs	r3, #2
  }
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3718      	adds	r7, #24
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	0800f079 	.word	0x0800f079
 800ee18:	0800f019 	.word	0x0800f019
 800ee1c:	0800f111 	.word	0x0800f111

0800ee20 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d002      	beq.n	800ee3a <HAL_SAI_Receive_DMA+0x1a>
 800ee34:	88fb      	ldrh	r3, [r7, #6]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d101      	bne.n	800ee3e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e074      	b.n	800ef28 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d16d      	bne.n	800ef26 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d101      	bne.n	800ee58 <HAL_SAI_Receive_DMA+0x38>
 800ee54:	2302      	movs	r3, #2
 800ee56:	e067      	b.n	800ef28 <HAL_SAI_Receive_DMA+0x108>
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	68ba      	ldr	r2, [r7, #8]
 800ee64:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	88fa      	ldrh	r2, [r7, #6]
 800ee6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	88fa      	ldrh	r2, [r7, #6]
 800ee72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2222      	movs	r2, #34	; 0x22
 800ee82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee8a:	4a29      	ldr	r2, [pc, #164]	; (800ef30 <HAL_SAI_Receive_DMA+0x110>)
 800ee8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee92:	4a28      	ldr	r2, [pc, #160]	; (800ef34 <HAL_SAI_Receive_DMA+0x114>)
 800ee94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee9a:	4a27      	ldr	r2, [pc, #156]	; (800ef38 <HAL_SAI_Receive_DMA+0x118>)
 800ee9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eea2:	2200      	movs	r2, #0
 800eea4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	331c      	adds	r3, #28
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eebe:	f7f8 ffbb 	bl	8007e38 <HAL_DMA_Start_IT>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d005      	beq.n	800eed4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800eed0:	2301      	movs	r3, #1
 800eed2:	e029      	b.n	800ef28 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800eed4:	2100      	movs	r1, #0
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f000 f830 	bl	800ef3c <SAI_InterruptFlag>
 800eedc:	4601      	mov	r1, r0
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	691a      	ldr	r2, [r3, #16]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	430a      	orrs	r2, r1
 800eeea:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eefa:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d107      	bne.n	800ef1a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ef18:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ef22:	2300      	movs	r3, #0
 800ef24:	e000      	b.n	800ef28 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800ef26:	2302      	movs	r3, #2
  }
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3710      	adds	r7, #16
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	0800f0f5 	.word	0x0800f0f5
 800ef34:	0800f095 	.word	0x0800f095
 800ef38:	0800f111 	.word	0x0800f111

0800ef3c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ef46:	2301      	movs	r3, #1
 800ef48:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d103      	bne.n	800ef58 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f043 0308 	orr.w	r3, r3, #8
 800ef56:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef5c:	2b08      	cmp	r3, #8
 800ef5e:	d10b      	bne.n	800ef78 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ef64:	2b03      	cmp	r3, #3
 800ef66:	d003      	beq.n	800ef70 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d103      	bne.n	800ef78 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f043 0310 	orr.w	r3, r3, #16
 800ef76:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	2b03      	cmp	r3, #3
 800ef7e:	d003      	beq.n	800ef88 <SAI_InterruptFlag+0x4c>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	d104      	bne.n	800ef92 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ef8e:	60fb      	str	r3, [r7, #12]
 800ef90:	e003      	b.n	800ef9a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f043 0304 	orr.w	r3, r3, #4
 800ef98:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3714      	adds	r7, #20
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800efb0:	4b17      	ldr	r3, [pc, #92]	; (800f010 <SAI_Disable+0x68>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a17      	ldr	r2, [pc, #92]	; (800f014 <SAI_Disable+0x6c>)
 800efb6:	fba2 2303 	umull	r2, r3, r2, r3
 800efba:	0b1b      	lsrs	r3, r3, #12
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800efc0:	2300      	movs	r3, #0
 800efc2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800efd2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	1e5a      	subs	r2, r3, #1
 800efd8:	60fa      	str	r2, [r7, #12]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d10a      	bne.n	800eff4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800efee:	2303      	movs	r3, #3
 800eff0:	72fb      	strb	r3, [r7, #11]
      break;
 800eff2:	e006      	b.n	800f002 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1e8      	bne.n	800efd4 <SAI_Disable+0x2c>

  return status;
 800f002:	7afb      	ldrb	r3, [r7, #11]
}
 800f004:	4618      	mov	r0, r3
 800f006:	3714      	adds	r7, #20
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr
 800f010:	2000002c 	.word	0x2000002c
 800f014:	95cbec1b 	.word	0x95cbec1b

0800f018 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f024:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	69db      	ldr	r3, [r3, #28]
 800f02a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f02e:	d01c      	beq.n	800f06a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f046:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f048:	2100      	movs	r1, #0
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f7ff ff76 	bl	800ef3c <SAI_InterruptFlag>
 800f050:	4603      	mov	r3, r0
 800f052:	43d9      	mvns	r1, r3
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	691a      	ldr	r2, [r3, #16]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	400a      	ands	r2, r1
 800f060:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2201      	movs	r2, #1
 800f066:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f06a:	68f8      	ldr	r0, [r7, #12]
 800f06c:	f7f6 fa80 	bl	8005570 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f070:	bf00      	nop
 800f072:	3710      	adds	r7, #16
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f084:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f7f6 fa7c 	bl	8005584 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f08c:	bf00      	nop
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0a0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	69db      	ldr	r3, [r3, #28]
 800f0a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0aa:	d01c      	beq.n	800f0e6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	681a      	ldr	r2, [r3, #0]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f0ba:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f7ff ff38 	bl	800ef3c <SAI_InterruptFlag>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	43d9      	mvns	r1, r3
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	691a      	ldr	r2, [r3, #16]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	400a      	ands	r2, r1
 800f0dc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	f7f2 f9a2 	bl	8001430 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f0ec:	bf00      	nop
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f100:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	f7f2 f9a4 	bl	8001450 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f108:	bf00      	nop
 800f10a:	3710      	adds	r7, #16
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f11c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f124:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f134:	2b01      	cmp	r3, #1
 800f136:	d004      	beq.n	800f142 <SAI_DMAError+0x32>
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d112      	bne.n	800f168 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f150:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f7ff ff28 	bl	800efa8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2201      	movs	r2, #1
 800f15c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2200      	movs	r2, #0
 800f164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f7f6 fa15 	bl	8005598 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f16e:	bf00      	nop
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f176:	b580      	push	{r7, lr}
 800f178:	b082      	sub	sp, #8
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d101      	bne.n	800f188 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f184:	2301      	movs	r3, #1
 800f186:	e022      	b.n	800f1ce <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f18e:	b2db      	uxtb	r3, r3
 800f190:	2b00      	cmp	r3, #0
 800f192:	d105      	bne.n	800f1a0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7f4 faa6 	bl	80036ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2203      	movs	r2, #3
 800f1a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 f815 	bl	800f1d8 <HAL_SD_InitCard>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d001      	beq.n	800f1b8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	e00a      	b.n	800f1ce <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
	...

0800f1d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f1d8:	b5b0      	push	{r4, r5, r7, lr}
 800f1da:	b08e      	sub	sp, #56	; 0x38
 800f1dc:	af04      	add	r7, sp, #16
 800f1de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800f1f4:	2376      	movs	r3, #118	; 0x76
 800f1f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681d      	ldr	r5, [r3, #0]
 800f1fc:	466c      	mov	r4, sp
 800f1fe:	f107 0314 	add.w	r3, r7, #20
 800f202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f20a:	f107 0308 	add.w	r3, r7, #8
 800f20e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f210:	4628      	mov	r0, r5
 800f212:	f002 fff3 	bl	80121fc <SDMMC_Init>
 800f216:	4603      	mov	r3, r0
 800f218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800f21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f220:	2b00      	cmp	r3, #0
 800f222:	d001      	beq.n	800f228 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800f224:	2301      	movs	r3, #1
 800f226:	e056      	b.n	800f2d6 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	685a      	ldr	r2, [r3, #4]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f236:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f003 f816 	bl	801226e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	685a      	ldr	r2, [r3, #4]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f250:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 fe10 	bl	800fe78 <SD_PowerON>
 800f258:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f25a:	6a3b      	ldr	r3, [r7, #32]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d00b      	beq.n	800f278 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2201      	movs	r2, #1
 800f264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f26c:	6a3b      	ldr	r3, [r7, #32]
 800f26e:	431a      	orrs	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f274:	2301      	movs	r3, #1
 800f276:	e02e      	b.n	800f2d6 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 fd2f 	bl	800fcdc <SD_InitCard>
 800f27e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f280:	6a3b      	ldr	r3, [r7, #32]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00b      	beq.n	800f29e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2201      	movs	r2, #1
 800f28a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f292:	6a3b      	ldr	r3, [r7, #32]
 800f294:	431a      	orrs	r2, r3
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f29a:	2301      	movs	r3, #1
 800f29c:	e01b      	b.n	800f2d6 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f003 f874 	bl	8012394 <SDMMC_CmdBlockLength>
 800f2ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f2ae:	6a3b      	ldr	r3, [r7, #32]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d00f      	beq.n	800f2d4 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	4a09      	ldr	r2, [pc, #36]	; (800f2e0 <HAL_SD_InitCard+0x108>)
 800f2ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2c0:	6a3b      	ldr	r3, [r7, #32]
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e000      	b.n	800f2d6 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3728      	adds	r7, #40	; 0x28
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bdb0      	pop	{r4, r5, r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	004005ff 	.word	0x004005ff

0800f2e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b08c      	sub	sp, #48	; 0x30
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
 800f2f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d107      	bne.n	800f30c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f300:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f308:	2301      	movs	r3, #1
 800f30a:	e0c3      	b.n	800f494 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f312:	b2db      	uxtb	r3, r3
 800f314:	2b01      	cmp	r3, #1
 800f316:	f040 80bc 	bne.w	800f492 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2200      	movs	r2, #0
 800f31e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	441a      	add	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d907      	bls.n	800f33e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f332:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f33a:	2301      	movs	r3, #1
 800f33c:	e0aa      	b.n	800f494 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2203      	movs	r2, #3
 800f342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2200      	movs	r2, #0
 800f34c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800f35c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f362:	4a4e      	ldr	r2, [pc, #312]	; (800f49c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800f364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f36a:	4a4d      	ldr	r2, [pc, #308]	; (800f4a0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800f36c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f372:	2200      	movs	r2, #0
 800f374:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f37a:	2200      	movs	r2, #0
 800f37c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f38e:	689a      	ldr	r2, [r3, #8]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	430a      	orrs	r2, r1
 800f398:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	3380      	adds	r3, #128	; 0x80
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	025b      	lsls	r3, r3, #9
 800f3ac:	089b      	lsrs	r3, r3, #2
 800f3ae:	f7f8 fd43 	bl	8007e38 <HAL_DMA_Start_IT>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d017      	beq.n	800f3e8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800f3c6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4a35      	ldr	r2, [pc, #212]	; (800f4a4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f3ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e055      	b.n	800f494 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f042 0208 	orr.w	r2, r2, #8
 800f3f6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d002      	beq.n	800f406 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800f400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f402:	025b      	lsls	r3, r3, #9
 800f404:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f406:	f04f 33ff 	mov.w	r3, #4294967295
 800f40a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	025b      	lsls	r3, r3, #9
 800f410:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f412:	2390      	movs	r3, #144	; 0x90
 800f414:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f416:	2302      	movs	r3, #2
 800f418:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f41a:	2300      	movs	r3, #0
 800f41c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f41e:	2301      	movs	r3, #1
 800f420:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f107 0210 	add.w	r2, r7, #16
 800f42a:	4611      	mov	r1, r2
 800f42c:	4618      	mov	r0, r3
 800f42e:	f002 ff85 	bl	801233c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	2b01      	cmp	r3, #1
 800f436:	d90a      	bls.n	800f44e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2282      	movs	r2, #130	; 0x82
 800f43c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f444:	4618      	mov	r0, r3
 800f446:	f002 ffe9 	bl	801241c <SDMMC_CmdReadMultiBlock>
 800f44a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f44c:	e009      	b.n	800f462 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2281      	movs	r2, #129	; 0x81
 800f452:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f45a:	4618      	mov	r0, r3
 800f45c:	f002 ffbc 	bl	80123d8 <SDMMC_CmdReadSingleBlock>
 800f460:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800f462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f464:	2b00      	cmp	r3, #0
 800f466:	d012      	beq.n	800f48e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a0d      	ldr	r2, [pc, #52]	; (800f4a4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f46e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f476:	431a      	orrs	r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2200      	movs	r2, #0
 800f488:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e002      	b.n	800f494 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800f48e:	2300      	movs	r3, #0
 800f490:	e000      	b.n	800f494 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800f492:	2302      	movs	r3, #2
  }
}
 800f494:	4618      	mov	r0, r3
 800f496:	3730      	adds	r7, #48	; 0x30
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	0800fbc7 	.word	0x0800fbc7
 800f4a0:	0800fc39 	.word	0x0800fc39
 800f4a4:	004005ff 	.word	0x004005ff

0800f4a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b08c      	sub	sp, #48	; 0x30
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
 800f4b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d107      	bne.n	800f4d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e0c6      	b.n	800f65e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	f040 80bf 	bne.w	800f65c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f4e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	441a      	add	r2, r3
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d907      	bls.n	800f502 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f4fe:	2301      	movs	r3, #1
 800f500:	e0ad      	b.n	800f65e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2203      	movs	r2, #3
 800f506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2200      	movs	r2, #0
 800f510:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f042 021a 	orr.w	r2, r2, #26
 800f520:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f526:	4a50      	ldr	r2, [pc, #320]	; (800f668 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800f528:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f52e:	4a4f      	ldr	r2, [pc, #316]	; (800f66c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800f530:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f536:	2200      	movs	r2, #0
 800f538:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d002      	beq.n	800f548 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800f542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f544:	025b      	lsls	r3, r3, #9
 800f546:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d90a      	bls.n	800f564 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	22a0      	movs	r2, #160	; 0xa0
 800f552:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f55a:	4618      	mov	r0, r3
 800f55c:	f002 ffa2 	bl	80124a4 <SDMMC_CmdWriteMultiBlock>
 800f560:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f562:	e009      	b.n	800f578 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2290      	movs	r2, #144	; 0x90
 800f568:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f570:	4618      	mov	r0, r3
 800f572:	f002 ff75 	bl	8012460 <SDMMC_CmdWriteSingleBlock>
 800f576:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d012      	beq.n	800f5a4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4a3b      	ldr	r2, [pc, #236]	; (800f670 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f584:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58c:	431a      	orrs	r2, r3
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2201      	movs	r2, #1
 800f596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2200      	movs	r2, #0
 800f59e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	e05c      	b.n	800f65e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f042 0208 	orr.w	r2, r2, #8
 800f5b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5b8:	2240      	movs	r2, #64	; 0x40
 800f5ba:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5cc:	689a      	ldr	r2, [r3, #8]
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	430a      	orrs	r2, r1
 800f5d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	3380      	adds	r3, #128	; 0x80
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	025b      	lsls	r3, r3, #9
 800f5ea:	089b      	lsrs	r3, r3, #2
 800f5ec:	f7f8 fc24 	bl	8007e38 <HAL_DMA_Start_IT>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d01a      	beq.n	800f62c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f022 021a 	bic.w	r2, r2, #26
 800f604:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a19      	ldr	r2, [pc, #100]	; (800f670 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f60c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f612:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2201      	movs	r2, #1
 800f61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2200      	movs	r2, #0
 800f626:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f628:	2301      	movs	r3, #1
 800f62a:	e018      	b.n	800f65e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f62c:	f04f 33ff 	mov.w	r3, #4294967295
 800f630:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	025b      	lsls	r3, r3, #9
 800f636:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f638:	2390      	movs	r3, #144	; 0x90
 800f63a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f63c:	2300      	movs	r3, #0
 800f63e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f640:	2300      	movs	r3, #0
 800f642:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f644:	2301      	movs	r3, #1
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f107 0210 	add.w	r2, r7, #16
 800f650:	4611      	mov	r1, r2
 800f652:	4618      	mov	r0, r3
 800f654:	f002 fe72 	bl	801233c <SDMMC_ConfigData>

      return HAL_OK;
 800f658:	2300      	movs	r3, #0
 800f65a:	e000      	b.n	800f65e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800f65c:	2302      	movs	r3, #2
  }
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3730      	adds	r7, #48	; 0x30
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	0800fb9d 	.word	0x0800fb9d
 800f66c:	0800fc39 	.word	0x0800fc39
 800f670:	004005ff 	.word	0x004005ff

0800f674 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800f67c:	bf00      	nop
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f696:	0f9b      	lsrs	r3, r3, #30
 800f698:	b2da      	uxtb	r2, r3
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6a2:	0e9b      	lsrs	r3, r3, #26
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	f003 030f 	and.w	r3, r3, #15
 800f6aa:	b2da      	uxtb	r2, r3
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6b4:	0e1b      	lsrs	r3, r3, #24
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	f003 0303 	and.w	r3, r3, #3
 800f6bc:	b2da      	uxtb	r2, r3
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6c6:	0c1b      	lsrs	r3, r3, #16
 800f6c8:	b2da      	uxtb	r2, r3
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6d2:	0a1b      	lsrs	r3, r3, #8
 800f6d4:	b2da      	uxtb	r2, r3
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6de:	b2da      	uxtb	r2, r3
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6e8:	0d1b      	lsrs	r3, r3, #20
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6f4:	0c1b      	lsrs	r3, r3, #16
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	f003 030f 	and.w	r3, r3, #15
 800f6fc:	b2da      	uxtb	r2, r3
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f706:	0bdb      	lsrs	r3, r3, #15
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	f003 0301 	and.w	r3, r3, #1
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f718:	0b9b      	lsrs	r3, r3, #14
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	f003 0301 	and.w	r3, r3, #1
 800f720:	b2da      	uxtb	r2, r3
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f72a:	0b5b      	lsrs	r3, r3, #13
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	f003 0301 	and.w	r3, r3, #1
 800f732:	b2da      	uxtb	r2, r3
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f73c:	0b1b      	lsrs	r3, r3, #12
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	f003 0301 	and.w	r3, r3, #1
 800f744:	b2da      	uxtb	r2, r3
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	2200      	movs	r2, #0
 800f74e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f754:	2b00      	cmp	r3, #0
 800f756:	d163      	bne.n	800f820 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f75c:	009a      	lsls	r2, r3, #2
 800f75e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f762:	4013      	ands	r3, r2
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800f768:	0f92      	lsrs	r2, r2, #30
 800f76a:	431a      	orrs	r2, r3
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f774:	0edb      	lsrs	r3, r3, #27
 800f776:	b2db      	uxtb	r3, r3
 800f778:	f003 0307 	and.w	r3, r3, #7
 800f77c:	b2da      	uxtb	r2, r3
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f786:	0e1b      	lsrs	r3, r3, #24
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	f003 0307 	and.w	r3, r3, #7
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f798:	0d5b      	lsrs	r3, r3, #21
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	f003 0307 	and.w	r3, r3, #7
 800f7a0:	b2da      	uxtb	r2, r3
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7aa:	0c9b      	lsrs	r3, r3, #18
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	f003 0307 	and.w	r3, r3, #7
 800f7b2:	b2da      	uxtb	r2, r3
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7bc:	0bdb      	lsrs	r3, r3, #15
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	f003 0307 	and.w	r3, r3, #7
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	691b      	ldr	r3, [r3, #16]
 800f7ce:	1c5a      	adds	r2, r3, #1
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	7e1b      	ldrb	r3, [r3, #24]
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	f003 0307 	and.w	r3, r3, #7
 800f7de:	3302      	adds	r3, #2
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f7ea:	fb03 f202 	mul.w	r2, r3, r2
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	7a1b      	ldrb	r3, [r3, #8]
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	f003 030f 	and.w	r3, r3, #15
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	409a      	lsls	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800f80c:	0a52      	lsrs	r2, r2, #9
 800f80e:	fb03 f202 	mul.w	r2, r3, r2
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f81c:	661a      	str	r2, [r3, #96]	; 0x60
 800f81e:	e031      	b.n	800f884 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f824:	2b01      	cmp	r3, #1
 800f826:	d11d      	bne.n	800f864 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f82c:	041b      	lsls	r3, r3, #16
 800f82e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f836:	0c1b      	lsrs	r3, r3, #16
 800f838:	431a      	orrs	r2, r3
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	691b      	ldr	r3, [r3, #16]
 800f842:	3301      	adds	r3, #1
 800f844:	029a      	lsls	r2, r3, #10
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f858:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	661a      	str	r2, [r3, #96]	; 0x60
 800f862:	e00f      	b.n	800f884 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	4a58      	ldr	r2, [pc, #352]	; (800f9cc <HAL_SD_GetCardCSD+0x344>)
 800f86a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f870:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2201      	movs	r2, #1
 800f87c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f880:	2301      	movs	r3, #1
 800f882:	e09d      	b.n	800f9c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f888:	0b9b      	lsrs	r3, r3, #14
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	f003 0301 	and.w	r3, r3, #1
 800f890:	b2da      	uxtb	r2, r3
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f89a:	09db      	lsrs	r3, r3, #7
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8bc:	0fdb      	lsrs	r3, r3, #31
 800f8be:	b2da      	uxtb	r2, r3
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8c8:	0f5b      	lsrs	r3, r3, #29
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	f003 0303 	and.w	r3, r3, #3
 800f8d0:	b2da      	uxtb	r2, r3
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8da:	0e9b      	lsrs	r3, r3, #26
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	f003 0307 	and.w	r3, r3, #7
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ec:	0d9b      	lsrs	r3, r3, #22
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	f003 030f 	and.w	r3, r3, #15
 800f8f4:	b2da      	uxtb	r2, r3
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8fe:	0d5b      	lsrs	r3, r3, #21
 800f900:	b2db      	uxtb	r3, r3
 800f902:	f003 0301 	and.w	r3, r3, #1
 800f906:	b2da      	uxtb	r2, r3
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	2200      	movs	r2, #0
 800f912:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f91a:	0c1b      	lsrs	r3, r3, #16
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	f003 0301 	and.w	r3, r3, #1
 800f922:	b2da      	uxtb	r2, r3
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f92e:	0bdb      	lsrs	r3, r3, #15
 800f930:	b2db      	uxtb	r3, r3
 800f932:	f003 0301 	and.w	r3, r3, #1
 800f936:	b2da      	uxtb	r2, r3
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f942:	0b9b      	lsrs	r3, r3, #14
 800f944:	b2db      	uxtb	r3, r3
 800f946:	f003 0301 	and.w	r3, r3, #1
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f956:	0b5b      	lsrs	r3, r3, #13
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	f003 0301 	and.w	r3, r3, #1
 800f95e:	b2da      	uxtb	r2, r3
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f96a:	0b1b      	lsrs	r3, r3, #12
 800f96c:	b2db      	uxtb	r3, r3
 800f96e:	f003 0301 	and.w	r3, r3, #1
 800f972:	b2da      	uxtb	r2, r3
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f97e:	0a9b      	lsrs	r3, r3, #10
 800f980:	b2db      	uxtb	r3, r3
 800f982:	f003 0303 	and.w	r3, r3, #3
 800f986:	b2da      	uxtb	r2, r3
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f992:	0a1b      	lsrs	r3, r3, #8
 800f994:	b2db      	uxtb	r3, r3
 800f996:	f003 0303 	and.w	r3, r3, #3
 800f99a:	b2da      	uxtb	r2, r3
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9a6:	085b      	lsrs	r3, r3, #1
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9ae:	b2da      	uxtb	r2, r3
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f9be:	2300      	movs	r3, #0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	370c      	adds	r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr
 800f9cc:	004005ff 	.word	0x004005ff

0800f9d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800fa1a:	2300      	movs	r3, #0
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800fa28:	b5b0      	push	{r4, r5, r7, lr}
 800fa2a:	b08e      	sub	sp, #56	; 0x38
 800fa2c:	af04      	add	r7, sp, #16
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800fa32:	2300      	movs	r3, #0
 800fa34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2203      	movs	r2, #3
 800fa3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa44:	2b03      	cmp	r3, #3
 800fa46:	d02e      	beq.n	800faa6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa4e:	d106      	bne.n	800fa5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	639a      	str	r2, [r3, #56]	; 0x38
 800fa5c:	e029      	b.n	800fab2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa64:	d10a      	bne.n	800fa7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 fabc 	bl	800ffe4 <SD_WideBus_Enable>
 800fa6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	431a      	orrs	r2, r3
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	639a      	str	r2, [r3, #56]	; 0x38
 800fa7a:	e01a      	b.n	800fab2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d10a      	bne.n	800fa98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 faf9 	bl	801007a <SD_WideBus_Disable>
 800fa88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa8e:	6a3b      	ldr	r3, [r7, #32]
 800fa90:	431a      	orrs	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	639a      	str	r2, [r3, #56]	; 0x38
 800fa96:	e00c      	b.n	800fab2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	639a      	str	r2, [r3, #56]	; 0x38
 800faa4:	e005      	b.n	800fab2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00b      	beq.n	800fad2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4a26      	ldr	r2, [pc, #152]	; (800fb58 <HAL_SD_ConfigWideBusOperation+0x130>)
 800fac0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2201      	movs	r2, #1
 800fac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800faca:	2301      	movs	r3, #1
 800facc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fad0:	e01f      	b.n	800fb12 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	695b      	ldr	r3, [r3, #20]
 800faec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	699b      	ldr	r3, [r3, #24]
 800faf2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681d      	ldr	r5, [r3, #0]
 800faf8:	466c      	mov	r4, sp
 800fafa:	f107 0314 	add.w	r3, r7, #20
 800fafe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fb06:	f107 0308 	add.w	r3, r7, #8
 800fb0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	f002 fb75 	bl	80121fc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f002 fc3a 	bl	8012394 <SDMMC_CmdBlockLength>
 800fb20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb22:	6a3b      	ldr	r3, [r7, #32]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00c      	beq.n	800fb42 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4a0a      	ldr	r2, [pc, #40]	; (800fb58 <HAL_SD_ConfigWideBusOperation+0x130>)
 800fb2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb34:	6a3b      	ldr	r3, [r7, #32]
 800fb36:	431a      	orrs	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2201      	movs	r2, #1
 800fb46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800fb4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3728      	adds	r7, #40	; 0x28
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bdb0      	pop	{r4, r5, r7, pc}
 800fb56:	bf00      	nop
 800fb58:	004005ff 	.word	0x004005ff

0800fb5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b086      	sub	sp, #24
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800fb68:	f107 030c 	add.w	r3, r7, #12
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fa10 	bl	800ff94 <SD_SendStatus>
 800fb74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d005      	beq.n	800fb88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	431a      	orrs	r2, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	0a5b      	lsrs	r3, r3, #9
 800fb8c:	f003 030f 	and.w	r3, r3, #15
 800fb90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800fb92:	693b      	ldr	r3, [r7, #16]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3718      	adds	r7, #24
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fbb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fbba:	bf00      	nop
 800fbbc:	3714      	adds	r7, #20
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr

0800fbc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fbc6:	b580      	push	{r7, lr}
 800fbc8:	b084      	sub	sp, #16
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbd8:	2b82      	cmp	r3, #130	; 0x82
 800fbda:	d111      	bne.n	800fc00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f002 fc81 	bl	80124e8 <SDMMC_CmdStopTransfer>
 800fbe6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d008      	beq.n	800fc00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	431a      	orrs	r2, r3
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f7ff fd3a 	bl	800f674 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f022 0208 	bic.w	r2, r2, #8
 800fc0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f240 523a 	movw	r2, #1338	; 0x53a
 800fc18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2200      	movs	r2, #0
 800fc26:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f004 f82d 	bl	8013c88 <HAL_SD_RxCpltCallback>
#endif
}
 800fc2e:	bf00      	nop
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
	...

0800fc38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7f8 fb72 	bl	8008330 <HAL_DMA_GetError>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b02      	cmp	r3, #2
 800fc50:	d03e      	beq.n	800fcd0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d002      	beq.n	800fc6e <SD_DMAError+0x36>
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d12d      	bne.n	800fcca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4a19      	ldr	r2, [pc, #100]	; (800fcd8 <SD_DMAError+0xa0>)
 800fc74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800fc84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800fc92:	6978      	ldr	r0, [r7, #20]
 800fc94:	f7ff ff62 	bl	800fb5c <HAL_SD_GetCardState>
 800fc98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	2b06      	cmp	r3, #6
 800fc9e:	d002      	beq.n	800fca6 <SD_DMAError+0x6e>
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	2b05      	cmp	r3, #5
 800fca4:	d10a      	bne.n	800fcbc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f002 fc1c 	bl	80124e8 <SDMMC_CmdStopTransfer>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb6:	431a      	orrs	r2, r3
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800fcca:	6978      	ldr	r0, [r7, #20]
 800fccc:	f7ff fcd2 	bl	800f674 <HAL_SD_ErrorCallback>
#endif
  }
}
 800fcd0:	bf00      	nop
 800fcd2:	3718      	adds	r7, #24
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	004005ff 	.word	0x004005ff

0800fcdc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fcdc:	b5b0      	push	{r4, r5, r7, lr}
 800fcde:	b094      	sub	sp, #80	; 0x50
 800fce0:	af04      	add	r7, sp, #16
 800fce2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800fce4:	2301      	movs	r3, #1
 800fce6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f002 facd 	bl	801228c <SDMMC_GetPowerState>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d102      	bne.n	800fcfe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fcf8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800fcfc:	e0b8      	b.n	800fe70 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd02:	2b03      	cmp	r3, #3
 800fd04:	d02f      	beq.n	800fd66 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f002 fcf7 	bl	80126fe <SDMMC_CmdSendCID>
 800fd10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d001      	beq.n	800fd1c <SD_InitCard+0x40>
    {
      return errorstate;
 800fd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd1a:	e0a9      	b.n	800fe70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2100      	movs	r1, #0
 800fd22:	4618      	mov	r0, r3
 800fd24:	f002 faf7 	bl	8012316 <SDMMC_GetResponse>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2104      	movs	r1, #4
 800fd34:	4618      	mov	r0, r3
 800fd36:	f002 faee 	bl	8012316 <SDMMC_GetResponse>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2108      	movs	r1, #8
 800fd46:	4618      	mov	r0, r3
 800fd48:	f002 fae5 	bl	8012316 <SDMMC_GetResponse>
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	210c      	movs	r1, #12
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f002 fadc 	bl	8012316 <SDMMC_GetResponse>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd6a:	2b03      	cmp	r3, #3
 800fd6c:	d00d      	beq.n	800fd8a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f107 020e 	add.w	r2, r7, #14
 800fd76:	4611      	mov	r1, r2
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f002 fcfd 	bl	8012778 <SDMMC_CmdSetRelAdd>
 800fd7e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d001      	beq.n	800fd8a <SD_InitCard+0xae>
    {
      return errorstate;
 800fd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd88:	e072      	b.n	800fe70 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd8e:	2b03      	cmp	r3, #3
 800fd90:	d036      	beq.n	800fe00 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800fd92:	89fb      	ldrh	r3, [r7, #14]
 800fd94:	461a      	mov	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fda2:	041b      	lsls	r3, r3, #16
 800fda4:	4619      	mov	r1, r3
 800fda6:	4610      	mov	r0, r2
 800fda8:	f002 fcc7 	bl	801273a <SDMMC_CmdSendCSD>
 800fdac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d001      	beq.n	800fdb8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800fdb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb6:	e05b      	b.n	800fe70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f002 faa9 	bl	8012316 <SDMMC_GetResponse>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	2104      	movs	r1, #4
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f002 faa0 	bl	8012316 <SDMMC_GetResponse>
 800fdd6:	4602      	mov	r2, r0
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	2108      	movs	r1, #8
 800fde2:	4618      	mov	r0, r3
 800fde4:	f002 fa97 	bl	8012316 <SDMMC_GetResponse>
 800fde8:	4602      	mov	r2, r0
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	210c      	movs	r1, #12
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f002 fa8e 	bl	8012316 <SDMMC_GetResponse>
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2104      	movs	r1, #4
 800fe06:	4618      	mov	r0, r3
 800fe08:	f002 fa85 	bl	8012316 <SDMMC_GetResponse>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	0d1a      	lsrs	r2, r3, #20
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800fe14:	f107 0310 	add.w	r3, r7, #16
 800fe18:	4619      	mov	r1, r3
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7ff fc34 	bl	800f688 <HAL_SD_GetCardCSD>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d002      	beq.n	800fe2c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fe26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fe2a:	e021      	b.n	800fe70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6819      	ldr	r1, [r3, #0]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe34:	041b      	lsls	r3, r3, #16
 800fe36:	2200      	movs	r2, #0
 800fe38:	461c      	mov	r4, r3
 800fe3a:	4615      	mov	r5, r2
 800fe3c:	4622      	mov	r2, r4
 800fe3e:	462b      	mov	r3, r5
 800fe40:	4608      	mov	r0, r1
 800fe42:	f002 fb73 	bl	801252c <SDMMC_CmdSelDesel>
 800fe46:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800fe48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d001      	beq.n	800fe52 <SD_InitCard+0x176>
  {
    return errorstate;
 800fe4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe50:	e00e      	b.n	800fe70 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681d      	ldr	r5, [r3, #0]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	466c      	mov	r4, sp
 800fe5a:	f103 0210 	add.w	r2, r3, #16
 800fe5e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe64:	3304      	adds	r3, #4
 800fe66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f002 f9c7 	bl	80121fc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800fe6e:	2300      	movs	r3, #0
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3740      	adds	r7, #64	; 0x40
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bdb0      	pop	{r4, r5, r7, pc}

0800fe78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b086      	sub	sp, #24
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fe80:	2300      	movs	r3, #0
 800fe82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800fe84:	2300      	movs	r3, #0
 800fe86:	617b      	str	r3, [r7, #20]
 800fe88:	2300      	movs	r3, #0
 800fe8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f002 fb6e 	bl	8012572 <SDMMC_CmdGoIdleState>
 800fe96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d001      	beq.n	800fea2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	e072      	b.n	800ff88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4618      	mov	r0, r3
 800fea8:	f002 fb81 	bl	80125ae <SDMMC_CmdOperCond>
 800feac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d00d      	beq.n	800fed0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	4618      	mov	r0, r3
 800fec0:	f002 fb57 	bl	8012572 <SDMMC_CmdGoIdleState>
 800fec4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d004      	beq.n	800fed6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	e05b      	b.n	800ff88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2201      	movs	r2, #1
 800fed4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d137      	bne.n	800ff4e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2100      	movs	r1, #0
 800fee4:	4618      	mov	r0, r3
 800fee6:	f002 fb81 	bl	80125ec <SDMMC_CmdAppCommand>
 800feea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d02d      	beq.n	800ff4e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fef2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fef6:	e047      	b.n	800ff88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2100      	movs	r1, #0
 800fefe:	4618      	mov	r0, r3
 800ff00:	f002 fb74 	bl	80125ec <SDMMC_CmdAppCommand>
 800ff04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <SD_PowerON+0x98>
    {
      return errorstate;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	e03b      	b.n	800ff88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	491e      	ldr	r1, [pc, #120]	; (800ff90 <SD_PowerON+0x118>)
 800ff16:	4618      	mov	r0, r3
 800ff18:	f002 fb8a 	bl	8012630 <SDMMC_CmdAppOperCommand>
 800ff1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d002      	beq.n	800ff2a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ff24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ff28:	e02e      	b.n	800ff88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2100      	movs	r1, #0
 800ff30:	4618      	mov	r0, r3
 800ff32:	f002 f9f0 	bl	8012316 <SDMMC_GetResponse>
 800ff36:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	0fdb      	lsrs	r3, r3, #31
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d101      	bne.n	800ff44 <SD_PowerON+0xcc>
 800ff40:	2301      	movs	r3, #1
 800ff42:	e000      	b.n	800ff46 <SD_PowerON+0xce>
 800ff44:	2300      	movs	r3, #0
 800ff46:	613b      	str	r3, [r7, #16]

    count++;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d802      	bhi.n	800ff5e <SD_PowerON+0xe6>
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d0cc      	beq.n	800fef8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d902      	bls.n	800ff6e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ff68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ff6c:	e00c      	b.n	800ff88 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d003      	beq.n	800ff80 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	645a      	str	r2, [r3, #68]	; 0x44
 800ff7e:	e002      	b.n	800ff86 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ff86:	2300      	movs	r3, #0
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3718      	adds	r7, #24
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}
 800ff90:	c1100000 	.word	0xc1100000

0800ff94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d102      	bne.n	800ffaa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ffa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ffa8:	e018      	b.n	800ffdc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffb2:	041b      	lsls	r3, r3, #16
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	f002 fbff 	bl	80127ba <SDMMC_CmdSendStatus>
 800ffbc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d001      	beq.n	800ffc8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	e009      	b.n	800ffdc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	2100      	movs	r1, #0
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f002 f9a1 	bl	8012316 <SDMMC_GetResponse>
 800ffd4:	4602      	mov	r2, r0
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ffda:	2300      	movs	r3, #0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b086      	sub	sp, #24
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ffec:	2300      	movs	r3, #0
 800ffee:	60fb      	str	r3, [r7, #12]
 800fff0:	2300      	movs	r3, #0
 800fff2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2100      	movs	r1, #0
 800fffa:	4618      	mov	r0, r3
 800fffc:	f002 f98b 	bl	8012316 <SDMMC_GetResponse>
 8010000:	4603      	mov	r3, r0
 8010002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801000a:	d102      	bne.n	8010012 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801000c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010010:	e02f      	b.n	8010072 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010012:	f107 030c 	add.w	r3, r7, #12
 8010016:	4619      	mov	r1, r3
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 f879 	bl	8010110 <SD_FindSCR>
 801001e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d001      	beq.n	801002a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	e023      	b.n	8010072 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010030:	2b00      	cmp	r3, #0
 8010032:	d01c      	beq.n	801006e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801003c:	041b      	lsls	r3, r3, #16
 801003e:	4619      	mov	r1, r3
 8010040:	4610      	mov	r0, r2
 8010042:	f002 fad3 	bl	80125ec <SDMMC_CmdAppCommand>
 8010046:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	e00f      	b.n	8010072 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2102      	movs	r1, #2
 8010058:	4618      	mov	r0, r3
 801005a:	f002 fb0d 	bl	8012678 <SDMMC_CmdBusWidth>
 801005e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	e003      	b.n	8010072 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801006a:	2300      	movs	r3, #0
 801006c:	e001      	b.n	8010072 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801006e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010072:	4618      	mov	r0, r3
 8010074:	3718      	adds	r7, #24
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}

0801007a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801007a:	b580      	push	{r7, lr}
 801007c:	b086      	sub	sp, #24
 801007e:	af00      	add	r7, sp, #0
 8010080:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010082:	2300      	movs	r3, #0
 8010084:	60fb      	str	r3, [r7, #12]
 8010086:	2300      	movs	r3, #0
 8010088:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2100      	movs	r1, #0
 8010090:	4618      	mov	r0, r3
 8010092:	f002 f940 	bl	8012316 <SDMMC_GetResponse>
 8010096:	4603      	mov	r3, r0
 8010098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801009c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80100a0:	d102      	bne.n	80100a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80100a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80100a6:	e02f      	b.n	8010108 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80100a8:	f107 030c 	add.w	r3, r7, #12
 80100ac:	4619      	mov	r1, r3
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f82e 	bl	8010110 <SD_FindSCR>
 80100b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d001      	beq.n	80100c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	e023      	b.n	8010108 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d01c      	beq.n	8010104 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681a      	ldr	r2, [r3, #0]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100d2:	041b      	lsls	r3, r3, #16
 80100d4:	4619      	mov	r1, r3
 80100d6:	4610      	mov	r0, r2
 80100d8:	f002 fa88 	bl	80125ec <SDMMC_CmdAppCommand>
 80100dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d001      	beq.n	80100e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	e00f      	b.n	8010108 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	2100      	movs	r1, #0
 80100ee:	4618      	mov	r0, r3
 80100f0:	f002 fac2 	bl	8012678 <SDMMC_CmdBusWidth>
 80100f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d001      	beq.n	8010100 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	e003      	b.n	8010108 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010100:	2300      	movs	r3, #0
 8010102:	e001      	b.n	8010108 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010104:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010108:	4618      	mov	r0, r3
 801010a:	3718      	adds	r7, #24
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010110:	b590      	push	{r4, r7, lr}
 8010112:	b08f      	sub	sp, #60	; 0x3c
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801011a:	f7f6 ff63 	bl	8006fe4 <HAL_GetTick>
 801011e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8010120:	2300      	movs	r3, #0
 8010122:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8010124:	2300      	movs	r3, #0
 8010126:	60bb      	str	r3, [r7, #8]
 8010128:	2300      	movs	r3, #0
 801012a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2108      	movs	r1, #8
 8010136:	4618      	mov	r0, r3
 8010138:	f002 f92c 	bl	8012394 <SDMMC_CmdBlockLength>
 801013c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801013e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010140:	2b00      	cmp	r3, #0
 8010142:	d001      	beq.n	8010148 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010146:	e0b2      	b.n	80102ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010150:	041b      	lsls	r3, r3, #16
 8010152:	4619      	mov	r1, r3
 8010154:	4610      	mov	r0, r2
 8010156:	f002 fa49 	bl	80125ec <SDMMC_CmdAppCommand>
 801015a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801015c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <SD_FindSCR+0x56>
  {
    return errorstate;
 8010162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010164:	e0a3      	b.n	80102ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010166:	f04f 33ff 	mov.w	r3, #4294967295
 801016a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801016c:	2308      	movs	r3, #8
 801016e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010170:	2330      	movs	r3, #48	; 0x30
 8010172:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010174:	2302      	movs	r3, #2
 8010176:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010178:	2300      	movs	r3, #0
 801017a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801017c:	2301      	movs	r3, #1
 801017e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f107 0210 	add.w	r2, r7, #16
 8010188:	4611      	mov	r1, r2
 801018a:	4618      	mov	r0, r3
 801018c:	f002 f8d6 	bl	801233c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	4618      	mov	r0, r3
 8010196:	f002 fa91 	bl	80126bc <SDMMC_CmdSendSCR>
 801019a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801019c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d02a      	beq.n	80101f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80101a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a4:	e083      	b.n	80102ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d00f      	beq.n	80101d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6819      	ldr	r1, [r3, #0]
 80101b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	f107 0208 	add.w	r2, r7, #8
 80101c0:	18d4      	adds	r4, r2, r3
 80101c2:	4608      	mov	r0, r1
 80101c4:	f002 f846 	bl	8012254 <SDMMC_ReadFIFO>
 80101c8:	4603      	mov	r3, r0
 80101ca:	6023      	str	r3, [r4, #0]
      index++;
 80101cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ce:	3301      	adds	r3, #1
 80101d0:	637b      	str	r3, [r7, #52]	; 0x34
 80101d2:	e006      	b.n	80101e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d012      	beq.n	8010208 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80101e2:	f7f6 feff 	bl	8006fe4 <HAL_GetTick>
 80101e6:	4602      	mov	r2, r0
 80101e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101f0:	d102      	bne.n	80101f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80101f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80101f6:	e05a      	b.n	80102ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101fe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8010202:	2b00      	cmp	r3, #0
 8010204:	d0cf      	beq.n	80101a6 <SD_FindSCR+0x96>
 8010206:	e000      	b.n	801020a <SD_FindSCR+0xfa>
      break;
 8010208:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010210:	f003 0308 	and.w	r3, r3, #8
 8010214:	2b00      	cmp	r3, #0
 8010216:	d005      	beq.n	8010224 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2208      	movs	r2, #8
 801021e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010220:	2308      	movs	r3, #8
 8010222:	e044      	b.n	80102ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801022a:	f003 0302 	and.w	r3, r3, #2
 801022e:	2b00      	cmp	r3, #0
 8010230:	d005      	beq.n	801023e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2202      	movs	r2, #2
 8010238:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801023a:	2302      	movs	r3, #2
 801023c:	e037      	b.n	80102ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010244:	f003 0320 	and.w	r3, r3, #32
 8010248:	2b00      	cmp	r3, #0
 801024a:	d005      	beq.n	8010258 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2220      	movs	r2, #32
 8010252:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010254:	2320      	movs	r3, #32
 8010256:	e02a      	b.n	80102ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f240 523a 	movw	r2, #1338	; 0x53a
 8010260:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	061a      	lsls	r2, r3, #24
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	021b      	lsls	r3, r3, #8
 801026a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801026e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	0a1b      	lsrs	r3, r3, #8
 8010274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010278:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	0e1b      	lsrs	r3, r3, #24
 801027e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010282:	601a      	str	r2, [r3, #0]
    scr++;
 8010284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010286:	3304      	adds	r3, #4
 8010288:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	061a      	lsls	r2, r3, #24
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	021b      	lsls	r3, r3, #8
 8010292:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010296:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	0a1b      	lsrs	r3, r3, #8
 801029c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80102a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	0e1b      	lsrs	r3, r3, #24
 80102a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80102a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	373c      	adds	r7, #60	; 0x3c
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd90      	pop	{r4, r7, pc}

080102b6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b082      	sub	sp, #8
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d101      	bne.n	80102ca <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	e025      	b.n	8010316 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d106      	bne.n	80102e4 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2200      	movs	r2, #0
 80102da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7f3 fd32 	bl	8003d48 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2202      	movs	r2, #2
 80102e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	3304      	adds	r3, #4
 80102f4:	4619      	mov	r1, r3
 80102f6:	4610      	mov	r0, r2
 80102f8:	f001 fe56 	bl	8011fa8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6818      	ldr	r0, [r3, #0]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	461a      	mov	r2, r3
 8010306:	6839      	ldr	r1, [r7, #0]
 8010308:	f001 fec0 	bl	801208c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8010314:	2300      	movs	r3, #0
}
 8010316:	4618      	mov	r0, r3
 8010318:	3708      	adds	r7, #8
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}

0801031e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801031e:	b580      	push	{r7, lr}
 8010320:	b084      	sub	sp, #16
 8010322:	af00      	add	r7, sp, #0
 8010324:	60f8      	str	r0, [r7, #12]
 8010326:	60b9      	str	r1, [r7, #8]
 8010328:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010330:	b2db      	uxtb	r3, r3
 8010332:	2b02      	cmp	r3, #2
 8010334:	d101      	bne.n	801033a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8010336:	2302      	movs	r3, #2
 8010338:	e018      	b.n	801036c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2202      	movs	r2, #2
 801033e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	68b9      	ldr	r1, [r7, #8]
 801034a:	4618      	mov	r0, r3
 801034c:	f001 ff1e 	bl	801218c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2b02      	cmp	r3, #2
 8010356:	d104      	bne.n	8010362 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2205      	movs	r2, #5
 801035c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8010360:	e003      	b.n	801036a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2201      	movs	r2, #1
 8010366:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 801036a:	2300      	movs	r3, #0
}
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010384:	b2db      	uxtb	r3, r3
 8010386:	2b02      	cmp	r3, #2
 8010388:	d101      	bne.n	801038e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 801038a:	2302      	movs	r3, #2
 801038c:	e00e      	b.n	80103ac <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2202      	movs	r2, #2
 8010392:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	6839      	ldr	r1, [r7, #0]
 801039c:	4618      	mov	r0, r3
 801039e:	f001 ff19 	bl	80121d4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80103aa:	2300      	movs	r3, #0
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3708      	adds	r7, #8
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d101      	bne.n	80103c6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80103c2:	2301      	movs	r3, #1
 80103c4:	e04c      	b.n	8010460 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d106      	bne.n	80103e0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f7f3 f9e8 	bl	80037b0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2202      	movs	r2, #2
 80103e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f022 0203 	bic.w	r2, r2, #3
 80103f6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8010400:	68fa      	ldr	r2, [r7, #12]
 8010402:	4b19      	ldr	r3, [pc, #100]	; (8010468 <HAL_SPDIFRX_Init+0xb4>)
 8010404:	4013      	ands	r3, r2
 8010406:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8010410:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8010416:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 801041c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8010422:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8010428:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 801042e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8010434:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 801043a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8010440:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	4313      	orrs	r3, r2
 8010446:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	68fa      	ldr	r2, [r7, #12]
 801044e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2200      	movs	r2, #0
 8010454:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2201      	movs	r2, #1
 801045a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 801045e:	2300      	movs	r3, #0
}
 8010460:	4618      	mov	r0, r3
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	fff88407 	.word	0xfff88407

0801046c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d101      	bne.n	801047e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801047a:	2301      	movs	r3, #1
 801047c:	e049      	b.n	8010512 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010484:	b2db      	uxtb	r3, r3
 8010486:	2b00      	cmp	r3, #0
 8010488:	d106      	bne.n	8010498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2200      	movs	r2, #0
 801048e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f7f3 f9ce 	bl	8003834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2202      	movs	r2, #2
 801049c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	3304      	adds	r3, #4
 80104a8:	4619      	mov	r1, r3
 80104aa:	4610      	mov	r0, r2
 80104ac:	f000 fc22 	bl	8010cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2201      	movs	r2, #1
 80104b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2201      	movs	r2, #1
 80104bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2201      	movs	r2, #1
 80104c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2201      	movs	r2, #1
 80104d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2201      	movs	r2, #1
 80104dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2201      	movs	r2, #1
 80104e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2201      	movs	r2, #1
 80104f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2201      	movs	r2, #1
 80104fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2201      	movs	r2, #1
 8010504:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2201      	movs	r2, #1
 801050c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010510:	2300      	movs	r3, #0
}
 8010512:	4618      	mov	r0, r3
 8010514:	3708      	adds	r7, #8
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
	...

0801051c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801051c:	b480      	push	{r7}
 801051e:	b085      	sub	sp, #20
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2b01      	cmp	r3, #1
 801052e:	d001      	beq.n	8010534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010530:	2301      	movs	r3, #1
 8010532:	e054      	b.n	80105de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2202      	movs	r2, #2
 8010538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	68da      	ldr	r2, [r3, #12]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f042 0201 	orr.w	r2, r2, #1
 801054a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a26      	ldr	r2, [pc, #152]	; (80105ec <HAL_TIM_Base_Start_IT+0xd0>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d022      	beq.n	801059c <HAL_TIM_Base_Start_IT+0x80>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801055e:	d01d      	beq.n	801059c <HAL_TIM_Base_Start_IT+0x80>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	4a22      	ldr	r2, [pc, #136]	; (80105f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d018      	beq.n	801059c <HAL_TIM_Base_Start_IT+0x80>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4a21      	ldr	r2, [pc, #132]	; (80105f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d013      	beq.n	801059c <HAL_TIM_Base_Start_IT+0x80>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4a1f      	ldr	r2, [pc, #124]	; (80105f8 <HAL_TIM_Base_Start_IT+0xdc>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d00e      	beq.n	801059c <HAL_TIM_Base_Start_IT+0x80>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	4a1e      	ldr	r2, [pc, #120]	; (80105fc <HAL_TIM_Base_Start_IT+0xe0>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d009      	beq.n	801059c <HAL_TIM_Base_Start_IT+0x80>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4a1c      	ldr	r2, [pc, #112]	; (8010600 <HAL_TIM_Base_Start_IT+0xe4>)
 801058e:	4293      	cmp	r3, r2
 8010590:	d004      	beq.n	801059c <HAL_TIM_Base_Start_IT+0x80>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4a1b      	ldr	r2, [pc, #108]	; (8010604 <HAL_TIM_Base_Start_IT+0xe8>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d115      	bne.n	80105c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	689a      	ldr	r2, [r3, #8]
 80105a2:	4b19      	ldr	r3, [pc, #100]	; (8010608 <HAL_TIM_Base_Start_IT+0xec>)
 80105a4:	4013      	ands	r3, r2
 80105a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2b06      	cmp	r3, #6
 80105ac:	d015      	beq.n	80105da <HAL_TIM_Base_Start_IT+0xbe>
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105b4:	d011      	beq.n	80105da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f042 0201 	orr.w	r2, r2, #1
 80105c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105c6:	e008      	b.n	80105da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f042 0201 	orr.w	r2, r2, #1
 80105d6:	601a      	str	r2, [r3, #0]
 80105d8:	e000      	b.n	80105dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80105dc:	2300      	movs	r3, #0
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3714      	adds	r7, #20
 80105e2:	46bd      	mov	sp, r7
 80105e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e8:	4770      	bx	lr
 80105ea:	bf00      	nop
 80105ec:	40010000 	.word	0x40010000
 80105f0:	40000400 	.word	0x40000400
 80105f4:	40000800 	.word	0x40000800
 80105f8:	40000c00 	.word	0x40000c00
 80105fc:	40010400 	.word	0x40010400
 8010600:	40014000 	.word	0x40014000
 8010604:	40001800 	.word	0x40001800
 8010608:	00010007 	.word	0x00010007

0801060c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d101      	bne.n	801061e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801061a:	2301      	movs	r3, #1
 801061c:	e049      	b.n	80106b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010624:	b2db      	uxtb	r3, r3
 8010626:	2b00      	cmp	r3, #0
 8010628:	d106      	bne.n	8010638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7f3 f96c 	bl	8003910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2202      	movs	r2, #2
 801063c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	3304      	adds	r3, #4
 8010648:	4619      	mov	r1, r3
 801064a:	4610      	mov	r0, r2
 801064c:	f000 fb52 	bl	8010cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2201      	movs	r2, #1
 8010654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2201      	movs	r2, #1
 801065c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2201      	movs	r2, #1
 8010664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2201      	movs	r2, #1
 801066c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2201      	movs	r2, #1
 8010674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2201      	movs	r2, #1
 801067c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2201      	movs	r2, #1
 8010684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2201      	movs	r2, #1
 801068c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2201      	movs	r2, #1
 8010694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2201      	movs	r2, #1
 801069c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2201      	movs	r2, #1
 80106a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2201      	movs	r2, #1
 80106ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80106b0:	2300      	movs	r3, #0
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}

080106ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80106ba:	b580      	push	{r7, lr}
 80106bc:	b082      	sub	sp, #8
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	691b      	ldr	r3, [r3, #16]
 80106c8:	f003 0302 	and.w	r3, r3, #2
 80106cc:	2b02      	cmp	r3, #2
 80106ce:	d122      	bne.n	8010716 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	68db      	ldr	r3, [r3, #12]
 80106d6:	f003 0302 	and.w	r3, r3, #2
 80106da:	2b02      	cmp	r3, #2
 80106dc:	d11b      	bne.n	8010716 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f06f 0202 	mvn.w	r2, #2
 80106e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2201      	movs	r2, #1
 80106ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	699b      	ldr	r3, [r3, #24]
 80106f4:	f003 0303 	and.w	r3, r3, #3
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f000 fadb 	bl	8010cb8 <HAL_TIM_IC_CaptureCallback>
 8010702:	e005      	b.n	8010710 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f000 facd 	bl	8010ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f000 fade 	bl	8010ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2200      	movs	r2, #0
 8010714:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	691b      	ldr	r3, [r3, #16]
 801071c:	f003 0304 	and.w	r3, r3, #4
 8010720:	2b04      	cmp	r3, #4
 8010722:	d122      	bne.n	801076a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	f003 0304 	and.w	r3, r3, #4
 801072e:	2b04      	cmp	r3, #4
 8010730:	d11b      	bne.n	801076a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f06f 0204 	mvn.w	r2, #4
 801073a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2202      	movs	r2, #2
 8010740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	699b      	ldr	r3, [r3, #24]
 8010748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801074c:	2b00      	cmp	r3, #0
 801074e:	d003      	beq.n	8010758 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f000 fab1 	bl	8010cb8 <HAL_TIM_IC_CaptureCallback>
 8010756:	e005      	b.n	8010764 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 faa3 	bl	8010ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 fab4 	bl	8010ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	f003 0308 	and.w	r3, r3, #8
 8010774:	2b08      	cmp	r3, #8
 8010776:	d122      	bne.n	80107be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	f003 0308 	and.w	r3, r3, #8
 8010782:	2b08      	cmp	r3, #8
 8010784:	d11b      	bne.n	80107be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f06f 0208 	mvn.w	r2, #8
 801078e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2204      	movs	r2, #4
 8010794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	69db      	ldr	r3, [r3, #28]
 801079c:	f003 0303 	and.w	r3, r3, #3
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d003      	beq.n	80107ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f000 fa87 	bl	8010cb8 <HAL_TIM_IC_CaptureCallback>
 80107aa:	e005      	b.n	80107b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f000 fa79 	bl	8010ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 fa8a 	bl	8010ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	691b      	ldr	r3, [r3, #16]
 80107c4:	f003 0310 	and.w	r3, r3, #16
 80107c8:	2b10      	cmp	r3, #16
 80107ca:	d122      	bne.n	8010812 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	68db      	ldr	r3, [r3, #12]
 80107d2:	f003 0310 	and.w	r3, r3, #16
 80107d6:	2b10      	cmp	r3, #16
 80107d8:	d11b      	bne.n	8010812 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f06f 0210 	mvn.w	r2, #16
 80107e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2208      	movs	r2, #8
 80107e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	69db      	ldr	r3, [r3, #28]
 80107f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d003      	beq.n	8010800 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 fa5d 	bl	8010cb8 <HAL_TIM_IC_CaptureCallback>
 80107fe:	e005      	b.n	801080c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fa4f 	bl	8010ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 fa60 	bl	8010ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	691b      	ldr	r3, [r3, #16]
 8010818:	f003 0301 	and.w	r3, r3, #1
 801081c:	2b01      	cmp	r3, #1
 801081e:	d10e      	bne.n	801083e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	f003 0301 	and.w	r3, r3, #1
 801082a:	2b01      	cmp	r3, #1
 801082c:	d107      	bne.n	801083e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f06f 0201 	mvn.w	r2, #1
 8010836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f7f2 fb55 	bl	8002ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	691b      	ldr	r3, [r3, #16]
 8010844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010848:	2b80      	cmp	r3, #128	; 0x80
 801084a:	d10e      	bne.n	801086a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010856:	2b80      	cmp	r3, #128	; 0x80
 8010858:	d107      	bne.n	801086a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 fef3 	bl	8011650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	691b      	ldr	r3, [r3, #16]
 8010870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010878:	d10e      	bne.n	8010898 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010884:	2b80      	cmp	r3, #128	; 0x80
 8010886:	d107      	bne.n	8010898 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f000 fee6 	bl	8011664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	691b      	ldr	r3, [r3, #16]
 801089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108a2:	2b40      	cmp	r3, #64	; 0x40
 80108a4:	d10e      	bne.n	80108c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108b0:	2b40      	cmp	r3, #64	; 0x40
 80108b2:	d107      	bne.n	80108c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80108bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f000 fa0e 	bl	8010ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	691b      	ldr	r3, [r3, #16]
 80108ca:	f003 0320 	and.w	r3, r3, #32
 80108ce:	2b20      	cmp	r3, #32
 80108d0:	d10e      	bne.n	80108f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	68db      	ldr	r3, [r3, #12]
 80108d8:	f003 0320 	and.w	r3, r3, #32
 80108dc:	2b20      	cmp	r3, #32
 80108de:	d107      	bne.n	80108f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f06f 0220 	mvn.w	r2, #32
 80108e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 fea6 	bl	801163c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80108f0:	bf00      	nop
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801090a:	2b01      	cmp	r3, #1
 801090c:	d101      	bne.n	8010912 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801090e:	2302      	movs	r3, #2
 8010910:	e0fd      	b.n	8010b0e <HAL_TIM_PWM_ConfigChannel+0x216>
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2201      	movs	r2, #1
 8010916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2b14      	cmp	r3, #20
 801091e:	f200 80f0 	bhi.w	8010b02 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010922:	a201      	add	r2, pc, #4	; (adr r2, 8010928 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010928:	0801097d 	.word	0x0801097d
 801092c:	08010b03 	.word	0x08010b03
 8010930:	08010b03 	.word	0x08010b03
 8010934:	08010b03 	.word	0x08010b03
 8010938:	080109bd 	.word	0x080109bd
 801093c:	08010b03 	.word	0x08010b03
 8010940:	08010b03 	.word	0x08010b03
 8010944:	08010b03 	.word	0x08010b03
 8010948:	080109ff 	.word	0x080109ff
 801094c:	08010b03 	.word	0x08010b03
 8010950:	08010b03 	.word	0x08010b03
 8010954:	08010b03 	.word	0x08010b03
 8010958:	08010a3f 	.word	0x08010a3f
 801095c:	08010b03 	.word	0x08010b03
 8010960:	08010b03 	.word	0x08010b03
 8010964:	08010b03 	.word	0x08010b03
 8010968:	08010a81 	.word	0x08010a81
 801096c:	08010b03 	.word	0x08010b03
 8010970:	08010b03 	.word	0x08010b03
 8010974:	08010b03 	.word	0x08010b03
 8010978:	08010ac1 	.word	0x08010ac1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	68b9      	ldr	r1, [r7, #8]
 8010982:	4618      	mov	r0, r3
 8010984:	f000 fa56 	bl	8010e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	699a      	ldr	r2, [r3, #24]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f042 0208 	orr.w	r2, r2, #8
 8010996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	699a      	ldr	r2, [r3, #24]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f022 0204 	bic.w	r2, r2, #4
 80109a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	6999      	ldr	r1, [r3, #24]
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	691a      	ldr	r2, [r3, #16]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	430a      	orrs	r2, r1
 80109b8:	619a      	str	r2, [r3, #24]
      break;
 80109ba:	e0a3      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	68b9      	ldr	r1, [r7, #8]
 80109c2:	4618      	mov	r0, r3
 80109c4:	f000 faa8 	bl	8010f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	699a      	ldr	r2, [r3, #24]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80109d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	699a      	ldr	r2, [r3, #24]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	6999      	ldr	r1, [r3, #24]
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	691b      	ldr	r3, [r3, #16]
 80109f2:	021a      	lsls	r2, r3, #8
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	430a      	orrs	r2, r1
 80109fa:	619a      	str	r2, [r3, #24]
      break;
 80109fc:	e082      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	68b9      	ldr	r1, [r7, #8]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f000 faff 	bl	8011008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	69da      	ldr	r2, [r3, #28]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f042 0208 	orr.w	r2, r2, #8
 8010a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	69da      	ldr	r2, [r3, #28]
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f022 0204 	bic.w	r2, r2, #4
 8010a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	69d9      	ldr	r1, [r3, #28]
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	691a      	ldr	r2, [r3, #16]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	430a      	orrs	r2, r1
 8010a3a:	61da      	str	r2, [r3, #28]
      break;
 8010a3c:	e062      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	68b9      	ldr	r1, [r7, #8]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f000 fb55 	bl	80110f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	69da      	ldr	r2, [r3, #28]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	69da      	ldr	r2, [r3, #28]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	69d9      	ldr	r1, [r3, #28]
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	691b      	ldr	r3, [r3, #16]
 8010a74:	021a      	lsls	r2, r3, #8
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	430a      	orrs	r2, r1
 8010a7c:	61da      	str	r2, [r3, #28]
      break;
 8010a7e:	e041      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	68b9      	ldr	r1, [r7, #8]
 8010a86:	4618      	mov	r0, r3
 8010a88:	f000 fb8c 	bl	80111a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f042 0208 	orr.w	r2, r2, #8
 8010a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f022 0204 	bic.w	r2, r2, #4
 8010aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	691a      	ldr	r2, [r3, #16]
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	430a      	orrs	r2, r1
 8010abc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010abe:	e021      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	68b9      	ldr	r1, [r7, #8]
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f000 fbbe 	bl	8011248 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	691b      	ldr	r3, [r3, #16]
 8010af6:	021a      	lsls	r2, r3, #8
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	430a      	orrs	r2, r1
 8010afe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010b00:	e000      	b.n	8010b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010b02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2200      	movs	r2, #0
 8010b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010b0c:	2300      	movs	r3, #0
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop

08010b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	d101      	bne.n	8010b30 <HAL_TIM_ConfigClockSource+0x18>
 8010b2c:	2302      	movs	r3, #2
 8010b2e:	e0b3      	b.n	8010c98 <HAL_TIM_ConfigClockSource+0x180>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2201      	movs	r2, #1
 8010b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2202      	movs	r2, #2
 8010b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	689b      	ldr	r3, [r3, #8]
 8010b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010b48:	68fa      	ldr	r2, [r7, #12]
 8010b4a:	4b55      	ldr	r3, [pc, #340]	; (8010ca0 <HAL_TIM_ConfigClockSource+0x188>)
 8010b4c:	4013      	ands	r3, r2
 8010b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010b56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b68:	d03e      	beq.n	8010be8 <HAL_TIM_ConfigClockSource+0xd0>
 8010b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b6e:	f200 8087 	bhi.w	8010c80 <HAL_TIM_ConfigClockSource+0x168>
 8010b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b76:	f000 8085 	beq.w	8010c84 <HAL_TIM_ConfigClockSource+0x16c>
 8010b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b7e:	d87f      	bhi.n	8010c80 <HAL_TIM_ConfigClockSource+0x168>
 8010b80:	2b70      	cmp	r3, #112	; 0x70
 8010b82:	d01a      	beq.n	8010bba <HAL_TIM_ConfigClockSource+0xa2>
 8010b84:	2b70      	cmp	r3, #112	; 0x70
 8010b86:	d87b      	bhi.n	8010c80 <HAL_TIM_ConfigClockSource+0x168>
 8010b88:	2b60      	cmp	r3, #96	; 0x60
 8010b8a:	d050      	beq.n	8010c2e <HAL_TIM_ConfigClockSource+0x116>
 8010b8c:	2b60      	cmp	r3, #96	; 0x60
 8010b8e:	d877      	bhi.n	8010c80 <HAL_TIM_ConfigClockSource+0x168>
 8010b90:	2b50      	cmp	r3, #80	; 0x50
 8010b92:	d03c      	beq.n	8010c0e <HAL_TIM_ConfigClockSource+0xf6>
 8010b94:	2b50      	cmp	r3, #80	; 0x50
 8010b96:	d873      	bhi.n	8010c80 <HAL_TIM_ConfigClockSource+0x168>
 8010b98:	2b40      	cmp	r3, #64	; 0x40
 8010b9a:	d058      	beq.n	8010c4e <HAL_TIM_ConfigClockSource+0x136>
 8010b9c:	2b40      	cmp	r3, #64	; 0x40
 8010b9e:	d86f      	bhi.n	8010c80 <HAL_TIM_ConfigClockSource+0x168>
 8010ba0:	2b30      	cmp	r3, #48	; 0x30
 8010ba2:	d064      	beq.n	8010c6e <HAL_TIM_ConfigClockSource+0x156>
 8010ba4:	2b30      	cmp	r3, #48	; 0x30
 8010ba6:	d86b      	bhi.n	8010c80 <HAL_TIM_ConfigClockSource+0x168>
 8010ba8:	2b20      	cmp	r3, #32
 8010baa:	d060      	beq.n	8010c6e <HAL_TIM_ConfigClockSource+0x156>
 8010bac:	2b20      	cmp	r3, #32
 8010bae:	d867      	bhi.n	8010c80 <HAL_TIM_ConfigClockSource+0x168>
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d05c      	beq.n	8010c6e <HAL_TIM_ConfigClockSource+0x156>
 8010bb4:	2b10      	cmp	r3, #16
 8010bb6:	d05a      	beq.n	8010c6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8010bb8:	e062      	b.n	8010c80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6818      	ldr	r0, [r3, #0]
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	6899      	ldr	r1, [r3, #8]
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	685a      	ldr	r2, [r3, #4]
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	f000 fc0b 	bl	80113e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	689b      	ldr	r3, [r3, #8]
 8010bd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010bdc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	609a      	str	r2, [r3, #8]
      break;
 8010be6:	e04e      	b.n	8010c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6818      	ldr	r0, [r3, #0]
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	6899      	ldr	r1, [r3, #8]
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	685a      	ldr	r2, [r3, #4]
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	f000 fbf4 	bl	80113e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	689a      	ldr	r2, [r3, #8]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010c0a:	609a      	str	r2, [r3, #8]
      break;
 8010c0c:	e03b      	b.n	8010c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6818      	ldr	r0, [r3, #0]
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	6859      	ldr	r1, [r3, #4]
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	f000 fb68 	bl	80112f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	2150      	movs	r1, #80	; 0x50
 8010c26:	4618      	mov	r0, r3
 8010c28:	f000 fbc1 	bl	80113ae <TIM_ITRx_SetConfig>
      break;
 8010c2c:	e02b      	b.n	8010c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6818      	ldr	r0, [r3, #0]
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	6859      	ldr	r1, [r3, #4]
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	f000 fb87 	bl	801134e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2160      	movs	r1, #96	; 0x60
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 fbb1 	bl	80113ae <TIM_ITRx_SetConfig>
      break;
 8010c4c:	e01b      	b.n	8010c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6818      	ldr	r0, [r3, #0]
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	6859      	ldr	r1, [r3, #4]
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	68db      	ldr	r3, [r3, #12]
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	f000 fb48 	bl	80112f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2140      	movs	r1, #64	; 0x40
 8010c66:	4618      	mov	r0, r3
 8010c68:	f000 fba1 	bl	80113ae <TIM_ITRx_SetConfig>
      break;
 8010c6c:	e00b      	b.n	8010c86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	4619      	mov	r1, r3
 8010c78:	4610      	mov	r0, r2
 8010c7a:	f000 fb98 	bl	80113ae <TIM_ITRx_SetConfig>
        break;
 8010c7e:	e002      	b.n	8010c86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010c80:	bf00      	nop
 8010c82:	e000      	b.n	8010c86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010c84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2201      	movs	r2, #1
 8010c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2200      	movs	r2, #0
 8010c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	fffeff88 	.word	0xfffeff88

08010ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010cac:	bf00      	nop
 8010cae:	370c      	adds	r7, #12
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr

08010cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b083      	sub	sp, #12
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010cc0:	bf00      	nop
 8010cc2:	370c      	adds	r7, #12
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010cd4:	bf00      	nop
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010ce8:	bf00      	nop
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b085      	sub	sp, #20
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	4a40      	ldr	r2, [pc, #256]	; (8010e08 <TIM_Base_SetConfig+0x114>)
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	d013      	beq.n	8010d34 <TIM_Base_SetConfig+0x40>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d12:	d00f      	beq.n	8010d34 <TIM_Base_SetConfig+0x40>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	4a3d      	ldr	r2, [pc, #244]	; (8010e0c <TIM_Base_SetConfig+0x118>)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d00b      	beq.n	8010d34 <TIM_Base_SetConfig+0x40>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4a3c      	ldr	r2, [pc, #240]	; (8010e10 <TIM_Base_SetConfig+0x11c>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d007      	beq.n	8010d34 <TIM_Base_SetConfig+0x40>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	4a3b      	ldr	r2, [pc, #236]	; (8010e14 <TIM_Base_SetConfig+0x120>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d003      	beq.n	8010d34 <TIM_Base_SetConfig+0x40>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4a3a      	ldr	r2, [pc, #232]	; (8010e18 <TIM_Base_SetConfig+0x124>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d108      	bne.n	8010d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	68fa      	ldr	r2, [r7, #12]
 8010d42:	4313      	orrs	r3, r2
 8010d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	4a2f      	ldr	r2, [pc, #188]	; (8010e08 <TIM_Base_SetConfig+0x114>)
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d02b      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d54:	d027      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4a2c      	ldr	r2, [pc, #176]	; (8010e0c <TIM_Base_SetConfig+0x118>)
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d023      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4a2b      	ldr	r2, [pc, #172]	; (8010e10 <TIM_Base_SetConfig+0x11c>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d01f      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	4a2a      	ldr	r2, [pc, #168]	; (8010e14 <TIM_Base_SetConfig+0x120>)
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d01b      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4a29      	ldr	r2, [pc, #164]	; (8010e18 <TIM_Base_SetConfig+0x124>)
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d017      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	4a28      	ldr	r2, [pc, #160]	; (8010e1c <TIM_Base_SetConfig+0x128>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d013      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	4a27      	ldr	r2, [pc, #156]	; (8010e20 <TIM_Base_SetConfig+0x12c>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d00f      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	4a26      	ldr	r2, [pc, #152]	; (8010e24 <TIM_Base_SetConfig+0x130>)
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d00b      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	4a25      	ldr	r2, [pc, #148]	; (8010e28 <TIM_Base_SetConfig+0x134>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d007      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4a24      	ldr	r2, [pc, #144]	; (8010e2c <TIM_Base_SetConfig+0x138>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d003      	beq.n	8010da6 <TIM_Base_SetConfig+0xb2>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4a23      	ldr	r2, [pc, #140]	; (8010e30 <TIM_Base_SetConfig+0x13c>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d108      	bne.n	8010db8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	68fa      	ldr	r2, [r7, #12]
 8010db4:	4313      	orrs	r3, r2
 8010db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	695b      	ldr	r3, [r3, #20]
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	689a      	ldr	r2, [r3, #8]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	681a      	ldr	r2, [r3, #0]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	4a0a      	ldr	r2, [pc, #40]	; (8010e08 <TIM_Base_SetConfig+0x114>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d003      	beq.n	8010dec <TIM_Base_SetConfig+0xf8>
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	4a0c      	ldr	r2, [pc, #48]	; (8010e18 <TIM_Base_SetConfig+0x124>)
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d103      	bne.n	8010df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	691a      	ldr	r2, [r3, #16]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2201      	movs	r2, #1
 8010df8:	615a      	str	r2, [r3, #20]
}
 8010dfa:	bf00      	nop
 8010dfc:	3714      	adds	r7, #20
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	40010000 	.word	0x40010000
 8010e0c:	40000400 	.word	0x40000400
 8010e10:	40000800 	.word	0x40000800
 8010e14:	40000c00 	.word	0x40000c00
 8010e18:	40010400 	.word	0x40010400
 8010e1c:	40014000 	.word	0x40014000
 8010e20:	40014400 	.word	0x40014400
 8010e24:	40014800 	.word	0x40014800
 8010e28:	40001800 	.word	0x40001800
 8010e2c:	40001c00 	.word	0x40001c00
 8010e30:	40002000 	.word	0x40002000

08010e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b087      	sub	sp, #28
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6a1b      	ldr	r3, [r3, #32]
 8010e42:	f023 0201 	bic.w	r2, r3, #1
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6a1b      	ldr	r3, [r3, #32]
 8010e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	699b      	ldr	r3, [r3, #24]
 8010e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010e5c:	68fa      	ldr	r2, [r7, #12]
 8010e5e:	4b2b      	ldr	r3, [pc, #172]	; (8010f0c <TIM_OC1_SetConfig+0xd8>)
 8010e60:	4013      	ands	r3, r2
 8010e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f023 0303 	bic.w	r3, r3, #3
 8010e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	68fa      	ldr	r2, [r7, #12]
 8010e72:	4313      	orrs	r3, r2
 8010e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	f023 0302 	bic.w	r3, r3, #2
 8010e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	689b      	ldr	r3, [r3, #8]
 8010e82:	697a      	ldr	r2, [r7, #20]
 8010e84:	4313      	orrs	r3, r2
 8010e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	4a21      	ldr	r2, [pc, #132]	; (8010f10 <TIM_OC1_SetConfig+0xdc>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d003      	beq.n	8010e98 <TIM_OC1_SetConfig+0x64>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	4a20      	ldr	r2, [pc, #128]	; (8010f14 <TIM_OC1_SetConfig+0xe0>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d10c      	bne.n	8010eb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	f023 0308 	bic.w	r3, r3, #8
 8010e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	697a      	ldr	r2, [r7, #20]
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	f023 0304 	bic.w	r3, r3, #4
 8010eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	4a16      	ldr	r2, [pc, #88]	; (8010f10 <TIM_OC1_SetConfig+0xdc>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d003      	beq.n	8010ec2 <TIM_OC1_SetConfig+0x8e>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4a15      	ldr	r2, [pc, #84]	; (8010f14 <TIM_OC1_SetConfig+0xe0>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d111      	bne.n	8010ee6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	695b      	ldr	r3, [r3, #20]
 8010ed6:	693a      	ldr	r2, [r7, #16]
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	699b      	ldr	r3, [r3, #24]
 8010ee0:	693a      	ldr	r2, [r7, #16]
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	693a      	ldr	r2, [r7, #16]
 8010eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	68fa      	ldr	r2, [r7, #12]
 8010ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	685a      	ldr	r2, [r3, #4]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	697a      	ldr	r2, [r7, #20]
 8010efe:	621a      	str	r2, [r3, #32]
}
 8010f00:	bf00      	nop
 8010f02:	371c      	adds	r7, #28
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr
 8010f0c:	fffeff8f 	.word	0xfffeff8f
 8010f10:	40010000 	.word	0x40010000
 8010f14:	40010400 	.word	0x40010400

08010f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b087      	sub	sp, #28
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6a1b      	ldr	r3, [r3, #32]
 8010f26:	f023 0210 	bic.w	r2, r3, #16
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6a1b      	ldr	r3, [r3, #32]
 8010f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	699b      	ldr	r3, [r3, #24]
 8010f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010f40:	68fa      	ldr	r2, [r7, #12]
 8010f42:	4b2e      	ldr	r3, [pc, #184]	; (8010ffc <TIM_OC2_SetConfig+0xe4>)
 8010f44:	4013      	ands	r3, r2
 8010f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	021b      	lsls	r3, r3, #8
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	4313      	orrs	r3, r2
 8010f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	f023 0320 	bic.w	r3, r3, #32
 8010f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	689b      	ldr	r3, [r3, #8]
 8010f68:	011b      	lsls	r3, r3, #4
 8010f6a:	697a      	ldr	r2, [r7, #20]
 8010f6c:	4313      	orrs	r3, r2
 8010f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	4a23      	ldr	r2, [pc, #140]	; (8011000 <TIM_OC2_SetConfig+0xe8>)
 8010f74:	4293      	cmp	r3, r2
 8010f76:	d003      	beq.n	8010f80 <TIM_OC2_SetConfig+0x68>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	4a22      	ldr	r2, [pc, #136]	; (8011004 <TIM_OC2_SetConfig+0xec>)
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	d10d      	bne.n	8010f9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	011b      	lsls	r3, r3, #4
 8010f8e:	697a      	ldr	r2, [r7, #20]
 8010f90:	4313      	orrs	r3, r2
 8010f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	4a18      	ldr	r2, [pc, #96]	; (8011000 <TIM_OC2_SetConfig+0xe8>)
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d003      	beq.n	8010fac <TIM_OC2_SetConfig+0x94>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4a17      	ldr	r2, [pc, #92]	; (8011004 <TIM_OC2_SetConfig+0xec>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d113      	bne.n	8010fd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	695b      	ldr	r3, [r3, #20]
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	693a      	ldr	r2, [r7, #16]
 8010fc4:	4313      	orrs	r3, r2
 8010fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	699b      	ldr	r3, [r3, #24]
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	693a      	ldr	r2, [r7, #16]
 8010fd0:	4313      	orrs	r3, r2
 8010fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	693a      	ldr	r2, [r7, #16]
 8010fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	685a      	ldr	r2, [r3, #4]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	621a      	str	r2, [r3, #32]
}
 8010fee:	bf00      	nop
 8010ff0:	371c      	adds	r7, #28
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop
 8010ffc:	feff8fff 	.word	0xfeff8fff
 8011000:	40010000 	.word	0x40010000
 8011004:	40010400 	.word	0x40010400

08011008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011008:	b480      	push	{r7}
 801100a:	b087      	sub	sp, #28
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6a1b      	ldr	r3, [r3, #32]
 8011016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6a1b      	ldr	r3, [r3, #32]
 8011022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	69db      	ldr	r3, [r3, #28]
 801102e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	4b2d      	ldr	r3, [pc, #180]	; (80110e8 <TIM_OC3_SetConfig+0xe0>)
 8011034:	4013      	ands	r3, r2
 8011036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f023 0303 	bic.w	r3, r3, #3
 801103e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	4313      	orrs	r3, r2
 8011048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	689b      	ldr	r3, [r3, #8]
 8011056:	021b      	lsls	r3, r3, #8
 8011058:	697a      	ldr	r2, [r7, #20]
 801105a:	4313      	orrs	r3, r2
 801105c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	4a22      	ldr	r2, [pc, #136]	; (80110ec <TIM_OC3_SetConfig+0xe4>)
 8011062:	4293      	cmp	r3, r2
 8011064:	d003      	beq.n	801106e <TIM_OC3_SetConfig+0x66>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4a21      	ldr	r2, [pc, #132]	; (80110f0 <TIM_OC3_SetConfig+0xe8>)
 801106a:	4293      	cmp	r3, r2
 801106c:	d10d      	bne.n	801108a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	021b      	lsls	r3, r3, #8
 801107c:	697a      	ldr	r2, [r7, #20]
 801107e:	4313      	orrs	r3, r2
 8011080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4a17      	ldr	r2, [pc, #92]	; (80110ec <TIM_OC3_SetConfig+0xe4>)
 801108e:	4293      	cmp	r3, r2
 8011090:	d003      	beq.n	801109a <TIM_OC3_SetConfig+0x92>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4a16      	ldr	r2, [pc, #88]	; (80110f0 <TIM_OC3_SetConfig+0xe8>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d113      	bne.n	80110c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80110a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80110a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	695b      	ldr	r3, [r3, #20]
 80110ae:	011b      	lsls	r3, r3, #4
 80110b0:	693a      	ldr	r2, [r7, #16]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	699b      	ldr	r3, [r3, #24]
 80110ba:	011b      	lsls	r3, r3, #4
 80110bc:	693a      	ldr	r2, [r7, #16]
 80110be:	4313      	orrs	r3, r2
 80110c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	693a      	ldr	r2, [r7, #16]
 80110c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	68fa      	ldr	r2, [r7, #12]
 80110cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	685a      	ldr	r2, [r3, #4]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	697a      	ldr	r2, [r7, #20]
 80110da:	621a      	str	r2, [r3, #32]
}
 80110dc:	bf00      	nop
 80110de:	371c      	adds	r7, #28
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr
 80110e8:	fffeff8f 	.word	0xfffeff8f
 80110ec:	40010000 	.word	0x40010000
 80110f0:	40010400 	.word	0x40010400

080110f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80110f4:	b480      	push	{r7}
 80110f6:	b087      	sub	sp, #28
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6a1b      	ldr	r3, [r3, #32]
 8011102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6a1b      	ldr	r3, [r3, #32]
 801110e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	69db      	ldr	r3, [r3, #28]
 801111a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801111c:	68fa      	ldr	r2, [r7, #12]
 801111e:	4b1e      	ldr	r3, [pc, #120]	; (8011198 <TIM_OC4_SetConfig+0xa4>)
 8011120:	4013      	ands	r3, r2
 8011122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801112a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	021b      	lsls	r3, r3, #8
 8011132:	68fa      	ldr	r2, [r7, #12]
 8011134:	4313      	orrs	r3, r2
 8011136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801113e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	689b      	ldr	r3, [r3, #8]
 8011144:	031b      	lsls	r3, r3, #12
 8011146:	693a      	ldr	r2, [r7, #16]
 8011148:	4313      	orrs	r3, r2
 801114a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	4a13      	ldr	r2, [pc, #76]	; (801119c <TIM_OC4_SetConfig+0xa8>)
 8011150:	4293      	cmp	r3, r2
 8011152:	d003      	beq.n	801115c <TIM_OC4_SetConfig+0x68>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	4a12      	ldr	r2, [pc, #72]	; (80111a0 <TIM_OC4_SetConfig+0xac>)
 8011158:	4293      	cmp	r3, r2
 801115a:	d109      	bne.n	8011170 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	695b      	ldr	r3, [r3, #20]
 8011168:	019b      	lsls	r3, r3, #6
 801116a:	697a      	ldr	r2, [r7, #20]
 801116c:	4313      	orrs	r3, r2
 801116e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	697a      	ldr	r2, [r7, #20]
 8011174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	68fa      	ldr	r2, [r7, #12]
 801117a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	685a      	ldr	r2, [r3, #4]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	693a      	ldr	r2, [r7, #16]
 8011188:	621a      	str	r2, [r3, #32]
}
 801118a:	bf00      	nop
 801118c:	371c      	adds	r7, #28
 801118e:	46bd      	mov	sp, r7
 8011190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011194:	4770      	bx	lr
 8011196:	bf00      	nop
 8011198:	feff8fff 	.word	0xfeff8fff
 801119c:	40010000 	.word	0x40010000
 80111a0:	40010400 	.word	0x40010400

080111a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b087      	sub	sp, #28
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a1b      	ldr	r3, [r3, #32]
 80111b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6a1b      	ldr	r3, [r3, #32]
 80111be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80111cc:	68fa      	ldr	r2, [r7, #12]
 80111ce:	4b1b      	ldr	r3, [pc, #108]	; (801123c <TIM_OC5_SetConfig+0x98>)
 80111d0:	4013      	ands	r3, r2
 80111d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	68fa      	ldr	r2, [r7, #12]
 80111da:	4313      	orrs	r3, r2
 80111dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80111e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	689b      	ldr	r3, [r3, #8]
 80111ea:	041b      	lsls	r3, r3, #16
 80111ec:	693a      	ldr	r2, [r7, #16]
 80111ee:	4313      	orrs	r3, r2
 80111f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4a12      	ldr	r2, [pc, #72]	; (8011240 <TIM_OC5_SetConfig+0x9c>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d003      	beq.n	8011202 <TIM_OC5_SetConfig+0x5e>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4a11      	ldr	r2, [pc, #68]	; (8011244 <TIM_OC5_SetConfig+0xa0>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d109      	bne.n	8011216 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	695b      	ldr	r3, [r3, #20]
 801120e:	021b      	lsls	r3, r3, #8
 8011210:	697a      	ldr	r2, [r7, #20]
 8011212:	4313      	orrs	r3, r2
 8011214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	697a      	ldr	r2, [r7, #20]
 801121a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	68fa      	ldr	r2, [r7, #12]
 8011220:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	685a      	ldr	r2, [r3, #4]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	693a      	ldr	r2, [r7, #16]
 801122e:	621a      	str	r2, [r3, #32]
}
 8011230:	bf00      	nop
 8011232:	371c      	adds	r7, #28
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr
 801123c:	fffeff8f 	.word	0xfffeff8f
 8011240:	40010000 	.word	0x40010000
 8011244:	40010400 	.word	0x40010400

08011248 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011248:	b480      	push	{r7}
 801124a:	b087      	sub	sp, #28
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a1b      	ldr	r3, [r3, #32]
 8011256:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a1b      	ldr	r3, [r3, #32]
 8011262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801126e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011270:	68fa      	ldr	r2, [r7, #12]
 8011272:	4b1c      	ldr	r3, [pc, #112]	; (80112e4 <TIM_OC6_SetConfig+0x9c>)
 8011274:	4013      	ands	r3, r2
 8011276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	021b      	lsls	r3, r3, #8
 801127e:	68fa      	ldr	r2, [r7, #12]
 8011280:	4313      	orrs	r3, r2
 8011282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801128a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	689b      	ldr	r3, [r3, #8]
 8011290:	051b      	lsls	r3, r3, #20
 8011292:	693a      	ldr	r2, [r7, #16]
 8011294:	4313      	orrs	r3, r2
 8011296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	4a13      	ldr	r2, [pc, #76]	; (80112e8 <TIM_OC6_SetConfig+0xa0>)
 801129c:	4293      	cmp	r3, r2
 801129e:	d003      	beq.n	80112a8 <TIM_OC6_SetConfig+0x60>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	4a12      	ldr	r2, [pc, #72]	; (80112ec <TIM_OC6_SetConfig+0xa4>)
 80112a4:	4293      	cmp	r3, r2
 80112a6:	d109      	bne.n	80112bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80112ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	695b      	ldr	r3, [r3, #20]
 80112b4:	029b      	lsls	r3, r3, #10
 80112b6:	697a      	ldr	r2, [r7, #20]
 80112b8:	4313      	orrs	r3, r2
 80112ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	697a      	ldr	r2, [r7, #20]
 80112c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	68fa      	ldr	r2, [r7, #12]
 80112c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	685a      	ldr	r2, [r3, #4]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	693a      	ldr	r2, [r7, #16]
 80112d4:	621a      	str	r2, [r3, #32]
}
 80112d6:	bf00      	nop
 80112d8:	371c      	adds	r7, #28
 80112da:	46bd      	mov	sp, r7
 80112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e0:	4770      	bx	lr
 80112e2:	bf00      	nop
 80112e4:	feff8fff 	.word	0xfeff8fff
 80112e8:	40010000 	.word	0x40010000
 80112ec:	40010400 	.word	0x40010400

080112f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b087      	sub	sp, #28
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	6a1b      	ldr	r3, [r3, #32]
 8011300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6a1b      	ldr	r3, [r3, #32]
 8011306:	f023 0201 	bic.w	r2, r3, #1
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	699b      	ldr	r3, [r3, #24]
 8011312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801131a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	011b      	lsls	r3, r3, #4
 8011320:	693a      	ldr	r2, [r7, #16]
 8011322:	4313      	orrs	r3, r2
 8011324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	f023 030a 	bic.w	r3, r3, #10
 801132c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801132e:	697a      	ldr	r2, [r7, #20]
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	4313      	orrs	r3, r2
 8011334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	693a      	ldr	r2, [r7, #16]
 801133a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	697a      	ldr	r2, [r7, #20]
 8011340:	621a      	str	r2, [r3, #32]
}
 8011342:	bf00      	nop
 8011344:	371c      	adds	r7, #28
 8011346:	46bd      	mov	sp, r7
 8011348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134c:	4770      	bx	lr

0801134e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801134e:	b480      	push	{r7}
 8011350:	b087      	sub	sp, #28
 8011352:	af00      	add	r7, sp, #0
 8011354:	60f8      	str	r0, [r7, #12]
 8011356:	60b9      	str	r1, [r7, #8]
 8011358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	6a1b      	ldr	r3, [r3, #32]
 801135e:	f023 0210 	bic.w	r2, r3, #16
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	699b      	ldr	r3, [r3, #24]
 801136a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	6a1b      	ldr	r3, [r3, #32]
 8011370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	031b      	lsls	r3, r3, #12
 801137e:	697a      	ldr	r2, [r7, #20]
 8011380:	4313      	orrs	r3, r2
 8011382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801138a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	011b      	lsls	r3, r3, #4
 8011390:	693a      	ldr	r2, [r7, #16]
 8011392:	4313      	orrs	r3, r2
 8011394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	697a      	ldr	r2, [r7, #20]
 801139a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	693a      	ldr	r2, [r7, #16]
 80113a0:	621a      	str	r2, [r3, #32]
}
 80113a2:	bf00      	nop
 80113a4:	371c      	adds	r7, #28
 80113a6:	46bd      	mov	sp, r7
 80113a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ac:	4770      	bx	lr

080113ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80113ae:	b480      	push	{r7}
 80113b0:	b085      	sub	sp, #20
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
 80113b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	689b      	ldr	r3, [r3, #8]
 80113bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80113c6:	683a      	ldr	r2, [r7, #0]
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	4313      	orrs	r3, r2
 80113cc:	f043 0307 	orr.w	r3, r3, #7
 80113d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	68fa      	ldr	r2, [r7, #12]
 80113d6:	609a      	str	r2, [r3, #8]
}
 80113d8:	bf00      	nop
 80113da:	3714      	adds	r7, #20
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr

080113e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b087      	sub	sp, #28
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
 80113f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	689b      	ldr	r3, [r3, #8]
 80113f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80113fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	021a      	lsls	r2, r3, #8
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	431a      	orrs	r2, r3
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	4313      	orrs	r3, r2
 801140c:	697a      	ldr	r2, [r7, #20]
 801140e:	4313      	orrs	r3, r2
 8011410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	697a      	ldr	r2, [r7, #20]
 8011416:	609a      	str	r2, [r3, #8]
}
 8011418:	bf00      	nop
 801141a:	371c      	adds	r7, #28
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr

08011424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011424:	b480      	push	{r7}
 8011426:	b085      	sub	sp, #20
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011434:	2b01      	cmp	r3, #1
 8011436:	d101      	bne.n	801143c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011438:	2302      	movs	r3, #2
 801143a:	e06d      	b.n	8011518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2201      	movs	r2, #1
 8011440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2202      	movs	r2, #2
 8011448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	689b      	ldr	r3, [r3, #8]
 801145a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4a30      	ldr	r2, [pc, #192]	; (8011524 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d004      	beq.n	8011470 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4a2f      	ldr	r2, [pc, #188]	; (8011528 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d108      	bne.n	8011482 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011476:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	68fa      	ldr	r2, [r7, #12]
 801147e:	4313      	orrs	r3, r2
 8011480:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011488:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	68fa      	ldr	r2, [r7, #12]
 8011490:	4313      	orrs	r3, r2
 8011492:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4a20      	ldr	r2, [pc, #128]	; (8011524 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d022      	beq.n	80114ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114ae:	d01d      	beq.n	80114ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4a1d      	ldr	r2, [pc, #116]	; (801152c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d018      	beq.n	80114ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	4a1c      	ldr	r2, [pc, #112]	; (8011530 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d013      	beq.n	80114ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4a1a      	ldr	r2, [pc, #104]	; (8011534 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d00e      	beq.n	80114ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4a15      	ldr	r2, [pc, #84]	; (8011528 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d009      	beq.n	80114ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	4a16      	ldr	r2, [pc, #88]	; (8011538 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80114de:	4293      	cmp	r3, r2
 80114e0:	d004      	beq.n	80114ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	4a15      	ldr	r2, [pc, #84]	; (801153c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d10c      	bne.n	8011506 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	68ba      	ldr	r2, [r7, #8]
 80114fa:	4313      	orrs	r3, r2
 80114fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	68ba      	ldr	r2, [r7, #8]
 8011504:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2201      	movs	r2, #1
 801150a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2200      	movs	r2, #0
 8011512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011516:	2300      	movs	r3, #0
}
 8011518:	4618      	mov	r0, r3
 801151a:	3714      	adds	r7, #20
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr
 8011524:	40010000 	.word	0x40010000
 8011528:	40010400 	.word	0x40010400
 801152c:	40000400 	.word	0x40000400
 8011530:	40000800 	.word	0x40000800
 8011534:	40000c00 	.word	0x40000c00
 8011538:	40014000 	.word	0x40014000
 801153c:	40001800 	.word	0x40001800

08011540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011540:	b480      	push	{r7}
 8011542:	b085      	sub	sp, #20
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801154a:	2300      	movs	r3, #0
 801154c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011554:	2b01      	cmp	r3, #1
 8011556:	d101      	bne.n	801155c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011558:	2302      	movs	r3, #2
 801155a:	e065      	b.n	8011628 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2201      	movs	r2, #1
 8011560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	68db      	ldr	r3, [r3, #12]
 801156e:	4313      	orrs	r3, r2
 8011570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	689b      	ldr	r3, [r3, #8]
 801157c:	4313      	orrs	r3, r2
 801157e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	4313      	orrs	r3, r2
 801158c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	4313      	orrs	r3, r2
 801159a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	691b      	ldr	r3, [r3, #16]
 80115a6:	4313      	orrs	r3, r2
 80115a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	695b      	ldr	r3, [r3, #20]
 80115b4:	4313      	orrs	r3, r2
 80115b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c2:	4313      	orrs	r3, r2
 80115c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	699b      	ldr	r3, [r3, #24]
 80115d0:	041b      	lsls	r3, r3, #16
 80115d2:	4313      	orrs	r3, r2
 80115d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	4a16      	ldr	r2, [pc, #88]	; (8011634 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80115dc:	4293      	cmp	r3, r2
 80115de:	d004      	beq.n	80115ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	4a14      	ldr	r2, [pc, #80]	; (8011638 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d115      	bne.n	8011616 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115f4:	051b      	lsls	r3, r3, #20
 80115f6:	4313      	orrs	r3, r2
 80115f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	69db      	ldr	r3, [r3, #28]
 8011604:	4313      	orrs	r3, r2
 8011606:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	6a1b      	ldr	r3, [r3, #32]
 8011612:	4313      	orrs	r3, r2
 8011614:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	68fa      	ldr	r2, [r7, #12]
 801161c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011626:	2300      	movs	r3, #0
}
 8011628:	4618      	mov	r0, r3
 801162a:	3714      	adds	r7, #20
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr
 8011634:	40010000 	.word	0x40010000
 8011638:	40010400 	.word	0x40010400

0801163c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801163c:	b480      	push	{r7}
 801163e:	b083      	sub	sp, #12
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011644:	bf00      	nop
 8011646:	370c      	adds	r7, #12
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011658:	bf00      	nop
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801166c:	bf00      	nop
 801166e:	370c      	adds	r7, #12
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr

08011678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d101      	bne.n	801168a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011686:	2301      	movs	r3, #1
 8011688:	e040      	b.n	801170c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801168e:	2b00      	cmp	r3, #0
 8011690:	d106      	bne.n	80116a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7f2 fa26 	bl	8003aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2224      	movs	r2, #36	; 0x24
 80116a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f022 0201 	bic.w	r2, r2, #1
 80116b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 f8c0 	bl	801183c <UART_SetConfig>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b01      	cmp	r3, #1
 80116c0:	d101      	bne.n	80116c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80116c2:	2301      	movs	r3, #1
 80116c4:	e022      	b.n	801170c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d002      	beq.n	80116d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 fb18 	bl	8011d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	685a      	ldr	r2, [r3, #4]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80116e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	689a      	ldr	r2, [r3, #8]
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80116f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	f042 0201 	orr.w	r2, r2, #1
 8011702:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 fb9f 	bl	8011e48 <UART_CheckIdleState>
 801170a:	4603      	mov	r3, r0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b08a      	sub	sp, #40	; 0x28
 8011718:	af02      	add	r7, sp, #8
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	603b      	str	r3, [r7, #0]
 8011720:	4613      	mov	r3, r2
 8011722:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011728:	2b20      	cmp	r3, #32
 801172a:	f040 8081 	bne.w	8011830 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d002      	beq.n	801173a <HAL_UART_Transmit+0x26>
 8011734:	88fb      	ldrh	r3, [r7, #6]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d101      	bne.n	801173e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801173a:	2301      	movs	r3, #1
 801173c:	e079      	b.n	8011832 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011744:	2b01      	cmp	r3, #1
 8011746:	d101      	bne.n	801174c <HAL_UART_Transmit+0x38>
 8011748:	2302      	movs	r3, #2
 801174a:	e072      	b.n	8011832 <HAL_UART_Transmit+0x11e>
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2201      	movs	r2, #1
 8011750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2200      	movs	r2, #0
 8011758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2221      	movs	r2, #33	; 0x21
 8011760:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011762:	f7f5 fc3f 	bl	8006fe4 <HAL_GetTick>
 8011766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	88fa      	ldrh	r2, [r7, #6]
 801176c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	88fa      	ldrh	r2, [r7, #6]
 8011774:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	689b      	ldr	r3, [r3, #8]
 801177c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011780:	d108      	bne.n	8011794 <HAL_UART_Transmit+0x80>
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	691b      	ldr	r3, [r3, #16]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d104      	bne.n	8011794 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 801178a:	2300      	movs	r3, #0
 801178c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	61bb      	str	r3, [r7, #24]
 8011792:	e003      	b.n	801179c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011798:	2300      	movs	r3, #0
 801179a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2200      	movs	r2, #0
 80117a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80117a4:	e02c      	b.n	8011800 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	2200      	movs	r2, #0
 80117ae:	2180      	movs	r1, #128	; 0x80
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	f000 fb7c 	bl	8011eae <UART_WaitOnFlagUntilTimeout>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d001      	beq.n	80117c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80117bc:	2303      	movs	r3, #3
 80117be:	e038      	b.n	8011832 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d10b      	bne.n	80117de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	881b      	ldrh	r3, [r3, #0]
 80117ca:	461a      	mov	r2, r3
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80117d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	3302      	adds	r3, #2
 80117da:	61bb      	str	r3, [r7, #24]
 80117dc:	e007      	b.n	80117ee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80117de:	69fb      	ldr	r3, [r7, #28]
 80117e0:	781a      	ldrb	r2, [r3, #0]
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	3301      	adds	r3, #1
 80117ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	3b01      	subs	r3, #1
 80117f8:	b29a      	uxth	r2, r3
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011806:	b29b      	uxth	r3, r3
 8011808:	2b00      	cmp	r3, #0
 801180a:	d1cc      	bne.n	80117a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	9300      	str	r3, [sp, #0]
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	2200      	movs	r2, #0
 8011814:	2140      	movs	r1, #64	; 0x40
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f000 fb49 	bl	8011eae <UART_WaitOnFlagUntilTimeout>
 801181c:	4603      	mov	r3, r0
 801181e:	2b00      	cmp	r3, #0
 8011820:	d001      	beq.n	8011826 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8011822:	2303      	movs	r3, #3
 8011824:	e005      	b.n	8011832 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2220      	movs	r2, #32
 801182a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801182c:	2300      	movs	r3, #0
 801182e:	e000      	b.n	8011832 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8011830:	2302      	movs	r3, #2
  }
}
 8011832:	4618      	mov	r0, r3
 8011834:	3720      	adds	r7, #32
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
	...

0801183c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b088      	sub	sp, #32
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011844:	2300      	movs	r3, #0
 8011846:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	689a      	ldr	r2, [r3, #8]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	691b      	ldr	r3, [r3, #16]
 8011850:	431a      	orrs	r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	695b      	ldr	r3, [r3, #20]
 8011856:	431a      	orrs	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	69db      	ldr	r3, [r3, #28]
 801185c:	4313      	orrs	r3, r2
 801185e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	681a      	ldr	r2, [r3, #0]
 8011866:	4ba6      	ldr	r3, [pc, #664]	; (8011b00 <UART_SetConfig+0x2c4>)
 8011868:	4013      	ands	r3, r2
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	6812      	ldr	r2, [r2, #0]
 801186e:	6979      	ldr	r1, [r7, #20]
 8011870:	430b      	orrs	r3, r1
 8011872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	68da      	ldr	r2, [r3, #12]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	430a      	orrs	r2, r1
 8011888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	699b      	ldr	r3, [r3, #24]
 801188e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6a1b      	ldr	r3, [r3, #32]
 8011894:	697a      	ldr	r2, [r7, #20]
 8011896:	4313      	orrs	r3, r2
 8011898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	689b      	ldr	r3, [r3, #8]
 80118a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	697a      	ldr	r2, [r7, #20]
 80118aa:	430a      	orrs	r2, r1
 80118ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	4a94      	ldr	r2, [pc, #592]	; (8011b04 <UART_SetConfig+0x2c8>)
 80118b4:	4293      	cmp	r3, r2
 80118b6:	d120      	bne.n	80118fa <UART_SetConfig+0xbe>
 80118b8:	4b93      	ldr	r3, [pc, #588]	; (8011b08 <UART_SetConfig+0x2cc>)
 80118ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118be:	f003 0303 	and.w	r3, r3, #3
 80118c2:	2b03      	cmp	r3, #3
 80118c4:	d816      	bhi.n	80118f4 <UART_SetConfig+0xb8>
 80118c6:	a201      	add	r2, pc, #4	; (adr r2, 80118cc <UART_SetConfig+0x90>)
 80118c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118cc:	080118dd 	.word	0x080118dd
 80118d0:	080118e9 	.word	0x080118e9
 80118d4:	080118e3 	.word	0x080118e3
 80118d8:	080118ef 	.word	0x080118ef
 80118dc:	2301      	movs	r3, #1
 80118de:	77fb      	strb	r3, [r7, #31]
 80118e0:	e150      	b.n	8011b84 <UART_SetConfig+0x348>
 80118e2:	2302      	movs	r3, #2
 80118e4:	77fb      	strb	r3, [r7, #31]
 80118e6:	e14d      	b.n	8011b84 <UART_SetConfig+0x348>
 80118e8:	2304      	movs	r3, #4
 80118ea:	77fb      	strb	r3, [r7, #31]
 80118ec:	e14a      	b.n	8011b84 <UART_SetConfig+0x348>
 80118ee:	2308      	movs	r3, #8
 80118f0:	77fb      	strb	r3, [r7, #31]
 80118f2:	e147      	b.n	8011b84 <UART_SetConfig+0x348>
 80118f4:	2310      	movs	r3, #16
 80118f6:	77fb      	strb	r3, [r7, #31]
 80118f8:	e144      	b.n	8011b84 <UART_SetConfig+0x348>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	4a83      	ldr	r2, [pc, #524]	; (8011b0c <UART_SetConfig+0x2d0>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d132      	bne.n	801196a <UART_SetConfig+0x12e>
 8011904:	4b80      	ldr	r3, [pc, #512]	; (8011b08 <UART_SetConfig+0x2cc>)
 8011906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801190a:	f003 030c 	and.w	r3, r3, #12
 801190e:	2b0c      	cmp	r3, #12
 8011910:	d828      	bhi.n	8011964 <UART_SetConfig+0x128>
 8011912:	a201      	add	r2, pc, #4	; (adr r2, 8011918 <UART_SetConfig+0xdc>)
 8011914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011918:	0801194d 	.word	0x0801194d
 801191c:	08011965 	.word	0x08011965
 8011920:	08011965 	.word	0x08011965
 8011924:	08011965 	.word	0x08011965
 8011928:	08011959 	.word	0x08011959
 801192c:	08011965 	.word	0x08011965
 8011930:	08011965 	.word	0x08011965
 8011934:	08011965 	.word	0x08011965
 8011938:	08011953 	.word	0x08011953
 801193c:	08011965 	.word	0x08011965
 8011940:	08011965 	.word	0x08011965
 8011944:	08011965 	.word	0x08011965
 8011948:	0801195f 	.word	0x0801195f
 801194c:	2300      	movs	r3, #0
 801194e:	77fb      	strb	r3, [r7, #31]
 8011950:	e118      	b.n	8011b84 <UART_SetConfig+0x348>
 8011952:	2302      	movs	r3, #2
 8011954:	77fb      	strb	r3, [r7, #31]
 8011956:	e115      	b.n	8011b84 <UART_SetConfig+0x348>
 8011958:	2304      	movs	r3, #4
 801195a:	77fb      	strb	r3, [r7, #31]
 801195c:	e112      	b.n	8011b84 <UART_SetConfig+0x348>
 801195e:	2308      	movs	r3, #8
 8011960:	77fb      	strb	r3, [r7, #31]
 8011962:	e10f      	b.n	8011b84 <UART_SetConfig+0x348>
 8011964:	2310      	movs	r3, #16
 8011966:	77fb      	strb	r3, [r7, #31]
 8011968:	e10c      	b.n	8011b84 <UART_SetConfig+0x348>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	4a68      	ldr	r2, [pc, #416]	; (8011b10 <UART_SetConfig+0x2d4>)
 8011970:	4293      	cmp	r3, r2
 8011972:	d120      	bne.n	80119b6 <UART_SetConfig+0x17a>
 8011974:	4b64      	ldr	r3, [pc, #400]	; (8011b08 <UART_SetConfig+0x2cc>)
 8011976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801197a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801197e:	2b30      	cmp	r3, #48	; 0x30
 8011980:	d013      	beq.n	80119aa <UART_SetConfig+0x16e>
 8011982:	2b30      	cmp	r3, #48	; 0x30
 8011984:	d814      	bhi.n	80119b0 <UART_SetConfig+0x174>
 8011986:	2b20      	cmp	r3, #32
 8011988:	d009      	beq.n	801199e <UART_SetConfig+0x162>
 801198a:	2b20      	cmp	r3, #32
 801198c:	d810      	bhi.n	80119b0 <UART_SetConfig+0x174>
 801198e:	2b00      	cmp	r3, #0
 8011990:	d002      	beq.n	8011998 <UART_SetConfig+0x15c>
 8011992:	2b10      	cmp	r3, #16
 8011994:	d006      	beq.n	80119a4 <UART_SetConfig+0x168>
 8011996:	e00b      	b.n	80119b0 <UART_SetConfig+0x174>
 8011998:	2300      	movs	r3, #0
 801199a:	77fb      	strb	r3, [r7, #31]
 801199c:	e0f2      	b.n	8011b84 <UART_SetConfig+0x348>
 801199e:	2302      	movs	r3, #2
 80119a0:	77fb      	strb	r3, [r7, #31]
 80119a2:	e0ef      	b.n	8011b84 <UART_SetConfig+0x348>
 80119a4:	2304      	movs	r3, #4
 80119a6:	77fb      	strb	r3, [r7, #31]
 80119a8:	e0ec      	b.n	8011b84 <UART_SetConfig+0x348>
 80119aa:	2308      	movs	r3, #8
 80119ac:	77fb      	strb	r3, [r7, #31]
 80119ae:	e0e9      	b.n	8011b84 <UART_SetConfig+0x348>
 80119b0:	2310      	movs	r3, #16
 80119b2:	77fb      	strb	r3, [r7, #31]
 80119b4:	e0e6      	b.n	8011b84 <UART_SetConfig+0x348>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	4a56      	ldr	r2, [pc, #344]	; (8011b14 <UART_SetConfig+0x2d8>)
 80119bc:	4293      	cmp	r3, r2
 80119be:	d120      	bne.n	8011a02 <UART_SetConfig+0x1c6>
 80119c0:	4b51      	ldr	r3, [pc, #324]	; (8011b08 <UART_SetConfig+0x2cc>)
 80119c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80119ca:	2bc0      	cmp	r3, #192	; 0xc0
 80119cc:	d013      	beq.n	80119f6 <UART_SetConfig+0x1ba>
 80119ce:	2bc0      	cmp	r3, #192	; 0xc0
 80119d0:	d814      	bhi.n	80119fc <UART_SetConfig+0x1c0>
 80119d2:	2b80      	cmp	r3, #128	; 0x80
 80119d4:	d009      	beq.n	80119ea <UART_SetConfig+0x1ae>
 80119d6:	2b80      	cmp	r3, #128	; 0x80
 80119d8:	d810      	bhi.n	80119fc <UART_SetConfig+0x1c0>
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d002      	beq.n	80119e4 <UART_SetConfig+0x1a8>
 80119de:	2b40      	cmp	r3, #64	; 0x40
 80119e0:	d006      	beq.n	80119f0 <UART_SetConfig+0x1b4>
 80119e2:	e00b      	b.n	80119fc <UART_SetConfig+0x1c0>
 80119e4:	2300      	movs	r3, #0
 80119e6:	77fb      	strb	r3, [r7, #31]
 80119e8:	e0cc      	b.n	8011b84 <UART_SetConfig+0x348>
 80119ea:	2302      	movs	r3, #2
 80119ec:	77fb      	strb	r3, [r7, #31]
 80119ee:	e0c9      	b.n	8011b84 <UART_SetConfig+0x348>
 80119f0:	2304      	movs	r3, #4
 80119f2:	77fb      	strb	r3, [r7, #31]
 80119f4:	e0c6      	b.n	8011b84 <UART_SetConfig+0x348>
 80119f6:	2308      	movs	r3, #8
 80119f8:	77fb      	strb	r3, [r7, #31]
 80119fa:	e0c3      	b.n	8011b84 <UART_SetConfig+0x348>
 80119fc:	2310      	movs	r3, #16
 80119fe:	77fb      	strb	r3, [r7, #31]
 8011a00:	e0c0      	b.n	8011b84 <UART_SetConfig+0x348>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	4a44      	ldr	r2, [pc, #272]	; (8011b18 <UART_SetConfig+0x2dc>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d125      	bne.n	8011a58 <UART_SetConfig+0x21c>
 8011a0c:	4b3e      	ldr	r3, [pc, #248]	; (8011b08 <UART_SetConfig+0x2cc>)
 8011a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a1a:	d017      	beq.n	8011a4c <UART_SetConfig+0x210>
 8011a1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a20:	d817      	bhi.n	8011a52 <UART_SetConfig+0x216>
 8011a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a26:	d00b      	beq.n	8011a40 <UART_SetConfig+0x204>
 8011a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a2c:	d811      	bhi.n	8011a52 <UART_SetConfig+0x216>
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d003      	beq.n	8011a3a <UART_SetConfig+0x1fe>
 8011a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a36:	d006      	beq.n	8011a46 <UART_SetConfig+0x20a>
 8011a38:	e00b      	b.n	8011a52 <UART_SetConfig+0x216>
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	77fb      	strb	r3, [r7, #31]
 8011a3e:	e0a1      	b.n	8011b84 <UART_SetConfig+0x348>
 8011a40:	2302      	movs	r3, #2
 8011a42:	77fb      	strb	r3, [r7, #31]
 8011a44:	e09e      	b.n	8011b84 <UART_SetConfig+0x348>
 8011a46:	2304      	movs	r3, #4
 8011a48:	77fb      	strb	r3, [r7, #31]
 8011a4a:	e09b      	b.n	8011b84 <UART_SetConfig+0x348>
 8011a4c:	2308      	movs	r3, #8
 8011a4e:	77fb      	strb	r3, [r7, #31]
 8011a50:	e098      	b.n	8011b84 <UART_SetConfig+0x348>
 8011a52:	2310      	movs	r3, #16
 8011a54:	77fb      	strb	r3, [r7, #31]
 8011a56:	e095      	b.n	8011b84 <UART_SetConfig+0x348>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	4a2f      	ldr	r2, [pc, #188]	; (8011b1c <UART_SetConfig+0x2e0>)
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d125      	bne.n	8011aae <UART_SetConfig+0x272>
 8011a62:	4b29      	ldr	r3, [pc, #164]	; (8011b08 <UART_SetConfig+0x2cc>)
 8011a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011a6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a70:	d017      	beq.n	8011aa2 <UART_SetConfig+0x266>
 8011a72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a76:	d817      	bhi.n	8011aa8 <UART_SetConfig+0x26c>
 8011a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a7c:	d00b      	beq.n	8011a96 <UART_SetConfig+0x25a>
 8011a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a82:	d811      	bhi.n	8011aa8 <UART_SetConfig+0x26c>
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d003      	beq.n	8011a90 <UART_SetConfig+0x254>
 8011a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a8c:	d006      	beq.n	8011a9c <UART_SetConfig+0x260>
 8011a8e:	e00b      	b.n	8011aa8 <UART_SetConfig+0x26c>
 8011a90:	2301      	movs	r3, #1
 8011a92:	77fb      	strb	r3, [r7, #31]
 8011a94:	e076      	b.n	8011b84 <UART_SetConfig+0x348>
 8011a96:	2302      	movs	r3, #2
 8011a98:	77fb      	strb	r3, [r7, #31]
 8011a9a:	e073      	b.n	8011b84 <UART_SetConfig+0x348>
 8011a9c:	2304      	movs	r3, #4
 8011a9e:	77fb      	strb	r3, [r7, #31]
 8011aa0:	e070      	b.n	8011b84 <UART_SetConfig+0x348>
 8011aa2:	2308      	movs	r3, #8
 8011aa4:	77fb      	strb	r3, [r7, #31]
 8011aa6:	e06d      	b.n	8011b84 <UART_SetConfig+0x348>
 8011aa8:	2310      	movs	r3, #16
 8011aaa:	77fb      	strb	r3, [r7, #31]
 8011aac:	e06a      	b.n	8011b84 <UART_SetConfig+0x348>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	4a1b      	ldr	r2, [pc, #108]	; (8011b20 <UART_SetConfig+0x2e4>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d138      	bne.n	8011b2a <UART_SetConfig+0x2ee>
 8011ab8:	4b13      	ldr	r3, [pc, #76]	; (8011b08 <UART_SetConfig+0x2cc>)
 8011aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011abe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011ac2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011ac6:	d017      	beq.n	8011af8 <UART_SetConfig+0x2bc>
 8011ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011acc:	d82a      	bhi.n	8011b24 <UART_SetConfig+0x2e8>
 8011ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ad2:	d00b      	beq.n	8011aec <UART_SetConfig+0x2b0>
 8011ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ad8:	d824      	bhi.n	8011b24 <UART_SetConfig+0x2e8>
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d003      	beq.n	8011ae6 <UART_SetConfig+0x2aa>
 8011ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ae2:	d006      	beq.n	8011af2 <UART_SetConfig+0x2b6>
 8011ae4:	e01e      	b.n	8011b24 <UART_SetConfig+0x2e8>
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	77fb      	strb	r3, [r7, #31]
 8011aea:	e04b      	b.n	8011b84 <UART_SetConfig+0x348>
 8011aec:	2302      	movs	r3, #2
 8011aee:	77fb      	strb	r3, [r7, #31]
 8011af0:	e048      	b.n	8011b84 <UART_SetConfig+0x348>
 8011af2:	2304      	movs	r3, #4
 8011af4:	77fb      	strb	r3, [r7, #31]
 8011af6:	e045      	b.n	8011b84 <UART_SetConfig+0x348>
 8011af8:	2308      	movs	r3, #8
 8011afa:	77fb      	strb	r3, [r7, #31]
 8011afc:	e042      	b.n	8011b84 <UART_SetConfig+0x348>
 8011afe:	bf00      	nop
 8011b00:	efff69f3 	.word	0xefff69f3
 8011b04:	40011000 	.word	0x40011000
 8011b08:	40023800 	.word	0x40023800
 8011b0c:	40004400 	.word	0x40004400
 8011b10:	40004800 	.word	0x40004800
 8011b14:	40004c00 	.word	0x40004c00
 8011b18:	40005000 	.word	0x40005000
 8011b1c:	40011400 	.word	0x40011400
 8011b20:	40007800 	.word	0x40007800
 8011b24:	2310      	movs	r3, #16
 8011b26:	77fb      	strb	r3, [r7, #31]
 8011b28:	e02c      	b.n	8011b84 <UART_SetConfig+0x348>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	4a72      	ldr	r2, [pc, #456]	; (8011cf8 <UART_SetConfig+0x4bc>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d125      	bne.n	8011b80 <UART_SetConfig+0x344>
 8011b34:	4b71      	ldr	r3, [pc, #452]	; (8011cfc <UART_SetConfig+0x4c0>)
 8011b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011b3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b42:	d017      	beq.n	8011b74 <UART_SetConfig+0x338>
 8011b44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b48:	d817      	bhi.n	8011b7a <UART_SetConfig+0x33e>
 8011b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b4e:	d00b      	beq.n	8011b68 <UART_SetConfig+0x32c>
 8011b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b54:	d811      	bhi.n	8011b7a <UART_SetConfig+0x33e>
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d003      	beq.n	8011b62 <UART_SetConfig+0x326>
 8011b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b5e:	d006      	beq.n	8011b6e <UART_SetConfig+0x332>
 8011b60:	e00b      	b.n	8011b7a <UART_SetConfig+0x33e>
 8011b62:	2300      	movs	r3, #0
 8011b64:	77fb      	strb	r3, [r7, #31]
 8011b66:	e00d      	b.n	8011b84 <UART_SetConfig+0x348>
 8011b68:	2302      	movs	r3, #2
 8011b6a:	77fb      	strb	r3, [r7, #31]
 8011b6c:	e00a      	b.n	8011b84 <UART_SetConfig+0x348>
 8011b6e:	2304      	movs	r3, #4
 8011b70:	77fb      	strb	r3, [r7, #31]
 8011b72:	e007      	b.n	8011b84 <UART_SetConfig+0x348>
 8011b74:	2308      	movs	r3, #8
 8011b76:	77fb      	strb	r3, [r7, #31]
 8011b78:	e004      	b.n	8011b84 <UART_SetConfig+0x348>
 8011b7a:	2310      	movs	r3, #16
 8011b7c:	77fb      	strb	r3, [r7, #31]
 8011b7e:	e001      	b.n	8011b84 <UART_SetConfig+0x348>
 8011b80:	2310      	movs	r3, #16
 8011b82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	69db      	ldr	r3, [r3, #28]
 8011b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b8c:	d15c      	bne.n	8011c48 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8011b8e:	7ffb      	ldrb	r3, [r7, #31]
 8011b90:	2b08      	cmp	r3, #8
 8011b92:	d828      	bhi.n	8011be6 <UART_SetConfig+0x3aa>
 8011b94:	a201      	add	r2, pc, #4	; (adr r2, 8011b9c <UART_SetConfig+0x360>)
 8011b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b9a:	bf00      	nop
 8011b9c:	08011bc1 	.word	0x08011bc1
 8011ba0:	08011bc9 	.word	0x08011bc9
 8011ba4:	08011bd1 	.word	0x08011bd1
 8011ba8:	08011be7 	.word	0x08011be7
 8011bac:	08011bd7 	.word	0x08011bd7
 8011bb0:	08011be7 	.word	0x08011be7
 8011bb4:	08011be7 	.word	0x08011be7
 8011bb8:	08011be7 	.word	0x08011be7
 8011bbc:	08011bdf 	.word	0x08011bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011bc0:	f7fb fd9a 	bl	800d6f8 <HAL_RCC_GetPCLK1Freq>
 8011bc4:	61b8      	str	r0, [r7, #24]
        break;
 8011bc6:	e013      	b.n	8011bf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011bc8:	f7fb fdaa 	bl	800d720 <HAL_RCC_GetPCLK2Freq>
 8011bcc:	61b8      	str	r0, [r7, #24]
        break;
 8011bce:	e00f      	b.n	8011bf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011bd0:	4b4b      	ldr	r3, [pc, #300]	; (8011d00 <UART_SetConfig+0x4c4>)
 8011bd2:	61bb      	str	r3, [r7, #24]
        break;
 8011bd4:	e00c      	b.n	8011bf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011bd6:	f7fb fcbd 	bl	800d554 <HAL_RCC_GetSysClockFreq>
 8011bda:	61b8      	str	r0, [r7, #24]
        break;
 8011bdc:	e008      	b.n	8011bf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011be2:	61bb      	str	r3, [r7, #24]
        break;
 8011be4:	e004      	b.n	8011bf0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8011be6:	2300      	movs	r3, #0
 8011be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011bea:	2301      	movs	r3, #1
 8011bec:	77bb      	strb	r3, [r7, #30]
        break;
 8011bee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d074      	beq.n	8011ce0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	005a      	lsls	r2, r3, #1
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	085b      	lsrs	r3, r3, #1
 8011c00:	441a      	add	r2, r3
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	2b0f      	cmp	r3, #15
 8011c12:	d916      	bls.n	8011c42 <UART_SetConfig+0x406>
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c1a:	d212      	bcs.n	8011c42 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	f023 030f 	bic.w	r3, r3, #15
 8011c24:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	085b      	lsrs	r3, r3, #1
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	f003 0307 	and.w	r3, r3, #7
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	89fb      	ldrh	r3, [r7, #14]
 8011c34:	4313      	orrs	r3, r2
 8011c36:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	89fa      	ldrh	r2, [r7, #14]
 8011c3e:	60da      	str	r2, [r3, #12]
 8011c40:	e04e      	b.n	8011ce0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011c42:	2301      	movs	r3, #1
 8011c44:	77bb      	strb	r3, [r7, #30]
 8011c46:	e04b      	b.n	8011ce0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c48:	7ffb      	ldrb	r3, [r7, #31]
 8011c4a:	2b08      	cmp	r3, #8
 8011c4c:	d827      	bhi.n	8011c9e <UART_SetConfig+0x462>
 8011c4e:	a201      	add	r2, pc, #4	; (adr r2, 8011c54 <UART_SetConfig+0x418>)
 8011c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c54:	08011c79 	.word	0x08011c79
 8011c58:	08011c81 	.word	0x08011c81
 8011c5c:	08011c89 	.word	0x08011c89
 8011c60:	08011c9f 	.word	0x08011c9f
 8011c64:	08011c8f 	.word	0x08011c8f
 8011c68:	08011c9f 	.word	0x08011c9f
 8011c6c:	08011c9f 	.word	0x08011c9f
 8011c70:	08011c9f 	.word	0x08011c9f
 8011c74:	08011c97 	.word	0x08011c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c78:	f7fb fd3e 	bl	800d6f8 <HAL_RCC_GetPCLK1Freq>
 8011c7c:	61b8      	str	r0, [r7, #24]
        break;
 8011c7e:	e013      	b.n	8011ca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c80:	f7fb fd4e 	bl	800d720 <HAL_RCC_GetPCLK2Freq>
 8011c84:	61b8      	str	r0, [r7, #24]
        break;
 8011c86:	e00f      	b.n	8011ca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011c88:	4b1d      	ldr	r3, [pc, #116]	; (8011d00 <UART_SetConfig+0x4c4>)
 8011c8a:	61bb      	str	r3, [r7, #24]
        break;
 8011c8c:	e00c      	b.n	8011ca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011c8e:	f7fb fc61 	bl	800d554 <HAL_RCC_GetSysClockFreq>
 8011c92:	61b8      	str	r0, [r7, #24]
        break;
 8011c94:	e008      	b.n	8011ca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c9a:	61bb      	str	r3, [r7, #24]
        break;
 8011c9c:	e004      	b.n	8011ca8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	77bb      	strb	r3, [r7, #30]
        break;
 8011ca6:	bf00      	nop
    }

    if (pclk != 0U)
 8011ca8:	69bb      	ldr	r3, [r7, #24]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d018      	beq.n	8011ce0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	085a      	lsrs	r2, r3, #1
 8011cb4:	69bb      	ldr	r3, [r7, #24]
 8011cb6:	441a      	add	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	2b0f      	cmp	r3, #15
 8011cc8:	d908      	bls.n	8011cdc <UART_SetConfig+0x4a0>
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cd0:	d204      	bcs.n	8011cdc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	693a      	ldr	r2, [r7, #16]
 8011cd8:	60da      	str	r2, [r3, #12]
 8011cda:	e001      	b.n	8011ce0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8011cec:	7fbb      	ldrb	r3, [r7, #30]
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3720      	adds	r7, #32
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	40007c00 	.word	0x40007c00
 8011cfc:	40023800 	.word	0x40023800
 8011d00:	00f42400 	.word	0x00f42400

08011d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011d04:	b480      	push	{r7}
 8011d06:	b083      	sub	sp, #12
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d10:	f003 0301 	and.w	r3, r3, #1
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d00a      	beq.n	8011d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	430a      	orrs	r2, r1
 8011d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d32:	f003 0302 	and.w	r3, r3, #2
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d00a      	beq.n	8011d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	430a      	orrs	r2, r1
 8011d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d54:	f003 0304 	and.w	r3, r3, #4
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d00a      	beq.n	8011d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	430a      	orrs	r2, r1
 8011d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d76:	f003 0308 	and.w	r3, r3, #8
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d00a      	beq.n	8011d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	430a      	orrs	r2, r1
 8011d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d98:	f003 0310 	and.w	r3, r3, #16
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d00a      	beq.n	8011db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	430a      	orrs	r2, r1
 8011db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dba:	f003 0320 	and.w	r3, r3, #32
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d00a      	beq.n	8011dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	430a      	orrs	r2, r1
 8011dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d01a      	beq.n	8011e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	430a      	orrs	r2, r1
 8011df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e02:	d10a      	bne.n	8011e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	430a      	orrs	r2, r1
 8011e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00a      	beq.n	8011e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	430a      	orrs	r2, r1
 8011e3a:	605a      	str	r2, [r3, #4]
  }
}
 8011e3c:	bf00      	nop
 8011e3e:	370c      	adds	r7, #12
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr

08011e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b086      	sub	sp, #24
 8011e4c:	af02      	add	r7, sp, #8
 8011e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011e58:	f7f5 f8c4 	bl	8006fe4 <HAL_GetTick>
 8011e5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f003 0308 	and.w	r3, r3, #8
 8011e68:	2b08      	cmp	r3, #8
 8011e6a:	d10e      	bne.n	8011e8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2200      	movs	r2, #0
 8011e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 f817 	bl	8011eae <UART_WaitOnFlagUntilTimeout>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d001      	beq.n	8011e8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e86:	2303      	movs	r3, #3
 8011e88:	e00d      	b.n	8011ea6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2220      	movs	r2, #32
 8011e8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2220      	movs	r2, #32
 8011e94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8011ea4:	2300      	movs	r3, #0
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3710      	adds	r7, #16
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b084      	sub	sp, #16
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	60f8      	str	r0, [r7, #12]
 8011eb6:	60b9      	str	r1, [r7, #8]
 8011eb8:	603b      	str	r3, [r7, #0]
 8011eba:	4613      	mov	r3, r2
 8011ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ebe:	e05e      	b.n	8011f7e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ec0:	69bb      	ldr	r3, [r7, #24]
 8011ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ec6:	d05a      	beq.n	8011f7e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ec8:	f7f5 f88c 	bl	8006fe4 <HAL_GetTick>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	1ad3      	subs	r3, r2, r3
 8011ed2:	69ba      	ldr	r2, [r7, #24]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d302      	bcc.n	8011ede <UART_WaitOnFlagUntilTimeout+0x30>
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d11b      	bne.n	8011f16 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011eec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	689a      	ldr	r2, [r3, #8]
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f022 0201 	bic.w	r2, r2, #1
 8011efc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2220      	movs	r2, #32
 8011f02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2220      	movs	r2, #32
 8011f08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8011f12:	2303      	movs	r3, #3
 8011f14:	e043      	b.n	8011f9e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	f003 0304 	and.w	r3, r3, #4
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d02c      	beq.n	8011f7e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	69db      	ldr	r3, [r3, #28]
 8011f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f32:	d124      	bne.n	8011f7e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	681a      	ldr	r2, [r3, #0]
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011f4c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	689a      	ldr	r2, [r3, #8]
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	f022 0201 	bic.w	r2, r2, #1
 8011f5c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2220      	movs	r2, #32
 8011f62:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2220      	movs	r2, #32
 8011f68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2220      	movs	r2, #32
 8011f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2200      	movs	r2, #0
 8011f76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8011f7a:	2303      	movs	r3, #3
 8011f7c:	e00f      	b.n	8011f9e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	69da      	ldr	r2, [r3, #28]
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	4013      	ands	r3, r2
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	bf0c      	ite	eq
 8011f8e:	2301      	moveq	r3, #1
 8011f90:	2300      	movne	r3, #0
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	461a      	mov	r2, r3
 8011f96:	79fb      	ldrb	r3, [r7, #7]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d091      	beq.n	8011ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011f9c:	2300      	movs	r3, #0
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3710      	adds	r7, #16
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
	...

08011fa8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b085      	sub	sp, #20
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2b01      	cmp	r3, #1
 8011fc0:	d027      	beq.n	8012012 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011fc8:	68fa      	ldr	r2, [r7, #12]
 8011fca:	4b2f      	ldr	r3, [pc, #188]	; (8012088 <FMC_SDRAM_Init+0xe0>)
 8011fcc:	4013      	ands	r3, r2
 8011fce:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011fd8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8011fde:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8011fe4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8011fea:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8011ff0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8011ff6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8011ffc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8012002:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012004:	68fa      	ldr	r2, [r7, #12]
 8012006:	4313      	orrs	r3, r2
 8012008:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	68fa      	ldr	r2, [r7, #12]
 801200e:	601a      	str	r2, [r3, #0]
 8012010:	e032      	b.n	8012078 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801201e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8012028:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801202e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8012030:	68fa      	ldr	r2, [r7, #12]
 8012032:	4313      	orrs	r3, r2
 8012034:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801203c:	68ba      	ldr	r2, [r7, #8]
 801203e:	4b12      	ldr	r3, [pc, #72]	; (8012088 <FMC_SDRAM_Init+0xe0>)
 8012040:	4013      	ands	r3, r2
 8012042:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801204c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8012052:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8012058:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 801205e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8012064:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	4313      	orrs	r3, r2
 801206a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	68fa      	ldr	r2, [r7, #12]
 8012070:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	68ba      	ldr	r2, [r7, #8]
 8012076:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8012078:	2300      	movs	r3, #0
}
 801207a:	4618      	mov	r0, r3
 801207c:	3714      	adds	r7, #20
 801207e:	46bd      	mov	sp, r7
 8012080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012084:	4770      	bx	lr
 8012086:	bf00      	nop
 8012088:	ffff8000 	.word	0xffff8000

0801208c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801208c:	b480      	push	{r7}
 801208e:	b087      	sub	sp, #28
 8012090:	af00      	add	r7, sp, #0
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	60b9      	str	r1, [r7, #8]
 8012096:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8012098:	2300      	movs	r3, #0
 801209a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 801209c:	2300      	movs	r3, #0
 801209e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d02e      	beq.n	8012104 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	689b      	ldr	r3, [r3, #8]
 80120aa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80120b2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	3b01      	subs	r3, #1
 80120c0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80120c2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	689b      	ldr	r3, [r3, #8]
 80120c8:	3b01      	subs	r3, #1
 80120ca:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80120cc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	3b01      	subs	r3, #1
 80120d4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80120d6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	691b      	ldr	r3, [r3, #16]
 80120dc:	3b01      	subs	r3, #1
 80120de:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80120e0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	695b      	ldr	r3, [r3, #20]
 80120e6:	3b01      	subs	r3, #1
 80120e8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80120ea:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	699b      	ldr	r3, [r3, #24]
 80120f0:	3b01      	subs	r3, #1
 80120f2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80120f4:	4313      	orrs	r3, r2
 80120f6:	697a      	ldr	r2, [r7, #20]
 80120f8:	4313      	orrs	r3, r2
 80120fa:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	697a      	ldr	r2, [r7, #20]
 8012100:	609a      	str	r2, [r3, #8]
 8012102:	e039      	b.n	8012178 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 801210a:	697a      	ldr	r2, [r7, #20]
 801210c:	4b1e      	ldr	r3, [pc, #120]	; (8012188 <FMC_SDRAM_Timing_Init+0xfc>)
 801210e:	4013      	ands	r3, r2
 8012110:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	3b01      	subs	r3, #1
 8012118:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	695b      	ldr	r3, [r3, #20]
 801211e:	3b01      	subs	r3, #1
 8012120:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8012122:	4313      	orrs	r3, r2
 8012124:	697a      	ldr	r2, [r7, #20]
 8012126:	4313      	orrs	r3, r2
 8012128:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012136:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	685b      	ldr	r3, [r3, #4]
 8012142:	3b01      	subs	r3, #1
 8012144:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012146:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	689b      	ldr	r3, [r3, #8]
 801214c:	3b01      	subs	r3, #1
 801214e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8012150:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	691b      	ldr	r3, [r3, #16]
 8012156:	3b01      	subs	r3, #1
 8012158:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 801215a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	699b      	ldr	r3, [r3, #24]
 8012160:	3b01      	subs	r3, #1
 8012162:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012164:	4313      	orrs	r3, r2
 8012166:	693a      	ldr	r2, [r7, #16]
 8012168:	4313      	orrs	r3, r2
 801216a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	697a      	ldr	r2, [r7, #20]
 8012170:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	693a      	ldr	r2, [r7, #16]
 8012176:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8012178:	2300      	movs	r3, #0
}
 801217a:	4618      	mov	r0, r3
 801217c:	371c      	adds	r7, #28
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr
 8012186:	bf00      	nop
 8012188:	ff0f0fff 	.word	0xff0f0fff

0801218c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	691a      	ldr	r2, [r3, #16]
 801219c:	4b0c      	ldr	r3, [pc, #48]	; (80121d0 <FMC_SDRAM_SendCommand+0x44>)
 801219e:	4013      	ands	r3, r2
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	6811      	ldr	r1, [r2, #0]
 80121a4:	68ba      	ldr	r2, [r7, #8]
 80121a6:	6852      	ldr	r2, [r2, #4]
 80121a8:	4311      	orrs	r1, r2
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	6892      	ldr	r2, [r2, #8]
 80121ae:	3a01      	subs	r2, #1
 80121b0:	0152      	lsls	r2, r2, #5
 80121b2:	4311      	orrs	r1, r2
 80121b4:	68ba      	ldr	r2, [r7, #8]
 80121b6:	68d2      	ldr	r2, [r2, #12]
 80121b8:	0252      	lsls	r2, r2, #9
 80121ba:	430a      	orrs	r2, r1
 80121bc:	431a      	orrs	r2, r3
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 80121c2:	2300      	movs	r3, #0
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3714      	adds	r7, #20
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr
 80121d0:	ffc00000 	.word	0xffc00000

080121d4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80121d4:	b480      	push	{r7}
 80121d6:	b083      	sub	sp, #12
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	695a      	ldr	r2, [r3, #20]
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	005b      	lsls	r3, r3, #1
 80121e6:	431a      	orrs	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	370c      	adds	r7, #12
 80121f2:	46bd      	mov	sp, r7
 80121f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f8:	4770      	bx	lr
	...

080121fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80121fc:	b084      	sub	sp, #16
 80121fe:	b480      	push	{r7}
 8012200:	b085      	sub	sp, #20
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
 8012206:	f107 001c 	add.w	r0, r7, #28
 801220a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801220e:	2300      	movs	r3, #0
 8012210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012212:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012214:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8012216:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8012218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801221a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801221e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8012222:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8012226:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012228:	68fa      	ldr	r2, [r7, #12]
 801222a:	4313      	orrs	r3, r2
 801222c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	685a      	ldr	r2, [r3, #4]
 8012232:	4b07      	ldr	r3, [pc, #28]	; (8012250 <SDMMC_Init+0x54>)
 8012234:	4013      	ands	r3, r2
 8012236:	68fa      	ldr	r2, [r7, #12]
 8012238:	431a      	orrs	r2, r3
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801223e:	2300      	movs	r3, #0
}
 8012240:	4618      	mov	r0, r3
 8012242:	3714      	adds	r7, #20
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	b004      	add	sp, #16
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	ffff8100 	.word	0xffff8100

08012254 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012254:	b480      	push	{r7}
 8012256:	b083      	sub	sp, #12
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012262:	4618      	mov	r0, r3
 8012264:	370c      	adds	r7, #12
 8012266:	46bd      	mov	sp, r7
 8012268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226c:	4770      	bx	lr

0801226e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 801226e:	b580      	push	{r7, lr}
 8012270:	b082      	sub	sp, #8
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2203      	movs	r2, #3
 801227a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801227c:	2002      	movs	r0, #2
 801227e:	f7f4 febd 	bl	8006ffc <HAL_Delay>
  
  return HAL_OK;
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3708      	adds	r7, #8
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 801228c:	b480      	push	{r7}
 801228e:	b083      	sub	sp, #12
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f003 0303 	and.w	r3, r3, #3
}
 801229c:	4618      	mov	r0, r3
 801229e:	370c      	adds	r7, #12
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr

080122a8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b085      	sub	sp, #20
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80122b2:	2300      	movs	r3, #0
 80122b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	681a      	ldr	r2, [r3, #0]
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80122c6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80122cc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80122d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80122d4:	68fa      	ldr	r2, [r7, #12]
 80122d6:	4313      	orrs	r3, r2
 80122d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	68da      	ldr	r2, [r3, #12]
 80122de:	4b06      	ldr	r3, [pc, #24]	; (80122f8 <SDMMC_SendCommand+0x50>)
 80122e0:	4013      	ands	r3, r2
 80122e2:	68fa      	ldr	r2, [r7, #12]
 80122e4:	431a      	orrs	r2, r3
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80122ea:	2300      	movs	r3, #0
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3714      	adds	r7, #20
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr
 80122f8:	fffff000 	.word	0xfffff000

080122fc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	691b      	ldr	r3, [r3, #16]
 8012308:	b2db      	uxtb	r3, r3
}
 801230a:	4618      	mov	r0, r3
 801230c:	370c      	adds	r7, #12
 801230e:	46bd      	mov	sp, r7
 8012310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012314:	4770      	bx	lr

08012316 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012316:	b480      	push	{r7}
 8012318:	b085      	sub	sp, #20
 801231a:	af00      	add	r7, sp, #0
 801231c:	6078      	str	r0, [r7, #4]
 801231e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	3314      	adds	r3, #20
 8012324:	461a      	mov	r2, r3
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	4413      	add	r3, r2
 801232a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
}  
 8012330:	4618      	mov	r0, r3
 8012332:	3714      	adds	r7, #20
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr

0801233c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801233c:	b480      	push	{r7}
 801233e:	b085      	sub	sp, #20
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012346:	2300      	movs	r3, #0
 8012348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	685a      	ldr	r2, [r3, #4]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012362:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012368:	431a      	orrs	r2, r3
                       Data->DPSM);
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801236e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012370:	68fa      	ldr	r2, [r7, #12]
 8012372:	4313      	orrs	r3, r2
 8012374:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801237a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	431a      	orrs	r2, r3
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012386:	2300      	movs	r3, #0

}
 8012388:	4618      	mov	r0, r3
 801238a:	3714      	adds	r7, #20
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b088      	sub	sp, #32
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80123a2:	2310      	movs	r3, #16
 80123a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123a6:	2340      	movs	r3, #64	; 0x40
 80123a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123aa:	2300      	movs	r3, #0
 80123ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123b4:	f107 0308 	add.w	r3, r7, #8
 80123b8:	4619      	mov	r1, r3
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f7ff ff74 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80123c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80123c4:	2110      	movs	r1, #16
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f000 fa46 	bl	8012858 <SDMMC_GetCmdResp1>
 80123cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123ce:	69fb      	ldr	r3, [r7, #28]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3720      	adds	r7, #32
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b088      	sub	sp, #32
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80123e6:	2311      	movs	r3, #17
 80123e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123ea:	2340      	movs	r3, #64	; 0x40
 80123ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123ee:	2300      	movs	r3, #0
 80123f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123f8:	f107 0308 	add.w	r3, r7, #8
 80123fc:	4619      	mov	r1, r3
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f7ff ff52 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012404:	f241 3288 	movw	r2, #5000	; 0x1388
 8012408:	2111      	movs	r1, #17
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f000 fa24 	bl	8012858 <SDMMC_GetCmdResp1>
 8012410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012412:	69fb      	ldr	r3, [r7, #28]
}
 8012414:	4618      	mov	r0, r3
 8012416:	3720      	adds	r7, #32
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b088      	sub	sp, #32
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801242a:	2312      	movs	r3, #18
 801242c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801242e:	2340      	movs	r3, #64	; 0x40
 8012430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012432:	2300      	movs	r3, #0
 8012434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801243a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801243c:	f107 0308 	add.w	r3, r7, #8
 8012440:	4619      	mov	r1, r3
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f7ff ff30 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012448:	f241 3288 	movw	r2, #5000	; 0x1388
 801244c:	2112      	movs	r1, #18
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f000 fa02 	bl	8012858 <SDMMC_GetCmdResp1>
 8012454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012456:	69fb      	ldr	r3, [r7, #28]
}
 8012458:	4618      	mov	r0, r3
 801245a:	3720      	adds	r7, #32
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b088      	sub	sp, #32
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801246e:	2318      	movs	r3, #24
 8012470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012472:	2340      	movs	r3, #64	; 0x40
 8012474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012476:	2300      	movs	r3, #0
 8012478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801247a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801247e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012480:	f107 0308 	add.w	r3, r7, #8
 8012484:	4619      	mov	r1, r3
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f7ff ff0e 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012490:	2118      	movs	r1, #24
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 f9e0 	bl	8012858 <SDMMC_GetCmdResp1>
 8012498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801249a:	69fb      	ldr	r3, [r7, #28]
}
 801249c:	4618      	mov	r0, r3
 801249e:	3720      	adds	r7, #32
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b088      	sub	sp, #32
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80124b2:	2319      	movs	r3, #25
 80124b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124b6:	2340      	movs	r3, #64	; 0x40
 80124b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124ba:	2300      	movs	r3, #0
 80124bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124c4:	f107 0308 	add.w	r3, r7, #8
 80124c8:	4619      	mov	r1, r3
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f7ff feec 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80124d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80124d4:	2119      	movs	r1, #25
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f000 f9be 	bl	8012858 <SDMMC_GetCmdResp1>
 80124dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124de:	69fb      	ldr	r3, [r7, #28]
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3720      	adds	r7, #32
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b088      	sub	sp, #32
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80124f0:	2300      	movs	r3, #0
 80124f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80124f4:	230c      	movs	r3, #12
 80124f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124f8:	2340      	movs	r3, #64	; 0x40
 80124fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124fc:	2300      	movs	r3, #0
 80124fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012504:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012506:	f107 0308 	add.w	r3, r7, #8
 801250a:	4619      	mov	r1, r3
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f7ff fecb 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012512:	4a05      	ldr	r2, [pc, #20]	; (8012528 <SDMMC_CmdStopTransfer+0x40>)
 8012514:	210c      	movs	r1, #12
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 f99e 	bl	8012858 <SDMMC_GetCmdResp1>
 801251c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801251e:	69fb      	ldr	r3, [r7, #28]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3720      	adds	r7, #32
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	05f5e100 	.word	0x05f5e100

0801252c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b08a      	sub	sp, #40	; 0x28
 8012530:	af00      	add	r7, sp, #0
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801253c:	2307      	movs	r3, #7
 801253e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012540:	2340      	movs	r3, #64	; 0x40
 8012542:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012544:	2300      	movs	r3, #0
 8012546:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801254c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801254e:	f107 0310 	add.w	r3, r7, #16
 8012552:	4619      	mov	r1, r3
 8012554:	68f8      	ldr	r0, [r7, #12]
 8012556:	f7ff fea7 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801255a:	f241 3288 	movw	r2, #5000	; 0x1388
 801255e:	2107      	movs	r1, #7
 8012560:	68f8      	ldr	r0, [r7, #12]
 8012562:	f000 f979 	bl	8012858 <SDMMC_GetCmdResp1>
 8012566:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801256a:	4618      	mov	r0, r3
 801256c:	3728      	adds	r7, #40	; 0x28
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b088      	sub	sp, #32
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801257a:	2300      	movs	r3, #0
 801257c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801257e:	2300      	movs	r3, #0
 8012580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012582:	2300      	movs	r3, #0
 8012584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012586:	2300      	movs	r3, #0
 8012588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801258a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801258e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012590:	f107 0308 	add.w	r3, r7, #8
 8012594:	4619      	mov	r1, r3
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f7ff fe86 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 f92f 	bl	8012800 <SDMMC_GetCmdError>
 80125a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125a4:	69fb      	ldr	r3, [r7, #28]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3720      	adds	r7, #32
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}

080125ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80125ae:	b580      	push	{r7, lr}
 80125b0:	b088      	sub	sp, #32
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80125b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80125ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80125bc:	2308      	movs	r3, #8
 80125be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125c0:	2340      	movs	r3, #64	; 0x40
 80125c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125c4:	2300      	movs	r3, #0
 80125c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125ce:	f107 0308 	add.w	r3, r7, #8
 80125d2:	4619      	mov	r1, r3
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f7ff fe67 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f000 fb26 	bl	8012c2c <SDMMC_GetCmdResp7>
 80125e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125e2:	69fb      	ldr	r3, [r7, #28]
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3720      	adds	r7, #32
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b088      	sub	sp, #32
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80125fa:	2337      	movs	r3, #55	; 0x37
 80125fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125fe:	2340      	movs	r3, #64	; 0x40
 8012600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012602:	2300      	movs	r3, #0
 8012604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801260a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801260c:	f107 0308 	add.w	r3, r7, #8
 8012610:	4619      	mov	r1, r3
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f7ff fe48 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012618:	f241 3288 	movw	r2, #5000	; 0x1388
 801261c:	2137      	movs	r1, #55	; 0x37
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f000 f91a 	bl	8012858 <SDMMC_GetCmdResp1>
 8012624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012626:	69fb      	ldr	r3, [r7, #28]
}
 8012628:	4618      	mov	r0, r3
 801262a:	3720      	adds	r7, #32
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b088      	sub	sp, #32
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801263a:	683a      	ldr	r2, [r7, #0]
 801263c:	4b0d      	ldr	r3, [pc, #52]	; (8012674 <SDMMC_CmdAppOperCommand+0x44>)
 801263e:	4313      	orrs	r3, r2
 8012640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012642:	2329      	movs	r3, #41	; 0x29
 8012644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012646:	2340      	movs	r3, #64	; 0x40
 8012648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801264a:	2300      	movs	r3, #0
 801264c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801264e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012652:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012654:	f107 0308 	add.w	r3, r7, #8
 8012658:	4619      	mov	r1, r3
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f7ff fe24 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 fa2f 	bl	8012ac4 <SDMMC_GetCmdResp3>
 8012666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012668:	69fb      	ldr	r3, [r7, #28]
}
 801266a:	4618      	mov	r0, r3
 801266c:	3720      	adds	r7, #32
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop
 8012674:	80100000 	.word	0x80100000

08012678 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b088      	sub	sp, #32
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012686:	2306      	movs	r3, #6
 8012688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801268a:	2340      	movs	r3, #64	; 0x40
 801268c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801268e:	2300      	movs	r3, #0
 8012690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012696:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012698:	f107 0308 	add.w	r3, r7, #8
 801269c:	4619      	mov	r1, r3
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f7ff fe02 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80126a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80126a8:	2106      	movs	r1, #6
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f000 f8d4 	bl	8012858 <SDMMC_GetCmdResp1>
 80126b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126b2:	69fb      	ldr	r3, [r7, #28]
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3720      	adds	r7, #32
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b088      	sub	sp, #32
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80126c4:	2300      	movs	r3, #0
 80126c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80126c8:	2333      	movs	r3, #51	; 0x33
 80126ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126cc:	2340      	movs	r3, #64	; 0x40
 80126ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126d0:	2300      	movs	r3, #0
 80126d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126da:	f107 0308 	add.w	r3, r7, #8
 80126de:	4619      	mov	r1, r3
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7ff fde1 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80126e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80126ea:	2133      	movs	r1, #51	; 0x33
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f000 f8b3 	bl	8012858 <SDMMC_GetCmdResp1>
 80126f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126f4:	69fb      	ldr	r3, [r7, #28]
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3720      	adds	r7, #32
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}

080126fe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80126fe:	b580      	push	{r7, lr}
 8012700:	b088      	sub	sp, #32
 8012702:	af00      	add	r7, sp, #0
 8012704:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012706:	2300      	movs	r3, #0
 8012708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801270a:	2302      	movs	r3, #2
 801270c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801270e:	23c0      	movs	r3, #192	; 0xc0
 8012710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012712:	2300      	movs	r3, #0
 8012714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801271a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801271c:	f107 0308 	add.w	r3, r7, #8
 8012720:	4619      	mov	r1, r3
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f7ff fdc0 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f000 f983 	bl	8012a34 <SDMMC_GetCmdResp2>
 801272e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012730:	69fb      	ldr	r3, [r7, #28]
}
 8012732:	4618      	mov	r0, r3
 8012734:	3720      	adds	r7, #32
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}

0801273a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801273a:	b580      	push	{r7, lr}
 801273c:	b088      	sub	sp, #32
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
 8012742:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012748:	2309      	movs	r3, #9
 801274a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801274c:	23c0      	movs	r3, #192	; 0xc0
 801274e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012750:	2300      	movs	r3, #0
 8012752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012758:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801275a:	f107 0308 	add.w	r3, r7, #8
 801275e:	4619      	mov	r1, r3
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f7ff fda1 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f000 f964 	bl	8012a34 <SDMMC_GetCmdResp2>
 801276c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801276e:	69fb      	ldr	r3, [r7, #28]
}
 8012770:	4618      	mov	r0, r3
 8012772:	3720      	adds	r7, #32
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b088      	sub	sp, #32
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012782:	2300      	movs	r3, #0
 8012784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012786:	2303      	movs	r3, #3
 8012788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801278a:	2340      	movs	r3, #64	; 0x40
 801278c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801278e:	2300      	movs	r3, #0
 8012790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012798:	f107 0308 	add.w	r3, r7, #8
 801279c:	4619      	mov	r1, r3
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f7ff fd82 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80127a4:	683a      	ldr	r2, [r7, #0]
 80127a6:	2103      	movs	r1, #3
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f000 f9c9 	bl	8012b40 <SDMMC_GetCmdResp6>
 80127ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127b0:	69fb      	ldr	r3, [r7, #28]
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3720      	adds	r7, #32
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80127ba:	b580      	push	{r7, lr}
 80127bc:	b088      	sub	sp, #32
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
 80127c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80127c8:	230d      	movs	r3, #13
 80127ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127cc:	2340      	movs	r3, #64	; 0x40
 80127ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127d0:	2300      	movs	r3, #0
 80127d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127da:	f107 0308 	add.w	r3, r7, #8
 80127de:	4619      	mov	r1, r3
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f7ff fd61 	bl	80122a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80127e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80127ea:	210d      	movs	r1, #13
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f000 f833 	bl	8012858 <SDMMC_GetCmdResp1>
 80127f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127f4:	69fb      	ldr	r3, [r7, #28]
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3720      	adds	r7, #32
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}
	...

08012800 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012800:	b480      	push	{r7}
 8012802:	b085      	sub	sp, #20
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012808:	4b11      	ldr	r3, [pc, #68]	; (8012850 <SDMMC_GetCmdError+0x50>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	4a11      	ldr	r2, [pc, #68]	; (8012854 <SDMMC_GetCmdError+0x54>)
 801280e:	fba2 2303 	umull	r2, r3, r2, r3
 8012812:	0a5b      	lsrs	r3, r3, #9
 8012814:	f241 3288 	movw	r2, #5000	; 0x1388
 8012818:	fb02 f303 	mul.w	r3, r2, r3
 801281c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	1e5a      	subs	r2, r3, #1
 8012822:	60fa      	str	r2, [r7, #12]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d102      	bne.n	801282e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801282c:	e009      	b.n	8012842 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012836:	2b00      	cmp	r3, #0
 8012838:	d0f1      	beq.n	801281e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	22c5      	movs	r2, #197	; 0xc5
 801283e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	3714      	adds	r7, #20
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr
 801284e:	bf00      	nop
 8012850:	2000002c 	.word	0x2000002c
 8012854:	10624dd3 	.word	0x10624dd3

08012858 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b088      	sub	sp, #32
 801285c:	af00      	add	r7, sp, #0
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	460b      	mov	r3, r1
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012866:	4b70      	ldr	r3, [pc, #448]	; (8012a28 <SDMMC_GetCmdResp1+0x1d0>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4a70      	ldr	r2, [pc, #448]	; (8012a2c <SDMMC_GetCmdResp1+0x1d4>)
 801286c:	fba2 2303 	umull	r2, r3, r2, r3
 8012870:	0a5a      	lsrs	r2, r3, #9
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	fb02 f303 	mul.w	r3, r2, r3
 8012878:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801287a:	69fb      	ldr	r3, [r7, #28]
 801287c:	1e5a      	subs	r2, r3, #1
 801287e:	61fa      	str	r2, [r7, #28]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d102      	bne.n	801288a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012884:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012888:	e0c9      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801288e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012890:	69bb      	ldr	r3, [r7, #24]
 8012892:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012896:	2b00      	cmp	r3, #0
 8012898:	d0ef      	beq.n	801287a <SDMMC_GetCmdResp1+0x22>
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d1ea      	bne.n	801287a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128a8:	f003 0304 	and.w	r3, r3, #4
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d004      	beq.n	80128ba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	2204      	movs	r2, #4
 80128b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128b6:	2304      	movs	r3, #4
 80128b8:	e0b1      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128be:	f003 0301 	and.w	r3, r3, #1
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d004      	beq.n	80128d0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2201      	movs	r2, #1
 80128ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128cc:	2301      	movs	r3, #1
 80128ce:	e0a6      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	22c5      	movs	r2, #197	; 0xc5
 80128d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80128d6:	68f8      	ldr	r0, [r7, #12]
 80128d8:	f7ff fd10 	bl	80122fc <SDMMC_GetCommandResponse>
 80128dc:	4603      	mov	r3, r0
 80128de:	461a      	mov	r2, r3
 80128e0:	7afb      	ldrb	r3, [r7, #11]
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d001      	beq.n	80128ea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128e6:	2301      	movs	r3, #1
 80128e8:	e099      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80128ea:	2100      	movs	r1, #0
 80128ec:	68f8      	ldr	r0, [r7, #12]
 80128ee:	f7ff fd12 	bl	8012316 <SDMMC_GetResponse>
 80128f2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80128f4:	697a      	ldr	r2, [r7, #20]
 80128f6:	4b4e      	ldr	r3, [pc, #312]	; (8012a30 <SDMMC_GetCmdResp1+0x1d8>)
 80128f8:	4013      	ands	r3, r2
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d101      	bne.n	8012902 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80128fe:	2300      	movs	r3, #0
 8012900:	e08d      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	2b00      	cmp	r3, #0
 8012906:	da02      	bge.n	801290e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801290c:	e087      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012914:	2b00      	cmp	r3, #0
 8012916:	d001      	beq.n	801291c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012918:	2340      	movs	r3, #64	; 0x40
 801291a:	e080      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012922:	2b00      	cmp	r3, #0
 8012924:	d001      	beq.n	801292a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012926:	2380      	movs	r3, #128	; 0x80
 8012928:	e079      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012930:	2b00      	cmp	r3, #0
 8012932:	d002      	beq.n	801293a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012938:	e071      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012940:	2b00      	cmp	r3, #0
 8012942:	d002      	beq.n	801294a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012948:	e069      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012958:	e061      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012960:	2b00      	cmp	r3, #0
 8012962:	d002      	beq.n	801296a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012968:	e059      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012970:	2b00      	cmp	r3, #0
 8012972:	d002      	beq.n	801297a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012978:	e051      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012980:	2b00      	cmp	r3, #0
 8012982:	d002      	beq.n	801298a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012988:	e049      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012990:	2b00      	cmp	r3, #0
 8012992:	d002      	beq.n	801299a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012994:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012998:	e041      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d002      	beq.n	80129aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80129a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80129a8:	e039      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d002      	beq.n	80129ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80129b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80129b8:	e031      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d002      	beq.n	80129ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80129c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80129c8:	e029      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d002      	beq.n	80129da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80129d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80129d8:	e021      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d002      	beq.n	80129ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80129e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80129e8:	e019      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d002      	beq.n	80129fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80129f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80129f8:	e011      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d002      	beq.n	8012a0a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012a04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012a08:	e009      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	f003 0308 	and.w	r3, r3, #8
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d002      	beq.n	8012a1a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012a14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012a18:	e001      	b.n	8012a1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3720      	adds	r7, #32
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop
 8012a28:	2000002c 	.word	0x2000002c
 8012a2c:	10624dd3 	.word	0x10624dd3
 8012a30:	fdffe008 	.word	0xfdffe008

08012a34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b085      	sub	sp, #20
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012a3c:	4b1f      	ldr	r3, [pc, #124]	; (8012abc <SDMMC_GetCmdResp2+0x88>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	4a1f      	ldr	r2, [pc, #124]	; (8012ac0 <SDMMC_GetCmdResp2+0x8c>)
 8012a42:	fba2 2303 	umull	r2, r3, r2, r3
 8012a46:	0a5b      	lsrs	r3, r3, #9
 8012a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a4c:	fb02 f303 	mul.w	r3, r2, r3
 8012a50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	1e5a      	subs	r2, r3, #1
 8012a56:	60fa      	str	r2, [r7, #12]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d102      	bne.n	8012a62 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a60:	e026      	b.n	8012ab0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d0ef      	beq.n	8012a52 <SDMMC_GetCmdResp2+0x1e>
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1ea      	bne.n	8012a52 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a80:	f003 0304 	and.w	r3, r3, #4
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d004      	beq.n	8012a92 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2204      	movs	r2, #4
 8012a8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a8e:	2304      	movs	r3, #4
 8012a90:	e00e      	b.n	8012ab0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a96:	f003 0301 	and.w	r3, r3, #1
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d004      	beq.n	8012aa8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	e003      	b.n	8012ab0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	22c5      	movs	r2, #197	; 0xc5
 8012aac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3714      	adds	r7, #20
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr
 8012abc:	2000002c 	.word	0x2000002c
 8012ac0:	10624dd3 	.word	0x10624dd3

08012ac4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b085      	sub	sp, #20
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012acc:	4b1a      	ldr	r3, [pc, #104]	; (8012b38 <SDMMC_GetCmdResp3+0x74>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	4a1a      	ldr	r2, [pc, #104]	; (8012b3c <SDMMC_GetCmdResp3+0x78>)
 8012ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8012ad6:	0a5b      	lsrs	r3, r3, #9
 8012ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012adc:	fb02 f303 	mul.w	r3, r2, r3
 8012ae0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	1e5a      	subs	r2, r3, #1
 8012ae6:	60fa      	str	r2, [r7, #12]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d102      	bne.n	8012af2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012aec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012af0:	e01b      	b.n	8012b2a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012af6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d0ef      	beq.n	8012ae2 <SDMMC_GetCmdResp3+0x1e>
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d1ea      	bne.n	8012ae2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b10:	f003 0304 	and.w	r3, r3, #4
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d004      	beq.n	8012b22 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2204      	movs	r2, #4
 8012b1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b1e:	2304      	movs	r3, #4
 8012b20:	e003      	b.n	8012b2a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	22c5      	movs	r2, #197	; 0xc5
 8012b26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3714      	adds	r7, #20
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b34:	4770      	bx	lr
 8012b36:	bf00      	nop
 8012b38:	2000002c 	.word	0x2000002c
 8012b3c:	10624dd3 	.word	0x10624dd3

08012b40 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b088      	sub	sp, #32
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	460b      	mov	r3, r1
 8012b4a:	607a      	str	r2, [r7, #4]
 8012b4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012b4e:	4b35      	ldr	r3, [pc, #212]	; (8012c24 <SDMMC_GetCmdResp6+0xe4>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	4a35      	ldr	r2, [pc, #212]	; (8012c28 <SDMMC_GetCmdResp6+0xe8>)
 8012b54:	fba2 2303 	umull	r2, r3, r2, r3
 8012b58:	0a5b      	lsrs	r3, r3, #9
 8012b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b5e:	fb02 f303 	mul.w	r3, r2, r3
 8012b62:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012b64:	69fb      	ldr	r3, [r7, #28]
 8012b66:	1e5a      	subs	r2, r3, #1
 8012b68:	61fa      	str	r2, [r7, #28]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d102      	bne.n	8012b74 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b72:	e052      	b.n	8012c1a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b78:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d0ef      	beq.n	8012b64 <SDMMC_GetCmdResp6+0x24>
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d1ea      	bne.n	8012b64 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b92:	f003 0304 	and.w	r3, r3, #4
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d004      	beq.n	8012ba4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2204      	movs	r2, #4
 8012b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ba0:	2304      	movs	r3, #4
 8012ba2:	e03a      	b.n	8012c1a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ba8:	f003 0301 	and.w	r3, r3, #1
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d004      	beq.n	8012bba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	2201      	movs	r2, #1
 8012bb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e02f      	b.n	8012c1a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012bba:	68f8      	ldr	r0, [r7, #12]
 8012bbc:	f7ff fb9e 	bl	80122fc <SDMMC_GetCommandResponse>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	7afb      	ldrb	r3, [r7, #11]
 8012bc6:	4293      	cmp	r3, r2
 8012bc8:	d001      	beq.n	8012bce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012bca:	2301      	movs	r3, #1
 8012bcc:	e025      	b.n	8012c1a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	22c5      	movs	r2, #197	; 0xc5
 8012bd2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012bd4:	2100      	movs	r1, #0
 8012bd6:	68f8      	ldr	r0, [r7, #12]
 8012bd8:	f7ff fb9d 	bl	8012316 <SDMMC_GetResponse>
 8012bdc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d106      	bne.n	8012bf6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	0c1b      	lsrs	r3, r3, #16
 8012bec:	b29a      	uxth	r2, r3
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	e011      	b.n	8012c1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d002      	beq.n	8012c06 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012c04:	e009      	b.n	8012c1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d002      	beq.n	8012c16 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c14:	e001      	b.n	8012c1a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3720      	adds	r7, #32
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	2000002c 	.word	0x2000002c
 8012c28:	10624dd3 	.word	0x10624dd3

08012c2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b085      	sub	sp, #20
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012c34:	4b22      	ldr	r3, [pc, #136]	; (8012cc0 <SDMMC_GetCmdResp7+0x94>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a22      	ldr	r2, [pc, #136]	; (8012cc4 <SDMMC_GetCmdResp7+0x98>)
 8012c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8012c3e:	0a5b      	lsrs	r3, r3, #9
 8012c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c44:	fb02 f303 	mul.w	r3, r2, r3
 8012c48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	1e5a      	subs	r2, r3, #1
 8012c4e:	60fa      	str	r2, [r7, #12]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d102      	bne.n	8012c5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c58:	e02c      	b.n	8012cb4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d0ef      	beq.n	8012c4a <SDMMC_GetCmdResp7+0x1e>
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d1ea      	bne.n	8012c4a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c78:	f003 0304 	and.w	r3, r3, #4
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d004      	beq.n	8012c8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2204      	movs	r2, #4
 8012c84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c86:	2304      	movs	r3, #4
 8012c88:	e014      	b.n	8012cb4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c8e:	f003 0301 	and.w	r3, r3, #1
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d004      	beq.n	8012ca0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2201      	movs	r2, #1
 8012c9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e009      	b.n	8012cb4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d002      	beq.n	8012cb2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2240      	movs	r2, #64	; 0x40
 8012cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012cb2:	2300      	movs	r3, #0
  
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3714      	adds	r7, #20
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	2000002c 	.word	0x2000002c
 8012cc4:	10624dd3 	.word	0x10624dd3

08012cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012cc8:	b084      	sub	sp, #16
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b084      	sub	sp, #16
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	6078      	str	r0, [r7, #4]
 8012cd2:	f107 001c 	add.w	r0, r7, #28
 8012cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cdc:	2b01      	cmp	r3, #1
 8012cde:	d120      	bne.n	8012d22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ce4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	68da      	ldr	r2, [r3, #12]
 8012cf0:	4b20      	ldr	r3, [pc, #128]	; (8012d74 <USB_CoreInit+0xac>)
 8012cf2:	4013      	ands	r3, r2
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	d105      	bne.n	8012d16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f000 f942 	bl	8012fa0 <USB_CoreReset>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	73fb      	strb	r3, [r7, #15]
 8012d20:	e010      	b.n	8012d44 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	68db      	ldr	r3, [r3, #12]
 8012d26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f000 f936 	bl	8012fa0 <USB_CoreReset>
 8012d34:	4603      	mov	r3, r0
 8012d36:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8012d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d46:	2b01      	cmp	r3, #1
 8012d48:	d10b      	bne.n	8012d62 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	689b      	ldr	r3, [r3, #8]
 8012d4e:	f043 0206 	orr.w	r2, r3, #6
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	689b      	ldr	r3, [r3, #8]
 8012d5a:	f043 0220 	orr.w	r2, r3, #32
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3710      	adds	r7, #16
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012d6e:	b004      	add	sp, #16
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop
 8012d74:	ffbdffbf 	.word	0xffbdffbf

08012d78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	689b      	ldr	r3, [r3, #8]
 8012d84:	f043 0201 	orr.w	r2, r3, #1
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d8c:	2300      	movs	r3, #0
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	370c      	adds	r7, #12
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr

08012d9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d9a:	b480      	push	{r7}
 8012d9c:	b083      	sub	sp, #12
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	f023 0201 	bic.w	r2, r3, #1
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012dae:	2300      	movs	r3, #0
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	370c      	adds	r7, #12
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr

08012dbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	460b      	mov	r3, r1
 8012dc6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012dd4:	78fb      	ldrb	r3, [r7, #3]
 8012dd6:	2b01      	cmp	r3, #1
 8012dd8:	d106      	bne.n	8012de8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	60da      	str	r2, [r3, #12]
 8012de6:	e00b      	b.n	8012e00 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8012de8:	78fb      	ldrb	r3, [r7, #3]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d106      	bne.n	8012dfc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	68db      	ldr	r3, [r3, #12]
 8012df2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	60da      	str	r2, [r3, #12]
 8012dfa:	e001      	b.n	8012e00 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	e003      	b.n	8012e08 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8012e00:	2032      	movs	r0, #50	; 0x32
 8012e02:	f7f4 f8fb 	bl	8006ffc <HAL_Delay>

  return HAL_OK;
 8012e06:	2300      	movs	r3, #0
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012e10:	b480      	push	{r7}
 8012e12:	b085      	sub	sp, #20
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
 8012e18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	019b      	lsls	r3, r3, #6
 8012e22:	f043 0220 	orr.w	r2, r3, #32
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	60fb      	str	r3, [r7, #12]
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	4a09      	ldr	r2, [pc, #36]	; (8012e58 <USB_FlushTxFifo+0x48>)
 8012e34:	4293      	cmp	r3, r2
 8012e36:	d901      	bls.n	8012e3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012e38:	2303      	movs	r3, #3
 8012e3a:	e006      	b.n	8012e4a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	691b      	ldr	r3, [r3, #16]
 8012e40:	f003 0320 	and.w	r3, r3, #32
 8012e44:	2b20      	cmp	r3, #32
 8012e46:	d0f0      	beq.n	8012e2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012e48:	2300      	movs	r3, #0
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3714      	adds	r7, #20
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e54:	4770      	bx	lr
 8012e56:	bf00      	nop
 8012e58:	00030d40 	.word	0x00030d40

08012e5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012e5c:	b480      	push	{r7}
 8012e5e:	b085      	sub	sp, #20
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012e64:	2300      	movs	r3, #0
 8012e66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2210      	movs	r2, #16
 8012e6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	3301      	adds	r3, #1
 8012e72:	60fb      	str	r3, [r7, #12]
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	4a09      	ldr	r2, [pc, #36]	; (8012e9c <USB_FlushRxFifo+0x40>)
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d901      	bls.n	8012e80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012e7c:	2303      	movs	r3, #3
 8012e7e:	e006      	b.n	8012e8e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	691b      	ldr	r3, [r3, #16]
 8012e84:	f003 0310 	and.w	r3, r3, #16
 8012e88:	2b10      	cmp	r3, #16
 8012e8a:	d0f0      	beq.n	8012e6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012e8c:	2300      	movs	r3, #0
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3714      	adds	r7, #20
 8012e92:	46bd      	mov	sp, r7
 8012e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e98:	4770      	bx	lr
 8012e9a:	bf00      	nop
 8012e9c:	00030d40 	.word	0x00030d40

08012ea0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b089      	sub	sp, #36	; 0x24
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	60f8      	str	r0, [r7, #12]
 8012ea8:	60b9      	str	r1, [r7, #8]
 8012eaa:	4611      	mov	r1, r2
 8012eac:	461a      	mov	r2, r3
 8012eae:	460b      	mov	r3, r1
 8012eb0:	71fb      	strb	r3, [r7, #7]
 8012eb2:	4613      	mov	r3, r2
 8012eb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d11a      	bne.n	8012efc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012ec6:	88bb      	ldrh	r3, [r7, #4]
 8012ec8:	3303      	adds	r3, #3
 8012eca:	089b      	lsrs	r3, r3, #2
 8012ecc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012ece:	2300      	movs	r3, #0
 8012ed0:	61bb      	str	r3, [r7, #24]
 8012ed2:	e00f      	b.n	8012ef4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012ed4:	79fb      	ldrb	r3, [r7, #7]
 8012ed6:	031a      	lsls	r2, r3, #12
 8012ed8:	697b      	ldr	r3, [r7, #20]
 8012eda:	4413      	add	r3, r2
 8012edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012ee0:	461a      	mov	r2, r3
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012ee8:	69fb      	ldr	r3, [r7, #28]
 8012eea:	3304      	adds	r3, #4
 8012eec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012eee:	69bb      	ldr	r3, [r7, #24]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	61bb      	str	r3, [r7, #24]
 8012ef4:	69ba      	ldr	r2, [r7, #24]
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d3eb      	bcc.n	8012ed4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012efc:	2300      	movs	r3, #0
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3724      	adds	r7, #36	; 0x24
 8012f02:	46bd      	mov	sp, r7
 8012f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f08:	4770      	bx	lr

08012f0a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012f0a:	b480      	push	{r7}
 8012f0c:	b089      	sub	sp, #36	; 0x24
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	60f8      	str	r0, [r7, #12]
 8012f12:	60b9      	str	r1, [r7, #8]
 8012f14:	4613      	mov	r3, r2
 8012f16:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012f20:	88fb      	ldrh	r3, [r7, #6]
 8012f22:	3303      	adds	r3, #3
 8012f24:	089b      	lsrs	r3, r3, #2
 8012f26:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012f28:	2300      	movs	r3, #0
 8012f2a:	61bb      	str	r3, [r7, #24]
 8012f2c:	e00b      	b.n	8012f46 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012f34:	681a      	ldr	r2, [r3, #0]
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	601a      	str	r2, [r3, #0]
    pDest++;
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	3304      	adds	r3, #4
 8012f3e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	3301      	adds	r3, #1
 8012f44:	61bb      	str	r3, [r7, #24]
 8012f46:	69ba      	ldr	r2, [r7, #24]
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d3ef      	bcc.n	8012f2e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012f4e:	69fb      	ldr	r3, [r7, #28]
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	3724      	adds	r7, #36	; 0x24
 8012f54:	46bd      	mov	sp, r7
 8012f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5a:	4770      	bx	lr

08012f5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012f5c:	b480      	push	{r7}
 8012f5e:	b085      	sub	sp, #20
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	695b      	ldr	r3, [r3, #20]
 8012f68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	699b      	ldr	r3, [r3, #24]
 8012f6e:	68fa      	ldr	r2, [r7, #12]
 8012f70:	4013      	ands	r3, r2
 8012f72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f74:	68fb      	ldr	r3, [r7, #12]
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3714      	adds	r7, #20
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr

08012f82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012f82:	b480      	push	{r7}
 8012f84:	b083      	sub	sp, #12
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	695b      	ldr	r3, [r3, #20]
 8012f8e:	f003 0301 	and.w	r3, r3, #1
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	370c      	adds	r7, #12
 8012f96:	46bd      	mov	sp, r7
 8012f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9c:	4770      	bx	lr
	...

08012fa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b085      	sub	sp, #20
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	3301      	adds	r3, #1
 8012fb0:	60fb      	str	r3, [r7, #12]
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	4a13      	ldr	r2, [pc, #76]	; (8013004 <USB_CoreReset+0x64>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d901      	bls.n	8012fbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012fba:	2303      	movs	r3, #3
 8012fbc:	e01b      	b.n	8012ff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	691b      	ldr	r3, [r3, #16]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	daf2      	bge.n	8012fac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	691b      	ldr	r3, [r3, #16]
 8012fce:	f043 0201 	orr.w	r2, r3, #1
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	3301      	adds	r3, #1
 8012fda:	60fb      	str	r3, [r7, #12]
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	4a09      	ldr	r2, [pc, #36]	; (8013004 <USB_CoreReset+0x64>)
 8012fe0:	4293      	cmp	r3, r2
 8012fe2:	d901      	bls.n	8012fe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012fe4:	2303      	movs	r3, #3
 8012fe6:	e006      	b.n	8012ff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	691b      	ldr	r3, [r3, #16]
 8012fec:	f003 0301 	and.w	r3, r3, #1
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	d0f0      	beq.n	8012fd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3714      	adds	r7, #20
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013000:	4770      	bx	lr
 8013002:	bf00      	nop
 8013004:	00030d40 	.word	0x00030d40

08013008 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013008:	b084      	sub	sp, #16
 801300a:	b580      	push	{r7, lr}
 801300c:	b084      	sub	sp, #16
 801300e:	af00      	add	r7, sp, #0
 8013010:	6078      	str	r0, [r7, #4]
 8013012:	f107 001c 	add.w	r0, r7, #28
 8013016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013024:	461a      	mov	r2, r3
 8013026:	2300      	movs	r3, #0
 8013028:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801302e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801303e:	2b00      	cmp	r3, #0
 8013040:	d018      	beq.n	8013074 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8013042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013044:	2b01      	cmp	r3, #1
 8013046:	d10a      	bne.n	801305e <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	68ba      	ldr	r2, [r7, #8]
 8013052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013056:	f043 0304 	orr.w	r3, r3, #4
 801305a:	6013      	str	r3, [r2, #0]
 801305c:	e014      	b.n	8013088 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	68ba      	ldr	r2, [r7, #8]
 8013068:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801306c:	f023 0304 	bic.w	r3, r3, #4
 8013070:	6013      	str	r3, [r2, #0]
 8013072:	e009      	b.n	8013088 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	68ba      	ldr	r2, [r7, #8]
 801307e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013082:	f023 0304 	bic.w	r3, r3, #4
 8013086:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8013088:	2110      	movs	r1, #16
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f7ff fec0 	bl	8012e10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f7ff fee3 	bl	8012e5c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8013096:	2300      	movs	r3, #0
 8013098:	60fb      	str	r3, [r7, #12]
 801309a:	e015      	b.n	80130c8 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	015a      	lsls	r2, r3, #5
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	4413      	add	r3, r2
 80130a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80130a8:	461a      	mov	r2, r3
 80130aa:	f04f 33ff 	mov.w	r3, #4294967295
 80130ae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	015a      	lsls	r2, r3, #5
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	4413      	add	r3, r2
 80130b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80130bc:	461a      	mov	r2, r3
 80130be:	2300      	movs	r3, #0
 80130c0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	3301      	adds	r3, #1
 80130c6:	60fb      	str	r3, [r7, #12]
 80130c8:	6a3b      	ldr	r3, [r7, #32]
 80130ca:	68fa      	ldr	r2, [r7, #12]
 80130cc:	429a      	cmp	r2, r3
 80130ce:	d3e5      	bcc.n	801309c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80130d0:	2101      	movs	r1, #1
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f000 f8ac 	bl	8013230 <USB_DriveVbus>

  HAL_Delay(200U);
 80130d8:	20c8      	movs	r0, #200	; 0xc8
 80130da:	f7f3 ff8f 	bl	8006ffc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2200      	movs	r2, #0
 80130e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f04f 32ff 	mov.w	r2, #4294967295
 80130ea:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d00b      	beq.n	8013110 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80130fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	4a14      	ldr	r2, [pc, #80]	; (8013154 <USB_HostInit+0x14c>)
 8013104:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	4a13      	ldr	r2, [pc, #76]	; (8013158 <USB_HostInit+0x150>)
 801310a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 801310e:	e009      	b.n	8013124 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2280      	movs	r2, #128	; 0x80
 8013114:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	4a10      	ldr	r2, [pc, #64]	; (801315c <USB_HostInit+0x154>)
 801311a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	4a10      	ldr	r2, [pc, #64]	; (8013160 <USB_HostInit+0x158>)
 8013120:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013126:	2b00      	cmp	r3, #0
 8013128:	d105      	bne.n	8013136 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	699b      	ldr	r3, [r3, #24]
 801312e:	f043 0210 	orr.w	r2, r3, #16
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	699a      	ldr	r2, [r3, #24]
 801313a:	4b0a      	ldr	r3, [pc, #40]	; (8013164 <USB_HostInit+0x15c>)
 801313c:	4313      	orrs	r3, r2
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8013142:	2300      	movs	r3, #0
}
 8013144:	4618      	mov	r0, r3
 8013146:	3710      	adds	r7, #16
 8013148:	46bd      	mov	sp, r7
 801314a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801314e:	b004      	add	sp, #16
 8013150:	4770      	bx	lr
 8013152:	bf00      	nop
 8013154:	01000200 	.word	0x01000200
 8013158:	00e00300 	.word	0x00e00300
 801315c:	00600080 	.word	0x00600080
 8013160:	004000e0 	.word	0x004000e0
 8013164:	a3200008 	.word	0xa3200008

08013168 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8013168:	b480      	push	{r7}
 801316a:	b085      	sub	sp, #20
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	460b      	mov	r3, r1
 8013172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	68fa      	ldr	r2, [r7, #12]
 8013182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013186:	f023 0303 	bic.w	r3, r3, #3
 801318a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013192:	681a      	ldr	r2, [r3, #0]
 8013194:	78fb      	ldrb	r3, [r7, #3]
 8013196:	f003 0303 	and.w	r3, r3, #3
 801319a:	68f9      	ldr	r1, [r7, #12]
 801319c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80131a0:	4313      	orrs	r3, r2
 80131a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80131a4:	78fb      	ldrb	r3, [r7, #3]
 80131a6:	2b01      	cmp	r3, #1
 80131a8:	d107      	bne.n	80131ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80131b0:	461a      	mov	r2, r3
 80131b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80131b6:	6053      	str	r3, [r2, #4]
 80131b8:	e009      	b.n	80131ce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80131ba:	78fb      	ldrb	r3, [r7, #3]
 80131bc:	2b02      	cmp	r3, #2
 80131be:	d106      	bne.n	80131ce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80131c6:	461a      	mov	r2, r3
 80131c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80131cc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80131ce:	2300      	movs	r3, #0
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3714      	adds	r7, #20
 80131d4:	46bd      	mov	sp, r7
 80131d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131da:	4770      	bx	lr

080131dc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b084      	sub	sp, #16
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80131e8:	2300      	movs	r3, #0
 80131ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80131fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	68fa      	ldr	r2, [r7, #12]
 8013202:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8013206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801320a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801320c:	2064      	movs	r0, #100	; 0x64
 801320e:	f7f3 fef5 	bl	8006ffc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801321a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801321e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8013220:	200a      	movs	r0, #10
 8013222:	f7f3 feeb 	bl	8006ffc <HAL_Delay>

  return HAL_OK;
 8013226:	2300      	movs	r3, #0
}
 8013228:	4618      	mov	r0, r3
 801322a:	3710      	adds	r7, #16
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}

08013230 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8013230:	b480      	push	{r7}
 8013232:	b085      	sub	sp, #20
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	460b      	mov	r3, r1
 801323a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8013240:	2300      	movs	r3, #0
 8013242:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8013254:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801325c:	2b00      	cmp	r3, #0
 801325e:	d109      	bne.n	8013274 <USB_DriveVbus+0x44>
 8013260:	78fb      	ldrb	r3, [r7, #3]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d106      	bne.n	8013274 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	68fa      	ldr	r2, [r7, #12]
 801326a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801326e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013272:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801327a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801327e:	d109      	bne.n	8013294 <USB_DriveVbus+0x64>
 8013280:	78fb      	ldrb	r3, [r7, #3]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d106      	bne.n	8013294 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	68fa      	ldr	r2, [r7, #12]
 801328a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801328e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013292:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8013294:	2300      	movs	r3, #0
}
 8013296:	4618      	mov	r0, r3
 8013298:	3714      	adds	r7, #20
 801329a:	46bd      	mov	sp, r7
 801329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a0:	4770      	bx	lr

080132a2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80132a2:	b480      	push	{r7}
 80132a4:	b085      	sub	sp, #20
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80132ae:	2300      	movs	r3, #0
 80132b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	0c5b      	lsrs	r3, r3, #17
 80132c0:	f003 0303 	and.w	r3, r3, #3
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3714      	adds	r7, #20
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80132d0:	b480      	push	{r7}
 80132d2:	b085      	sub	sp, #20
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80132e2:	689b      	ldr	r3, [r3, #8]
 80132e4:	b29b      	uxth	r3, r3
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3714      	adds	r7, #20
 80132ea:	46bd      	mov	sp, r7
 80132ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f0:	4770      	bx	lr
	...

080132f4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b088      	sub	sp, #32
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	4608      	mov	r0, r1
 80132fe:	4611      	mov	r1, r2
 8013300:	461a      	mov	r2, r3
 8013302:	4603      	mov	r3, r0
 8013304:	70fb      	strb	r3, [r7, #3]
 8013306:	460b      	mov	r3, r1
 8013308:	70bb      	strb	r3, [r7, #2]
 801330a:	4613      	mov	r3, r2
 801330c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801330e:	2300      	movs	r3, #0
 8013310:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8013316:	78fb      	ldrb	r3, [r7, #3]
 8013318:	015a      	lsls	r2, r3, #5
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	4413      	add	r3, r2
 801331e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013322:	461a      	mov	r2, r3
 8013324:	f04f 33ff 	mov.w	r3, #4294967295
 8013328:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801332a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801332e:	2b03      	cmp	r3, #3
 8013330:	d87e      	bhi.n	8013430 <USB_HC_Init+0x13c>
 8013332:	a201      	add	r2, pc, #4	; (adr r2, 8013338 <USB_HC_Init+0x44>)
 8013334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013338:	08013349 	.word	0x08013349
 801333c:	080133f3 	.word	0x080133f3
 8013340:	08013349 	.word	0x08013349
 8013344:	080133b5 	.word	0x080133b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013348:	78fb      	ldrb	r3, [r7, #3]
 801334a:	015a      	lsls	r2, r3, #5
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	4413      	add	r3, r2
 8013350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013354:	461a      	mov	r2, r3
 8013356:	f240 439d 	movw	r3, #1181	; 0x49d
 801335a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801335c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013360:	2b00      	cmp	r3, #0
 8013362:	da10      	bge.n	8013386 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013364:	78fb      	ldrb	r3, [r7, #3]
 8013366:	015a      	lsls	r2, r3, #5
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	4413      	add	r3, r2
 801336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013370:	68db      	ldr	r3, [r3, #12]
 8013372:	78fa      	ldrb	r2, [r7, #3]
 8013374:	0151      	lsls	r1, r2, #5
 8013376:	693a      	ldr	r2, [r7, #16]
 8013378:	440a      	add	r2, r1
 801337a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801337e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013382:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8013384:	e057      	b.n	8013436 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801338e:	2b00      	cmp	r3, #0
 8013390:	d051      	beq.n	8013436 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8013392:	78fb      	ldrb	r3, [r7, #3]
 8013394:	015a      	lsls	r2, r3, #5
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	4413      	add	r3, r2
 801339a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	78fa      	ldrb	r2, [r7, #3]
 80133a2:	0151      	lsls	r1, r2, #5
 80133a4:	693a      	ldr	r2, [r7, #16]
 80133a6:	440a      	add	r2, r1
 80133a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80133ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80133b0:	60d3      	str	r3, [r2, #12]
      break;
 80133b2:	e040      	b.n	8013436 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80133b4:	78fb      	ldrb	r3, [r7, #3]
 80133b6:	015a      	lsls	r2, r3, #5
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	4413      	add	r3, r2
 80133bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133c0:	461a      	mov	r2, r3
 80133c2:	f240 639d 	movw	r3, #1693	; 0x69d
 80133c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80133c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	da34      	bge.n	801343a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80133d0:	78fb      	ldrb	r3, [r7, #3]
 80133d2:	015a      	lsls	r2, r3, #5
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	4413      	add	r3, r2
 80133d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133dc:	68db      	ldr	r3, [r3, #12]
 80133de:	78fa      	ldrb	r2, [r7, #3]
 80133e0:	0151      	lsls	r1, r2, #5
 80133e2:	693a      	ldr	r2, [r7, #16]
 80133e4:	440a      	add	r2, r1
 80133e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80133ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80133ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80133f0:	e023      	b.n	801343a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80133f2:	78fb      	ldrb	r3, [r7, #3]
 80133f4:	015a      	lsls	r2, r3, #5
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	4413      	add	r3, r2
 80133fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133fe:	461a      	mov	r2, r3
 8013400:	f240 2325 	movw	r3, #549	; 0x225
 8013404:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8013406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801340a:	2b00      	cmp	r3, #0
 801340c:	da17      	bge.n	801343e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801340e:	78fb      	ldrb	r3, [r7, #3]
 8013410:	015a      	lsls	r2, r3, #5
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	4413      	add	r3, r2
 8013416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801341a:	68db      	ldr	r3, [r3, #12]
 801341c:	78fa      	ldrb	r2, [r7, #3]
 801341e:	0151      	lsls	r1, r2, #5
 8013420:	693a      	ldr	r2, [r7, #16]
 8013422:	440a      	add	r2, r1
 8013424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013428:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801342c:	60d3      	str	r3, [r2, #12]
      }
      break;
 801342e:	e006      	b.n	801343e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8013430:	2301      	movs	r3, #1
 8013432:	77fb      	strb	r3, [r7, #31]
      break;
 8013434:	e004      	b.n	8013440 <USB_HC_Init+0x14c>
      break;
 8013436:	bf00      	nop
 8013438:	e002      	b.n	8013440 <USB_HC_Init+0x14c>
      break;
 801343a:	bf00      	nop
 801343c:	e000      	b.n	8013440 <USB_HC_Init+0x14c>
      break;
 801343e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8013440:	693b      	ldr	r3, [r7, #16]
 8013442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013446:	699a      	ldr	r2, [r3, #24]
 8013448:	78fb      	ldrb	r3, [r7, #3]
 801344a:	f003 030f 	and.w	r3, r3, #15
 801344e:	2101      	movs	r1, #1
 8013450:	fa01 f303 	lsl.w	r3, r1, r3
 8013454:	6939      	ldr	r1, [r7, #16]
 8013456:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801345a:	4313      	orrs	r3, r2
 801345c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	699b      	ldr	r3, [r3, #24]
 8013462:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801346a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801346e:	2b00      	cmp	r3, #0
 8013470:	da03      	bge.n	801347a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8013472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013476:	61bb      	str	r3, [r7, #24]
 8013478:	e001      	b.n	801347e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 801347a:	2300      	movs	r3, #0
 801347c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f7ff ff0f 	bl	80132a2 <USB_GetHostSpeed>
 8013484:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8013486:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801348a:	2b02      	cmp	r3, #2
 801348c:	d106      	bne.n	801349c <USB_HC_Init+0x1a8>
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	2b02      	cmp	r3, #2
 8013492:	d003      	beq.n	801349c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8013494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013498:	617b      	str	r3, [r7, #20]
 801349a:	e001      	b.n	80134a0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801349c:	2300      	movs	r3, #0
 801349e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80134a0:	787b      	ldrb	r3, [r7, #1]
 80134a2:	059b      	lsls	r3, r3, #22
 80134a4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80134a8:	78bb      	ldrb	r3, [r7, #2]
 80134aa:	02db      	lsls	r3, r3, #11
 80134ac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80134b0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80134b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80134b6:	049b      	lsls	r3, r3, #18
 80134b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80134bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80134be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80134c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80134c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80134c6:	69bb      	ldr	r3, [r7, #24]
 80134c8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80134ca:	78fb      	ldrb	r3, [r7, #3]
 80134cc:	0159      	lsls	r1, r3, #5
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	440b      	add	r3, r1
 80134d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134d6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80134dc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80134de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80134e2:	2b03      	cmp	r3, #3
 80134e4:	d10f      	bne.n	8013506 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80134e6:	78fb      	ldrb	r3, [r7, #3]
 80134e8:	015a      	lsls	r2, r3, #5
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	4413      	add	r3, r2
 80134ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	78fa      	ldrb	r2, [r7, #3]
 80134f6:	0151      	lsls	r1, r2, #5
 80134f8:	693a      	ldr	r2, [r7, #16]
 80134fa:	440a      	add	r2, r1
 80134fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013504:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8013506:	7ffb      	ldrb	r3, [r7, #31]
}
 8013508:	4618      	mov	r0, r3
 801350a:	3720      	adds	r7, #32
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b08c      	sub	sp, #48	; 0x30
 8013514:	af02      	add	r7, sp, #8
 8013516:	60f8      	str	r0, [r7, #12]
 8013518:	60b9      	str	r1, [r7, #8]
 801351a:	4613      	mov	r3, r2
 801351c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	785b      	ldrb	r3, [r3, #1]
 8013526:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8013528:	f44f 7380 	mov.w	r3, #256	; 0x100
 801352c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013536:	2b00      	cmp	r3, #0
 8013538:	d02d      	beq.n	8013596 <USB_HC_StartXfer+0x86>
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	791b      	ldrb	r3, [r3, #4]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d129      	bne.n	8013596 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8013542:	79fb      	ldrb	r3, [r7, #7]
 8013544:	2b01      	cmp	r3, #1
 8013546:	d117      	bne.n	8013578 <USB_HC_StartXfer+0x68>
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	79db      	ldrb	r3, [r3, #7]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d003      	beq.n	8013558 <USB_HC_StartXfer+0x48>
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	79db      	ldrb	r3, [r3, #7]
 8013554:	2b02      	cmp	r3, #2
 8013556:	d10f      	bne.n	8013578 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8013558:	69fb      	ldr	r3, [r7, #28]
 801355a:	015a      	lsls	r2, r3, #5
 801355c:	6a3b      	ldr	r3, [r7, #32]
 801355e:	4413      	add	r3, r2
 8013560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013564:	68db      	ldr	r3, [r3, #12]
 8013566:	69fa      	ldr	r2, [r7, #28]
 8013568:	0151      	lsls	r1, r2, #5
 801356a:	6a3a      	ldr	r2, [r7, #32]
 801356c:	440a      	add	r2, r1
 801356e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013576:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8013578:	79fb      	ldrb	r3, [r7, #7]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d10b      	bne.n	8013596 <USB_HC_StartXfer+0x86>
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	795b      	ldrb	r3, [r3, #5]
 8013582:	2b01      	cmp	r3, #1
 8013584:	d107      	bne.n	8013596 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	785b      	ldrb	r3, [r3, #1]
 801358a:	4619      	mov	r1, r3
 801358c:	68f8      	ldr	r0, [r7, #12]
 801358e:	f000 fa2f 	bl	80139f0 <USB_DoPing>
      return HAL_OK;
 8013592:	2300      	movs	r3, #0
 8013594:	e0f8      	b.n	8013788 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	695b      	ldr	r3, [r3, #20]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d018      	beq.n	80135d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	695b      	ldr	r3, [r3, #20]
 80135a2:	68ba      	ldr	r2, [r7, #8]
 80135a4:	8912      	ldrh	r2, [r2, #8]
 80135a6:	4413      	add	r3, r2
 80135a8:	3b01      	subs	r3, #1
 80135aa:	68ba      	ldr	r2, [r7, #8]
 80135ac:	8912      	ldrh	r2, [r2, #8]
 80135ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80135b2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80135b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80135b6:	8b7b      	ldrh	r3, [r7, #26]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d90b      	bls.n	80135d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80135bc:	8b7b      	ldrh	r3, [r7, #26]
 80135be:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80135c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135c2:	68ba      	ldr	r2, [r7, #8]
 80135c4:	8912      	ldrh	r2, [r2, #8]
 80135c6:	fb03 f202 	mul.w	r2, r3, r2
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	611a      	str	r2, [r3, #16]
 80135ce:	e001      	b.n	80135d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80135d0:	2301      	movs	r3, #1
 80135d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	78db      	ldrb	r3, [r3, #3]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d007      	beq.n	80135ec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80135dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135de:	68ba      	ldr	r2, [r7, #8]
 80135e0:	8912      	ldrh	r2, [r2, #8]
 80135e2:	fb03 f202 	mul.w	r2, r3, r2
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	611a      	str	r2, [r3, #16]
 80135ea:	e003      	b.n	80135f4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	695a      	ldr	r2, [r3, #20]
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	691b      	ldr	r3, [r3, #16]
 80135f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80135fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135fe:	04d9      	lsls	r1, r3, #19
 8013600:	4b63      	ldr	r3, [pc, #396]	; (8013790 <USB_HC_StartXfer+0x280>)
 8013602:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8013604:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	7a9b      	ldrb	r3, [r3, #10]
 801360a:	075b      	lsls	r3, r3, #29
 801360c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8013610:	69f9      	ldr	r1, [r7, #28]
 8013612:	0148      	lsls	r0, r1, #5
 8013614:	6a39      	ldr	r1, [r7, #32]
 8013616:	4401      	add	r1, r0
 8013618:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801361c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801361e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8013620:	79fb      	ldrb	r3, [r7, #7]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d009      	beq.n	801363a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	68d9      	ldr	r1, [r3, #12]
 801362a:	69fb      	ldr	r3, [r7, #28]
 801362c:	015a      	lsls	r2, r3, #5
 801362e:	6a3b      	ldr	r3, [r7, #32]
 8013630:	4413      	add	r3, r2
 8013632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013636:	460a      	mov	r2, r1
 8013638:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801363a:	6a3b      	ldr	r3, [r7, #32]
 801363c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013640:	689b      	ldr	r3, [r3, #8]
 8013642:	f003 0301 	and.w	r3, r3, #1
 8013646:	2b00      	cmp	r3, #0
 8013648:	bf0c      	ite	eq
 801364a:	2301      	moveq	r3, #1
 801364c:	2300      	movne	r3, #0
 801364e:	b2db      	uxtb	r3, r3
 8013650:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	015a      	lsls	r2, r3, #5
 8013656:	6a3b      	ldr	r3, [r7, #32]
 8013658:	4413      	add	r3, r2
 801365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	69fa      	ldr	r2, [r7, #28]
 8013662:	0151      	lsls	r1, r2, #5
 8013664:	6a3a      	ldr	r2, [r7, #32]
 8013666:	440a      	add	r2, r1
 8013668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801366c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013670:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	015a      	lsls	r2, r3, #5
 8013676:	6a3b      	ldr	r3, [r7, #32]
 8013678:	4413      	add	r3, r2
 801367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801367e:	681a      	ldr	r2, [r3, #0]
 8013680:	7e7b      	ldrb	r3, [r7, #25]
 8013682:	075b      	lsls	r3, r3, #29
 8013684:	69f9      	ldr	r1, [r7, #28]
 8013686:	0148      	lsls	r0, r1, #5
 8013688:	6a39      	ldr	r1, [r7, #32]
 801368a:	4401      	add	r1, r0
 801368c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8013690:	4313      	orrs	r3, r2
 8013692:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8013694:	69fb      	ldr	r3, [r7, #28]
 8013696:	015a      	lsls	r2, r3, #5
 8013698:	6a3b      	ldr	r3, [r7, #32]
 801369a:	4413      	add	r3, r2
 801369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80136aa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	78db      	ldrb	r3, [r3, #3]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d004      	beq.n	80136be <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80136ba:	613b      	str	r3, [r7, #16]
 80136bc:	e003      	b.n	80136c6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80136c4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80136cc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	015a      	lsls	r2, r3, #5
 80136d2:	6a3b      	ldr	r3, [r7, #32]
 80136d4:	4413      	add	r3, r2
 80136d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136da:	461a      	mov	r2, r3
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80136e0:	79fb      	ldrb	r3, [r7, #7]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d001      	beq.n	80136ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80136e6:	2300      	movs	r3, #0
 80136e8:	e04e      	b.n	8013788 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	78db      	ldrb	r3, [r3, #3]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d149      	bne.n	8013786 <USB_HC_StartXfer+0x276>
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	695b      	ldr	r3, [r3, #20]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d045      	beq.n	8013786 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	79db      	ldrb	r3, [r3, #7]
 80136fe:	2b03      	cmp	r3, #3
 8013700:	d830      	bhi.n	8013764 <USB_HC_StartXfer+0x254>
 8013702:	a201      	add	r2, pc, #4	; (adr r2, 8013708 <USB_HC_StartXfer+0x1f8>)
 8013704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013708:	08013719 	.word	0x08013719
 801370c:	0801373d 	.word	0x0801373d
 8013710:	08013719 	.word	0x08013719
 8013714:	0801373d 	.word	0x0801373d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	695b      	ldr	r3, [r3, #20]
 801371c:	3303      	adds	r3, #3
 801371e:	089b      	lsrs	r3, r3, #2
 8013720:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8013722:	8afa      	ldrh	r2, [r7, #22]
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013728:	b29b      	uxth	r3, r3
 801372a:	429a      	cmp	r2, r3
 801372c:	d91c      	bls.n	8013768 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	699b      	ldr	r3, [r3, #24]
 8013732:	f043 0220 	orr.w	r2, r3, #32
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	619a      	str	r2, [r3, #24]
        }
        break;
 801373a:	e015      	b.n	8013768 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	695b      	ldr	r3, [r3, #20]
 8013740:	3303      	adds	r3, #3
 8013742:	089b      	lsrs	r3, r3, #2
 8013744:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8013746:	8afa      	ldrh	r2, [r7, #22]
 8013748:	6a3b      	ldr	r3, [r7, #32]
 801374a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801374e:	691b      	ldr	r3, [r3, #16]
 8013750:	b29b      	uxth	r3, r3
 8013752:	429a      	cmp	r2, r3
 8013754:	d90a      	bls.n	801376c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	699b      	ldr	r3, [r3, #24]
 801375a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	619a      	str	r2, [r3, #24]
        }
        break;
 8013762:	e003      	b.n	801376c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8013764:	bf00      	nop
 8013766:	e002      	b.n	801376e <USB_HC_StartXfer+0x25e>
        break;
 8013768:	bf00      	nop
 801376a:	e000      	b.n	801376e <USB_HC_StartXfer+0x25e>
        break;
 801376c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	68d9      	ldr	r1, [r3, #12]
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	785a      	ldrb	r2, [r3, #1]
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	695b      	ldr	r3, [r3, #20]
 801377a:	b29b      	uxth	r3, r3
 801377c:	2000      	movs	r0, #0
 801377e:	9000      	str	r0, [sp, #0]
 8013780:	68f8      	ldr	r0, [r7, #12]
 8013782:	f7ff fb8d 	bl	8012ea0 <USB_WritePacket>
  }

  return HAL_OK;
 8013786:	2300      	movs	r3, #0
}
 8013788:	4618      	mov	r0, r3
 801378a:	3728      	adds	r7, #40	; 0x28
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	1ff80000 	.word	0x1ff80000

08013794 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013794:	b480      	push	{r7}
 8013796:	b085      	sub	sp, #20
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80137a6:	695b      	ldr	r3, [r3, #20]
 80137a8:	b29b      	uxth	r3, r3
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3714      	adds	r7, #20
 80137ae:	46bd      	mov	sp, r7
 80137b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b4:	4770      	bx	lr

080137b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80137b6:	b480      	push	{r7}
 80137b8:	b089      	sub	sp, #36	; 0x24
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
 80137be:	460b      	mov	r3, r1
 80137c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80137c6:	78fb      	ldrb	r3, [r7, #3]
 80137c8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80137ca:	2300      	movs	r3, #0
 80137cc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	015a      	lsls	r2, r3, #5
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	4413      	add	r3, r2
 80137d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	0c9b      	lsrs	r3, r3, #18
 80137de:	f003 0303 	and.w	r3, r3, #3
 80137e2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	015a      	lsls	r2, r3, #5
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	4413      	add	r3, r2
 80137ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	0fdb      	lsrs	r3, r3, #31
 80137f4:	f003 0301 	and.w	r3, r3, #1
 80137f8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	689b      	ldr	r3, [r3, #8]
 80137fe:	f003 0320 	and.w	r3, r3, #32
 8013802:	2b20      	cmp	r3, #32
 8013804:	d104      	bne.n	8013810 <USB_HC_Halt+0x5a>
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d101      	bne.n	8013810 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 801380c:	2300      	movs	r3, #0
 801380e:	e0e8      	b.n	80139e2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d002      	beq.n	801381c <USB_HC_Halt+0x66>
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	2b02      	cmp	r3, #2
 801381a:	d173      	bne.n	8013904 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	015a      	lsls	r2, r3, #5
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	4413      	add	r3, r2
 8013824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	697a      	ldr	r2, [r7, #20]
 801382c:	0151      	lsls	r1, r2, #5
 801382e:	69ba      	ldr	r2, [r7, #24]
 8013830:	440a      	add	r2, r1
 8013832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801383a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	689b      	ldr	r3, [r3, #8]
 8013840:	f003 0320 	and.w	r3, r3, #32
 8013844:	2b00      	cmp	r3, #0
 8013846:	f040 80cb 	bne.w	80139e0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801384e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013852:	2b00      	cmp	r3, #0
 8013854:	d143      	bne.n	80138de <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	015a      	lsls	r2, r3, #5
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	4413      	add	r3, r2
 801385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	697a      	ldr	r2, [r7, #20]
 8013866:	0151      	lsls	r1, r2, #5
 8013868:	69ba      	ldr	r2, [r7, #24]
 801386a:	440a      	add	r2, r1
 801386c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013874:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	015a      	lsls	r2, r3, #5
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	4413      	add	r3, r2
 801387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	697a      	ldr	r2, [r7, #20]
 8013886:	0151      	lsls	r1, r2, #5
 8013888:	69ba      	ldr	r2, [r7, #24]
 801388a:	440a      	add	r2, r1
 801388c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013894:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	015a      	lsls	r2, r3, #5
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	4413      	add	r3, r2
 801389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	697a      	ldr	r2, [r7, #20]
 80138a6:	0151      	lsls	r1, r2, #5
 80138a8:	69ba      	ldr	r2, [r7, #24]
 80138aa:	440a      	add	r2, r1
 80138ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80138b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80138b4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	3301      	adds	r3, #1
 80138ba:	61fb      	str	r3, [r7, #28]
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80138c2:	d81d      	bhi.n	8013900 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	015a      	lsls	r2, r3, #5
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	4413      	add	r3, r2
 80138cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138da:	d0ec      	beq.n	80138b6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80138dc:	e080      	b.n	80139e0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	015a      	lsls	r2, r3, #5
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	4413      	add	r3, r2
 80138e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	697a      	ldr	r2, [r7, #20]
 80138ee:	0151      	lsls	r1, r2, #5
 80138f0:	69ba      	ldr	r2, [r7, #24]
 80138f2:	440a      	add	r2, r1
 80138f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80138f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80138fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80138fe:	e06f      	b.n	80139e0 <USB_HC_Halt+0x22a>
            break;
 8013900:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8013902:	e06d      	b.n	80139e0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	015a      	lsls	r2, r3, #5
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	4413      	add	r3, r2
 801390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	697a      	ldr	r2, [r7, #20]
 8013914:	0151      	lsls	r1, r2, #5
 8013916:	69ba      	ldr	r2, [r7, #24]
 8013918:	440a      	add	r2, r1
 801391a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801391e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013922:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8013924:	69bb      	ldr	r3, [r7, #24]
 8013926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801392a:	691b      	ldr	r3, [r3, #16]
 801392c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013930:	2b00      	cmp	r3, #0
 8013932:	d143      	bne.n	80139bc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	015a      	lsls	r2, r3, #5
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	4413      	add	r3, r2
 801393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	697a      	ldr	r2, [r7, #20]
 8013944:	0151      	lsls	r1, r2, #5
 8013946:	69ba      	ldr	r2, [r7, #24]
 8013948:	440a      	add	r2, r1
 801394a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801394e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013952:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	015a      	lsls	r2, r3, #5
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	4413      	add	r3, r2
 801395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	697a      	ldr	r2, [r7, #20]
 8013964:	0151      	lsls	r1, r2, #5
 8013966:	69ba      	ldr	r2, [r7, #24]
 8013968:	440a      	add	r2, r1
 801396a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801396e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013972:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	015a      	lsls	r2, r3, #5
 8013978:	69bb      	ldr	r3, [r7, #24]
 801397a:	4413      	add	r3, r2
 801397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	697a      	ldr	r2, [r7, #20]
 8013984:	0151      	lsls	r1, r2, #5
 8013986:	69ba      	ldr	r2, [r7, #24]
 8013988:	440a      	add	r2, r1
 801398a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801398e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013992:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	3301      	adds	r3, #1
 8013998:	61fb      	str	r3, [r7, #28]
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80139a0:	d81d      	bhi.n	80139de <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	015a      	lsls	r2, r3, #5
 80139a6:	69bb      	ldr	r3, [r7, #24]
 80139a8:	4413      	add	r3, r2
 80139aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139b8:	d0ec      	beq.n	8013994 <USB_HC_Halt+0x1de>
 80139ba:	e011      	b.n	80139e0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	015a      	lsls	r2, r3, #5
 80139c0:	69bb      	ldr	r3, [r7, #24]
 80139c2:	4413      	add	r3, r2
 80139c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	697a      	ldr	r2, [r7, #20]
 80139cc:	0151      	lsls	r1, r2, #5
 80139ce:	69ba      	ldr	r2, [r7, #24]
 80139d0:	440a      	add	r2, r1
 80139d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80139d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80139da:	6013      	str	r3, [r2, #0]
 80139dc:	e000      	b.n	80139e0 <USB_HC_Halt+0x22a>
          break;
 80139de:	bf00      	nop
    }
  }

  return HAL_OK;
 80139e0:	2300      	movs	r3, #0
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3724      	adds	r7, #36	; 0x24
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr
	...

080139f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80139f0:	b480      	push	{r7}
 80139f2:	b087      	sub	sp, #28
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
 80139f8:	460b      	mov	r3, r1
 80139fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8013a00:	78fb      	ldrb	r3, [r7, #3]
 8013a02:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8013a04:	2301      	movs	r3, #1
 8013a06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	04da      	lsls	r2, r3, #19
 8013a0c:	4b15      	ldr	r3, [pc, #84]	; (8013a64 <USB_DoPing+0x74>)
 8013a0e:	4013      	ands	r3, r2
 8013a10:	693a      	ldr	r2, [r7, #16]
 8013a12:	0151      	lsls	r1, r2, #5
 8013a14:	697a      	ldr	r2, [r7, #20]
 8013a16:	440a      	add	r2, r1
 8013a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013a20:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	015a      	lsls	r2, r3, #5
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	4413      	add	r3, r2
 8013a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013a38:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013a40:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	015a      	lsls	r2, r3, #5
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	4413      	add	r3, r2
 8013a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a4e:	461a      	mov	r2, r3
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8013a54:	2300      	movs	r3, #0
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	371c      	adds	r7, #28
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a60:	4770      	bx	lr
 8013a62:	bf00      	nop
 8013a64:	1ff80000 	.word	0x1ff80000

08013a68 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b086      	sub	sp, #24
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8013a74:	2300      	movs	r3, #0
 8013a76:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f7ff f98e 	bl	8012d9a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8013a7e:	2110      	movs	r1, #16
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	f7ff f9c5 	bl	8012e10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f7ff f9e8 	bl	8012e5c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	613b      	str	r3, [r7, #16]
 8013a90:	e01f      	b.n	8013ad2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	015a      	lsls	r2, r3, #5
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	4413      	add	r3, r2
 8013a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013aa8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ab0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013ab8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	015a      	lsls	r2, r3, #5
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	4413      	add	r3, r2
 8013ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	3301      	adds	r3, #1
 8013ad0:	613b      	str	r3, [r7, #16]
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	2b0f      	cmp	r3, #15
 8013ad6:	d9dc      	bls.n	8013a92 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8013ad8:	2300      	movs	r3, #0
 8013ada:	613b      	str	r3, [r7, #16]
 8013adc:	e034      	b.n	8013b48 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	015a      	lsls	r2, r3, #5
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	4413      	add	r3, r2
 8013ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013af4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013afc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013b04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	015a      	lsls	r2, r3, #5
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b12:	461a      	mov	r2, r3
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	617b      	str	r3, [r7, #20]
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013b24:	d80c      	bhi.n	8013b40 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	015a      	lsls	r2, r3, #5
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b3c:	d0ec      	beq.n	8013b18 <USB_StopHost+0xb0>
 8013b3e:	e000      	b.n	8013b42 <USB_StopHost+0xda>
        break;
 8013b40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	3301      	adds	r3, #1
 8013b46:	613b      	str	r3, [r7, #16]
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	2b0f      	cmp	r3, #15
 8013b4c:	d9c7      	bls.n	8013ade <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013b54:	461a      	mov	r2, r3
 8013b56:	f04f 33ff 	mov.w	r3, #4294967295
 8013b5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b62:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f7ff f907 	bl	8012d78 <USB_EnableGlobalInt>

  return HAL_OK;
 8013b6a:	2300      	movs	r3, #0
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3718      	adds	r7, #24
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}

08013b74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013b78:	4904      	ldr	r1, [pc, #16]	; (8013b8c <MX_FATFS_Init+0x18>)
 8013b7a:	4805      	ldr	r0, [pc, #20]	; (8013b90 <MX_FATFS_Init+0x1c>)
 8013b7c:	f002 fbf0 	bl	8016360 <FATFS_LinkDriver>
 8013b80:	4603      	mov	r3, r0
 8013b82:	461a      	mov	r2, r3
 8013b84:	4b03      	ldr	r3, [pc, #12]	; (8013b94 <MX_FATFS_Init+0x20>)
 8013b86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013b88:	bf00      	nop
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	2001f408 	.word	0x2001f408
 8013b90:	0801d804 	.word	0x0801d804
 8013b94:	2001f404 	.word	0x2001f404

08013b98 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013ba2:	f000 f87b 	bl	8013c9c <BSP_SD_IsDetected>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d001      	beq.n	8013bb0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013bac:	2302      	movs	r3, #2
 8013bae:	e012      	b.n	8013bd6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013bb0:	480b      	ldr	r0, [pc, #44]	; (8013be0 <BSP_SD_Init+0x48>)
 8013bb2:	f7fb fae0 	bl	800f176 <HAL_SD_Init>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013bba:	79fb      	ldrb	r3, [r7, #7]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d109      	bne.n	8013bd4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013bc4:	4806      	ldr	r0, [pc, #24]	; (8013be0 <BSP_SD_Init+0x48>)
 8013bc6:	f7fb ff2f 	bl	800fa28 <HAL_SD_ConfigWideBusOperation>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d001      	beq.n	8013bd4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3708      	adds	r7, #8
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	2001eef8 	.word	0x2001eef8

08013be4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
 8013bee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	68ba      	ldr	r2, [r7, #8]
 8013bf8:	68f9      	ldr	r1, [r7, #12]
 8013bfa:	4806      	ldr	r0, [pc, #24]	; (8013c14 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013bfc:	f7fb fb72 	bl	800f2e4 <HAL_SD_ReadBlocks_DMA>
 8013c00:	4603      	mov	r3, r0
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d001      	beq.n	8013c0a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013c06:	2301      	movs	r3, #1
 8013c08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3718      	adds	r7, #24
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}
 8013c14:	2001eef8 	.word	0x2001eef8

08013c18 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b086      	sub	sp, #24
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	60f8      	str	r0, [r7, #12]
 8013c20:	60b9      	str	r1, [r7, #8]
 8013c22:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013c24:	2300      	movs	r3, #0
 8013c26:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	68ba      	ldr	r2, [r7, #8]
 8013c2c:	68f9      	ldr	r1, [r7, #12]
 8013c2e:	4806      	ldr	r0, [pc, #24]	; (8013c48 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013c30:	f7fb fc3a 	bl	800f4a8 <HAL_SD_WriteBlocks_DMA>
 8013c34:	4603      	mov	r3, r0
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d001      	beq.n	8013c3e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3718      	adds	r7, #24
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	2001eef8 	.word	0x2001eef8

08013c4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013c50:	4805      	ldr	r0, [pc, #20]	; (8013c68 <BSP_SD_GetCardState+0x1c>)
 8013c52:	f7fb ff83 	bl	800fb5c <HAL_SD_GetCardState>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b04      	cmp	r3, #4
 8013c5a:	bf14      	ite	ne
 8013c5c:	2301      	movne	r3, #1
 8013c5e:	2300      	moveq	r3, #0
 8013c60:	b2db      	uxtb	r3, r3
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	bf00      	nop
 8013c68:	2001eef8 	.word	0x2001eef8

08013c6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013c74:	6879      	ldr	r1, [r7, #4]
 8013c76:	4803      	ldr	r0, [pc, #12]	; (8013c84 <BSP_SD_GetCardInfo+0x18>)
 8013c78:	f7fb feaa 	bl	800f9d0 <HAL_SD_GetCardInfo>
}
 8013c7c:	bf00      	nop
 8013c7e:	3708      	adds	r7, #8
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	2001eef8 	.word	0x2001eef8

08013c88 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013c90:	f000 f9b2 	bl	8013ff8 <BSP_SD_ReadCpltCallback>
}
 8013c94:	bf00      	nop
 8013c96:	3708      	adds	r7, #8
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013ca6:	f000 f80b 	bl	8013cc0 <BSP_PlatformIsDetected>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d101      	bne.n	8013cb4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013cb4:	79fb      	ldrb	r3, [r7, #7]
 8013cb6:	b2db      	uxtb	r3, r3
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3708      	adds	r7, #8
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013cce:	4806      	ldr	r0, [pc, #24]	; (8013ce8 <BSP_PlatformIsDetected+0x28>)
 8013cd0:	f7f5 fa6e 	bl	80091b0 <HAL_GPIO_ReadPin>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d001      	beq.n	8013cde <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013cde:	79fb      	ldrb	r3, [r7, #7]
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	40020800 	.word	0x40020800

08013cec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8013cf4:	f002 fb80 	bl	80163f8 <osKernelSysTick>
 8013cf8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8013cfa:	e006      	b.n	8013d0a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013cfc:	f7ff ffa6 	bl	8013c4c <BSP_SD_GetCardState>
 8013d00:	4603      	mov	r3, r0
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d101      	bne.n	8013d0a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013d06:	2300      	movs	r3, #0
 8013d08:	e009      	b.n	8013d1e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8013d0a:	f002 fb75 	bl	80163f8 <osKernelSysTick>
 8013d0e:	4602      	mov	r2, r0
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	687a      	ldr	r2, [r7, #4]
 8013d16:	429a      	cmp	r2, r3
 8013d18:	d8f0      	bhi.n	8013cfc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3710      	adds	r7, #16
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
	...

08013d28 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	4603      	mov	r3, r0
 8013d30:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013d32:	4b0b      	ldr	r3, [pc, #44]	; (8013d60 <SD_CheckStatus+0x38>)
 8013d34:	2201      	movs	r2, #1
 8013d36:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013d38:	f7ff ff88 	bl	8013c4c <BSP_SD_GetCardState>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d107      	bne.n	8013d52 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013d42:	4b07      	ldr	r3, [pc, #28]	; (8013d60 <SD_CheckStatus+0x38>)
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	b2db      	uxtb	r3, r3
 8013d48:	f023 0301 	bic.w	r3, r3, #1
 8013d4c:	b2da      	uxtb	r2, r3
 8013d4e:	4b04      	ldr	r3, [pc, #16]	; (8013d60 <SD_CheckStatus+0x38>)
 8013d50:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013d52:	4b03      	ldr	r3, [pc, #12]	; (8013d60 <SD_CheckStatus+0x38>)
 8013d54:	781b      	ldrb	r3, [r3, #0]
 8013d56:	b2db      	uxtb	r3, r3
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3708      	adds	r7, #8
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	20000059 	.word	0x20000059

08013d64 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013d64:	b590      	push	{r4, r7, lr}
 8013d66:	b087      	sub	sp, #28
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013d6e:	4b20      	ldr	r3, [pc, #128]	; (8013df0 <SD_initialize+0x8c>)
 8013d70:	2201      	movs	r2, #1
 8013d72:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8013d74:	f002 fb34 	bl	80163e0 <osKernelRunning>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d030      	beq.n	8013de0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8013d7e:	f7ff ff0b 	bl	8013b98 <BSP_SD_Init>
 8013d82:	4603      	mov	r3, r0
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d107      	bne.n	8013d98 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8013d88:	79fb      	ldrb	r3, [r7, #7]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7ff ffcc 	bl	8013d28 <SD_CheckStatus>
 8013d90:	4603      	mov	r3, r0
 8013d92:	461a      	mov	r2, r3
 8013d94:	4b16      	ldr	r3, [pc, #88]	; (8013df0 <SD_initialize+0x8c>)
 8013d96:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8013d98:	4b15      	ldr	r3, [pc, #84]	; (8013df0 <SD_initialize+0x8c>)
 8013d9a:	781b      	ldrb	r3, [r3, #0]
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	2b01      	cmp	r3, #1
 8013da0:	d01e      	beq.n	8013de0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8013da2:	4b14      	ldr	r3, [pc, #80]	; (8013df4 <SD_initialize+0x90>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d10e      	bne.n	8013dc8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8013daa:	4b13      	ldr	r3, [pc, #76]	; (8013df8 <SD_initialize+0x94>)
 8013dac:	f107 0408 	add.w	r4, r7, #8
 8013db0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013db2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8013db6:	f107 0308 	add.w	r3, r7, #8
 8013dba:	2100      	movs	r1, #0
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f002 fc17 	bl	80165f0 <osMessageCreate>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	4a0b      	ldr	r2, [pc, #44]	; (8013df4 <SD_initialize+0x90>)
 8013dc6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8013dc8:	4b0a      	ldr	r3, [pc, #40]	; (8013df4 <SD_initialize+0x90>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d107      	bne.n	8013de0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8013dd0:	4b07      	ldr	r3, [pc, #28]	; (8013df0 <SD_initialize+0x8c>)
 8013dd2:	781b      	ldrb	r3, [r3, #0]
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	f043 0301 	orr.w	r3, r3, #1
 8013dda:	b2da      	uxtb	r2, r3
 8013ddc:	4b04      	ldr	r3, [pc, #16]	; (8013df0 <SD_initialize+0x8c>)
 8013dde:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8013de0:	4b03      	ldr	r3, [pc, #12]	; (8013df0 <SD_initialize+0x8c>)
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	b2db      	uxtb	r3, r3
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	371c      	adds	r7, #28
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd90      	pop	{r4, r7, pc}
 8013dee:	bf00      	nop
 8013df0:	20000059 	.word	0x20000059
 8013df4:	2001f40c 	.word	0x2001f40c
 8013df8:	0801ac84 	.word	0x0801ac84

08013dfc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	4603      	mov	r3, r0
 8013e04:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013e06:	79fb      	ldrb	r3, [r7, #7]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7ff ff8d 	bl	8013d28 <SD_CheckStatus>
 8013e0e:	4603      	mov	r3, r0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3708      	adds	r7, #8
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b08a      	sub	sp, #40	; 0x28
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	60b9      	str	r1, [r7, #8]
 8013e20:	607a      	str	r2, [r7, #4]
 8013e22:	603b      	str	r3, [r7, #0]
 8013e24:	4603      	mov	r3, r0
 8013e26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013e28:	2301      	movs	r3, #1
 8013e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013e2e:	f247 5030 	movw	r0, #30000	; 0x7530
 8013e32:	f7ff ff5b 	bl	8013cec <SD_CheckStatusWithTimeout>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	da02      	bge.n	8013e42 <SD_read+0x2a>
  {
    return res;
 8013e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e40:	e032      	b.n	8013ea8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8013e42:	683a      	ldr	r2, [r7, #0]
 8013e44:	6879      	ldr	r1, [r7, #4]
 8013e46:	68b8      	ldr	r0, [r7, #8]
 8013e48:	f7ff fecc 	bl	8013be4 <BSP_SD_ReadBlocks_DMA>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8013e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d124      	bne.n	8013ea4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8013e5a:	4b15      	ldr	r3, [pc, #84]	; (8013eb0 <SD_read+0x98>)
 8013e5c:	6819      	ldr	r1, [r3, #0]
 8013e5e:	f107 0314 	add.w	r3, r7, #20
 8013e62:	f247 5230 	movw	r2, #30000	; 0x7530
 8013e66:	4618      	mov	r0, r3
 8013e68:	f002 fc2a 	bl	80166c0 <osMessageGet>

    if (event.status == osEventMessage)
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	2b10      	cmp	r3, #16
 8013e70:	d118      	bne.n	8013ea4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8013e72:	69bb      	ldr	r3, [r7, #24]
 8013e74:	2b01      	cmp	r3, #1
 8013e76:	d115      	bne.n	8013ea4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8013e78:	f002 fabe 	bl	80163f8 <osKernelSysTick>
 8013e7c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8013e7e:	e008      	b.n	8013e92 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013e80:	f7ff fee4 	bl	8013c4c <BSP_SD_GetCardState>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d103      	bne.n	8013e92 <SD_read+0x7a>
              {
                res = RES_OK;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8013e90:	e008      	b.n	8013ea4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8013e92:	f002 fab1 	bl	80163f8 <osKernelSysTick>
 8013e96:	4602      	mov	r2, r0
 8013e98:	6a3b      	ldr	r3, [r7, #32]
 8013e9a:	1ad3      	subs	r3, r2, r3
 8013e9c:	f247 522f 	movw	r2, #29999	; 0x752f
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	d9ed      	bls.n	8013e80 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8013ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3728      	adds	r7, #40	; 0x28
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	2001f40c 	.word	0x2001f40c

08013eb4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b08a      	sub	sp, #40	; 0x28
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	60b9      	str	r1, [r7, #8]
 8013ebc:	607a      	str	r2, [r7, #4]
 8013ebe:	603b      	str	r3, [r7, #0]
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013eca:	f247 5030 	movw	r0, #30000	; 0x7530
 8013ece:	f7ff ff0d 	bl	8013cec <SD_CheckStatusWithTimeout>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	da02      	bge.n	8013ede <SD_write+0x2a>
  {
    return res;
 8013ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013edc:	e02e      	b.n	8013f3c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013ede:	683a      	ldr	r2, [r7, #0]
 8013ee0:	6879      	ldr	r1, [r7, #4]
 8013ee2:	68b8      	ldr	r0, [r7, #8]
 8013ee4:	f7ff fe98 	bl	8013c18 <BSP_SD_WriteBlocks_DMA>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d124      	bne.n	8013f38 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8013eee:	4b15      	ldr	r3, [pc, #84]	; (8013f44 <SD_write+0x90>)
 8013ef0:	6819      	ldr	r1, [r3, #0]
 8013ef2:	f107 0314 	add.w	r3, r7, #20
 8013ef6:	f247 5230 	movw	r2, #30000	; 0x7530
 8013efa:	4618      	mov	r0, r3
 8013efc:	f002 fbe0 	bl	80166c0 <osMessageGet>

    if (event.status == osEventMessage)
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	2b10      	cmp	r3, #16
 8013f04:	d118      	bne.n	8013f38 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8013f06:	69bb      	ldr	r3, [r7, #24]
 8013f08:	2b02      	cmp	r3, #2
 8013f0a:	d115      	bne.n	8013f38 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8013f0c:	f002 fa74 	bl	80163f8 <osKernelSysTick>
 8013f10:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8013f12:	e008      	b.n	8013f26 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013f14:	f7ff fe9a 	bl	8013c4c <BSP_SD_GetCardState>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d103      	bne.n	8013f26 <SD_write+0x72>
          {
            res = RES_OK;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8013f24:	e008      	b.n	8013f38 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8013f26:	f002 fa67 	bl	80163f8 <osKernelSysTick>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	6a3b      	ldr	r3, [r7, #32]
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	f247 522f 	movw	r2, #29999	; 0x752f
 8013f34:	4293      	cmp	r3, r2
 8013f36:	d9ed      	bls.n	8013f14 <SD_write+0x60>
    }

  }
#endif

  return res;
 8013f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3728      	adds	r7, #40	; 0x28
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	2001f40c 	.word	0x2001f40c

08013f48 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b08c      	sub	sp, #48	; 0x30
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	4603      	mov	r3, r0
 8013f50:	603a      	str	r2, [r7, #0]
 8013f52:	71fb      	strb	r3, [r7, #7]
 8013f54:	460b      	mov	r3, r1
 8013f56:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013f58:	2301      	movs	r3, #1
 8013f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013f5e:	4b25      	ldr	r3, [pc, #148]	; (8013ff4 <SD_ioctl+0xac>)
 8013f60:	781b      	ldrb	r3, [r3, #0]
 8013f62:	b2db      	uxtb	r3, r3
 8013f64:	f003 0301 	and.w	r3, r3, #1
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d001      	beq.n	8013f70 <SD_ioctl+0x28>
 8013f6c:	2303      	movs	r3, #3
 8013f6e:	e03c      	b.n	8013fea <SD_ioctl+0xa2>

  switch (cmd)
 8013f70:	79bb      	ldrb	r3, [r7, #6]
 8013f72:	2b03      	cmp	r3, #3
 8013f74:	d834      	bhi.n	8013fe0 <SD_ioctl+0x98>
 8013f76:	a201      	add	r2, pc, #4	; (adr r2, 8013f7c <SD_ioctl+0x34>)
 8013f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f7c:	08013f8d 	.word	0x08013f8d
 8013f80:	08013f95 	.word	0x08013f95
 8013f84:	08013fad 	.word	0x08013fad
 8013f88:	08013fc7 	.word	0x08013fc7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013f92:	e028      	b.n	8013fe6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013f94:	f107 030c 	add.w	r3, r7, #12
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ff fe67 	bl	8013c6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013faa:	e01c      	b.n	8013fe6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013fac:	f107 030c 	add.w	r3, r7, #12
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7ff fe5b 	bl	8013c6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb8:	b29a      	uxth	r2, r3
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013fc4:	e00f      	b.n	8013fe6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013fc6:	f107 030c 	add.w	r3, r7, #12
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7ff fe4e 	bl	8013c6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd2:	0a5a      	lsrs	r2, r3, #9
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013fd8:	2300      	movs	r3, #0
 8013fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013fde:	e002      	b.n	8013fe6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013fe0:	2304      	movs	r3, #4
 8013fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	3730      	adds	r7, #48	; 0x30
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	20000059 	.word	0x20000059

08013ff8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8013ffc:	4b04      	ldr	r3, [pc, #16]	; (8014010 <BSP_SD_ReadCpltCallback+0x18>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2200      	movs	r2, #0
 8014002:	2101      	movs	r1, #1
 8014004:	4618      	mov	r0, r3
 8014006:	f002 fb1b 	bl	8016640 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 801400a:	bf00      	nop
 801400c:	bd80      	pop	{r7, pc}
 801400e:	bf00      	nop
 8014010:	2001f40c 	.word	0x2001f40c

08014014 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8014014:	b480      	push	{r7}
 8014016:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8014018:	bf00      	nop
 801401a:	46bd      	mov	sp, r7
 801401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014020:	4770      	bx	lr

08014022 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8014022:	b590      	push	{r4, r7, lr}
 8014024:	b089      	sub	sp, #36	; 0x24
 8014026:	af04      	add	r7, sp, #16
 8014028:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 801402a:	2301      	movs	r3, #1
 801402c:	2202      	movs	r2, #2
 801402e:	2102      	movs	r1, #2
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f000 fcb9 	bl	80149a8 <USBH_FindInterface>
 8014036:	4603      	mov	r3, r0
 8014038:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801403a:	7bfb      	ldrb	r3, [r7, #15]
 801403c:	2bff      	cmp	r3, #255	; 0xff
 801403e:	d002      	beq.n	8014046 <USBH_CDC_InterfaceInit+0x24>
 8014040:	7bfb      	ldrb	r3, [r7, #15]
 8014042:	2b01      	cmp	r3, #1
 8014044:	d901      	bls.n	801404a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8014046:	2302      	movs	r3, #2
 8014048:	e13d      	b.n	80142c6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 801404a:	7bfb      	ldrb	r3, [r7, #15]
 801404c:	4619      	mov	r1, r3
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f000 fc8e 	bl	8014970 <USBH_SelectInterface>
 8014054:	4603      	mov	r3, r0
 8014056:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8014058:	7bbb      	ldrb	r3, [r7, #14]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d001      	beq.n	8014062 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801405e:	2302      	movs	r3, #2
 8014060:	e131      	b.n	80142c6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8014068:	2050      	movs	r0, #80	; 0x50
 801406a:	f005 faf1 	bl	8019650 <malloc>
 801406e:	4603      	mov	r3, r0
 8014070:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014078:	69db      	ldr	r3, [r3, #28]
 801407a:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d101      	bne.n	8014086 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8014082:	2302      	movs	r3, #2
 8014084:	e11f      	b.n	80142c6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8014086:	2250      	movs	r2, #80	; 0x50
 8014088:	2100      	movs	r1, #0
 801408a:	68b8      	ldr	r0, [r7, #8]
 801408c:	f005 fafe 	bl	801968c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8014090:	7bfb      	ldrb	r3, [r7, #15]
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	211a      	movs	r1, #26
 8014096:	fb01 f303 	mul.w	r3, r1, r3
 801409a:	4413      	add	r3, r2
 801409c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	b25b      	sxtb	r3, r3
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	da15      	bge.n	80140d4 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80140a8:	7bfb      	ldrb	r3, [r7, #15]
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	211a      	movs	r1, #26
 80140ae:	fb01 f303 	mul.w	r3, r1, r3
 80140b2:	4413      	add	r3, r2
 80140b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80140b8:	781a      	ldrb	r2, [r3, #0]
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80140be:	7bfb      	ldrb	r3, [r7, #15]
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	211a      	movs	r1, #26
 80140c4:	fb01 f303 	mul.w	r3, r1, r3
 80140c8:	4413      	add	r3, r2
 80140ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80140ce:	881a      	ldrh	r2, [r3, #0]
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	785b      	ldrb	r3, [r3, #1]
 80140d8:	4619      	mov	r1, r3
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f002 f891 	bl	8016202 <USBH_AllocPipe>
 80140e0:	4603      	mov	r3, r0
 80140e2:	461a      	mov	r2, r3
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	7819      	ldrb	r1, [r3, #0]
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	7858      	ldrb	r0, [r3, #1]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80140fc:	68ba      	ldr	r2, [r7, #8]
 80140fe:	8952      	ldrh	r2, [r2, #10]
 8014100:	9202      	str	r2, [sp, #8]
 8014102:	2203      	movs	r2, #3
 8014104:	9201      	str	r2, [sp, #4]
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	4623      	mov	r3, r4
 801410a:	4602      	mov	r2, r0
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f002 f849 	bl	80161a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	2200      	movs	r2, #0
 8014118:	4619      	mov	r1, r3
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f005 f936 	bl	801938c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8014120:	2300      	movs	r3, #0
 8014122:	2200      	movs	r2, #0
 8014124:	210a      	movs	r1, #10
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 fc3e 	bl	80149a8 <USBH_FindInterface>
 801412c:	4603      	mov	r3, r0
 801412e:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8014130:	7bfb      	ldrb	r3, [r7, #15]
 8014132:	2bff      	cmp	r3, #255	; 0xff
 8014134:	d002      	beq.n	801413c <USBH_CDC_InterfaceInit+0x11a>
 8014136:	7bfb      	ldrb	r3, [r7, #15]
 8014138:	2b01      	cmp	r3, #1
 801413a:	d901      	bls.n	8014140 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801413c:	2302      	movs	r3, #2
 801413e:	e0c2      	b.n	80142c6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8014140:	7bfb      	ldrb	r3, [r7, #15]
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	211a      	movs	r1, #26
 8014146:	fb01 f303 	mul.w	r3, r1, r3
 801414a:	4413      	add	r3, r2
 801414c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	b25b      	sxtb	r3, r3
 8014154:	2b00      	cmp	r3, #0
 8014156:	da16      	bge.n	8014186 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014158:	7bfb      	ldrb	r3, [r7, #15]
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	211a      	movs	r1, #26
 801415e:	fb01 f303 	mul.w	r3, r1, r3
 8014162:	4413      	add	r3, r2
 8014164:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014168:	781a      	ldrb	r2, [r3, #0]
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801416e:	7bfb      	ldrb	r3, [r7, #15]
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	211a      	movs	r1, #26
 8014174:	fb01 f303 	mul.w	r3, r1, r3
 8014178:	4413      	add	r3, r2
 801417a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801417e:	881a      	ldrh	r2, [r3, #0]
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	835a      	strh	r2, [r3, #26]
 8014184:	e015      	b.n	80141b2 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014186:	7bfb      	ldrb	r3, [r7, #15]
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	211a      	movs	r1, #26
 801418c:	fb01 f303 	mul.w	r3, r1, r3
 8014190:	4413      	add	r3, r2
 8014192:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014196:	781a      	ldrb	r2, [r3, #0]
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801419c:	7bfb      	ldrb	r3, [r7, #15]
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	211a      	movs	r1, #26
 80141a2:	fb01 f303 	mul.w	r3, r1, r3
 80141a6:	4413      	add	r3, r2
 80141a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80141ac:	881a      	ldrh	r2, [r3, #0]
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80141b2:	7bfb      	ldrb	r3, [r7, #15]
 80141b4:	687a      	ldr	r2, [r7, #4]
 80141b6:	211a      	movs	r1, #26
 80141b8:	fb01 f303 	mul.w	r3, r1, r3
 80141bc:	4413      	add	r3, r2
 80141be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	b25b      	sxtb	r3, r3
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	da16      	bge.n	80141f8 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80141ca:	7bfb      	ldrb	r3, [r7, #15]
 80141cc:	687a      	ldr	r2, [r7, #4]
 80141ce:	211a      	movs	r1, #26
 80141d0:	fb01 f303 	mul.w	r3, r1, r3
 80141d4:	4413      	add	r3, r2
 80141d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80141da:	781a      	ldrb	r2, [r3, #0]
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80141e0:	7bfb      	ldrb	r3, [r7, #15]
 80141e2:	687a      	ldr	r2, [r7, #4]
 80141e4:	211a      	movs	r1, #26
 80141e6:	fb01 f303 	mul.w	r3, r1, r3
 80141ea:	4413      	add	r3, r2
 80141ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80141f0:	881a      	ldrh	r2, [r3, #0]
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	835a      	strh	r2, [r3, #26]
 80141f6:	e015      	b.n	8014224 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80141f8:	7bfb      	ldrb	r3, [r7, #15]
 80141fa:	687a      	ldr	r2, [r7, #4]
 80141fc:	211a      	movs	r1, #26
 80141fe:	fb01 f303 	mul.w	r3, r1, r3
 8014202:	4413      	add	r3, r2
 8014204:	f203 3356 	addw	r3, r3, #854	; 0x356
 8014208:	781a      	ldrb	r2, [r3, #0]
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801420e:	7bfb      	ldrb	r3, [r7, #15]
 8014210:	687a      	ldr	r2, [r7, #4]
 8014212:	211a      	movs	r1, #26
 8014214:	fb01 f303 	mul.w	r3, r1, r3
 8014218:	4413      	add	r3, r2
 801421a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801421e:	881a      	ldrh	r2, [r3, #0]
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	7b9b      	ldrb	r3, [r3, #14]
 8014228:	4619      	mov	r1, r3
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f001 ffe9 	bl	8016202 <USBH_AllocPipe>
 8014230:	4603      	mov	r3, r0
 8014232:	461a      	mov	r2, r3
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	7bdb      	ldrb	r3, [r3, #15]
 801423c:	4619      	mov	r1, r3
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f001 ffdf 	bl	8016202 <USBH_AllocPipe>
 8014244:	4603      	mov	r3, r0
 8014246:	461a      	mov	r2, r3
 8014248:	68bb      	ldr	r3, [r7, #8]
 801424a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	7b59      	ldrb	r1, [r3, #13]
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	7b98      	ldrb	r0, [r3, #14]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014260:	68ba      	ldr	r2, [r7, #8]
 8014262:	8b12      	ldrh	r2, [r2, #24]
 8014264:	9202      	str	r2, [sp, #8]
 8014266:	2202      	movs	r2, #2
 8014268:	9201      	str	r2, [sp, #4]
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	4623      	mov	r3, r4
 801426e:	4602      	mov	r2, r0
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f001 ff97 	bl	80161a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	7b19      	ldrb	r1, [r3, #12]
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	7bd8      	ldrb	r0, [r3, #15]
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801428a:	68ba      	ldr	r2, [r7, #8]
 801428c:	8b52      	ldrh	r2, [r2, #26]
 801428e:	9202      	str	r2, [sp, #8]
 8014290:	2202      	movs	r2, #2
 8014292:	9201      	str	r2, [sp, #4]
 8014294:	9300      	str	r3, [sp, #0]
 8014296:	4623      	mov	r3, r4
 8014298:	4602      	mov	r2, r0
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f001 ff82 	bl	80161a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	2200      	movs	r2, #0
 80142a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	7b5b      	ldrb	r3, [r3, #13]
 80142ac:	2200      	movs	r2, #0
 80142ae:	4619      	mov	r1, r3
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f005 f86b 	bl	801938c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	7b1b      	ldrb	r3, [r3, #12]
 80142ba:	2200      	movs	r2, #0
 80142bc:	4619      	mov	r1, r3
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f005 f864 	bl	801938c <USBH_LL_SetToggle>

  return USBH_OK;
 80142c4:	2300      	movs	r3, #0
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3714      	adds	r7, #20
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd90      	pop	{r4, r7, pc}

080142ce <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b084      	sub	sp, #16
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80142dc:	69db      	ldr	r3, [r3, #28]
 80142de:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	781b      	ldrb	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d00e      	beq.n	8014306 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	4619      	mov	r1, r3
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f001 ff77 	bl	80161e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	4619      	mov	r1, r3
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f001 ffa2 	bl	8016244 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	2200      	movs	r2, #0
 8014304:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	7b1b      	ldrb	r3, [r3, #12]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d00e      	beq.n	801432c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	7b1b      	ldrb	r3, [r3, #12]
 8014312:	4619      	mov	r1, r3
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f001 ff64 	bl	80161e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	7b1b      	ldrb	r3, [r3, #12]
 801431e:	4619      	mov	r1, r3
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f001 ff8f 	bl	8016244 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	2200      	movs	r2, #0
 801432a:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	7b5b      	ldrb	r3, [r3, #13]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d00e      	beq.n	8014352 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	7b5b      	ldrb	r3, [r3, #13]
 8014338:	4619      	mov	r1, r3
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f001 ff51 	bl	80161e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	7b5b      	ldrb	r3, [r3, #13]
 8014344:	4619      	mov	r1, r3
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f001 ff7c 	bl	8016244 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2200      	movs	r2, #0
 8014350:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014358:	69db      	ldr	r3, [r3, #28]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d00b      	beq.n	8014376 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014364:	69db      	ldr	r3, [r3, #28]
 8014366:	4618      	mov	r0, r3
 8014368:	f005 f97a 	bl	8019660 <free>
    phost->pActiveClass->pData = 0U;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014372:	2200      	movs	r2, #0
 8014374:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8014376:	2300      	movs	r3, #0
}
 8014378:	4618      	mov	r0, r3
 801437a:	3710      	adds	r7, #16
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}

08014380 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b084      	sub	sp, #16
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801438e:	69db      	ldr	r3, [r3, #28]
 8014390:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	3340      	adds	r3, #64	; 0x40
 8014396:	4619      	mov	r1, r3
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f000 f8b2 	bl	8014502 <GetLineCoding>
 801439e:	4603      	mov	r3, r0
 80143a0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80143a2:	7afb      	ldrb	r3, [r7, #11]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d105      	bne.n	80143b4 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80143ae:	2102      	movs	r1, #2
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80143b4:	7afb      	ldrb	r3, [r7, #11]
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3710      	adds	r7, #16
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
	...

080143c0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80143c8:	2301      	movs	r3, #1
 80143ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80143cc:	2300      	movs	r3, #0
 80143ce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80143d6:	69db      	ldr	r3, [r3, #28]
 80143d8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80143e0:	2b04      	cmp	r3, #4
 80143e2:	d877      	bhi.n	80144d4 <USBH_CDC_Process+0x114>
 80143e4:	a201      	add	r2, pc, #4	; (adr r2, 80143ec <USBH_CDC_Process+0x2c>)
 80143e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143ea:	bf00      	nop
 80143ec:	08014401 	.word	0x08014401
 80143f0:	08014407 	.word	0x08014407
 80143f4:	08014437 	.word	0x08014437
 80143f8:	080144ab 	.word	0x080144ab
 80143fc:	080144b9 	.word	0x080144b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8014400:	2300      	movs	r3, #0
 8014402:	73fb      	strb	r3, [r7, #15]
      break;
 8014404:	e06d      	b.n	80144e2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801440a:	4619      	mov	r1, r3
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f000 f897 	bl	8014540 <SetLineCoding>
 8014412:	4603      	mov	r3, r0
 8014414:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014416:	7bbb      	ldrb	r3, [r7, #14]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d104      	bne.n	8014426 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	2202      	movs	r2, #2
 8014420:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8014424:	e058      	b.n	80144d8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8014426:	7bbb      	ldrb	r3, [r7, #14]
 8014428:	2b01      	cmp	r3, #1
 801442a:	d055      	beq.n	80144d8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	2204      	movs	r2, #4
 8014430:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8014434:	e050      	b.n	80144d8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	3340      	adds	r3, #64	; 0x40
 801443a:	4619      	mov	r1, r3
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f000 f860 	bl	8014502 <GetLineCoding>
 8014442:	4603      	mov	r3, r0
 8014444:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014446:	7bbb      	ldrb	r3, [r7, #14]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d126      	bne.n	801449a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	2200      	movs	r2, #0
 8014450:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801445e:	791b      	ldrb	r3, [r3, #4]
 8014460:	429a      	cmp	r2, r3
 8014462:	d13b      	bne.n	80144dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801446e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8014470:	429a      	cmp	r2, r3
 8014472:	d133      	bne.n	80144dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801447e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8014480:	429a      	cmp	r2, r3
 8014482:	d12b      	bne.n	80144dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801448c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801448e:	429a      	cmp	r2, r3
 8014490:	d124      	bne.n	80144dc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f000 f982 	bl	801479c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8014498:	e020      	b.n	80144dc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801449a:	7bbb      	ldrb	r3, [r7, #14]
 801449c:	2b01      	cmp	r3, #1
 801449e:	d01d      	beq.n	80144dc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	2204      	movs	r2, #4
 80144a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80144a8:	e018      	b.n	80144dc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f000 f867 	bl	801457e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f000 f8f6 	bl	80146a2 <CDC_ProcessReception>
      break;
 80144b6:	e014      	b.n	80144e2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80144b8:	2100      	movs	r1, #0
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f001 f951 	bl	8015762 <USBH_ClrFeature>
 80144c0:	4603      	mov	r3, r0
 80144c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80144c4:	7bbb      	ldrb	r3, [r7, #14]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d10a      	bne.n	80144e0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	2200      	movs	r2, #0
 80144ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80144d2:	e005      	b.n	80144e0 <USBH_CDC_Process+0x120>

    default:
      break;
 80144d4:	bf00      	nop
 80144d6:	e004      	b.n	80144e2 <USBH_CDC_Process+0x122>
      break;
 80144d8:	bf00      	nop
 80144da:	e002      	b.n	80144e2 <USBH_CDC_Process+0x122>
      break;
 80144dc:	bf00      	nop
 80144de:	e000      	b.n	80144e2 <USBH_CDC_Process+0x122>
      break;
 80144e0:	bf00      	nop

  }

  return status;
 80144e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80144ec:	b480      	push	{r7}
 80144ee:	b083      	sub	sp, #12
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	370c      	adds	r7, #12
 80144fa:	46bd      	mov	sp, r7
 80144fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014500:	4770      	bx	lr

08014502 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8014502:	b580      	push	{r7, lr}
 8014504:	b082      	sub	sp, #8
 8014506:	af00      	add	r7, sp, #0
 8014508:	6078      	str	r0, [r7, #4]
 801450a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	22a1      	movs	r2, #161	; 0xa1
 8014510:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2221      	movs	r2, #33	; 0x21
 8014516:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2200      	movs	r2, #0
 801451c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2200      	movs	r2, #0
 8014522:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2207      	movs	r2, #7
 8014528:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	2207      	movs	r2, #7
 801452e:	4619      	mov	r1, r3
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f001 faf6 	bl	8015b22 <USBH_CtlReq>
 8014536:	4603      	mov	r3, r0
}
 8014538:	4618      	mov	r0, r3
 801453a:	3708      	adds	r7, #8
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}

08014540 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2221      	movs	r2, #33	; 0x21
 801454e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2220      	movs	r2, #32
 8014554:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2200      	movs	r2, #0
 801455a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2200      	movs	r2, #0
 8014560:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	2207      	movs	r2, #7
 8014566:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	2207      	movs	r2, #7
 801456c:	4619      	mov	r1, r3
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f001 fad7 	bl	8015b22 <USBH_CtlReq>
 8014574:	4603      	mov	r3, r0
}
 8014576:	4618      	mov	r0, r3
 8014578:	3708      	adds	r7, #8
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}

0801457e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801457e:	b580      	push	{r7, lr}
 8014580:	b086      	sub	sp, #24
 8014582:	af02      	add	r7, sp, #8
 8014584:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801458c:	69db      	ldr	r3, [r3, #28]
 801458e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014590:	2300      	movs	r3, #0
 8014592:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801459a:	2b01      	cmp	r3, #1
 801459c:	d002      	beq.n	80145a4 <CDC_ProcessTransmission+0x26>
 801459e:	2b02      	cmp	r3, #2
 80145a0:	d023      	beq.n	80145ea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80145a2:	e07a      	b.n	801469a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a8:	68fa      	ldr	r2, [r7, #12]
 80145aa:	8b12      	ldrh	r2, [r2, #24]
 80145ac:	4293      	cmp	r3, r2
 80145ae:	d90b      	bls.n	80145c8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	69d9      	ldr	r1, [r3, #28]
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	8b1a      	ldrh	r2, [r3, #24]
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	7b5b      	ldrb	r3, [r3, #13]
 80145bc:	2001      	movs	r0, #1
 80145be:	9000      	str	r0, [sp, #0]
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f001 fdac 	bl	801611e <USBH_BulkSendData>
 80145c6:	e00b      	b.n	80145e0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80145d0:	b29a      	uxth	r2, r3
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	7b5b      	ldrb	r3, [r3, #13]
 80145d6:	2001      	movs	r0, #1
 80145d8:	9000      	str	r0, [sp, #0]
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f001 fd9f 	bl	801611e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	2202      	movs	r2, #2
 80145e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80145e8:	e057      	b.n	801469a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	7b5b      	ldrb	r3, [r3, #13]
 80145ee:	4619      	mov	r1, r3
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f004 fea1 	bl	8019338 <USBH_LL_GetURBState>
 80145f6:	4603      	mov	r3, r0
 80145f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80145fa:	7afb      	ldrb	r3, [r7, #11]
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d136      	bne.n	801466e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014604:	68fa      	ldr	r2, [r7, #12]
 8014606:	8b12      	ldrh	r2, [r2, #24]
 8014608:	4293      	cmp	r3, r2
 801460a:	d90e      	bls.n	801462a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014610:	68fa      	ldr	r2, [r7, #12]
 8014612:	8b12      	ldrh	r2, [r2, #24]
 8014614:	1a9a      	subs	r2, r3, r2
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	69db      	ldr	r3, [r3, #28]
 801461e:	68fa      	ldr	r2, [r7, #12]
 8014620:	8b12      	ldrh	r2, [r2, #24]
 8014622:	441a      	add	r2, r3
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	61da      	str	r2, [r3, #28]
 8014628:	e002      	b.n	8014630 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	2200      	movs	r2, #0
 801462e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014634:	2b00      	cmp	r3, #0
 8014636:	d004      	beq.n	8014642 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	2201      	movs	r2, #1
 801463c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8014640:	e006      	b.n	8014650 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	2200      	movs	r2, #0
 8014646:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f000 f892 	bl	8014774 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2204      	movs	r2, #4
 8014654:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014664:	2200      	movs	r2, #0
 8014666:	4619      	mov	r1, r3
 8014668:	f001 ffea 	bl	8016640 <osMessagePut>
      break;
 801466c:	e014      	b.n	8014698 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 801466e:	7afb      	ldrb	r3, [r7, #11]
 8014670:	2b02      	cmp	r3, #2
 8014672:	d111      	bne.n	8014698 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2201      	movs	r2, #1
 8014678:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2204      	movs	r2, #4
 8014680:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014690:	2200      	movs	r2, #0
 8014692:	4619      	mov	r1, r3
 8014694:	f001 ffd4 	bl	8016640 <osMessagePut>
      break;
 8014698:	bf00      	nop
  }
}
 801469a:	bf00      	nop
 801469c:	3710      	adds	r7, #16
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b086      	sub	sp, #24
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80146b0:	69db      	ldr	r3, [r3, #28]
 80146b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80146b4:	2300      	movs	r3, #0
 80146b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80146b8:	697b      	ldr	r3, [r7, #20]
 80146ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80146be:	2b03      	cmp	r3, #3
 80146c0:	d002      	beq.n	80146c8 <CDC_ProcessReception+0x26>
 80146c2:	2b04      	cmp	r3, #4
 80146c4:	d00e      	beq.n	80146e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80146c6:	e051      	b.n	801476c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	6a19      	ldr	r1, [r3, #32]
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	8b5a      	ldrh	r2, [r3, #26]
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	7b1b      	ldrb	r3, [r3, #12]
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f001 fd47 	bl	8016168 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	2204      	movs	r2, #4
 80146de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80146e2:	e043      	b.n	801476c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	7b1b      	ldrb	r3, [r3, #12]
 80146e8:	4619      	mov	r1, r3
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f004 fe24 	bl	8019338 <USBH_LL_GetURBState>
 80146f0:	4603      	mov	r3, r0
 80146f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80146f4:	7cfb      	ldrb	r3, [r7, #19]
 80146f6:	2b01      	cmp	r3, #1
 80146f8:	d137      	bne.n	801476a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	7b1b      	ldrb	r3, [r3, #12]
 80146fe:	4619      	mov	r1, r3
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f004 fd87 	bl	8019214 <USBH_LL_GetLastXferSize>
 8014706:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8014708:	697b      	ldr	r3, [r7, #20]
 801470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801470c:	68fa      	ldr	r2, [r7, #12]
 801470e:	429a      	cmp	r2, r3
 8014710:	d016      	beq.n	8014740 <CDC_ProcessReception+0x9e>
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	8b5b      	ldrh	r3, [r3, #26]
 8014716:	461a      	mov	r2, r3
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	4293      	cmp	r3, r2
 801471c:	d910      	bls.n	8014740 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	1ad2      	subs	r2, r2, r3
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801472a:	697b      	ldr	r3, [r7, #20]
 801472c:	6a1a      	ldr	r2, [r3, #32]
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	441a      	add	r2, r3
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	2203      	movs	r2, #3
 801473a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801473e:	e006      	b.n	801474e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	2200      	movs	r2, #0
 8014744:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f000 f81d 	bl	8014788 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2204      	movs	r2, #4
 8014752:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014762:	2200      	movs	r2, #0
 8014764:	4619      	mov	r1, r3
 8014766:	f001 ff6b 	bl	8016640 <osMessagePut>
      break;
 801476a:	bf00      	nop
  }
}
 801476c:	bf00      	nop
 801476e:	3718      	adds	r7, #24
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801477c:	bf00      	nop
 801477e:	370c      	adds	r7, #12
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr

08014788 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8014790:	bf00      	nop
 8014792:	370c      	adds	r7, #12
 8014794:	46bd      	mov	sp, r7
 8014796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479a:	4770      	bx	lr

0801479c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801479c:	b480      	push	{r7}
 801479e:	b083      	sub	sp, #12
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80147a4:	bf00      	nop
 80147a6:	370c      	adds	r7, #12
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr

080147b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80147b0:	b5b0      	push	{r4, r5, r7, lr}
 80147b2:	b090      	sub	sp, #64	; 0x40
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	60f8      	str	r0, [r7, #12]
 80147b8:	60b9      	str	r1, [r7, #8]
 80147ba:	4613      	mov	r3, r2
 80147bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d101      	bne.n	80147c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80147c4:	2302      	movs	r3, #2
 80147c6:	e04d      	b.n	8014864 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	79fa      	ldrb	r2, [r7, #7]
 80147cc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	2200      	movs	r2, #0
 80147d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	2200      	movs	r2, #0
 80147dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80147e0:	68f8      	ldr	r0, [r7, #12]
 80147e2:	f000 f847 	bl	8014874 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	2200      	movs	r2, #0
 80147ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	2200      	movs	r2, #0
 80147f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2200      	movs	r2, #0
 80147fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	2200      	movs	r2, #0
 8014802:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d003      	beq.n	8014814 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	68ba      	ldr	r2, [r7, #8]
 8014810:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8014814:	4b15      	ldr	r3, [pc, #84]	; (801486c <USBH_Init+0xbc>)
 8014816:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801481a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801481c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8014820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014824:	2100      	movs	r1, #0
 8014826:	4618      	mov	r0, r3
 8014828:	f001 fee2 	bl	80165f0 <osMessageCreate>
 801482c:	4602      	mov	r2, r0
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8014834:	4b0e      	ldr	r3, [pc, #56]	; (8014870 <USBH_Init+0xc0>)
 8014836:	f107 0414 	add.w	r4, r7, #20
 801483a:	461d      	mov	r5, r3
 801483c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801483e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014840:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8014848:	f107 0314 	add.w	r3, r7, #20
 801484c:	68f9      	ldr	r1, [r7, #12]
 801484e:	4618      	mov	r0, r3
 8014850:	f001 fde2 	bl	8016418 <osThreadCreate>
 8014854:	4602      	mov	r2, r0
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 801485c:	68f8      	ldr	r0, [r7, #12]
 801485e:	f004 fc25 	bl	80190ac <USBH_LL_Init>

  return USBH_OK;
 8014862:	2300      	movs	r3, #0
}
 8014864:	4618      	mov	r0, r3
 8014866:	3740      	adds	r7, #64	; 0x40
 8014868:	46bd      	mov	sp, r7
 801486a:	bdb0      	pop	{r4, r5, r7, pc}
 801486c:	0801aca4 	.word	0x0801aca4
 8014870:	0801acb4 	.word	0x0801acb4

08014874 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8014874:	b480      	push	{r7}
 8014876:	b085      	sub	sp, #20
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 801487c:	2300      	movs	r3, #0
 801487e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8014880:	2300      	movs	r3, #0
 8014882:	60fb      	str	r3, [r7, #12]
 8014884:	e009      	b.n	801489a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8014886:	687a      	ldr	r2, [r7, #4]
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	33e0      	adds	r3, #224	; 0xe0
 801488c:	009b      	lsls	r3, r3, #2
 801488e:	4413      	add	r3, r2
 8014890:	2200      	movs	r2, #0
 8014892:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	3301      	adds	r3, #1
 8014898:	60fb      	str	r3, [r7, #12]
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	2b0e      	cmp	r3, #14
 801489e:	d9f2      	bls.n	8014886 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80148a0:	2300      	movs	r3, #0
 80148a2:	60fb      	str	r3, [r7, #12]
 80148a4:	e009      	b.n	80148ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	4413      	add	r3, r2
 80148ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80148b0:	2200      	movs	r2, #0
 80148b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	3301      	adds	r3, #1
 80148b8:	60fb      	str	r3, [r7, #12]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148c0:	d3f1      	bcc.n	80148a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2200      	movs	r2, #0
 80148c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2200      	movs	r2, #0
 80148cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2201      	movs	r2, #1
 80148d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2200      	movs	r2, #0
 80148d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2201      	movs	r2, #1
 80148e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	2240      	movs	r2, #64	; 0x40
 80148e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2200      	movs	r2, #0
 80148ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2200      	movs	r2, #0
 80148f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2201      	movs	r2, #1
 80148fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	2200      	movs	r2, #0
 8014902:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2200      	movs	r2, #0
 801490a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 801490e:	2300      	movs	r3, #0
}
 8014910:	4618      	mov	r0, r3
 8014912:	3714      	adds	r7, #20
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr

0801491c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801491c:	b480      	push	{r7}
 801491e:	b085      	sub	sp, #20
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8014926:	2300      	movs	r3, #0
 8014928:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d016      	beq.n	801495e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014936:	2b00      	cmp	r3, #0
 8014938:	d10e      	bne.n	8014958 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014940:	1c59      	adds	r1, r3, #1
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8014948:	687a      	ldr	r2, [r7, #4]
 801494a:	33de      	adds	r3, #222	; 0xde
 801494c:	6839      	ldr	r1, [r7, #0]
 801494e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8014952:	2300      	movs	r3, #0
 8014954:	73fb      	strb	r3, [r7, #15]
 8014956:	e004      	b.n	8014962 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8014958:	2302      	movs	r3, #2
 801495a:	73fb      	strb	r3, [r7, #15]
 801495c:	e001      	b.n	8014962 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801495e:	2302      	movs	r3, #2
 8014960:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014962:	7bfb      	ldrb	r3, [r7, #15]
}
 8014964:	4618      	mov	r0, r3
 8014966:	3714      	adds	r7, #20
 8014968:	46bd      	mov	sp, r7
 801496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496e:	4770      	bx	lr

08014970 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8014970:	b480      	push	{r7}
 8014972:	b085      	sub	sp, #20
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	460b      	mov	r3, r1
 801497a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801497c:	2300      	movs	r3, #0
 801497e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8014986:	78fa      	ldrb	r2, [r7, #3]
 8014988:	429a      	cmp	r2, r3
 801498a:	d204      	bcs.n	8014996 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	78fa      	ldrb	r2, [r7, #3]
 8014990:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8014994:	e001      	b.n	801499a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8014996:	2302      	movs	r3, #2
 8014998:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801499a:	7bfb      	ldrb	r3, [r7, #15]
}
 801499c:	4618      	mov	r0, r3
 801499e:	3714      	adds	r7, #20
 80149a0:	46bd      	mov	sp, r7
 80149a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a6:	4770      	bx	lr

080149a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80149a8:	b480      	push	{r7}
 80149aa:	b087      	sub	sp, #28
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	4608      	mov	r0, r1
 80149b2:	4611      	mov	r1, r2
 80149b4:	461a      	mov	r2, r3
 80149b6:	4603      	mov	r3, r0
 80149b8:	70fb      	strb	r3, [r7, #3]
 80149ba:	460b      	mov	r3, r1
 80149bc:	70bb      	strb	r3, [r7, #2]
 80149be:	4613      	mov	r3, r2
 80149c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80149c2:	2300      	movs	r3, #0
 80149c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80149c6:	2300      	movs	r3, #0
 80149c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80149d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80149d2:	e025      	b.n	8014a20 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80149d4:	7dfb      	ldrb	r3, [r7, #23]
 80149d6:	221a      	movs	r2, #26
 80149d8:	fb02 f303 	mul.w	r3, r2, r3
 80149dc:	3308      	adds	r3, #8
 80149de:	68fa      	ldr	r2, [r7, #12]
 80149e0:	4413      	add	r3, r2
 80149e2:	3302      	adds	r3, #2
 80149e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	795b      	ldrb	r3, [r3, #5]
 80149ea:	78fa      	ldrb	r2, [r7, #3]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d002      	beq.n	80149f6 <USBH_FindInterface+0x4e>
 80149f0:	78fb      	ldrb	r3, [r7, #3]
 80149f2:	2bff      	cmp	r3, #255	; 0xff
 80149f4:	d111      	bne.n	8014a1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80149f6:	693b      	ldr	r3, [r7, #16]
 80149f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80149fa:	78ba      	ldrb	r2, [r7, #2]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d002      	beq.n	8014a06 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8014a00:	78bb      	ldrb	r3, [r7, #2]
 8014a02:	2bff      	cmp	r3, #255	; 0xff
 8014a04:	d109      	bne.n	8014a1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8014a0a:	787a      	ldrb	r2, [r7, #1]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d002      	beq.n	8014a16 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8014a10:	787b      	ldrb	r3, [r7, #1]
 8014a12:	2bff      	cmp	r3, #255	; 0xff
 8014a14:	d101      	bne.n	8014a1a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8014a16:	7dfb      	ldrb	r3, [r7, #23]
 8014a18:	e006      	b.n	8014a28 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8014a1a:	7dfb      	ldrb	r3, [r7, #23]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8014a20:	7dfb      	ldrb	r3, [r7, #23]
 8014a22:	2b01      	cmp	r3, #1
 8014a24:	d9d6      	bls.n	80149d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8014a26:	23ff      	movs	r3, #255	; 0xff
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	371c      	adds	r7, #28
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr

08014a34 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f004 fb71 	bl	8019124 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8014a42:	2101      	movs	r1, #1
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f004 fc8a 	bl	801935e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8014a4a:	2300      	movs	r3, #0
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3708      	adds	r7, #8
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b088      	sub	sp, #32
 8014a58:	af04      	add	r7, sp, #16
 8014a5a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8014a5c:	2302      	movs	r3, #2
 8014a5e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8014a60:	2300      	movs	r3, #0
 8014a62:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8014a6a:	b2db      	uxtb	r3, r3
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d102      	bne.n	8014a76 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2203      	movs	r2, #3
 8014a74:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	2b0b      	cmp	r3, #11
 8014a7e:	f200 823c 	bhi.w	8014efa <USBH_Process+0x4a6>
 8014a82:	a201      	add	r2, pc, #4	; (adr r2, 8014a88 <USBH_Process+0x34>)
 8014a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a88:	08014ab9 	.word	0x08014ab9
 8014a8c:	08014b07 	.word	0x08014b07
 8014a90:	08014b8b 	.word	0x08014b8b
 8014a94:	08014e79 	.word	0x08014e79
 8014a98:	08014efb 	.word	0x08014efb
 8014a9c:	08014c4b 	.word	0x08014c4b
 8014aa0:	08014e03 	.word	0x08014e03
 8014aa4:	08014c9d 	.word	0x08014c9d
 8014aa8:	08014cd9 	.word	0x08014cd9
 8014aac:	08014d13 	.word	0x08014d13
 8014ab0:	08014d5b 	.word	0x08014d5b
 8014ab4:	08014e61 	.word	0x08014e61
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8014abe:	b2db      	uxtb	r3, r3
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	f000 821c 	beq.w	8014efe <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	2201      	movs	r2, #1
 8014aca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8014acc:	20c8      	movs	r0, #200	; 0xc8
 8014ace:	f004 fc8d 	bl	80193ec <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f004 fb83 	bl	80191de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2200      	movs	r2, #0
 8014adc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2201      	movs	r2, #1
 8014aec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014afc:	2200      	movs	r2, #0
 8014afe:	4619      	mov	r1, r3
 8014b00:	f001 fd9e 	bl	8016640 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014b04:	e1fb      	b.n	8014efe <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8014b0c:	2b01      	cmp	r3, #1
 8014b0e:	d107      	bne.n	8014b20 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2202      	movs	r2, #2
 8014b1c:	701a      	strb	r2, [r3, #0]
 8014b1e:	e025      	b.n	8014b6c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8014b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014b2a:	d914      	bls.n	8014b56 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8014b32:	3301      	adds	r3, #1
 8014b34:	b2da      	uxtb	r2, r3
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8014b42:	2b03      	cmp	r3, #3
 8014b44:	d903      	bls.n	8014b4e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	220d      	movs	r2, #13
 8014b4a:	701a      	strb	r2, [r3, #0]
 8014b4c:	e00e      	b.n	8014b6c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2200      	movs	r2, #0
 8014b52:	701a      	strb	r2, [r3, #0]
 8014b54:	e00a      	b.n	8014b6c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8014b5c:	f103 020a 	add.w	r2, r3, #10
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8014b66:	200a      	movs	r0, #10
 8014b68:	f004 fc40 	bl	80193ec <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2201      	movs	r2, #1
 8014b70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014b80:	2200      	movs	r2, #0
 8014b82:	4619      	mov	r1, r3
 8014b84:	f001 fd5c 	bl	8016640 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014b88:	e1c0      	b.n	8014f0c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d005      	beq.n	8014ba0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014b9a:	2104      	movs	r1, #4
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8014ba0:	2064      	movs	r0, #100	; 0x64
 8014ba2:	f004 fc23 	bl	80193ec <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f004 faf2 	bl	8019190 <USBH_LL_GetSpeed>
 8014bac:	4603      	mov	r3, r0
 8014bae:	461a      	mov	r2, r3
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2205      	movs	r2, #5
 8014bba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8014bbc:	2100      	movs	r1, #0
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f001 fb1f 	bl	8016202 <USBH_AllocPipe>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8014bcc:	2180      	movs	r1, #128	; 0x80
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f001 fb17 	bl	8016202 <USBH_AllocPipe>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	461a      	mov	r2, r3
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	7919      	ldrb	r1, [r3, #4]
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014bec:	687a      	ldr	r2, [r7, #4]
 8014bee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8014bf0:	b292      	uxth	r2, r2
 8014bf2:	9202      	str	r2, [sp, #8]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	9201      	str	r2, [sp, #4]
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	2280      	movs	r2, #128	; 0x80
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f001 fad0 	bl	80161a4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	7959      	ldrb	r1, [r3, #5]
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014c18:	b292      	uxth	r2, r2
 8014c1a:	9202      	str	r2, [sp, #8]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	9201      	str	r2, [sp, #4]
 8014c20:	9300      	str	r3, [sp, #0]
 8014c22:	4603      	mov	r3, r0
 8014c24:	2200      	movs	r2, #0
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f001 fabc 	bl	80161a4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2201      	movs	r2, #1
 8014c30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c40:	2200      	movs	r2, #0
 8014c42:	4619      	mov	r1, r3
 8014c44:	f001 fcfc 	bl	8016640 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014c48:	e160      	b.n	8014f0c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	f000 f964 	bl	8014f18 <USBH_HandleEnum>
 8014c50:	4603      	mov	r3, r0
 8014c52:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8014c54:	7bbb      	ldrb	r3, [r7, #14]
 8014c56:	b2db      	uxtb	r3, r3
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	f040 8152 	bne.w	8014f02 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2200      	movs	r2, #0
 8014c62:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8014c6c:	2b01      	cmp	r3, #1
 8014c6e:	d103      	bne.n	8014c78 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2208      	movs	r2, #8
 8014c74:	701a      	strb	r2, [r3, #0]
 8014c76:	e002      	b.n	8014c7e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2207      	movs	r2, #7
 8014c7c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	2205      	movs	r2, #5
 8014c82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c92:	2200      	movs	r2, #0
 8014c94:	4619      	mov	r1, r3
 8014c96:	f001 fcd3 	bl	8016640 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014c9a:	e132      	b.n	8014f02 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	f000 812f 	beq.w	8014f06 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014cae:	2101      	movs	r1, #1
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2208      	movs	r2, #8
 8014cb8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	2205      	movs	r2, #5
 8014cbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014cce:	2200      	movs	r2, #0
 8014cd0:	4619      	mov	r1, r3
 8014cd2:	f001 fcb5 	bl	8016640 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8014cd6:	e116      	b.n	8014f06 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f000 fcf6 	bl	80156d4 <USBH_SetCfg>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d102      	bne.n	8014cf4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2209      	movs	r2, #9
 8014cf2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d08:	2200      	movs	r2, #0
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	f001 fc98 	bl	8016640 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014d10:	e0fc      	b.n	8014f0c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8014d18:	f003 0320 	and.w	r3, r3, #32
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d00a      	beq.n	8014d36 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8014d20:	2101      	movs	r1, #1
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f000 fcf9 	bl	801571a <USBH_SetFeature>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d106      	bne.n	8014d3c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	220a      	movs	r2, #10
 8014d32:	701a      	strb	r2, [r3, #0]
 8014d34:	e002      	b.n	8014d3c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	220a      	movs	r2, #10
 8014d3a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2201      	movs	r2, #1
 8014d40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d50:	2200      	movs	r2, #0
 8014d52:	4619      	mov	r1, r3
 8014d54:	f001 fc74 	bl	8016640 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014d58:	e0d8      	b.n	8014f0c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d03f      	beq.n	8014de4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2200      	movs	r2, #0
 8014d68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	73fb      	strb	r3, [r7, #15]
 8014d70:	e016      	b.n	8014da0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8014d72:	7bfa      	ldrb	r2, [r7, #15]
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	32de      	adds	r2, #222	; 0xde
 8014d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d7c:	791a      	ldrb	r2, [r3, #4]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8014d84:	429a      	cmp	r2, r3
 8014d86:	d108      	bne.n	8014d9a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8014d88:	7bfa      	ldrb	r2, [r7, #15]
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	32de      	adds	r2, #222	; 0xde
 8014d8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8014d98:	e005      	b.n	8014da6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014d9a:	7bfb      	ldrb	r3, [r7, #15]
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	73fb      	strb	r3, [r7, #15]
 8014da0:	7bfb      	ldrb	r3, [r7, #15]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d0e5      	beq.n	8014d72 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d016      	beq.n	8014dde <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014db6:	689b      	ldr	r3, [r3, #8]
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	4798      	blx	r3
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d109      	bne.n	8014dd6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2206      	movs	r2, #6
 8014dc6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014dce:	2103      	movs	r1, #3
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	4798      	blx	r3
 8014dd4:	e006      	b.n	8014de4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	220d      	movs	r2, #13
 8014dda:	701a      	strb	r2, [r3, #0]
 8014ddc:	e002      	b.n	8014de4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	220d      	movs	r2, #13
 8014de2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	2205      	movs	r2, #5
 8014de8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014df8:	2200      	movs	r2, #0
 8014dfa:	4619      	mov	r1, r3
 8014dfc:	f001 fc20 	bl	8016640 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014e00:	e084      	b.n	8014f0c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d017      	beq.n	8014e3c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	4798      	blx	r3
 8014e18:	4603      	mov	r3, r0
 8014e1a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8014e1c:	7bbb      	ldrb	r3, [r7, #14]
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d103      	bne.n	8014e2c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	220b      	movs	r2, #11
 8014e28:	701a      	strb	r2, [r3, #0]
 8014e2a:	e00a      	b.n	8014e42 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8014e2c:	7bbb      	ldrb	r3, [r7, #14]
 8014e2e:	b2db      	uxtb	r3, r3
 8014e30:	2b02      	cmp	r3, #2
 8014e32:	d106      	bne.n	8014e42 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	220d      	movs	r2, #13
 8014e38:	701a      	strb	r2, [r3, #0]
 8014e3a:	e002      	b.n	8014e42 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	220d      	movs	r2, #13
 8014e40:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2205      	movs	r2, #5
 8014e46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e56:	2200      	movs	r2, #0
 8014e58:	4619      	mov	r1, r3
 8014e5a:	f001 fbf1 	bl	8016640 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014e5e:	e055      	b.n	8014f0c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d04f      	beq.n	8014f0a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e70:	695b      	ldr	r3, [r3, #20]
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	4798      	blx	r3
      }
      break;
 8014e76:	e048      	b.n	8014f0a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f7ff fcf7 	bl	8014874 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d009      	beq.n	8014ea4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e96:	68db      	ldr	r3, [r3, #12]
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d005      	beq.n	8014eba <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014eb4:	2105      	movs	r1, #5
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8014ec0:	b2db      	uxtb	r3, r3
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d107      	bne.n	8014ed6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	2200      	movs	r2, #0
 8014eca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f7ff fdb0 	bl	8014a34 <USBH_Start>
 8014ed4:	e002      	b.n	8014edc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8014ed6:	6878      	ldr	r0, [r7, #4]
 8014ed8:	f004 f924 	bl	8019124 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2201      	movs	r2, #1
 8014ee0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	f001 fba4 	bl	8016640 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014ef8:	e008      	b.n	8014f0c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8014efa:	bf00      	nop
 8014efc:	e006      	b.n	8014f0c <USBH_Process+0x4b8>
      break;
 8014efe:	bf00      	nop
 8014f00:	e004      	b.n	8014f0c <USBH_Process+0x4b8>
      break;
 8014f02:	bf00      	nop
 8014f04:	e002      	b.n	8014f0c <USBH_Process+0x4b8>
    break;
 8014f06:	bf00      	nop
 8014f08:	e000      	b.n	8014f0c <USBH_Process+0x4b8>
      break;
 8014f0a:	bf00      	nop
  }
  return USBH_OK;
 8014f0c:	2300      	movs	r3, #0
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3710      	adds	r7, #16
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}
 8014f16:	bf00      	nop

08014f18 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b088      	sub	sp, #32
 8014f1c:	af04      	add	r7, sp, #16
 8014f1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8014f20:	2301      	movs	r3, #1
 8014f22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8014f24:	2301      	movs	r3, #1
 8014f26:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	785b      	ldrb	r3, [r3, #1]
 8014f2c:	2b07      	cmp	r3, #7
 8014f2e:	f200 8208 	bhi.w	8015342 <USBH_HandleEnum+0x42a>
 8014f32:	a201      	add	r2, pc, #4	; (adr r2, 8014f38 <USBH_HandleEnum+0x20>)
 8014f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f38:	08014f59 	.word	0x08014f59
 8014f3c:	08015017 	.word	0x08015017
 8014f40:	08015081 	.word	0x08015081
 8014f44:	0801510f 	.word	0x0801510f
 8014f48:	08015179 	.word	0x08015179
 8014f4c:	080151e9 	.word	0x080151e9
 8014f50:	08015285 	.word	0x08015285
 8014f54:	08015303 	.word	0x08015303
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8014f58:	2108      	movs	r1, #8
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f000 faea 	bl	8015534 <USBH_Get_DevDesc>
 8014f60:	4603      	mov	r3, r0
 8014f62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014f64:	7bbb      	ldrb	r3, [r7, #14]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d130      	bne.n	8014fcc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2201      	movs	r2, #1
 8014f78:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	7919      	ldrb	r1, [r3, #4]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014f8a:	687a      	ldr	r2, [r7, #4]
 8014f8c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8014f8e:	b292      	uxth	r2, r2
 8014f90:	9202      	str	r2, [sp, #8]
 8014f92:	2200      	movs	r2, #0
 8014f94:	9201      	str	r2, [sp, #4]
 8014f96:	9300      	str	r3, [sp, #0]
 8014f98:	4603      	mov	r3, r0
 8014f9a:	2280      	movs	r2, #128	; 0x80
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f001 f901 	bl	80161a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	7959      	ldrb	r1, [r3, #5]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014fb6:	b292      	uxth	r2, r2
 8014fb8:	9202      	str	r2, [sp, #8]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	9201      	str	r2, [sp, #4]
 8014fbe:	9300      	str	r3, [sp, #0]
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f001 f8ed 	bl	80161a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8014fca:	e1bc      	b.n	8015346 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014fcc:	7bbb      	ldrb	r3, [r7, #14]
 8014fce:	2b03      	cmp	r3, #3
 8014fd0:	f040 81b9 	bne.w	8015346 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014fda:	3301      	adds	r3, #1
 8014fdc:	b2da      	uxtb	r2, r3
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014fea:	2b03      	cmp	r3, #3
 8014fec:	d903      	bls.n	8014ff6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	220d      	movs	r2, #13
 8014ff2:	701a      	strb	r2, [r3, #0]
      break;
 8014ff4:	e1a7      	b.n	8015346 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	795b      	ldrb	r3, [r3, #5]
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f001 f921 	bl	8016244 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	791b      	ldrb	r3, [r3, #4]
 8015006:	4619      	mov	r1, r3
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f001 f91b 	bl	8016244 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2200      	movs	r2, #0
 8015012:	701a      	strb	r2, [r3, #0]
      break;
 8015014:	e197      	b.n	8015346 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8015016:	2112      	movs	r1, #18
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f000 fa8b 	bl	8015534 <USBH_Get_DevDesc>
 801501e:	4603      	mov	r3, r0
 8015020:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015022:	7bbb      	ldrb	r3, [r7, #14]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d103      	bne.n	8015030 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2202      	movs	r2, #2
 801502c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801502e:	e18c      	b.n	801534a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015030:	7bbb      	ldrb	r3, [r7, #14]
 8015032:	2b03      	cmp	r3, #3
 8015034:	f040 8189 	bne.w	801534a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801503e:	3301      	adds	r3, #1
 8015040:	b2da      	uxtb	r2, r3
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801504e:	2b03      	cmp	r3, #3
 8015050:	d903      	bls.n	801505a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	220d      	movs	r2, #13
 8015056:	701a      	strb	r2, [r3, #0]
      break;
 8015058:	e177      	b.n	801534a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	795b      	ldrb	r3, [r3, #5]
 801505e:	4619      	mov	r1, r3
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f001 f8ef 	bl	8016244 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	791b      	ldrb	r3, [r3, #4]
 801506a:	4619      	mov	r1, r3
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f001 f8e9 	bl	8016244 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2200      	movs	r2, #0
 8015076:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2200      	movs	r2, #0
 801507c:	701a      	strb	r2, [r3, #0]
      break;
 801507e:	e164      	b.n	801534a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8015080:	2101      	movs	r1, #1
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f000 fb02 	bl	801568c <USBH_SetAddress>
 8015088:	4603      	mov	r3, r0
 801508a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801508c:	7bbb      	ldrb	r3, [r7, #14]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d132      	bne.n	80150f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8015092:	2002      	movs	r0, #2
 8015094:	f004 f9aa 	bl	80193ec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2201      	movs	r2, #1
 801509c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2203      	movs	r2, #3
 80150a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	7919      	ldrb	r1, [r3, #4]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80150ba:	b292      	uxth	r2, r2
 80150bc:	9202      	str	r2, [sp, #8]
 80150be:	2200      	movs	r2, #0
 80150c0:	9201      	str	r2, [sp, #4]
 80150c2:	9300      	str	r3, [sp, #0]
 80150c4:	4603      	mov	r3, r0
 80150c6:	2280      	movs	r2, #128	; 0x80
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f001 f86b 	bl	80161a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	7959      	ldrb	r1, [r3, #5]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80150de:	687a      	ldr	r2, [r7, #4]
 80150e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80150e2:	b292      	uxth	r2, r2
 80150e4:	9202      	str	r2, [sp, #8]
 80150e6:	2200      	movs	r2, #0
 80150e8:	9201      	str	r2, [sp, #4]
 80150ea:	9300      	str	r3, [sp, #0]
 80150ec:	4603      	mov	r3, r0
 80150ee:	2200      	movs	r2, #0
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f001 f857 	bl	80161a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80150f6:	e12a      	b.n	801534e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80150f8:	7bbb      	ldrb	r3, [r7, #14]
 80150fa:	2b03      	cmp	r3, #3
 80150fc:	f040 8127 	bne.w	801534e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	220d      	movs	r2, #13
 8015104:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2200      	movs	r2, #0
 801510a:	705a      	strb	r2, [r3, #1]
      break;
 801510c:	e11f      	b.n	801534e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801510e:	2109      	movs	r1, #9
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f000 fa37 	bl	8015584 <USBH_Get_CfgDesc>
 8015116:	4603      	mov	r3, r0
 8015118:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801511a:	7bbb      	ldrb	r3, [r7, #14]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d103      	bne.n	8015128 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2204      	movs	r2, #4
 8015124:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015126:	e114      	b.n	8015352 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015128:	7bbb      	ldrb	r3, [r7, #14]
 801512a:	2b03      	cmp	r3, #3
 801512c:	f040 8111 	bne.w	8015352 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015136:	3301      	adds	r3, #1
 8015138:	b2da      	uxtb	r2, r3
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015146:	2b03      	cmp	r3, #3
 8015148:	d903      	bls.n	8015152 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	220d      	movs	r2, #13
 801514e:	701a      	strb	r2, [r3, #0]
      break;
 8015150:	e0ff      	b.n	8015352 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	795b      	ldrb	r3, [r3, #5]
 8015156:	4619      	mov	r1, r3
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f001 f873 	bl	8016244 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	791b      	ldrb	r3, [r3, #4]
 8015162:	4619      	mov	r1, r3
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f001 f86d 	bl	8016244 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2200      	movs	r2, #0
 801516e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2200      	movs	r2, #0
 8015174:	701a      	strb	r2, [r3, #0]
      break;
 8015176:	e0ec      	b.n	8015352 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801517e:	4619      	mov	r1, r3
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f000 f9ff 	bl	8015584 <USBH_Get_CfgDesc>
 8015186:	4603      	mov	r3, r0
 8015188:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801518a:	7bbb      	ldrb	r3, [r7, #14]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d103      	bne.n	8015198 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	2205      	movs	r2, #5
 8015194:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015196:	e0de      	b.n	8015356 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015198:	7bbb      	ldrb	r3, [r7, #14]
 801519a:	2b03      	cmp	r3, #3
 801519c:	f040 80db 	bne.w	8015356 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80151a6:	3301      	adds	r3, #1
 80151a8:	b2da      	uxtb	r2, r3
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80151b6:	2b03      	cmp	r3, #3
 80151b8:	d903      	bls.n	80151c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	220d      	movs	r2, #13
 80151be:	701a      	strb	r2, [r3, #0]
      break;
 80151c0:	e0c9      	b.n	8015356 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	795b      	ldrb	r3, [r3, #5]
 80151c6:	4619      	mov	r1, r3
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f001 f83b 	bl	8016244 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	791b      	ldrb	r3, [r3, #4]
 80151d2:	4619      	mov	r1, r3
 80151d4:	6878      	ldr	r0, [r7, #4]
 80151d6:	f001 f835 	bl	8016244 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2200      	movs	r2, #0
 80151de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2200      	movs	r2, #0
 80151e4:	701a      	strb	r2, [r3, #0]
      break;
 80151e6:	e0b6      	b.n	8015356 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d036      	beq.n	8015260 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80151fe:	23ff      	movs	r3, #255	; 0xff
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f000 f9e3 	bl	80155cc <USBH_Get_StringDesc>
 8015206:	4603      	mov	r3, r0
 8015208:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801520a:	7bbb      	ldrb	r3, [r7, #14]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d111      	bne.n	8015234 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2206      	movs	r2, #6
 8015214:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2205      	movs	r2, #5
 801521a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801522a:	2200      	movs	r2, #0
 801522c:	4619      	mov	r1, r3
 801522e:	f001 fa07 	bl	8016640 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8015232:	e092      	b.n	801535a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015234:	7bbb      	ldrb	r3, [r7, #14]
 8015236:	2b03      	cmp	r3, #3
 8015238:	f040 808f 	bne.w	801535a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2206      	movs	r2, #6
 8015240:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	2205      	movs	r2, #5
 8015246:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015256:	2200      	movs	r2, #0
 8015258:	4619      	mov	r1, r3
 801525a:	f001 f9f1 	bl	8016640 <osMessagePut>
      break;
 801525e:	e07c      	b.n	801535a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2206      	movs	r2, #6
 8015264:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	2205      	movs	r2, #5
 801526a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801527a:	2200      	movs	r2, #0
 801527c:	4619      	mov	r1, r3
 801527e:	f001 f9df 	bl	8016640 <osMessagePut>
      break;
 8015282:	e06a      	b.n	801535a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 801528a:	2b00      	cmp	r3, #0
 801528c:	d027      	beq.n	80152de <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801529a:	23ff      	movs	r3, #255	; 0xff
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f000 f995 	bl	80155cc <USBH_Get_StringDesc>
 80152a2:	4603      	mov	r3, r0
 80152a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80152a6:	7bbb      	ldrb	r3, [r7, #14]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d103      	bne.n	80152b4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2207      	movs	r2, #7
 80152b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80152b2:	e054      	b.n	801535e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80152b4:	7bbb      	ldrb	r3, [r7, #14]
 80152b6:	2b03      	cmp	r3, #3
 80152b8:	d151      	bne.n	801535e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2207      	movs	r2, #7
 80152be:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2205      	movs	r2, #5
 80152c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80152d4:	2200      	movs	r2, #0
 80152d6:	4619      	mov	r1, r3
 80152d8:	f001 f9b2 	bl	8016640 <osMessagePut>
      break;
 80152dc:	e03f      	b.n	801535e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	2207      	movs	r2, #7
 80152e2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2205      	movs	r2, #5
 80152e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80152f8:	2200      	movs	r2, #0
 80152fa:	4619      	mov	r1, r3
 80152fc:	f001 f9a0 	bl	8016640 <osMessagePut>
      break;
 8015300:	e02d      	b.n	801535e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8015308:	2b00      	cmp	r3, #0
 801530a:	d017      	beq.n	801533c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8015318:	23ff      	movs	r3, #255	; 0xff
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f000 f956 	bl	80155cc <USBH_Get_StringDesc>
 8015320:	4603      	mov	r3, r0
 8015322:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015324:	7bbb      	ldrb	r3, [r7, #14]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d102      	bne.n	8015330 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801532a:	2300      	movs	r3, #0
 801532c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801532e:	e018      	b.n	8015362 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015330:	7bbb      	ldrb	r3, [r7, #14]
 8015332:	2b03      	cmp	r3, #3
 8015334:	d115      	bne.n	8015362 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8015336:	2300      	movs	r3, #0
 8015338:	73fb      	strb	r3, [r7, #15]
      break;
 801533a:	e012      	b.n	8015362 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 801533c:	2300      	movs	r3, #0
 801533e:	73fb      	strb	r3, [r7, #15]
      break;
 8015340:	e00f      	b.n	8015362 <USBH_HandleEnum+0x44a>

    default:
      break;
 8015342:	bf00      	nop
 8015344:	e00e      	b.n	8015364 <USBH_HandleEnum+0x44c>
      break;
 8015346:	bf00      	nop
 8015348:	e00c      	b.n	8015364 <USBH_HandleEnum+0x44c>
      break;
 801534a:	bf00      	nop
 801534c:	e00a      	b.n	8015364 <USBH_HandleEnum+0x44c>
      break;
 801534e:	bf00      	nop
 8015350:	e008      	b.n	8015364 <USBH_HandleEnum+0x44c>
      break;
 8015352:	bf00      	nop
 8015354:	e006      	b.n	8015364 <USBH_HandleEnum+0x44c>
      break;
 8015356:	bf00      	nop
 8015358:	e004      	b.n	8015364 <USBH_HandleEnum+0x44c>
      break;
 801535a:	bf00      	nop
 801535c:	e002      	b.n	8015364 <USBH_HandleEnum+0x44c>
      break;
 801535e:	bf00      	nop
 8015360:	e000      	b.n	8015364 <USBH_HandleEnum+0x44c>
      break;
 8015362:	bf00      	nop
  }
  return Status;
 8015364:	7bfb      	ldrb	r3, [r7, #15]
}
 8015366:	4618      	mov	r0, r3
 8015368:	3710      	adds	r7, #16
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
 801536e:	bf00      	nop

08015370 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8015370:	b480      	push	{r7}
 8015372:	b083      	sub	sp, #12
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	683a      	ldr	r2, [r7, #0]
 801537e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8015382:	bf00      	nop
 8015384:	370c      	adds	r7, #12
 8015386:	46bd      	mov	sp, r7
 8015388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538c:	4770      	bx	lr

0801538e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801538e:	b580      	push	{r7, lr}
 8015390:	b082      	sub	sp, #8
 8015392:	af00      	add	r7, sp, #0
 8015394:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801539c:	1c5a      	adds	r2, r3, #1
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	f000 f804 	bl	80153b2 <USBH_HandleSof>
}
 80153aa:	bf00      	nop
 80153ac:	3708      	adds	r7, #8
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}

080153b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b082      	sub	sp, #8
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	781b      	ldrb	r3, [r3, #0]
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	2b0b      	cmp	r3, #11
 80153c2:	d10a      	bne.n	80153da <USBH_HandleSof+0x28>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d005      	beq.n	80153da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80153d4:	699b      	ldr	r3, [r3, #24]
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	4798      	blx	r3
  }
}
 80153da:	bf00      	nop
 80153dc:	3708      	adds	r7, #8
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80153e2:	b580      	push	{r7, lr}
 80153e4:	b082      	sub	sp, #8
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2201      	movs	r2, #1
 80153ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	2201      	movs	r2, #1
 80153f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015406:	2200      	movs	r2, #0
 8015408:	4619      	mov	r1, r3
 801540a:	f001 f919 	bl	8016640 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 801540e:	bf00      	nop
}
 8015410:	3708      	adds	r7, #8
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}

08015416 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8015416:	b480      	push	{r7}
 8015418:	b083      	sub	sp, #12
 801541a:	af00      	add	r7, sp, #0
 801541c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	2200      	movs	r2, #0
 8015422:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8015426:	bf00      	nop
}
 8015428:	370c      	adds	r7, #12
 801542a:	46bd      	mov	sp, r7
 801542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015430:	4770      	bx	lr

08015432 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8015432:	b580      	push	{r7, lr}
 8015434:	b082      	sub	sp, #8
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2201      	movs	r2, #1
 801543e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	2200      	movs	r2, #0
 8015446:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2200      	movs	r2, #0
 801544e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2201      	movs	r2, #1
 8015456:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015466:	2200      	movs	r2, #0
 8015468:	4619      	mov	r1, r3
 801546a:	f001 f8e9 	bl	8016640 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801546e:	2300      	movs	r3, #0
}
 8015470:	4618      	mov	r0, r3
 8015472:	3708      	adds	r7, #8
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}

08015478 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b082      	sub	sp, #8
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2201      	movs	r2, #1
 8015484:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	2200      	movs	r2, #0
 801548c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2200      	movs	r2, #0
 8015494:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f003 fe5e 	bl	801915a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	791b      	ldrb	r3, [r3, #4]
 80154a2:	4619      	mov	r1, r3
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	f000 fecd 	bl	8016244 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	795b      	ldrb	r3, [r3, #5]
 80154ae:	4619      	mov	r1, r3
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f000 fec7 	bl	8016244 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2201      	movs	r2, #1
 80154ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80154ca:	2200      	movs	r2, #0
 80154cc:	4619      	mov	r1, r3
 80154ce:	f001 f8b7 	bl	8016640 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80154d2:	2300      	movs	r3, #0
}
 80154d4:	4618      	mov	r0, r3
 80154d6:	3708      	adds	r7, #8
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}

080154dc <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b086      	sub	sp, #24
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80154ea:	f107 030c 	add.w	r3, r7, #12
 80154ee:	f04f 32ff 	mov.w	r2, #4294967295
 80154f2:	4618      	mov	r0, r3
 80154f4:	f001 f8e4 	bl	80166c0 <osMessageGet>
    if (event.status == osEventMessage)
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2b10      	cmp	r3, #16
 80154fc:	d1f2      	bne.n	80154e4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f7ff faa8 	bl	8014a54 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8015504:	e7ee      	b.n	80154e4 <USBH_Process_OS+0x8>

08015506 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8015506:	b580      	push	{r7, lr}
 8015508:	b082      	sub	sp, #8
 801550a:	af00      	add	r7, sp, #0
 801550c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2201      	movs	r2, #1
 8015512:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015522:	2200      	movs	r2, #0
 8015524:	4619      	mov	r1, r3
 8015526:	f001 f88b 	bl	8016640 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 801552a:	2300      	movs	r3, #0
}
 801552c:	4618      	mov	r0, r3
 801552e:	3708      	adds	r7, #8
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b086      	sub	sp, #24
 8015538:	af02      	add	r7, sp, #8
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	460b      	mov	r3, r1
 801553e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8015546:	78fb      	ldrb	r3, [r7, #3]
 8015548:	b29b      	uxth	r3, r3
 801554a:	9300      	str	r3, [sp, #0]
 801554c:	4613      	mov	r3, r2
 801554e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015552:	2100      	movs	r1, #0
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f000 f864 	bl	8015622 <USBH_GetDescriptor>
 801555a:	4603      	mov	r3, r0
 801555c:	73fb      	strb	r3, [r7, #15]
 801555e:	7bfb      	ldrb	r3, [r7, #15]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d10a      	bne.n	801557a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f203 3026 	addw	r0, r3, #806	; 0x326
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015570:	78fa      	ldrb	r2, [r7, #3]
 8015572:	b292      	uxth	r2, r2
 8015574:	4619      	mov	r1, r3
 8015576:	f000 f918 	bl	80157aa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801557a:	7bfb      	ldrb	r3, [r7, #15]
}
 801557c:	4618      	mov	r0, r3
 801557e:	3710      	adds	r7, #16
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}

08015584 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8015584:	b580      	push	{r7, lr}
 8015586:	b086      	sub	sp, #24
 8015588:	af02      	add	r7, sp, #8
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	460b      	mov	r3, r1
 801558e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	331c      	adds	r3, #28
 8015594:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8015596:	887b      	ldrh	r3, [r7, #2]
 8015598:	9300      	str	r3, [sp, #0]
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80155a0:	2100      	movs	r1, #0
 80155a2:	6878      	ldr	r0, [r7, #4]
 80155a4:	f000 f83d 	bl	8015622 <USBH_GetDescriptor>
 80155a8:	4603      	mov	r3, r0
 80155aa:	72fb      	strb	r3, [r7, #11]
 80155ac:	7afb      	ldrb	r3, [r7, #11]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d107      	bne.n	80155c2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80155b8:	887a      	ldrh	r2, [r7, #2]
 80155ba:	68f9      	ldr	r1, [r7, #12]
 80155bc:	4618      	mov	r0, r3
 80155be:	f000 f964 	bl	801588a <USBH_ParseCfgDesc>
  }

  return status;
 80155c2:	7afb      	ldrb	r3, [r7, #11]
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	3710      	adds	r7, #16
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}

080155cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b088      	sub	sp, #32
 80155d0:	af02      	add	r7, sp, #8
 80155d2:	60f8      	str	r0, [r7, #12]
 80155d4:	607a      	str	r2, [r7, #4]
 80155d6:	461a      	mov	r2, r3
 80155d8:	460b      	mov	r3, r1
 80155da:	72fb      	strb	r3, [r7, #11]
 80155dc:	4613      	mov	r3, r2
 80155de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80155e0:	7afb      	ldrb	r3, [r7, #11]
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80155e8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80155f0:	893b      	ldrh	r3, [r7, #8]
 80155f2:	9300      	str	r3, [sp, #0]
 80155f4:	460b      	mov	r3, r1
 80155f6:	2100      	movs	r1, #0
 80155f8:	68f8      	ldr	r0, [r7, #12]
 80155fa:	f000 f812 	bl	8015622 <USBH_GetDescriptor>
 80155fe:	4603      	mov	r3, r0
 8015600:	75fb      	strb	r3, [r7, #23]
 8015602:	7dfb      	ldrb	r3, [r7, #23]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d107      	bne.n	8015618 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801560e:	893a      	ldrh	r2, [r7, #8]
 8015610:	6879      	ldr	r1, [r7, #4]
 8015612:	4618      	mov	r0, r3
 8015614:	f000 fa37 	bl	8015a86 <USBH_ParseStringDesc>
  }

  return status;
 8015618:	7dfb      	ldrb	r3, [r7, #23]
}
 801561a:	4618      	mov	r0, r3
 801561c:	3718      	adds	r7, #24
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}

08015622 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8015622:	b580      	push	{r7, lr}
 8015624:	b084      	sub	sp, #16
 8015626:	af00      	add	r7, sp, #0
 8015628:	60f8      	str	r0, [r7, #12]
 801562a:	607b      	str	r3, [r7, #4]
 801562c:	460b      	mov	r3, r1
 801562e:	72fb      	strb	r3, [r7, #11]
 8015630:	4613      	mov	r3, r2
 8015632:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	789b      	ldrb	r3, [r3, #2]
 8015638:	2b01      	cmp	r3, #1
 801563a:	d11c      	bne.n	8015676 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801563c:	7afb      	ldrb	r3, [r7, #11]
 801563e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015642:	b2da      	uxtb	r2, r3
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	2206      	movs	r2, #6
 801564c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	893a      	ldrh	r2, [r7, #8]
 8015652:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8015654:	893b      	ldrh	r3, [r7, #8]
 8015656:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801565a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801565e:	d104      	bne.n	801566a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	f240 4209 	movw	r2, #1033	; 0x409
 8015666:	829a      	strh	r2, [r3, #20]
 8015668:	e002      	b.n	8015670 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	2200      	movs	r2, #0
 801566e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	8b3a      	ldrh	r2, [r7, #24]
 8015674:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8015676:	8b3b      	ldrh	r3, [r7, #24]
 8015678:	461a      	mov	r2, r3
 801567a:	6879      	ldr	r1, [r7, #4]
 801567c:	68f8      	ldr	r0, [r7, #12]
 801567e:	f000 fa50 	bl	8015b22 <USBH_CtlReq>
 8015682:	4603      	mov	r3, r0
}
 8015684:	4618      	mov	r0, r3
 8015686:	3710      	adds	r7, #16
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}

0801568c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b082      	sub	sp, #8
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	460b      	mov	r3, r1
 8015696:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	789b      	ldrb	r3, [r3, #2]
 801569c:	2b01      	cmp	r3, #1
 801569e:	d10f      	bne.n	80156c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2200      	movs	r2, #0
 80156a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2205      	movs	r2, #5
 80156aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80156ac:	78fb      	ldrb	r3, [r7, #3]
 80156ae:	b29a      	uxth	r2, r3
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2200      	movs	r2, #0
 80156b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2200      	movs	r2, #0
 80156be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80156c0:	2200      	movs	r2, #0
 80156c2:	2100      	movs	r1, #0
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f000 fa2c 	bl	8015b22 <USBH_CtlReq>
 80156ca:	4603      	mov	r3, r0
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3708      	adds	r7, #8
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	460b      	mov	r3, r1
 80156de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	789b      	ldrb	r3, [r3, #2]
 80156e4:	2b01      	cmp	r3, #1
 80156e6:	d10e      	bne.n	8015706 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2209      	movs	r2, #9
 80156f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	887a      	ldrh	r2, [r7, #2]
 80156f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	2200      	movs	r2, #0
 80156fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2200      	movs	r2, #0
 8015704:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8015706:	2200      	movs	r2, #0
 8015708:	2100      	movs	r1, #0
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	f000 fa09 	bl	8015b22 <USBH_CtlReq>
 8015710:	4603      	mov	r3, r0
}
 8015712:	4618      	mov	r0, r3
 8015714:	3708      	adds	r7, #8
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}

0801571a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801571a:	b580      	push	{r7, lr}
 801571c:	b082      	sub	sp, #8
 801571e:	af00      	add	r7, sp, #0
 8015720:	6078      	str	r0, [r7, #4]
 8015722:	460b      	mov	r3, r1
 8015724:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	789b      	ldrb	r3, [r3, #2]
 801572a:	2b01      	cmp	r3, #1
 801572c:	d10f      	bne.n	801574e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2200      	movs	r2, #0
 8015732:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2203      	movs	r2, #3
 8015738:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801573a:	78fb      	ldrb	r3, [r7, #3]
 801573c:	b29a      	uxth	r2, r3
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2200      	movs	r2, #0
 8015746:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2200      	movs	r2, #0
 801574c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801574e:	2200      	movs	r2, #0
 8015750:	2100      	movs	r1, #0
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f000 f9e5 	bl	8015b22 <USBH_CtlReq>
 8015758:	4603      	mov	r3, r0
}
 801575a:	4618      	mov	r0, r3
 801575c:	3708      	adds	r7, #8
 801575e:	46bd      	mov	sp, r7
 8015760:	bd80      	pop	{r7, pc}

08015762 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8015762:	b580      	push	{r7, lr}
 8015764:	b082      	sub	sp, #8
 8015766:	af00      	add	r7, sp, #0
 8015768:	6078      	str	r0, [r7, #4]
 801576a:	460b      	mov	r3, r1
 801576c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	789b      	ldrb	r3, [r3, #2]
 8015772:	2b01      	cmp	r3, #1
 8015774:	d10f      	bne.n	8015796 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	2202      	movs	r2, #2
 801577a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2201      	movs	r2, #1
 8015780:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	2200      	movs	r2, #0
 8015786:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8015788:	78fb      	ldrb	r3, [r7, #3]
 801578a:	b29a      	uxth	r2, r3
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2200      	movs	r2, #0
 8015794:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8015796:	2200      	movs	r2, #0
 8015798:	2100      	movs	r1, #0
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f000 f9c1 	bl	8015b22 <USBH_CtlReq>
 80157a0:	4603      	mov	r3, r0
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3708      	adds	r7, #8
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}

080157aa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80157aa:	b480      	push	{r7}
 80157ac:	b085      	sub	sp, #20
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	60f8      	str	r0, [r7, #12]
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	4613      	mov	r3, r2
 80157b6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	781a      	ldrb	r2, [r3, #0]
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	785a      	ldrb	r2, [r3, #1]
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	3302      	adds	r3, #2
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	b29a      	uxth	r2, r3
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	3303      	adds	r3, #3
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	b29b      	uxth	r3, r3
 80157d8:	021b      	lsls	r3, r3, #8
 80157da:	b29b      	uxth	r3, r3
 80157dc:	4313      	orrs	r3, r2
 80157de:	b29a      	uxth	r2, r3
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	791a      	ldrb	r2, [r3, #4]
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	795a      	ldrb	r2, [r3, #5]
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	799a      	ldrb	r2, [r3, #6]
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	79da      	ldrb	r2, [r3, #7]
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8015804:	88fb      	ldrh	r3, [r7, #6]
 8015806:	2b08      	cmp	r3, #8
 8015808:	d939      	bls.n	801587e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	3308      	adds	r3, #8
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	b29a      	uxth	r2, r3
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	3309      	adds	r3, #9
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	b29b      	uxth	r3, r3
 801581a:	021b      	lsls	r3, r3, #8
 801581c:	b29b      	uxth	r3, r3
 801581e:	4313      	orrs	r3, r2
 8015820:	b29a      	uxth	r2, r3
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	330a      	adds	r3, #10
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	b29a      	uxth	r2, r3
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	330b      	adds	r3, #11
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	b29b      	uxth	r3, r3
 8015836:	021b      	lsls	r3, r3, #8
 8015838:	b29b      	uxth	r3, r3
 801583a:	4313      	orrs	r3, r2
 801583c:	b29a      	uxth	r2, r3
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	330c      	adds	r3, #12
 8015846:	781b      	ldrb	r3, [r3, #0]
 8015848:	b29a      	uxth	r2, r3
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	330d      	adds	r3, #13
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	b29b      	uxth	r3, r3
 8015852:	021b      	lsls	r3, r3, #8
 8015854:	b29b      	uxth	r3, r3
 8015856:	4313      	orrs	r3, r2
 8015858:	b29a      	uxth	r2, r3
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	7b9a      	ldrb	r2, [r3, #14]
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	7bda      	ldrb	r2, [r3, #15]
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	7c1a      	ldrb	r2, [r3, #16]
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	7c5a      	ldrb	r2, [r3, #17]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	745a      	strb	r2, [r3, #17]
  }
}
 801587e:	bf00      	nop
 8015880:	3714      	adds	r7, #20
 8015882:	46bd      	mov	sp, r7
 8015884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015888:	4770      	bx	lr

0801588a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 801588a:	b580      	push	{r7, lr}
 801588c:	b08a      	sub	sp, #40	; 0x28
 801588e:	af00      	add	r7, sp, #0
 8015890:	60f8      	str	r0, [r7, #12]
 8015892:	60b9      	str	r1, [r7, #8]
 8015894:	4613      	mov	r3, r2
 8015896:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801589c:	2300      	movs	r3, #0
 801589e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80158a2:	2300      	movs	r3, #0
 80158a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80158ac:	68bb      	ldr	r3, [r7, #8]
 80158ae:	781a      	ldrb	r2, [r3, #0]
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	785a      	ldrb	r2, [r3, #1]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	3302      	adds	r3, #2
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	b29a      	uxth	r2, r3
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	3303      	adds	r3, #3
 80158c8:	781b      	ldrb	r3, [r3, #0]
 80158ca:	b29b      	uxth	r3, r3
 80158cc:	021b      	lsls	r3, r3, #8
 80158ce:	b29b      	uxth	r3, r3
 80158d0:	4313      	orrs	r3, r2
 80158d2:	b29a      	uxth	r2, r3
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	791a      	ldrb	r2, [r3, #4]
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80158e0:	68bb      	ldr	r3, [r7, #8]
 80158e2:	795a      	ldrb	r2, [r3, #5]
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	799a      	ldrb	r2, [r3, #6]
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	79da      	ldrb	r2, [r3, #7]
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	7a1a      	ldrb	r2, [r3, #8]
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8015900:	88fb      	ldrh	r3, [r7, #6]
 8015902:	2b09      	cmp	r3, #9
 8015904:	d95f      	bls.n	80159c6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8015906:	2309      	movs	r3, #9
 8015908:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 801590a:	2300      	movs	r3, #0
 801590c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801590e:	e051      	b.n	80159b4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8015910:	f107 0316 	add.w	r3, r7, #22
 8015914:	4619      	mov	r1, r3
 8015916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015918:	f000 f8e8 	bl	8015aec <USBH_GetNextDesc>
 801591c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 801591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015920:	785b      	ldrb	r3, [r3, #1]
 8015922:	2b04      	cmp	r3, #4
 8015924:	d146      	bne.n	80159b4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8015926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801592a:	221a      	movs	r2, #26
 801592c:	fb02 f303 	mul.w	r3, r2, r3
 8015930:	3308      	adds	r3, #8
 8015932:	68fa      	ldr	r2, [r7, #12]
 8015934:	4413      	add	r3, r2
 8015936:	3302      	adds	r3, #2
 8015938:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801593a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801593c:	69f8      	ldr	r0, [r7, #28]
 801593e:	f000 f846 	bl	80159ce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8015942:	2300      	movs	r3, #0
 8015944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8015948:	2300      	movs	r3, #0
 801594a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801594c:	e022      	b.n	8015994 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801594e:	f107 0316 	add.w	r3, r7, #22
 8015952:	4619      	mov	r1, r3
 8015954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015956:	f000 f8c9 	bl	8015aec <USBH_GetNextDesc>
 801595a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 801595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595e:	785b      	ldrb	r3, [r3, #1]
 8015960:	2b05      	cmp	r3, #5
 8015962:	d117      	bne.n	8015994 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8015964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801596c:	3201      	adds	r2, #1
 801596e:	00d2      	lsls	r2, r2, #3
 8015970:	211a      	movs	r1, #26
 8015972:	fb01 f303 	mul.w	r3, r1, r3
 8015976:	4413      	add	r3, r2
 8015978:	3308      	adds	r3, #8
 801597a:	68fa      	ldr	r2, [r7, #12]
 801597c:	4413      	add	r3, r2
 801597e:	3304      	adds	r3, #4
 8015980:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8015982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015984:	69b8      	ldr	r0, [r7, #24]
 8015986:	f000 f851 	bl	8015a2c <USBH_ParseEPDesc>
            ep_ix++;
 801598a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801598e:	3301      	adds	r3, #1
 8015990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	791b      	ldrb	r3, [r3, #4]
 8015998:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801599c:	429a      	cmp	r2, r3
 801599e:	d204      	bcs.n	80159aa <USBH_ParseCfgDesc+0x120>
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	885a      	ldrh	r2, [r3, #2]
 80159a4:	8afb      	ldrh	r3, [r7, #22]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d8d1      	bhi.n	801594e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80159aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159ae:	3301      	adds	r3, #1
 80159b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80159b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159b8:	2b01      	cmp	r3, #1
 80159ba:	d804      	bhi.n	80159c6 <USBH_ParseCfgDesc+0x13c>
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	885a      	ldrh	r2, [r3, #2]
 80159c0:	8afb      	ldrh	r3, [r7, #22]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d8a4      	bhi.n	8015910 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80159c6:	bf00      	nop
 80159c8:	3728      	adds	r7, #40	; 0x28
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}

080159ce <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80159ce:	b480      	push	{r7}
 80159d0:	b083      	sub	sp, #12
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	6078      	str	r0, [r7, #4]
 80159d6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	781a      	ldrb	r2, [r3, #0]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	785a      	ldrb	r2, [r3, #1]
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	789a      	ldrb	r2, [r3, #2]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	78da      	ldrb	r2, [r3, #3]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	791a      	ldrb	r2, [r3, #4]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	795a      	ldrb	r2, [r3, #5]
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	799a      	ldrb	r2, [r3, #6]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	79da      	ldrb	r2, [r3, #7]
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	7a1a      	ldrb	r2, [r3, #8]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	721a      	strb	r2, [r3, #8]
}
 8015a20:	bf00      	nop
 8015a22:	370c      	adds	r7, #12
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	781a      	ldrb	r2, [r3, #0]
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	785a      	ldrb	r2, [r3, #1]
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	789a      	ldrb	r2, [r3, #2]
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	78da      	ldrb	r2, [r3, #3]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	3304      	adds	r3, #4
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	b29a      	uxth	r2, r3
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	3305      	adds	r3, #5
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	b29b      	uxth	r3, r3
 8015a66:	021b      	lsls	r3, r3, #8
 8015a68:	b29b      	uxth	r3, r3
 8015a6a:	4313      	orrs	r3, r2
 8015a6c:	b29a      	uxth	r2, r3
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	799a      	ldrb	r2, [r3, #6]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	719a      	strb	r2, [r3, #6]
}
 8015a7a:	bf00      	nop
 8015a7c:	370c      	adds	r7, #12
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a84:	4770      	bx	lr

08015a86 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8015a86:	b480      	push	{r7}
 8015a88:	b087      	sub	sp, #28
 8015a8a:	af00      	add	r7, sp, #0
 8015a8c:	60f8      	str	r0, [r7, #12]
 8015a8e:	60b9      	str	r1, [r7, #8]
 8015a90:	4613      	mov	r3, r2
 8015a92:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	3301      	adds	r3, #1
 8015a98:	781b      	ldrb	r3, [r3, #0]
 8015a9a:	2b03      	cmp	r3, #3
 8015a9c:	d120      	bne.n	8015ae0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	1e9a      	subs	r2, r3, #2
 8015aa4:	88fb      	ldrh	r3, [r7, #6]
 8015aa6:	4293      	cmp	r3, r2
 8015aa8:	bf28      	it	cs
 8015aaa:	4613      	movcs	r3, r2
 8015aac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	3302      	adds	r3, #2
 8015ab2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	82fb      	strh	r3, [r7, #22]
 8015ab8:	e00b      	b.n	8015ad2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8015aba:	8afb      	ldrh	r3, [r7, #22]
 8015abc:	68fa      	ldr	r2, [r7, #12]
 8015abe:	4413      	add	r3, r2
 8015ac0:	781a      	ldrb	r2, [r3, #0]
 8015ac2:	68bb      	ldr	r3, [r7, #8]
 8015ac4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	3301      	adds	r3, #1
 8015aca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8015acc:	8afb      	ldrh	r3, [r7, #22]
 8015ace:	3302      	adds	r3, #2
 8015ad0:	82fb      	strh	r3, [r7, #22]
 8015ad2:	8afa      	ldrh	r2, [r7, #22]
 8015ad4:	8abb      	ldrh	r3, [r7, #20]
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d3ef      	bcc.n	8015aba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8015ada:	68bb      	ldr	r3, [r7, #8]
 8015adc:	2200      	movs	r2, #0
 8015ade:	701a      	strb	r2, [r3, #0]
  }
}
 8015ae0:	bf00      	nop
 8015ae2:	371c      	adds	r7, #28
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aea:	4770      	bx	lr

08015aec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8015aec:	b480      	push	{r7}
 8015aee:	b085      	sub	sp, #20
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	881a      	ldrh	r2, [r3, #0]
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	4413      	add	r3, r2
 8015b02:	b29a      	uxth	r2, r3
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	4413      	add	r3, r2
 8015b12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015b14:	68fb      	ldr	r3, [r7, #12]
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3714      	adds	r7, #20
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b20:	4770      	bx	lr

08015b22 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8015b22:	b580      	push	{r7, lr}
 8015b24:	b086      	sub	sp, #24
 8015b26:	af00      	add	r7, sp, #0
 8015b28:	60f8      	str	r0, [r7, #12]
 8015b2a:	60b9      	str	r1, [r7, #8]
 8015b2c:	4613      	mov	r3, r2
 8015b2e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8015b30:	2301      	movs	r3, #1
 8015b32:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	789b      	ldrb	r3, [r3, #2]
 8015b38:	2b01      	cmp	r3, #1
 8015b3a:	d002      	beq.n	8015b42 <USBH_CtlReq+0x20>
 8015b3c:	2b02      	cmp	r3, #2
 8015b3e:	d01d      	beq.n	8015b7c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8015b40:	e043      	b.n	8015bca <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	68ba      	ldr	r2, [r7, #8]
 8015b46:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	88fa      	ldrh	r2, [r7, #6]
 8015b4c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	2201      	movs	r2, #1
 8015b52:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	2202      	movs	r2, #2
 8015b58:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2203      	movs	r2, #3
 8015b62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015b72:	2200      	movs	r2, #0
 8015b74:	4619      	mov	r1, r3
 8015b76:	f000 fd63 	bl	8016640 <osMessagePut>
      break;
 8015b7a:	e026      	b.n	8015bca <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8015b7c:	68f8      	ldr	r0, [r7, #12]
 8015b7e:	f000 f829 	bl	8015bd4 <USBH_HandleControl>
 8015b82:	4603      	mov	r3, r0
 8015b84:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8015b86:	7dfb      	ldrb	r3, [r7, #23]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d002      	beq.n	8015b92 <USBH_CtlReq+0x70>
 8015b8c:	7dfb      	ldrb	r3, [r7, #23]
 8015b8e:	2b03      	cmp	r3, #3
 8015b90:	d106      	bne.n	8015ba0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	2201      	movs	r2, #1
 8015b96:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	761a      	strb	r2, [r3, #24]
 8015b9e:	e005      	b.n	8015bac <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8015ba0:	7dfb      	ldrb	r3, [r7, #23]
 8015ba2:	2b02      	cmp	r3, #2
 8015ba4:	d102      	bne.n	8015bac <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	2201      	movs	r2, #1
 8015baa:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	2203      	movs	r2, #3
 8015bb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	f000 fd3c 	bl	8016640 <osMessagePut>
      break;
 8015bc8:	bf00      	nop
  }
  return status;
 8015bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3718      	adds	r7, #24
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b086      	sub	sp, #24
 8015bd8:	af02      	add	r7, sp, #8
 8015bda:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8015bdc:	2301      	movs	r3, #1
 8015bde:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015be0:	2300      	movs	r3, #0
 8015be2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	7e1b      	ldrb	r3, [r3, #24]
 8015be8:	3b01      	subs	r3, #1
 8015bea:	2b0a      	cmp	r3, #10
 8015bec:	f200 8229 	bhi.w	8016042 <USBH_HandleControl+0x46e>
 8015bf0:	a201      	add	r2, pc, #4	; (adr r2, 8015bf8 <USBH_HandleControl+0x24>)
 8015bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bf6:	bf00      	nop
 8015bf8:	08015c25 	.word	0x08015c25
 8015bfc:	08015c3f 	.word	0x08015c3f
 8015c00:	08015ce1 	.word	0x08015ce1
 8015c04:	08015d07 	.word	0x08015d07
 8015c08:	08015d93 	.word	0x08015d93
 8015c0c:	08015dbd 	.word	0x08015dbd
 8015c10:	08015e7f 	.word	0x08015e7f
 8015c14:	08015ea1 	.word	0x08015ea1
 8015c18:	08015f33 	.word	0x08015f33
 8015c1c:	08015f59 	.word	0x08015f59
 8015c20:	08015feb 	.word	0x08015feb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f103 0110 	add.w	r1, r3, #16
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	795b      	ldrb	r3, [r3, #5]
 8015c2e:	461a      	mov	r2, r3
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f000 fa17 	bl	8016064 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	2202      	movs	r2, #2
 8015c3a:	761a      	strb	r2, [r3, #24]
      break;
 8015c3c:	e20c      	b.n	8016058 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	795b      	ldrb	r3, [r3, #5]
 8015c42:	4619      	mov	r1, r3
 8015c44:	6878      	ldr	r0, [r7, #4]
 8015c46:	f003 fb77 	bl	8019338 <USBH_LL_GetURBState>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8015c4e:	7bbb      	ldrb	r3, [r7, #14]
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	d12c      	bne.n	8015cae <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	7c1b      	ldrb	r3, [r3, #16]
 8015c58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015c5c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	8adb      	ldrh	r3, [r3, #22]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d00a      	beq.n	8015c7c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8015c66:	7b7b      	ldrb	r3, [r7, #13]
 8015c68:	2b80      	cmp	r3, #128	; 0x80
 8015c6a:	d103      	bne.n	8015c74 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2203      	movs	r2, #3
 8015c70:	761a      	strb	r2, [r3, #24]
 8015c72:	e00d      	b.n	8015c90 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2205      	movs	r2, #5
 8015c78:	761a      	strb	r2, [r3, #24]
 8015c7a:	e009      	b.n	8015c90 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8015c7c:	7b7b      	ldrb	r3, [r7, #13]
 8015c7e:	2b80      	cmp	r3, #128	; 0x80
 8015c80:	d103      	bne.n	8015c8a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2209      	movs	r2, #9
 8015c86:	761a      	strb	r2, [r3, #24]
 8015c88:	e002      	b.n	8015c90 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2207      	movs	r2, #7
 8015c8e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2203      	movs	r2, #3
 8015c94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	f000 fcca 	bl	8016640 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015cac:	e1cb      	b.n	8016046 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8015cae:	7bbb      	ldrb	r3, [r7, #14]
 8015cb0:	2b04      	cmp	r3, #4
 8015cb2:	d003      	beq.n	8015cbc <USBH_HandleControl+0xe8>
 8015cb4:	7bbb      	ldrb	r3, [r7, #14]
 8015cb6:	2b02      	cmp	r3, #2
 8015cb8:	f040 81c5 	bne.w	8016046 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	220b      	movs	r2, #11
 8015cc0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2203      	movs	r2, #3
 8015cc6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	4619      	mov	r1, r3
 8015cda:	f000 fcb1 	bl	8016640 <osMessagePut>
      break;
 8015cde:	e1b2      	b.n	8016046 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015ce6:	b29a      	uxth	r2, r3
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6899      	ldr	r1, [r3, #8]
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	899a      	ldrh	r2, [r3, #12]
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	791b      	ldrb	r3, [r3, #4]
 8015cf8:	6878      	ldr	r0, [r7, #4]
 8015cfa:	f000 f9f2 	bl	80160e2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2204      	movs	r2, #4
 8015d02:	761a      	strb	r2, [r3, #24]
      break;
 8015d04:	e1a8      	b.n	8016058 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	791b      	ldrb	r3, [r3, #4]
 8015d0a:	4619      	mov	r1, r3
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f003 fb13 	bl	8019338 <USBH_LL_GetURBState>
 8015d12:	4603      	mov	r3, r0
 8015d14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8015d16:	7bbb      	ldrb	r3, [r7, #14]
 8015d18:	2b01      	cmp	r3, #1
 8015d1a:	d110      	bne.n	8015d3e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2209      	movs	r2, #9
 8015d20:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	2203      	movs	r2, #3
 8015d26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015d36:	2200      	movs	r2, #0
 8015d38:	4619      	mov	r1, r3
 8015d3a:	f000 fc81 	bl	8016640 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8015d3e:	7bbb      	ldrb	r3, [r7, #14]
 8015d40:	2b05      	cmp	r3, #5
 8015d42:	d110      	bne.n	8015d66 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8015d44:	2303      	movs	r3, #3
 8015d46:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	2203      	movs	r2, #3
 8015d4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	4619      	mov	r1, r3
 8015d60:	f000 fc6e 	bl	8016640 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015d64:	e171      	b.n	801604a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8015d66:	7bbb      	ldrb	r3, [r7, #14]
 8015d68:	2b04      	cmp	r3, #4
 8015d6a:	f040 816e 	bne.w	801604a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	220b      	movs	r2, #11
 8015d72:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2203      	movs	r2, #3
 8015d78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015d88:	2200      	movs	r2, #0
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	f000 fc58 	bl	8016640 <osMessagePut>
      break;
 8015d90:	e15b      	b.n	801604a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	6899      	ldr	r1, [r3, #8]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	899a      	ldrh	r2, [r3, #12]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	795b      	ldrb	r3, [r3, #5]
 8015d9e:	2001      	movs	r0, #1
 8015da0:	9000      	str	r0, [sp, #0]
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f000 f978 	bl	8016098 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015dae:	b29a      	uxth	r2, r3
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2206      	movs	r2, #6
 8015db8:	761a      	strb	r2, [r3, #24]
      break;
 8015dba:	e14d      	b.n	8016058 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	795b      	ldrb	r3, [r3, #5]
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f003 fab8 	bl	8019338 <USBH_LL_GetURBState>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015dcc:	7bbb      	ldrb	r3, [r7, #14]
 8015dce:	2b01      	cmp	r3, #1
 8015dd0:	d111      	bne.n	8015df6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2207      	movs	r2, #7
 8015dd6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2203      	movs	r2, #3
 8015ddc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015dec:	2200      	movs	r2, #0
 8015dee:	4619      	mov	r1, r3
 8015df0:	f000 fc26 	bl	8016640 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015df4:	e12b      	b.n	801604e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8015df6:	7bbb      	ldrb	r3, [r7, #14]
 8015df8:	2b05      	cmp	r3, #5
 8015dfa:	d113      	bne.n	8015e24 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	220c      	movs	r2, #12
 8015e00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8015e02:	2303      	movs	r3, #3
 8015e04:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2203      	movs	r2, #3
 8015e0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	4619      	mov	r1, r3
 8015e1e:	f000 fc0f 	bl	8016640 <osMessagePut>
      break;
 8015e22:	e114      	b.n	801604e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015e24:	7bbb      	ldrb	r3, [r7, #14]
 8015e26:	2b02      	cmp	r3, #2
 8015e28:	d111      	bne.n	8015e4e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2205      	movs	r2, #5
 8015e2e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2203      	movs	r2, #3
 8015e34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015e44:	2200      	movs	r2, #0
 8015e46:	4619      	mov	r1, r3
 8015e48:	f000 fbfa 	bl	8016640 <osMessagePut>
      break;
 8015e4c:	e0ff      	b.n	801604e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8015e4e:	7bbb      	ldrb	r3, [r7, #14]
 8015e50:	2b04      	cmp	r3, #4
 8015e52:	f040 80fc 	bne.w	801604e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	220b      	movs	r2, #11
 8015e5a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8015e5c:	2302      	movs	r3, #2
 8015e5e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2203      	movs	r2, #3
 8015e64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015e74:	2200      	movs	r2, #0
 8015e76:	4619      	mov	r1, r3
 8015e78:	f000 fbe2 	bl	8016640 <osMessagePut>
      break;
 8015e7c:	e0e7      	b.n	801604e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	791b      	ldrb	r3, [r3, #4]
 8015e82:	2200      	movs	r2, #0
 8015e84:	2100      	movs	r1, #0
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 f92b 	bl	80160e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015e92:	b29a      	uxth	r2, r3
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2208      	movs	r2, #8
 8015e9c:	761a      	strb	r2, [r3, #24]

      break;
 8015e9e:	e0db      	b.n	8016058 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	791b      	ldrb	r3, [r3, #4]
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	f003 fa46 	bl	8019338 <USBH_LL_GetURBState>
 8015eac:	4603      	mov	r3, r0
 8015eae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015eb0:	7bbb      	ldrb	r3, [r7, #14]
 8015eb2:	2b01      	cmp	r3, #1
 8015eb4:	d113      	bne.n	8015ede <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	220d      	movs	r2, #13
 8015eba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2203      	movs	r2, #3
 8015ec4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	f000 fbb2 	bl	8016640 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015edc:	e0b9      	b.n	8016052 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8015ede:	7bbb      	ldrb	r3, [r7, #14]
 8015ee0:	2b04      	cmp	r3, #4
 8015ee2:	d111      	bne.n	8015f08 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	220b      	movs	r2, #11
 8015ee8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2203      	movs	r2, #3
 8015eee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015efe:	2200      	movs	r2, #0
 8015f00:	4619      	mov	r1, r3
 8015f02:	f000 fb9d 	bl	8016640 <osMessagePut>
      break;
 8015f06:	e0a4      	b.n	8016052 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8015f08:	7bbb      	ldrb	r3, [r7, #14]
 8015f0a:	2b05      	cmp	r3, #5
 8015f0c:	f040 80a1 	bne.w	8016052 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8015f10:	2303      	movs	r3, #3
 8015f12:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	2203      	movs	r2, #3
 8015f18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015f28:	2200      	movs	r2, #0
 8015f2a:	4619      	mov	r1, r3
 8015f2c:	f000 fb88 	bl	8016640 <osMessagePut>
      break;
 8015f30:	e08f      	b.n	8016052 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	795b      	ldrb	r3, [r3, #5]
 8015f36:	2201      	movs	r2, #1
 8015f38:	9200      	str	r2, [sp, #0]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	2100      	movs	r1, #0
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f000 f8aa 	bl	8016098 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015f4a:	b29a      	uxth	r2, r3
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	220a      	movs	r2, #10
 8015f54:	761a      	strb	r2, [r3, #24]
      break;
 8015f56:	e07f      	b.n	8016058 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	795b      	ldrb	r3, [r3, #5]
 8015f5c:	4619      	mov	r1, r3
 8015f5e:	6878      	ldr	r0, [r7, #4]
 8015f60:	f003 f9ea 	bl	8019338 <USBH_LL_GetURBState>
 8015f64:	4603      	mov	r3, r0
 8015f66:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8015f68:	7bbb      	ldrb	r3, [r7, #14]
 8015f6a:	2b01      	cmp	r3, #1
 8015f6c:	d113      	bne.n	8015f96 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	220d      	movs	r2, #13
 8015f76:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2203      	movs	r2, #3
 8015f7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	4619      	mov	r1, r3
 8015f90:	f000 fb56 	bl	8016640 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015f94:	e05f      	b.n	8016056 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015f96:	7bbb      	ldrb	r3, [r7, #14]
 8015f98:	2b02      	cmp	r3, #2
 8015f9a:	d111      	bne.n	8015fc0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	2209      	movs	r2, #9
 8015fa0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	2203      	movs	r2, #3
 8015fa6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	4619      	mov	r1, r3
 8015fba:	f000 fb41 	bl	8016640 <osMessagePut>
      break;
 8015fbe:	e04a      	b.n	8016056 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8015fc0:	7bbb      	ldrb	r3, [r7, #14]
 8015fc2:	2b04      	cmp	r3, #4
 8015fc4:	d147      	bne.n	8016056 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	220b      	movs	r2, #11
 8015fca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2203      	movs	r2, #3
 8015fd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	4619      	mov	r1, r3
 8015fe4:	f000 fb2c 	bl	8016640 <osMessagePut>
      break;
 8015fe8:	e035      	b.n	8016056 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	7e5b      	ldrb	r3, [r3, #25]
 8015fee:	3301      	adds	r3, #1
 8015ff0:	b2da      	uxtb	r2, r3
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	765a      	strb	r2, [r3, #25]
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	7e5b      	ldrb	r3, [r3, #25]
 8015ffa:	2b02      	cmp	r3, #2
 8015ffc:	d806      	bhi.n	801600c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	2201      	movs	r2, #1
 8016002:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2201      	movs	r2, #1
 8016008:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801600a:	e025      	b.n	8016058 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8016012:	2106      	movs	r1, #6
 8016014:	6878      	ldr	r0, [r7, #4]
 8016016:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2200      	movs	r2, #0
 801601c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	795b      	ldrb	r3, [r3, #5]
 8016022:	4619      	mov	r1, r3
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 f90d 	bl	8016244 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	791b      	ldrb	r3, [r3, #4]
 801602e:	4619      	mov	r1, r3
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f000 f907 	bl	8016244 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2200      	movs	r2, #0
 801603a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801603c:	2302      	movs	r3, #2
 801603e:	73fb      	strb	r3, [r7, #15]
      break;
 8016040:	e00a      	b.n	8016058 <USBH_HandleControl+0x484>

    default:
      break;
 8016042:	bf00      	nop
 8016044:	e008      	b.n	8016058 <USBH_HandleControl+0x484>
      break;
 8016046:	bf00      	nop
 8016048:	e006      	b.n	8016058 <USBH_HandleControl+0x484>
      break;
 801604a:	bf00      	nop
 801604c:	e004      	b.n	8016058 <USBH_HandleControl+0x484>
      break;
 801604e:	bf00      	nop
 8016050:	e002      	b.n	8016058 <USBH_HandleControl+0x484>
      break;
 8016052:	bf00      	nop
 8016054:	e000      	b.n	8016058 <USBH_HandleControl+0x484>
      break;
 8016056:	bf00      	nop
  }

  return status;
 8016058:	7bfb      	ldrb	r3, [r7, #15]
}
 801605a:	4618      	mov	r0, r3
 801605c:	3710      	adds	r7, #16
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
 8016062:	bf00      	nop

08016064 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b088      	sub	sp, #32
 8016068:	af04      	add	r7, sp, #16
 801606a:	60f8      	str	r0, [r7, #12]
 801606c:	60b9      	str	r1, [r7, #8]
 801606e:	4613      	mov	r3, r2
 8016070:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016072:	79f9      	ldrb	r1, [r7, #7]
 8016074:	2300      	movs	r3, #0
 8016076:	9303      	str	r3, [sp, #12]
 8016078:	2308      	movs	r3, #8
 801607a:	9302      	str	r3, [sp, #8]
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	9301      	str	r3, [sp, #4]
 8016080:	2300      	movs	r3, #0
 8016082:	9300      	str	r3, [sp, #0]
 8016084:	2300      	movs	r3, #0
 8016086:	2200      	movs	r2, #0
 8016088:	68f8      	ldr	r0, [r7, #12]
 801608a:	f003 f924 	bl	80192d6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801608e:	2300      	movs	r3, #0
}
 8016090:	4618      	mov	r0, r3
 8016092:	3710      	adds	r7, #16
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}

08016098 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b088      	sub	sp, #32
 801609c:	af04      	add	r7, sp, #16
 801609e:	60f8      	str	r0, [r7, #12]
 80160a0:	60b9      	str	r1, [r7, #8]
 80160a2:	4611      	mov	r1, r2
 80160a4:	461a      	mov	r2, r3
 80160a6:	460b      	mov	r3, r1
 80160a8:	80fb      	strh	r3, [r7, #6]
 80160aa:	4613      	mov	r3, r2
 80160ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d001      	beq.n	80160bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80160b8:	2300      	movs	r3, #0
 80160ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80160bc:	7979      	ldrb	r1, [r7, #5]
 80160be:	7e3b      	ldrb	r3, [r7, #24]
 80160c0:	9303      	str	r3, [sp, #12]
 80160c2:	88fb      	ldrh	r3, [r7, #6]
 80160c4:	9302      	str	r3, [sp, #8]
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	9301      	str	r3, [sp, #4]
 80160ca:	2301      	movs	r3, #1
 80160cc:	9300      	str	r3, [sp, #0]
 80160ce:	2300      	movs	r3, #0
 80160d0:	2200      	movs	r2, #0
 80160d2:	68f8      	ldr	r0, [r7, #12]
 80160d4:	f003 f8ff 	bl	80192d6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80160d8:	2300      	movs	r3, #0
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3710      	adds	r7, #16
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}

080160e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80160e2:	b580      	push	{r7, lr}
 80160e4:	b088      	sub	sp, #32
 80160e6:	af04      	add	r7, sp, #16
 80160e8:	60f8      	str	r0, [r7, #12]
 80160ea:	60b9      	str	r1, [r7, #8]
 80160ec:	4611      	mov	r1, r2
 80160ee:	461a      	mov	r2, r3
 80160f0:	460b      	mov	r3, r1
 80160f2:	80fb      	strh	r3, [r7, #6]
 80160f4:	4613      	mov	r3, r2
 80160f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80160f8:	7979      	ldrb	r1, [r7, #5]
 80160fa:	2300      	movs	r3, #0
 80160fc:	9303      	str	r3, [sp, #12]
 80160fe:	88fb      	ldrh	r3, [r7, #6]
 8016100:	9302      	str	r3, [sp, #8]
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	9301      	str	r3, [sp, #4]
 8016106:	2301      	movs	r3, #1
 8016108:	9300      	str	r3, [sp, #0]
 801610a:	2300      	movs	r3, #0
 801610c:	2201      	movs	r2, #1
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	f003 f8e1 	bl	80192d6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8016114:	2300      	movs	r3, #0

}
 8016116:	4618      	mov	r0, r3
 8016118:	3710      	adds	r7, #16
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}

0801611e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801611e:	b580      	push	{r7, lr}
 8016120:	b088      	sub	sp, #32
 8016122:	af04      	add	r7, sp, #16
 8016124:	60f8      	str	r0, [r7, #12]
 8016126:	60b9      	str	r1, [r7, #8]
 8016128:	4611      	mov	r1, r2
 801612a:	461a      	mov	r2, r3
 801612c:	460b      	mov	r3, r1
 801612e:	80fb      	strh	r3, [r7, #6]
 8016130:	4613      	mov	r3, r2
 8016132:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801613a:	2b00      	cmp	r3, #0
 801613c:	d001      	beq.n	8016142 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801613e:	2300      	movs	r3, #0
 8016140:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016142:	7979      	ldrb	r1, [r7, #5]
 8016144:	7e3b      	ldrb	r3, [r7, #24]
 8016146:	9303      	str	r3, [sp, #12]
 8016148:	88fb      	ldrh	r3, [r7, #6]
 801614a:	9302      	str	r3, [sp, #8]
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	9301      	str	r3, [sp, #4]
 8016150:	2301      	movs	r3, #1
 8016152:	9300      	str	r3, [sp, #0]
 8016154:	2302      	movs	r3, #2
 8016156:	2200      	movs	r2, #0
 8016158:	68f8      	ldr	r0, [r7, #12]
 801615a:	f003 f8bc 	bl	80192d6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801615e:	2300      	movs	r3, #0
}
 8016160:	4618      	mov	r0, r3
 8016162:	3710      	adds	r7, #16
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}

08016168 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b088      	sub	sp, #32
 801616c:	af04      	add	r7, sp, #16
 801616e:	60f8      	str	r0, [r7, #12]
 8016170:	60b9      	str	r1, [r7, #8]
 8016172:	4611      	mov	r1, r2
 8016174:	461a      	mov	r2, r3
 8016176:	460b      	mov	r3, r1
 8016178:	80fb      	strh	r3, [r7, #6]
 801617a:	4613      	mov	r3, r2
 801617c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801617e:	7979      	ldrb	r1, [r7, #5]
 8016180:	2300      	movs	r3, #0
 8016182:	9303      	str	r3, [sp, #12]
 8016184:	88fb      	ldrh	r3, [r7, #6]
 8016186:	9302      	str	r3, [sp, #8]
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	9301      	str	r3, [sp, #4]
 801618c:	2301      	movs	r3, #1
 801618e:	9300      	str	r3, [sp, #0]
 8016190:	2302      	movs	r3, #2
 8016192:	2201      	movs	r2, #1
 8016194:	68f8      	ldr	r0, [r7, #12]
 8016196:	f003 f89e 	bl	80192d6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801619a:	2300      	movs	r3, #0
}
 801619c:	4618      	mov	r0, r3
 801619e:	3710      	adds	r7, #16
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b086      	sub	sp, #24
 80161a8:	af04      	add	r7, sp, #16
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	4608      	mov	r0, r1
 80161ae:	4611      	mov	r1, r2
 80161b0:	461a      	mov	r2, r3
 80161b2:	4603      	mov	r3, r0
 80161b4:	70fb      	strb	r3, [r7, #3]
 80161b6:	460b      	mov	r3, r1
 80161b8:	70bb      	strb	r3, [r7, #2]
 80161ba:	4613      	mov	r3, r2
 80161bc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80161be:	7878      	ldrb	r0, [r7, #1]
 80161c0:	78ba      	ldrb	r2, [r7, #2]
 80161c2:	78f9      	ldrb	r1, [r7, #3]
 80161c4:	8b3b      	ldrh	r3, [r7, #24]
 80161c6:	9302      	str	r3, [sp, #8]
 80161c8:	7d3b      	ldrb	r3, [r7, #20]
 80161ca:	9301      	str	r3, [sp, #4]
 80161cc:	7c3b      	ldrb	r3, [r7, #16]
 80161ce:	9300      	str	r3, [sp, #0]
 80161d0:	4603      	mov	r3, r0
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f003 f831 	bl	801923a <USBH_LL_OpenPipe>

  return USBH_OK;
 80161d8:	2300      	movs	r3, #0
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3708      	adds	r7, #8
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}

080161e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80161e2:	b580      	push	{r7, lr}
 80161e4:	b082      	sub	sp, #8
 80161e6:	af00      	add	r7, sp, #0
 80161e8:	6078      	str	r0, [r7, #4]
 80161ea:	460b      	mov	r3, r1
 80161ec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80161ee:	78fb      	ldrb	r3, [r7, #3]
 80161f0:	4619      	mov	r1, r3
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f003 f850 	bl	8019298 <USBH_LL_ClosePipe>

  return USBH_OK;
 80161f8:	2300      	movs	r3, #0
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	3708      	adds	r7, #8
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}

08016202 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8016202:	b580      	push	{r7, lr}
 8016204:	b084      	sub	sp, #16
 8016206:	af00      	add	r7, sp, #0
 8016208:	6078      	str	r0, [r7, #4]
 801620a:	460b      	mov	r3, r1
 801620c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f000 f836 	bl	8016280 <USBH_GetFreePipe>
 8016214:	4603      	mov	r3, r0
 8016216:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8016218:	89fb      	ldrh	r3, [r7, #14]
 801621a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801621e:	4293      	cmp	r3, r2
 8016220:	d00a      	beq.n	8016238 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8016222:	78fa      	ldrb	r2, [r7, #3]
 8016224:	89fb      	ldrh	r3, [r7, #14]
 8016226:	f003 030f 	and.w	r3, r3, #15
 801622a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801622e:	6879      	ldr	r1, [r7, #4]
 8016230:	33e0      	adds	r3, #224	; 0xe0
 8016232:	009b      	lsls	r3, r3, #2
 8016234:	440b      	add	r3, r1
 8016236:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8016238:	89fb      	ldrh	r3, [r7, #14]
 801623a:	b2db      	uxtb	r3, r3
}
 801623c:	4618      	mov	r0, r3
 801623e:	3710      	adds	r7, #16
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8016244:	b480      	push	{r7}
 8016246:	b083      	sub	sp, #12
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	460b      	mov	r3, r1
 801624e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8016250:	78fb      	ldrb	r3, [r7, #3]
 8016252:	2b0a      	cmp	r3, #10
 8016254:	d80d      	bhi.n	8016272 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8016256:	78fb      	ldrb	r3, [r7, #3]
 8016258:	687a      	ldr	r2, [r7, #4]
 801625a:	33e0      	adds	r3, #224	; 0xe0
 801625c:	009b      	lsls	r3, r3, #2
 801625e:	4413      	add	r3, r2
 8016260:	685a      	ldr	r2, [r3, #4]
 8016262:	78fb      	ldrb	r3, [r7, #3]
 8016264:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8016268:	6879      	ldr	r1, [r7, #4]
 801626a:	33e0      	adds	r3, #224	; 0xe0
 801626c:	009b      	lsls	r3, r3, #2
 801626e:	440b      	add	r3, r1
 8016270:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8016272:	2300      	movs	r3, #0
}
 8016274:	4618      	mov	r0, r3
 8016276:	370c      	adds	r7, #12
 8016278:	46bd      	mov	sp, r7
 801627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627e:	4770      	bx	lr

08016280 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8016280:	b480      	push	{r7}
 8016282:	b085      	sub	sp, #20
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8016288:	2300      	movs	r3, #0
 801628a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801628c:	2300      	movs	r3, #0
 801628e:	73fb      	strb	r3, [r7, #15]
 8016290:	e00f      	b.n	80162b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8016292:	7bfb      	ldrb	r3, [r7, #15]
 8016294:	687a      	ldr	r2, [r7, #4]
 8016296:	33e0      	adds	r3, #224	; 0xe0
 8016298:	009b      	lsls	r3, r3, #2
 801629a:	4413      	add	r3, r2
 801629c:	685b      	ldr	r3, [r3, #4]
 801629e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d102      	bne.n	80162ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80162a6:	7bfb      	ldrb	r3, [r7, #15]
 80162a8:	b29b      	uxth	r3, r3
 80162aa:	e007      	b.n	80162bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80162ac:	7bfb      	ldrb	r3, [r7, #15]
 80162ae:	3301      	adds	r3, #1
 80162b0:	73fb      	strb	r3, [r7, #15]
 80162b2:	7bfb      	ldrb	r3, [r7, #15]
 80162b4:	2b0a      	cmp	r3, #10
 80162b6:	d9ec      	bls.n	8016292 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80162b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80162bc:	4618      	mov	r0, r3
 80162be:	3714      	adds	r7, #20
 80162c0:	46bd      	mov	sp, r7
 80162c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c6:	4770      	bx	lr

080162c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80162c8:	b480      	push	{r7}
 80162ca:	b087      	sub	sp, #28
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	60f8      	str	r0, [r7, #12]
 80162d0:	60b9      	str	r1, [r7, #8]
 80162d2:	4613      	mov	r3, r2
 80162d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80162d6:	2301      	movs	r3, #1
 80162d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80162da:	2300      	movs	r3, #0
 80162dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80162de:	4b1f      	ldr	r3, [pc, #124]	; (801635c <FATFS_LinkDriverEx+0x94>)
 80162e0:	7a5b      	ldrb	r3, [r3, #9]
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d131      	bne.n	801634c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80162e8:	4b1c      	ldr	r3, [pc, #112]	; (801635c <FATFS_LinkDriverEx+0x94>)
 80162ea:	7a5b      	ldrb	r3, [r3, #9]
 80162ec:	b2db      	uxtb	r3, r3
 80162ee:	461a      	mov	r2, r3
 80162f0:	4b1a      	ldr	r3, [pc, #104]	; (801635c <FATFS_LinkDriverEx+0x94>)
 80162f2:	2100      	movs	r1, #0
 80162f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80162f6:	4b19      	ldr	r3, [pc, #100]	; (801635c <FATFS_LinkDriverEx+0x94>)
 80162f8:	7a5b      	ldrb	r3, [r3, #9]
 80162fa:	b2db      	uxtb	r3, r3
 80162fc:	4a17      	ldr	r2, [pc, #92]	; (801635c <FATFS_LinkDriverEx+0x94>)
 80162fe:	009b      	lsls	r3, r3, #2
 8016300:	4413      	add	r3, r2
 8016302:	68fa      	ldr	r2, [r7, #12]
 8016304:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016306:	4b15      	ldr	r3, [pc, #84]	; (801635c <FATFS_LinkDriverEx+0x94>)
 8016308:	7a5b      	ldrb	r3, [r3, #9]
 801630a:	b2db      	uxtb	r3, r3
 801630c:	461a      	mov	r2, r3
 801630e:	4b13      	ldr	r3, [pc, #76]	; (801635c <FATFS_LinkDriverEx+0x94>)
 8016310:	4413      	add	r3, r2
 8016312:	79fa      	ldrb	r2, [r7, #7]
 8016314:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016316:	4b11      	ldr	r3, [pc, #68]	; (801635c <FATFS_LinkDriverEx+0x94>)
 8016318:	7a5b      	ldrb	r3, [r3, #9]
 801631a:	b2db      	uxtb	r3, r3
 801631c:	1c5a      	adds	r2, r3, #1
 801631e:	b2d1      	uxtb	r1, r2
 8016320:	4a0e      	ldr	r2, [pc, #56]	; (801635c <FATFS_LinkDriverEx+0x94>)
 8016322:	7251      	strb	r1, [r2, #9]
 8016324:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016326:	7dbb      	ldrb	r3, [r7, #22]
 8016328:	3330      	adds	r3, #48	; 0x30
 801632a:	b2da      	uxtb	r2, r3
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016330:	68bb      	ldr	r3, [r7, #8]
 8016332:	3301      	adds	r3, #1
 8016334:	223a      	movs	r2, #58	; 0x3a
 8016336:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	3302      	adds	r3, #2
 801633c:	222f      	movs	r2, #47	; 0x2f
 801633e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	3303      	adds	r3, #3
 8016344:	2200      	movs	r2, #0
 8016346:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016348:	2300      	movs	r3, #0
 801634a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801634c:	7dfb      	ldrb	r3, [r7, #23]
}
 801634e:	4618      	mov	r0, r3
 8016350:	371c      	adds	r7, #28
 8016352:	46bd      	mov	sp, r7
 8016354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016358:	4770      	bx	lr
 801635a:	bf00      	nop
 801635c:	2001f410 	.word	0x2001f410

08016360 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b082      	sub	sp, #8
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801636a:	2200      	movs	r2, #0
 801636c:	6839      	ldr	r1, [r7, #0]
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f7ff ffaa 	bl	80162c8 <FATFS_LinkDriverEx>
 8016374:	4603      	mov	r3, r0
}
 8016376:	4618      	mov	r0, r3
 8016378:	3708      	adds	r7, #8
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}

0801637e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801637e:	b480      	push	{r7}
 8016380:	b085      	sub	sp, #20
 8016382:	af00      	add	r7, sp, #0
 8016384:	4603      	mov	r3, r0
 8016386:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016388:	2300      	movs	r3, #0
 801638a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801638c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016390:	2b84      	cmp	r3, #132	; 0x84
 8016392:	d005      	beq.n	80163a0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8016394:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	4413      	add	r3, r2
 801639c:	3303      	adds	r3, #3
 801639e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80163a0:	68fb      	ldr	r3, [r7, #12]
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	3714      	adds	r7, #20
 80163a6:	46bd      	mov	sp, r7
 80163a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ac:	4770      	bx	lr

080163ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80163ae:	b480      	push	{r7}
 80163b0:	b083      	sub	sp, #12
 80163b2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80163b4:	f3ef 8305 	mrs	r3, IPSR
 80163b8:	607b      	str	r3, [r7, #4]
  return(result);
 80163ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80163bc:	2b00      	cmp	r3, #0
 80163be:	bf14      	ite	ne
 80163c0:	2301      	movne	r3, #1
 80163c2:	2300      	moveq	r3, #0
 80163c4:	b2db      	uxtb	r3, r3
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	370c      	adds	r7, #12
 80163ca:	46bd      	mov	sp, r7
 80163cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d0:	4770      	bx	lr

080163d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80163d2:	b580      	push	{r7, lr}
 80163d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80163d6:	f001 f9e7 	bl	80177a8 <vTaskStartScheduler>
  
  return osOK;
 80163da:	2300      	movs	r3, #0
}
 80163dc:	4618      	mov	r0, r3
 80163de:	bd80      	pop	{r7, pc}

080163e0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80163e4:	f001 fe3a 	bl	801805c <xTaskGetSchedulerState>
 80163e8:	4603      	mov	r3, r0
 80163ea:	2b01      	cmp	r3, #1
 80163ec:	d101      	bne.n	80163f2 <osKernelRunning+0x12>
    return 0;
 80163ee:	2300      	movs	r3, #0
 80163f0:	e000      	b.n	80163f4 <osKernelRunning+0x14>
  else
    return 1;
 80163f2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	bd80      	pop	{r7, pc}

080163f8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80163fc:	f7ff ffd7 	bl	80163ae <inHandlerMode>
 8016400:	4603      	mov	r3, r0
 8016402:	2b00      	cmp	r3, #0
 8016404:	d003      	beq.n	801640e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8016406:	f001 faef 	bl	80179e8 <xTaskGetTickCountFromISR>
 801640a:	4603      	mov	r3, r0
 801640c:	e002      	b.n	8016414 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801640e:	f001 fadb 	bl	80179c8 <xTaskGetTickCount>
 8016412:	4603      	mov	r3, r0
  }
}
 8016414:	4618      	mov	r0, r3
 8016416:	bd80      	pop	{r7, pc}

08016418 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801641a:	b089      	sub	sp, #36	; 0x24
 801641c:	af04      	add	r7, sp, #16
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	695b      	ldr	r3, [r3, #20]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d020      	beq.n	801646c <osThreadCreate+0x54>
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	699b      	ldr	r3, [r3, #24]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d01c      	beq.n	801646c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	685c      	ldr	r4, [r3, #4]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681d      	ldr	r5, [r3, #0]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	691e      	ldr	r6, [r3, #16]
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016444:	4618      	mov	r0, r3
 8016446:	f7ff ff9a 	bl	801637e <makeFreeRtosPriority>
 801644a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	695b      	ldr	r3, [r3, #20]
 8016450:	687a      	ldr	r2, [r7, #4]
 8016452:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016454:	9202      	str	r2, [sp, #8]
 8016456:	9301      	str	r3, [sp, #4]
 8016458:	9100      	str	r1, [sp, #0]
 801645a:	683b      	ldr	r3, [r7, #0]
 801645c:	4632      	mov	r2, r6
 801645e:	4629      	mov	r1, r5
 8016460:	4620      	mov	r0, r4
 8016462:	f000 ffc5 	bl	80173f0 <xTaskCreateStatic>
 8016466:	4603      	mov	r3, r0
 8016468:	60fb      	str	r3, [r7, #12]
 801646a:	e01c      	b.n	80164a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	685c      	ldr	r4, [r3, #4]
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016478:	b29e      	uxth	r6, r3
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016480:	4618      	mov	r0, r3
 8016482:	f7ff ff7c 	bl	801637e <makeFreeRtosPriority>
 8016486:	4602      	mov	r2, r0
 8016488:	f107 030c 	add.w	r3, r7, #12
 801648c:	9301      	str	r3, [sp, #4]
 801648e:	9200      	str	r2, [sp, #0]
 8016490:	683b      	ldr	r3, [r7, #0]
 8016492:	4632      	mov	r2, r6
 8016494:	4629      	mov	r1, r5
 8016496:	4620      	mov	r0, r4
 8016498:	f001 f80d 	bl	80174b6 <xTaskCreate>
 801649c:	4603      	mov	r3, r0
 801649e:	2b01      	cmp	r3, #1
 80164a0:	d001      	beq.n	80164a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80164a2:	2300      	movs	r3, #0
 80164a4:	e000      	b.n	80164a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80164a6:	68fb      	ldr	r3, [r7, #12]
}
 80164a8:	4618      	mov	r0, r3
 80164aa:	3714      	adds	r7, #20
 80164ac:	46bd      	mov	sp, r7
 80164ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b084      	sub	sp, #16
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d001      	beq.n	80164c6 <osDelay+0x16>
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	e000      	b.n	80164c8 <osDelay+0x18>
 80164c6:	2301      	movs	r3, #1
 80164c8:	4618      	mov	r0, r3
 80164ca:	f001 f937 	bl	801773c <vTaskDelay>
  
  return osOK;
 80164ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3710      	adds	r7, #16
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}

080164d8 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b086      	sub	sp, #24
 80164dc:	af02      	add	r7, sp, #8
 80164de:	6078      	str	r0, [r7, #4]
 80164e0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80164e2:	2300      	movs	r3, #0
 80164e4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80164e6:	2300      	movs	r3, #0
 80164e8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80164ea:	f7ff ff60 	bl	80163ae <inHandlerMode>
 80164ee:	4603      	mov	r3, r0
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d01c      	beq.n	801652e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80164f4:	6839      	ldr	r1, [r7, #0]
 80164f6:	f107 0208 	add.w	r2, r7, #8
 80164fa:	f107 030c 	add.w	r3, r7, #12
 80164fe:	9300      	str	r3, [sp, #0]
 8016500:	4613      	mov	r3, r2
 8016502:	2201      	movs	r2, #1
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f001 ff67 	bl	80183d8 <xTaskGenericNotifyFromISR>
 801650a:	4603      	mov	r3, r0
 801650c:	2b01      	cmp	r3, #1
 801650e:	d002      	beq.n	8016516 <osSignalSet+0x3e>
      return 0x80000000;
 8016510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016514:	e019      	b.n	801654a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d015      	beq.n	8016548 <osSignalSet+0x70>
 801651c:	4b0d      	ldr	r3, [pc, #52]	; (8016554 <osSignalSet+0x7c>)
 801651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016522:	601a      	str	r2, [r3, #0]
 8016524:	f3bf 8f4f 	dsb	sy
 8016528:	f3bf 8f6f 	isb	sy
 801652c:	e00c      	b.n	8016548 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 801652e:	6839      	ldr	r1, [r7, #0]
 8016530:	f107 0308 	add.w	r3, r7, #8
 8016534:	2201      	movs	r2, #1
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f001 fe92 	bl	8018260 <xTaskGenericNotify>
 801653c:	4603      	mov	r3, r0
 801653e:	2b01      	cmp	r3, #1
 8016540:	d002      	beq.n	8016548 <osSignalSet+0x70>
    return 0x80000000;
 8016542:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016546:	e000      	b.n	801654a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8016548:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 801654a:	4618      	mov	r0, r3
 801654c:	3710      	adds	r7, #16
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	e000ed04 	.word	0xe000ed04

08016558 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8016558:	b590      	push	{r4, r7, lr}
 801655a:	b089      	sub	sp, #36	; 0x24
 801655c:	af00      	add	r7, sp, #0
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8016564:	2300      	movs	r3, #0
 8016566:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8016568:	2300      	movs	r3, #0
 801656a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016572:	d103      	bne.n	801657c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8016574:	f04f 33ff 	mov.w	r3, #4294967295
 8016578:	61fb      	str	r3, [r7, #28]
 801657a:	e009      	b.n	8016590 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d006      	beq.n	8016590 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8016586:	69fb      	ldr	r3, [r7, #28]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d101      	bne.n	8016590 <osSignalWait+0x38>
      ticks = 1;
 801658c:	2301      	movs	r3, #1
 801658e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8016590:	f7ff ff0d 	bl	80163ae <inHandlerMode>
 8016594:	4603      	mov	r3, r0
 8016596:	2b00      	cmp	r3, #0
 8016598:	d002      	beq.n	80165a0 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801659a:	2382      	movs	r3, #130	; 0x82
 801659c:	613b      	str	r3, [r7, #16]
 801659e:	e01b      	b.n	80165d8 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80165a0:	68b9      	ldr	r1, [r7, #8]
 80165a2:	f107 0310 	add.w	r3, r7, #16
 80165a6:	1d1a      	adds	r2, r3, #4
 80165a8:	69fb      	ldr	r3, [r7, #28]
 80165aa:	2000      	movs	r0, #0
 80165ac:	f001 fdfe 	bl	80181ac <xTaskNotifyWait>
 80165b0:	4603      	mov	r3, r0
 80165b2:	2b01      	cmp	r3, #1
 80165b4:	d008      	beq.n	80165c8 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80165b6:	69fb      	ldr	r3, [r7, #28]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d102      	bne.n	80165c2 <osSignalWait+0x6a>
 80165bc:	2300      	movs	r3, #0
 80165be:	613b      	str	r3, [r7, #16]
 80165c0:	e00a      	b.n	80165d8 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80165c2:	2340      	movs	r3, #64	; 0x40
 80165c4:	613b      	str	r3, [r7, #16]
 80165c6:	e007      	b.n	80165d8 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80165c8:	697b      	ldr	r3, [r7, #20]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	da02      	bge.n	80165d4 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80165ce:	2386      	movs	r3, #134	; 0x86
 80165d0:	613b      	str	r3, [r7, #16]
 80165d2:	e001      	b.n	80165d8 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80165d4:	2308      	movs	r3, #8
 80165d6:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	461c      	mov	r4, r3
 80165dc:	f107 0310 	add.w	r3, r7, #16
 80165e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80165e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	3724      	adds	r7, #36	; 0x24
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd90      	pop	{r4, r7, pc}

080165f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80165f0:	b590      	push	{r4, r7, lr}
 80165f2:	b085      	sub	sp, #20
 80165f4:	af02      	add	r7, sp, #8
 80165f6:	6078      	str	r0, [r7, #4]
 80165f8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	689b      	ldr	r3, [r3, #8]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d011      	beq.n	8016626 <osMessageCreate+0x36>
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	68db      	ldr	r3, [r3, #12]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d00d      	beq.n	8016626 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	6818      	ldr	r0, [r3, #0]
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	6859      	ldr	r1, [r3, #4]
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	689a      	ldr	r2, [r3, #8]
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	68db      	ldr	r3, [r3, #12]
 801661a:	2400      	movs	r4, #0
 801661c:	9400      	str	r4, [sp, #0]
 801661e:	f000 f9e1 	bl	80169e4 <xQueueGenericCreateStatic>
 8016622:	4603      	mov	r3, r0
 8016624:	e008      	b.n	8016638 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6818      	ldr	r0, [r3, #0]
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	2200      	movs	r2, #0
 8016630:	4619      	mov	r1, r3
 8016632:	f000 fa59 	bl	8016ae8 <xQueueGenericCreate>
 8016636:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8016638:	4618      	mov	r0, r3
 801663a:	370c      	adds	r7, #12
 801663c:	46bd      	mov	sp, r7
 801663e:	bd90      	pop	{r4, r7, pc}

08016640 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b086      	sub	sp, #24
 8016644:	af00      	add	r7, sp, #0
 8016646:	60f8      	str	r0, [r7, #12]
 8016648:	60b9      	str	r1, [r7, #8]
 801664a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801664c:	2300      	movs	r3, #0
 801664e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8016654:	697b      	ldr	r3, [r7, #20]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d101      	bne.n	801665e <osMessagePut+0x1e>
    ticks = 1;
 801665a:	2301      	movs	r3, #1
 801665c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801665e:	f7ff fea6 	bl	80163ae <inHandlerMode>
 8016662:	4603      	mov	r3, r0
 8016664:	2b00      	cmp	r3, #0
 8016666:	d018      	beq.n	801669a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016668:	f107 0210 	add.w	r2, r7, #16
 801666c:	f107 0108 	add.w	r1, r7, #8
 8016670:	2300      	movs	r3, #0
 8016672:	68f8      	ldr	r0, [r7, #12]
 8016674:	f000 fba0 	bl	8016db8 <xQueueGenericSendFromISR>
 8016678:	4603      	mov	r3, r0
 801667a:	2b01      	cmp	r3, #1
 801667c:	d001      	beq.n	8016682 <osMessagePut+0x42>
      return osErrorOS;
 801667e:	23ff      	movs	r3, #255	; 0xff
 8016680:	e018      	b.n	80166b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016682:	693b      	ldr	r3, [r7, #16]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d014      	beq.n	80166b2 <osMessagePut+0x72>
 8016688:	4b0c      	ldr	r3, [pc, #48]	; (80166bc <osMessagePut+0x7c>)
 801668a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801668e:	601a      	str	r2, [r3, #0]
 8016690:	f3bf 8f4f 	dsb	sy
 8016694:	f3bf 8f6f 	isb	sy
 8016698:	e00b      	b.n	80166b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801669a:	f107 0108 	add.w	r1, r7, #8
 801669e:	2300      	movs	r3, #0
 80166a0:	697a      	ldr	r2, [r7, #20]
 80166a2:	68f8      	ldr	r0, [r7, #12]
 80166a4:	f000 fa82 	bl	8016bac <xQueueGenericSend>
 80166a8:	4603      	mov	r3, r0
 80166aa:	2b01      	cmp	r3, #1
 80166ac:	d001      	beq.n	80166b2 <osMessagePut+0x72>
      return osErrorOS;
 80166ae:	23ff      	movs	r3, #255	; 0xff
 80166b0:	e000      	b.n	80166b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80166b2:	2300      	movs	r3, #0
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3718      	adds	r7, #24
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	e000ed04 	.word	0xe000ed04

080166c0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80166c0:	b590      	push	{r4, r7, lr}
 80166c2:	b08b      	sub	sp, #44	; 0x2c
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	60b9      	str	r1, [r7, #8]
 80166ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80166cc:	68bb      	ldr	r3, [r7, #8]
 80166ce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80166d0:	2300      	movs	r3, #0
 80166d2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d10a      	bne.n	80166f0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80166da:	2380      	movs	r3, #128	; 0x80
 80166dc:	617b      	str	r3, [r7, #20]
    return event;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	461c      	mov	r4, r3
 80166e2:	f107 0314 	add.w	r3, r7, #20
 80166e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80166ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80166ee:	e054      	b.n	801679a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80166f0:	2300      	movs	r3, #0
 80166f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80166f4:	2300      	movs	r3, #0
 80166f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166fe:	d103      	bne.n	8016708 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016700:	f04f 33ff 	mov.w	r3, #4294967295
 8016704:	627b      	str	r3, [r7, #36]	; 0x24
 8016706:	e009      	b.n	801671c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d006      	beq.n	801671c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8016712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016714:	2b00      	cmp	r3, #0
 8016716:	d101      	bne.n	801671c <osMessageGet+0x5c>
      ticks = 1;
 8016718:	2301      	movs	r3, #1
 801671a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801671c:	f7ff fe47 	bl	80163ae <inHandlerMode>
 8016720:	4603      	mov	r3, r0
 8016722:	2b00      	cmp	r3, #0
 8016724:	d01c      	beq.n	8016760 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016726:	f107 0220 	add.w	r2, r7, #32
 801672a:	f107 0314 	add.w	r3, r7, #20
 801672e:	3304      	adds	r3, #4
 8016730:	4619      	mov	r1, r3
 8016732:	68b8      	ldr	r0, [r7, #8]
 8016734:	f000 fcc6 	bl	80170c4 <xQueueReceiveFromISR>
 8016738:	4603      	mov	r3, r0
 801673a:	2b01      	cmp	r3, #1
 801673c:	d102      	bne.n	8016744 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801673e:	2310      	movs	r3, #16
 8016740:	617b      	str	r3, [r7, #20]
 8016742:	e001      	b.n	8016748 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8016744:	2300      	movs	r3, #0
 8016746:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016748:	6a3b      	ldr	r3, [r7, #32]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d01d      	beq.n	801678a <osMessageGet+0xca>
 801674e:	4b15      	ldr	r3, [pc, #84]	; (80167a4 <osMessageGet+0xe4>)
 8016750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016754:	601a      	str	r2, [r3, #0]
 8016756:	f3bf 8f4f 	dsb	sy
 801675a:	f3bf 8f6f 	isb	sy
 801675e:	e014      	b.n	801678a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8016760:	f107 0314 	add.w	r3, r7, #20
 8016764:	3304      	adds	r3, #4
 8016766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016768:	4619      	mov	r1, r3
 801676a:	68b8      	ldr	r0, [r7, #8]
 801676c:	f000 fbc4 	bl	8016ef8 <xQueueReceive>
 8016770:	4603      	mov	r3, r0
 8016772:	2b01      	cmp	r3, #1
 8016774:	d102      	bne.n	801677c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8016776:	2310      	movs	r3, #16
 8016778:	617b      	str	r3, [r7, #20]
 801677a:	e006      	b.n	801678a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801677e:	2b00      	cmp	r3, #0
 8016780:	d101      	bne.n	8016786 <osMessageGet+0xc6>
 8016782:	2300      	movs	r3, #0
 8016784:	e000      	b.n	8016788 <osMessageGet+0xc8>
 8016786:	2340      	movs	r3, #64	; 0x40
 8016788:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	461c      	mov	r4, r3
 801678e:	f107 0314 	add.w	r3, r7, #20
 8016792:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801679a:	68f8      	ldr	r0, [r7, #12]
 801679c:	372c      	adds	r7, #44	; 0x2c
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd90      	pop	{r4, r7, pc}
 80167a2:	bf00      	nop
 80167a4:	e000ed04 	.word	0xe000ed04

080167a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80167a8:	b480      	push	{r7}
 80167aa:	b083      	sub	sp, #12
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f103 0208 	add.w	r2, r3, #8
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f04f 32ff 	mov.w	r2, #4294967295
 80167c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	f103 0208 	add.w	r2, r3, #8
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f103 0208 	add.w	r2, r3, #8
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	2200      	movs	r2, #0
 80167da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80167dc:	bf00      	nop
 80167de:	370c      	adds	r7, #12
 80167e0:	46bd      	mov	sp, r7
 80167e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e6:	4770      	bx	lr

080167e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80167e8:	b480      	push	{r7}
 80167ea:	b083      	sub	sp, #12
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2200      	movs	r2, #0
 80167f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80167f6:	bf00      	nop
 80167f8:	370c      	adds	r7, #12
 80167fa:	46bd      	mov	sp, r7
 80167fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016800:	4770      	bx	lr

08016802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016802:	b480      	push	{r7}
 8016804:	b085      	sub	sp, #20
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
 801680a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	68fa      	ldr	r2, [r7, #12]
 8016816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	689a      	ldr	r2, [r3, #8]
 801681c:	683b      	ldr	r3, [r7, #0]
 801681e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	689b      	ldr	r3, [r3, #8]
 8016824:	683a      	ldr	r2, [r7, #0]
 8016826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	683a      	ldr	r2, [r7, #0]
 801682c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	687a      	ldr	r2, [r7, #4]
 8016832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	1c5a      	adds	r2, r3, #1
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	601a      	str	r2, [r3, #0]
}
 801683e:	bf00      	nop
 8016840:	3714      	adds	r7, #20
 8016842:	46bd      	mov	sp, r7
 8016844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016848:	4770      	bx	lr

0801684a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801684a:	b480      	push	{r7}
 801684c:	b085      	sub	sp, #20
 801684e:	af00      	add	r7, sp, #0
 8016850:	6078      	str	r0, [r7, #4]
 8016852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801685a:	68bb      	ldr	r3, [r7, #8]
 801685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016860:	d103      	bne.n	801686a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	691b      	ldr	r3, [r3, #16]
 8016866:	60fb      	str	r3, [r7, #12]
 8016868:	e00c      	b.n	8016884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	3308      	adds	r3, #8
 801686e:	60fb      	str	r3, [r7, #12]
 8016870:	e002      	b.n	8016878 <vListInsert+0x2e>
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	685b      	ldr	r3, [r3, #4]
 8016876:	60fb      	str	r3, [r7, #12]
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	685b      	ldr	r3, [r3, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	68ba      	ldr	r2, [r7, #8]
 8016880:	429a      	cmp	r2, r3
 8016882:	d2f6      	bcs.n	8016872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	685a      	ldr	r2, [r3, #4]
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801688c:	683b      	ldr	r3, [r7, #0]
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	683a      	ldr	r2, [r7, #0]
 8016892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	68fa      	ldr	r2, [r7, #12]
 8016898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	683a      	ldr	r2, [r7, #0]
 801689e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	687a      	ldr	r2, [r7, #4]
 80168a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	1c5a      	adds	r2, r3, #1
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	601a      	str	r2, [r3, #0]
}
 80168b0:	bf00      	nop
 80168b2:	3714      	adds	r7, #20
 80168b4:	46bd      	mov	sp, r7
 80168b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ba:	4770      	bx	lr

080168bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80168bc:	b480      	push	{r7}
 80168be:	b085      	sub	sp, #20
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	691b      	ldr	r3, [r3, #16]
 80168c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	685b      	ldr	r3, [r3, #4]
 80168ce:	687a      	ldr	r2, [r7, #4]
 80168d0:	6892      	ldr	r2, [r2, #8]
 80168d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	689b      	ldr	r3, [r3, #8]
 80168d8:	687a      	ldr	r2, [r7, #4]
 80168da:	6852      	ldr	r2, [r2, #4]
 80168dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	429a      	cmp	r2, r3
 80168e6:	d103      	bne.n	80168f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	689a      	ldr	r2, [r3, #8]
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2200      	movs	r2, #0
 80168f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	1e5a      	subs	r2, r3, #1
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	681b      	ldr	r3, [r3, #0]
}
 8016904:	4618      	mov	r0, r3
 8016906:	3714      	adds	r7, #20
 8016908:	46bd      	mov	sp, r7
 801690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690e:	4770      	bx	lr

08016910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d10c      	bne.n	801693e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016928:	b672      	cpsid	i
 801692a:	f383 8811 	msr	BASEPRI, r3
 801692e:	f3bf 8f6f 	isb	sy
 8016932:	f3bf 8f4f 	dsb	sy
 8016936:	b662      	cpsie	i
 8016938:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801693a:	bf00      	nop
 801693c:	e7fe      	b.n	801693c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801693e:	f001 ff9d 	bl	801887c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	681a      	ldr	r2, [r3, #0]
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801694a:	68f9      	ldr	r1, [r7, #12]
 801694c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801694e:	fb01 f303 	mul.w	r3, r1, r3
 8016952:	441a      	add	r2, r3
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	2200      	movs	r2, #0
 801695c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	681a      	ldr	r2, [r3, #0]
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	681a      	ldr	r2, [r3, #0]
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801696e:	3b01      	subs	r3, #1
 8016970:	68f9      	ldr	r1, [r7, #12]
 8016972:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016974:	fb01 f303 	mul.w	r3, r1, r3
 8016978:	441a      	add	r2, r3
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	22ff      	movs	r2, #255	; 0xff
 8016982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	22ff      	movs	r2, #255	; 0xff
 801698a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d114      	bne.n	80169be <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	691b      	ldr	r3, [r3, #16]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d01a      	beq.n	80169d2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	3310      	adds	r3, #16
 80169a0:	4618      	mov	r0, r3
 80169a2:	f001 f995 	bl	8017cd0 <xTaskRemoveFromEventList>
 80169a6:	4603      	mov	r3, r0
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d012      	beq.n	80169d2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80169ac:	4b0c      	ldr	r3, [pc, #48]	; (80169e0 <xQueueGenericReset+0xd0>)
 80169ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169b2:	601a      	str	r2, [r3, #0]
 80169b4:	f3bf 8f4f 	dsb	sy
 80169b8:	f3bf 8f6f 	isb	sy
 80169bc:	e009      	b.n	80169d2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	3310      	adds	r3, #16
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7ff fef0 	bl	80167a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	3324      	adds	r3, #36	; 0x24
 80169cc:	4618      	mov	r0, r3
 80169ce:	f7ff feeb 	bl	80167a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80169d2:	f001 ff87 	bl	80188e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80169d6:	2301      	movs	r3, #1
}
 80169d8:	4618      	mov	r0, r3
 80169da:	3710      	adds	r7, #16
 80169dc:	46bd      	mov	sp, r7
 80169de:	bd80      	pop	{r7, pc}
 80169e0:	e000ed04 	.word	0xe000ed04

080169e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b08e      	sub	sp, #56	; 0x38
 80169e8:	af02      	add	r7, sp, #8
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	607a      	str	r2, [r7, #4]
 80169f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d10c      	bne.n	8016a12 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80169f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169fc:	b672      	cpsid	i
 80169fe:	f383 8811 	msr	BASEPRI, r3
 8016a02:	f3bf 8f6f 	isb	sy
 8016a06:	f3bf 8f4f 	dsb	sy
 8016a0a:	b662      	cpsie	i
 8016a0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016a0e:	bf00      	nop
 8016a10:	e7fe      	b.n	8016a10 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d10c      	bne.n	8016a32 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8016a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a1c:	b672      	cpsid	i
 8016a1e:	f383 8811 	msr	BASEPRI, r3
 8016a22:	f3bf 8f6f 	isb	sy
 8016a26:	f3bf 8f4f 	dsb	sy
 8016a2a:	b662      	cpsie	i
 8016a2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016a2e:	bf00      	nop
 8016a30:	e7fe      	b.n	8016a30 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d002      	beq.n	8016a3e <xQueueGenericCreateStatic+0x5a>
 8016a38:	68bb      	ldr	r3, [r7, #8]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d001      	beq.n	8016a42 <xQueueGenericCreateStatic+0x5e>
 8016a3e:	2301      	movs	r3, #1
 8016a40:	e000      	b.n	8016a44 <xQueueGenericCreateStatic+0x60>
 8016a42:	2300      	movs	r3, #0
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d10c      	bne.n	8016a62 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8016a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a4c:	b672      	cpsid	i
 8016a4e:	f383 8811 	msr	BASEPRI, r3
 8016a52:	f3bf 8f6f 	isb	sy
 8016a56:	f3bf 8f4f 	dsb	sy
 8016a5a:	b662      	cpsie	i
 8016a5c:	623b      	str	r3, [r7, #32]
}
 8016a5e:	bf00      	nop
 8016a60:	e7fe      	b.n	8016a60 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d102      	bne.n	8016a6e <xQueueGenericCreateStatic+0x8a>
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d101      	bne.n	8016a72 <xQueueGenericCreateStatic+0x8e>
 8016a6e:	2301      	movs	r3, #1
 8016a70:	e000      	b.n	8016a74 <xQueueGenericCreateStatic+0x90>
 8016a72:	2300      	movs	r3, #0
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d10c      	bne.n	8016a92 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8016a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a7c:	b672      	cpsid	i
 8016a7e:	f383 8811 	msr	BASEPRI, r3
 8016a82:	f3bf 8f6f 	isb	sy
 8016a86:	f3bf 8f4f 	dsb	sy
 8016a8a:	b662      	cpsie	i
 8016a8c:	61fb      	str	r3, [r7, #28]
}
 8016a8e:	bf00      	nop
 8016a90:	e7fe      	b.n	8016a90 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016a92:	2348      	movs	r3, #72	; 0x48
 8016a94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016a96:	697b      	ldr	r3, [r7, #20]
 8016a98:	2b48      	cmp	r3, #72	; 0x48
 8016a9a:	d00c      	beq.n	8016ab6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8016a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa0:	b672      	cpsid	i
 8016aa2:	f383 8811 	msr	BASEPRI, r3
 8016aa6:	f3bf 8f6f 	isb	sy
 8016aaa:	f3bf 8f4f 	dsb	sy
 8016aae:	b662      	cpsie	i
 8016ab0:	61bb      	str	r3, [r7, #24]
}
 8016ab2:	bf00      	nop
 8016ab4:	e7fe      	b.n	8016ab4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016ab6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d00d      	beq.n	8016ade <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016aca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ad0:	9300      	str	r3, [sp, #0]
 8016ad2:	4613      	mov	r3, r2
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	68b9      	ldr	r1, [r7, #8]
 8016ad8:	68f8      	ldr	r0, [r7, #12]
 8016ada:	f000 f847 	bl	8016b6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3730      	adds	r7, #48	; 0x30
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}

08016ae8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b08a      	sub	sp, #40	; 0x28
 8016aec:	af02      	add	r7, sp, #8
 8016aee:	60f8      	str	r0, [r7, #12]
 8016af0:	60b9      	str	r1, [r7, #8]
 8016af2:	4613      	mov	r3, r2
 8016af4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d10c      	bne.n	8016b16 <xQueueGenericCreate+0x2e>
	__asm volatile
 8016afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b00:	b672      	cpsid	i
 8016b02:	f383 8811 	msr	BASEPRI, r3
 8016b06:	f3bf 8f6f 	isb	sy
 8016b0a:	f3bf 8f4f 	dsb	sy
 8016b0e:	b662      	cpsie	i
 8016b10:	613b      	str	r3, [r7, #16]
}
 8016b12:	bf00      	nop
 8016b14:	e7fe      	b.n	8016b14 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d102      	bne.n	8016b22 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	61fb      	str	r3, [r7, #28]
 8016b20:	e004      	b.n	8016b2c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	68ba      	ldr	r2, [r7, #8]
 8016b26:	fb02 f303 	mul.w	r3, r2, r3
 8016b2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016b2c:	69fb      	ldr	r3, [r7, #28]
 8016b2e:	3348      	adds	r3, #72	; 0x48
 8016b30:	4618      	mov	r0, r3
 8016b32:	f001 ffcf 	bl	8018ad4 <pvPortMalloc>
 8016b36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016b38:	69bb      	ldr	r3, [r7, #24]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d011      	beq.n	8016b62 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016b3e:	69bb      	ldr	r3, [r7, #24]
 8016b40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	3348      	adds	r3, #72	; 0x48
 8016b46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016b48:	69bb      	ldr	r3, [r7, #24]
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016b50:	79fa      	ldrb	r2, [r7, #7]
 8016b52:	69bb      	ldr	r3, [r7, #24]
 8016b54:	9300      	str	r3, [sp, #0]
 8016b56:	4613      	mov	r3, r2
 8016b58:	697a      	ldr	r2, [r7, #20]
 8016b5a:	68b9      	ldr	r1, [r7, #8]
 8016b5c:	68f8      	ldr	r0, [r7, #12]
 8016b5e:	f000 f805 	bl	8016b6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016b62:	69bb      	ldr	r3, [r7, #24]
	}
 8016b64:	4618      	mov	r0, r3
 8016b66:	3720      	adds	r7, #32
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b084      	sub	sp, #16
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	60f8      	str	r0, [r7, #12]
 8016b74:	60b9      	str	r1, [r7, #8]
 8016b76:	607a      	str	r2, [r7, #4]
 8016b78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016b7a:	68bb      	ldr	r3, [r7, #8]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d103      	bne.n	8016b88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016b80:	69bb      	ldr	r3, [r7, #24]
 8016b82:	69ba      	ldr	r2, [r7, #24]
 8016b84:	601a      	str	r2, [r3, #0]
 8016b86:	e002      	b.n	8016b8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016b88:	69bb      	ldr	r3, [r7, #24]
 8016b8a:	687a      	ldr	r2, [r7, #4]
 8016b8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	68fa      	ldr	r2, [r7, #12]
 8016b92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016b94:	69bb      	ldr	r3, [r7, #24]
 8016b96:	68ba      	ldr	r2, [r7, #8]
 8016b98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016b9a:	2101      	movs	r1, #1
 8016b9c:	69b8      	ldr	r0, [r7, #24]
 8016b9e:	f7ff feb7 	bl	8016910 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016ba2:	bf00      	nop
 8016ba4:	3710      	adds	r7, #16
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}
	...

08016bac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b08e      	sub	sp, #56	; 0x38
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60f8      	str	r0, [r7, #12]
 8016bb4:	60b9      	str	r1, [r7, #8]
 8016bb6:	607a      	str	r2, [r7, #4]
 8016bb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d10c      	bne.n	8016be2 <xQueueGenericSend+0x36>
	__asm volatile
 8016bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bcc:	b672      	cpsid	i
 8016bce:	f383 8811 	msr	BASEPRI, r3
 8016bd2:	f3bf 8f6f 	isb	sy
 8016bd6:	f3bf 8f4f 	dsb	sy
 8016bda:	b662      	cpsie	i
 8016bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016bde:	bf00      	nop
 8016be0:	e7fe      	b.n	8016be0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d103      	bne.n	8016bf0 <xQueueGenericSend+0x44>
 8016be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d101      	bne.n	8016bf4 <xQueueGenericSend+0x48>
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	e000      	b.n	8016bf6 <xQueueGenericSend+0x4a>
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d10c      	bne.n	8016c14 <xQueueGenericSend+0x68>
	__asm volatile
 8016bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bfe:	b672      	cpsid	i
 8016c00:	f383 8811 	msr	BASEPRI, r3
 8016c04:	f3bf 8f6f 	isb	sy
 8016c08:	f3bf 8f4f 	dsb	sy
 8016c0c:	b662      	cpsie	i
 8016c0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016c10:	bf00      	nop
 8016c12:	e7fe      	b.n	8016c12 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	2b02      	cmp	r3, #2
 8016c18:	d103      	bne.n	8016c22 <xQueueGenericSend+0x76>
 8016c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c1e:	2b01      	cmp	r3, #1
 8016c20:	d101      	bne.n	8016c26 <xQueueGenericSend+0x7a>
 8016c22:	2301      	movs	r3, #1
 8016c24:	e000      	b.n	8016c28 <xQueueGenericSend+0x7c>
 8016c26:	2300      	movs	r3, #0
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d10c      	bne.n	8016c46 <xQueueGenericSend+0x9a>
	__asm volatile
 8016c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c30:	b672      	cpsid	i
 8016c32:	f383 8811 	msr	BASEPRI, r3
 8016c36:	f3bf 8f6f 	isb	sy
 8016c3a:	f3bf 8f4f 	dsb	sy
 8016c3e:	b662      	cpsie	i
 8016c40:	623b      	str	r3, [r7, #32]
}
 8016c42:	bf00      	nop
 8016c44:	e7fe      	b.n	8016c44 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016c46:	f001 fa09 	bl	801805c <xTaskGetSchedulerState>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d102      	bne.n	8016c56 <xQueueGenericSend+0xaa>
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d101      	bne.n	8016c5a <xQueueGenericSend+0xae>
 8016c56:	2301      	movs	r3, #1
 8016c58:	e000      	b.n	8016c5c <xQueueGenericSend+0xb0>
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d10c      	bne.n	8016c7a <xQueueGenericSend+0xce>
	__asm volatile
 8016c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c64:	b672      	cpsid	i
 8016c66:	f383 8811 	msr	BASEPRI, r3
 8016c6a:	f3bf 8f6f 	isb	sy
 8016c6e:	f3bf 8f4f 	dsb	sy
 8016c72:	b662      	cpsie	i
 8016c74:	61fb      	str	r3, [r7, #28]
}
 8016c76:	bf00      	nop
 8016c78:	e7fe      	b.n	8016c78 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016c7a:	f001 fdff 	bl	801887c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c86:	429a      	cmp	r2, r3
 8016c88:	d302      	bcc.n	8016c90 <xQueueGenericSend+0xe4>
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	2b02      	cmp	r3, #2
 8016c8e:	d129      	bne.n	8016ce4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016c90:	683a      	ldr	r2, [r7, #0]
 8016c92:	68b9      	ldr	r1, [r7, #8]
 8016c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c96:	f000 fa9b 	bl	80171d0 <prvCopyDataToQueue>
 8016c9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d010      	beq.n	8016cc6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca6:	3324      	adds	r3, #36	; 0x24
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f001 f811 	bl	8017cd0 <xTaskRemoveFromEventList>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d013      	beq.n	8016cdc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016cb4:	4b3f      	ldr	r3, [pc, #252]	; (8016db4 <xQueueGenericSend+0x208>)
 8016cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cba:	601a      	str	r2, [r3, #0]
 8016cbc:	f3bf 8f4f 	dsb	sy
 8016cc0:	f3bf 8f6f 	isb	sy
 8016cc4:	e00a      	b.n	8016cdc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d007      	beq.n	8016cdc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016ccc:	4b39      	ldr	r3, [pc, #228]	; (8016db4 <xQueueGenericSend+0x208>)
 8016cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cd2:	601a      	str	r2, [r3, #0]
 8016cd4:	f3bf 8f4f 	dsb	sy
 8016cd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016cdc:	f001 fe02 	bl	80188e4 <vPortExitCritical>
				return pdPASS;
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	e063      	b.n	8016dac <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d103      	bne.n	8016cf2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016cea:	f001 fdfb 	bl	80188e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	e05c      	b.n	8016dac <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d106      	bne.n	8016d06 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016cf8:	f107 0314 	add.w	r3, r7, #20
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f001 f84b 	bl	8017d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016d02:	2301      	movs	r3, #1
 8016d04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016d06:	f001 fded 	bl	80188e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016d0a:	f000 fdb1 	bl	8017870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016d0e:	f001 fdb5 	bl	801887c <vPortEnterCritical>
 8016d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d18:	b25b      	sxtb	r3, r3
 8016d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d1e:	d103      	bne.n	8016d28 <xQueueGenericSend+0x17c>
 8016d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d22:	2200      	movs	r2, #0
 8016d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d2e:	b25b      	sxtb	r3, r3
 8016d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d34:	d103      	bne.n	8016d3e <xQueueGenericSend+0x192>
 8016d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d38:	2200      	movs	r2, #0
 8016d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016d3e:	f001 fdd1 	bl	80188e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d42:	1d3a      	adds	r2, r7, #4
 8016d44:	f107 0314 	add.w	r3, r7, #20
 8016d48:	4611      	mov	r1, r2
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f001 f83a 	bl	8017dc4 <xTaskCheckForTimeOut>
 8016d50:	4603      	mov	r3, r0
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d124      	bne.n	8016da0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d58:	f000 fb32 	bl	80173c0 <prvIsQueueFull>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d018      	beq.n	8016d94 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d64:	3310      	adds	r3, #16
 8016d66:	687a      	ldr	r2, [r7, #4]
 8016d68:	4611      	mov	r1, r2
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f000 ff8a 	bl	8017c84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d72:	f000 fabd 	bl	80172f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016d76:	f000 fd89 	bl	801788c <xTaskResumeAll>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	f47f af7c 	bne.w	8016c7a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8016d82:	4b0c      	ldr	r3, [pc, #48]	; (8016db4 <xQueueGenericSend+0x208>)
 8016d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d88:	601a      	str	r2, [r3, #0]
 8016d8a:	f3bf 8f4f 	dsb	sy
 8016d8e:	f3bf 8f6f 	isb	sy
 8016d92:	e772      	b.n	8016c7a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d96:	f000 faab 	bl	80172f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016d9a:	f000 fd77 	bl	801788c <xTaskResumeAll>
 8016d9e:	e76c      	b.n	8016c7a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016da2:	f000 faa5 	bl	80172f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016da6:	f000 fd71 	bl	801788c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016daa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	3738      	adds	r7, #56	; 0x38
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}
 8016db4:	e000ed04 	.word	0xe000ed04

08016db8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b08e      	sub	sp, #56	; 0x38
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	60f8      	str	r0, [r7, #12]
 8016dc0:	60b9      	str	r1, [r7, #8]
 8016dc2:	607a      	str	r2, [r7, #4]
 8016dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d10c      	bne.n	8016dea <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8016dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dd4:	b672      	cpsid	i
 8016dd6:	f383 8811 	msr	BASEPRI, r3
 8016dda:	f3bf 8f6f 	isb	sy
 8016dde:	f3bf 8f4f 	dsb	sy
 8016de2:	b662      	cpsie	i
 8016de4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016de6:	bf00      	nop
 8016de8:	e7fe      	b.n	8016de8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d103      	bne.n	8016df8 <xQueueGenericSendFromISR+0x40>
 8016df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d101      	bne.n	8016dfc <xQueueGenericSendFromISR+0x44>
 8016df8:	2301      	movs	r3, #1
 8016dfa:	e000      	b.n	8016dfe <xQueueGenericSendFromISR+0x46>
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d10c      	bne.n	8016e1c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8016e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e06:	b672      	cpsid	i
 8016e08:	f383 8811 	msr	BASEPRI, r3
 8016e0c:	f3bf 8f6f 	isb	sy
 8016e10:	f3bf 8f4f 	dsb	sy
 8016e14:	b662      	cpsie	i
 8016e16:	623b      	str	r3, [r7, #32]
}
 8016e18:	bf00      	nop
 8016e1a:	e7fe      	b.n	8016e1a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	2b02      	cmp	r3, #2
 8016e20:	d103      	bne.n	8016e2a <xQueueGenericSendFromISR+0x72>
 8016e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e26:	2b01      	cmp	r3, #1
 8016e28:	d101      	bne.n	8016e2e <xQueueGenericSendFromISR+0x76>
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	e000      	b.n	8016e30 <xQueueGenericSendFromISR+0x78>
 8016e2e:	2300      	movs	r3, #0
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d10c      	bne.n	8016e4e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8016e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e38:	b672      	cpsid	i
 8016e3a:	f383 8811 	msr	BASEPRI, r3
 8016e3e:	f3bf 8f6f 	isb	sy
 8016e42:	f3bf 8f4f 	dsb	sy
 8016e46:	b662      	cpsie	i
 8016e48:	61fb      	str	r3, [r7, #28]
}
 8016e4a:	bf00      	nop
 8016e4c:	e7fe      	b.n	8016e4c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e4e:	f001 fdfd 	bl	8018a4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016e52:	f3ef 8211 	mrs	r2, BASEPRI
 8016e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e5a:	b672      	cpsid	i
 8016e5c:	f383 8811 	msr	BASEPRI, r3
 8016e60:	f3bf 8f6f 	isb	sy
 8016e64:	f3bf 8f4f 	dsb	sy
 8016e68:	b662      	cpsie	i
 8016e6a:	61ba      	str	r2, [r7, #24]
 8016e6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016e6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016e70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	d302      	bcc.n	8016e84 <xQueueGenericSendFromISR+0xcc>
 8016e7e:	683b      	ldr	r3, [r7, #0]
 8016e80:	2b02      	cmp	r3, #2
 8016e82:	d12c      	bne.n	8016ede <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016e8e:	683a      	ldr	r2, [r7, #0]
 8016e90:	68b9      	ldr	r1, [r7, #8]
 8016e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e94:	f000 f99c 	bl	80171d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016e98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8016e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ea0:	d112      	bne.n	8016ec8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d016      	beq.n	8016ed8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eac:	3324      	adds	r3, #36	; 0x24
 8016eae:	4618      	mov	r0, r3
 8016eb0:	f000 ff0e 	bl	8017cd0 <xTaskRemoveFromEventList>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d00e      	beq.n	8016ed8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d00b      	beq.n	8016ed8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2201      	movs	r2, #1
 8016ec4:	601a      	str	r2, [r3, #0]
 8016ec6:	e007      	b.n	8016ed8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016ec8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016ecc:	3301      	adds	r3, #1
 8016ece:	b2db      	uxtb	r3, r3
 8016ed0:	b25a      	sxtb	r2, r3
 8016ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016ed8:	2301      	movs	r3, #1
 8016eda:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8016edc:	e001      	b.n	8016ee2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8016ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016eec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	3738      	adds	r7, #56	; 0x38
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd80      	pop	{r7, pc}

08016ef8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b08c      	sub	sp, #48	; 0x30
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	60f8      	str	r0, [r7, #12]
 8016f00:	60b9      	str	r1, [r7, #8]
 8016f02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016f04:	2300      	movs	r3, #0
 8016f06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d10c      	bne.n	8016f2c <xQueueReceive+0x34>
	__asm volatile
 8016f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f16:	b672      	cpsid	i
 8016f18:	f383 8811 	msr	BASEPRI, r3
 8016f1c:	f3bf 8f6f 	isb	sy
 8016f20:	f3bf 8f4f 	dsb	sy
 8016f24:	b662      	cpsie	i
 8016f26:	623b      	str	r3, [r7, #32]
}
 8016f28:	bf00      	nop
 8016f2a:	e7fe      	b.n	8016f2a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d103      	bne.n	8016f3a <xQueueReceive+0x42>
 8016f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d101      	bne.n	8016f3e <xQueueReceive+0x46>
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	e000      	b.n	8016f40 <xQueueReceive+0x48>
 8016f3e:	2300      	movs	r3, #0
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d10c      	bne.n	8016f5e <xQueueReceive+0x66>
	__asm volatile
 8016f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f48:	b672      	cpsid	i
 8016f4a:	f383 8811 	msr	BASEPRI, r3
 8016f4e:	f3bf 8f6f 	isb	sy
 8016f52:	f3bf 8f4f 	dsb	sy
 8016f56:	b662      	cpsie	i
 8016f58:	61fb      	str	r3, [r7, #28]
}
 8016f5a:	bf00      	nop
 8016f5c:	e7fe      	b.n	8016f5c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016f5e:	f001 f87d 	bl	801805c <xTaskGetSchedulerState>
 8016f62:	4603      	mov	r3, r0
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d102      	bne.n	8016f6e <xQueueReceive+0x76>
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d101      	bne.n	8016f72 <xQueueReceive+0x7a>
 8016f6e:	2301      	movs	r3, #1
 8016f70:	e000      	b.n	8016f74 <xQueueReceive+0x7c>
 8016f72:	2300      	movs	r3, #0
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d10c      	bne.n	8016f92 <xQueueReceive+0x9a>
	__asm volatile
 8016f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f7c:	b672      	cpsid	i
 8016f7e:	f383 8811 	msr	BASEPRI, r3
 8016f82:	f3bf 8f6f 	isb	sy
 8016f86:	f3bf 8f4f 	dsb	sy
 8016f8a:	b662      	cpsie	i
 8016f8c:	61bb      	str	r3, [r7, #24]
}
 8016f8e:	bf00      	nop
 8016f90:	e7fe      	b.n	8016f90 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016f92:	f001 fc73 	bl	801887c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d01f      	beq.n	8016fe2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016fa2:	68b9      	ldr	r1, [r7, #8]
 8016fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fa6:	f000 f97d 	bl	80172a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fac:	1e5a      	subs	r2, r3, #1
 8016fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb4:	691b      	ldr	r3, [r3, #16]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d00f      	beq.n	8016fda <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fbc:	3310      	adds	r3, #16
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f000 fe86 	bl	8017cd0 <xTaskRemoveFromEventList>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d007      	beq.n	8016fda <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016fca:	4b3d      	ldr	r3, [pc, #244]	; (80170c0 <xQueueReceive+0x1c8>)
 8016fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fd0:	601a      	str	r2, [r3, #0]
 8016fd2:	f3bf 8f4f 	dsb	sy
 8016fd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016fda:	f001 fc83 	bl	80188e4 <vPortExitCritical>
				return pdPASS;
 8016fde:	2301      	movs	r3, #1
 8016fe0:	e069      	b.n	80170b6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d103      	bne.n	8016ff0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016fe8:	f001 fc7c 	bl	80188e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016fec:	2300      	movs	r3, #0
 8016fee:	e062      	b.n	80170b6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d106      	bne.n	8017004 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016ff6:	f107 0310 	add.w	r3, r7, #16
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f000 fecc 	bl	8017d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017000:	2301      	movs	r3, #1
 8017002:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017004:	f001 fc6e 	bl	80188e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017008:	f000 fc32 	bl	8017870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801700c:	f001 fc36 	bl	801887c <vPortEnterCritical>
 8017010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017016:	b25b      	sxtb	r3, r3
 8017018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801701c:	d103      	bne.n	8017026 <xQueueReceive+0x12e>
 801701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017020:	2200      	movs	r2, #0
 8017022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801702c:	b25b      	sxtb	r3, r3
 801702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017032:	d103      	bne.n	801703c <xQueueReceive+0x144>
 8017034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017036:	2200      	movs	r2, #0
 8017038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801703c:	f001 fc52 	bl	80188e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017040:	1d3a      	adds	r2, r7, #4
 8017042:	f107 0310 	add.w	r3, r7, #16
 8017046:	4611      	mov	r1, r2
 8017048:	4618      	mov	r0, r3
 801704a:	f000 febb 	bl	8017dc4 <xTaskCheckForTimeOut>
 801704e:	4603      	mov	r3, r0
 8017050:	2b00      	cmp	r3, #0
 8017052:	d123      	bne.n	801709c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017056:	f000 f99d 	bl	8017394 <prvIsQueueEmpty>
 801705a:	4603      	mov	r3, r0
 801705c:	2b00      	cmp	r3, #0
 801705e:	d017      	beq.n	8017090 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017062:	3324      	adds	r3, #36	; 0x24
 8017064:	687a      	ldr	r2, [r7, #4]
 8017066:	4611      	mov	r1, r2
 8017068:	4618      	mov	r0, r3
 801706a:	f000 fe0b 	bl	8017c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801706e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017070:	f000 f93e 	bl	80172f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017074:	f000 fc0a 	bl	801788c <xTaskResumeAll>
 8017078:	4603      	mov	r3, r0
 801707a:	2b00      	cmp	r3, #0
 801707c:	d189      	bne.n	8016f92 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801707e:	4b10      	ldr	r3, [pc, #64]	; (80170c0 <xQueueReceive+0x1c8>)
 8017080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017084:	601a      	str	r2, [r3, #0]
 8017086:	f3bf 8f4f 	dsb	sy
 801708a:	f3bf 8f6f 	isb	sy
 801708e:	e780      	b.n	8016f92 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017092:	f000 f92d 	bl	80172f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017096:	f000 fbf9 	bl	801788c <xTaskResumeAll>
 801709a:	e77a      	b.n	8016f92 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801709c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801709e:	f000 f927 	bl	80172f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80170a2:	f000 fbf3 	bl	801788c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80170a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170a8:	f000 f974 	bl	8017394 <prvIsQueueEmpty>
 80170ac:	4603      	mov	r3, r0
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	f43f af6f 	beq.w	8016f92 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80170b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	3730      	adds	r7, #48	; 0x30
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd80      	pop	{r7, pc}
 80170be:	bf00      	nop
 80170c0:	e000ed04 	.word	0xe000ed04

080170c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b08e      	sub	sp, #56	; 0x38
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	60f8      	str	r0, [r7, #12]
 80170cc:	60b9      	str	r1, [r7, #8]
 80170ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80170d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d10c      	bne.n	80170f4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80170da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170de:	b672      	cpsid	i
 80170e0:	f383 8811 	msr	BASEPRI, r3
 80170e4:	f3bf 8f6f 	isb	sy
 80170e8:	f3bf 8f4f 	dsb	sy
 80170ec:	b662      	cpsie	i
 80170ee:	623b      	str	r3, [r7, #32]
}
 80170f0:	bf00      	nop
 80170f2:	e7fe      	b.n	80170f2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d103      	bne.n	8017102 <xQueueReceiveFromISR+0x3e>
 80170fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d101      	bne.n	8017106 <xQueueReceiveFromISR+0x42>
 8017102:	2301      	movs	r3, #1
 8017104:	e000      	b.n	8017108 <xQueueReceiveFromISR+0x44>
 8017106:	2300      	movs	r3, #0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d10c      	bne.n	8017126 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017110:	b672      	cpsid	i
 8017112:	f383 8811 	msr	BASEPRI, r3
 8017116:	f3bf 8f6f 	isb	sy
 801711a:	f3bf 8f4f 	dsb	sy
 801711e:	b662      	cpsie	i
 8017120:	61fb      	str	r3, [r7, #28]
}
 8017122:	bf00      	nop
 8017124:	e7fe      	b.n	8017124 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017126:	f001 fc91 	bl	8018a4c <vPortValidateInterruptPriority>
	__asm volatile
 801712a:	f3ef 8211 	mrs	r2, BASEPRI
 801712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017132:	b672      	cpsid	i
 8017134:	f383 8811 	msr	BASEPRI, r3
 8017138:	f3bf 8f6f 	isb	sy
 801713c:	f3bf 8f4f 	dsb	sy
 8017140:	b662      	cpsie	i
 8017142:	61ba      	str	r2, [r7, #24]
 8017144:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017146:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017148:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801714e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017152:	2b00      	cmp	r3, #0
 8017154:	d02f      	beq.n	80171b6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801715c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017160:	68b9      	ldr	r1, [r7, #8]
 8017162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017164:	f000 f89e 	bl	80172a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801716a:	1e5a      	subs	r2, r3, #1
 801716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801716e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017170:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017178:	d112      	bne.n	80171a0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801717c:	691b      	ldr	r3, [r3, #16]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d016      	beq.n	80171b0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017184:	3310      	adds	r3, #16
 8017186:	4618      	mov	r0, r3
 8017188:	f000 fda2 	bl	8017cd0 <xTaskRemoveFromEventList>
 801718c:	4603      	mov	r3, r0
 801718e:	2b00      	cmp	r3, #0
 8017190:	d00e      	beq.n	80171b0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d00b      	beq.n	80171b0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	2201      	movs	r2, #1
 801719c:	601a      	str	r2, [r3, #0]
 801719e:	e007      	b.n	80171b0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80171a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171a4:	3301      	adds	r3, #1
 80171a6:	b2db      	uxtb	r3, r3
 80171a8:	b25a      	sxtb	r2, r3
 80171aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80171b0:	2301      	movs	r3, #1
 80171b2:	637b      	str	r3, [r7, #52]	; 0x34
 80171b4:	e001      	b.n	80171ba <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80171b6:	2300      	movs	r3, #0
 80171b8:	637b      	str	r3, [r7, #52]	; 0x34
 80171ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	f383 8811 	msr	BASEPRI, r3
}
 80171c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80171c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	3738      	adds	r7, #56	; 0x38
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b086      	sub	sp, #24
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	60b9      	str	r1, [r7, #8]
 80171da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80171dc:	2300      	movs	r3, #0
 80171de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d10d      	bne.n	801720a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d14d      	bne.n	8017292 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	689b      	ldr	r3, [r3, #8]
 80171fa:	4618      	mov	r0, r3
 80171fc:	f000 ff4c 	bl	8018098 <xTaskPriorityDisinherit>
 8017200:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	2200      	movs	r2, #0
 8017206:	609a      	str	r2, [r3, #8]
 8017208:	e043      	b.n	8017292 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d119      	bne.n	8017244 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	6858      	ldr	r0, [r3, #4]
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017218:	461a      	mov	r2, r3
 801721a:	68b9      	ldr	r1, [r7, #8]
 801721c:	f002 fa28 	bl	8019670 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	685a      	ldr	r2, [r3, #4]
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017228:	441a      	add	r2, r3
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	685a      	ldr	r2, [r3, #4]
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	689b      	ldr	r3, [r3, #8]
 8017236:	429a      	cmp	r2, r3
 8017238:	d32b      	bcc.n	8017292 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	681a      	ldr	r2, [r3, #0]
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	605a      	str	r2, [r3, #4]
 8017242:	e026      	b.n	8017292 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	68d8      	ldr	r0, [r3, #12]
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801724c:	461a      	mov	r2, r3
 801724e:	68b9      	ldr	r1, [r7, #8]
 8017250:	f002 fa0e 	bl	8019670 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	68da      	ldr	r2, [r3, #12]
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801725c:	425b      	negs	r3, r3
 801725e:	441a      	add	r2, r3
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	68da      	ldr	r2, [r3, #12]
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	429a      	cmp	r2, r3
 801726e:	d207      	bcs.n	8017280 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	689a      	ldr	r2, [r3, #8]
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017278:	425b      	negs	r3, r3
 801727a:	441a      	add	r2, r3
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2b02      	cmp	r3, #2
 8017284:	d105      	bne.n	8017292 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d002      	beq.n	8017292 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801728c:	693b      	ldr	r3, [r7, #16]
 801728e:	3b01      	subs	r3, #1
 8017290:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017292:	693b      	ldr	r3, [r7, #16]
 8017294:	1c5a      	adds	r2, r3, #1
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801729a:	697b      	ldr	r3, [r7, #20]
}
 801729c:	4618      	mov	r0, r3
 801729e:	3718      	adds	r7, #24
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d018      	beq.n	80172e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	68da      	ldr	r2, [r3, #12]
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172be:	441a      	add	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	68da      	ldr	r2, [r3, #12]
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	689b      	ldr	r3, [r3, #8]
 80172cc:	429a      	cmp	r2, r3
 80172ce:	d303      	bcc.n	80172d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	681a      	ldr	r2, [r3, #0]
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	68d9      	ldr	r1, [r3, #12]
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172e0:	461a      	mov	r2, r3
 80172e2:	6838      	ldr	r0, [r7, #0]
 80172e4:	f002 f9c4 	bl	8019670 <memcpy>
	}
}
 80172e8:	bf00      	nop
 80172ea:	3708      	adds	r7, #8
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}

080172f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b084      	sub	sp, #16
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80172f8:	f001 fac0 	bl	801887c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017302:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017304:	e011      	b.n	801732a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801730a:	2b00      	cmp	r3, #0
 801730c:	d012      	beq.n	8017334 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	3324      	adds	r3, #36	; 0x24
 8017312:	4618      	mov	r0, r3
 8017314:	f000 fcdc 	bl	8017cd0 <xTaskRemoveFromEventList>
 8017318:	4603      	mov	r3, r0
 801731a:	2b00      	cmp	r3, #0
 801731c:	d001      	beq.n	8017322 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801731e:	f000 fdb7 	bl	8017e90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017322:	7bfb      	ldrb	r3, [r7, #15]
 8017324:	3b01      	subs	r3, #1
 8017326:	b2db      	uxtb	r3, r3
 8017328:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801732a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801732e:	2b00      	cmp	r3, #0
 8017330:	dce9      	bgt.n	8017306 <prvUnlockQueue+0x16>
 8017332:	e000      	b.n	8017336 <prvUnlockQueue+0x46>
					break;
 8017334:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	22ff      	movs	r2, #255	; 0xff
 801733a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801733e:	f001 fad1 	bl	80188e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017342:	f001 fa9b 	bl	801887c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801734c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801734e:	e011      	b.n	8017374 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	691b      	ldr	r3, [r3, #16]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d012      	beq.n	801737e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	3310      	adds	r3, #16
 801735c:	4618      	mov	r0, r3
 801735e:	f000 fcb7 	bl	8017cd0 <xTaskRemoveFromEventList>
 8017362:	4603      	mov	r3, r0
 8017364:	2b00      	cmp	r3, #0
 8017366:	d001      	beq.n	801736c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017368:	f000 fd92 	bl	8017e90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801736c:	7bbb      	ldrb	r3, [r7, #14]
 801736e:	3b01      	subs	r3, #1
 8017370:	b2db      	uxtb	r3, r3
 8017372:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017378:	2b00      	cmp	r3, #0
 801737a:	dce9      	bgt.n	8017350 <prvUnlockQueue+0x60>
 801737c:	e000      	b.n	8017380 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801737e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	22ff      	movs	r2, #255	; 0xff
 8017384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017388:	f001 faac 	bl	80188e4 <vPortExitCritical>
}
 801738c:	bf00      	nop
 801738e:	3710      	adds	r7, #16
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}

08017394 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b084      	sub	sp, #16
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801739c:	f001 fa6e 	bl	801887c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d102      	bne.n	80173ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80173a8:	2301      	movs	r3, #1
 80173aa:	60fb      	str	r3, [r7, #12]
 80173ac:	e001      	b.n	80173b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80173ae:	2300      	movs	r3, #0
 80173b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80173b2:	f001 fa97 	bl	80188e4 <vPortExitCritical>

	return xReturn;
 80173b6:	68fb      	ldr	r3, [r7, #12]
}
 80173b8:	4618      	mov	r0, r3
 80173ba:	3710      	adds	r7, #16
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}

080173c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b084      	sub	sp, #16
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80173c8:	f001 fa58 	bl	801887c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d102      	bne.n	80173de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80173d8:	2301      	movs	r3, #1
 80173da:	60fb      	str	r3, [r7, #12]
 80173dc:	e001      	b.n	80173e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80173de:	2300      	movs	r3, #0
 80173e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80173e2:	f001 fa7f 	bl	80188e4 <vPortExitCritical>

	return xReturn;
 80173e6:	68fb      	ldr	r3, [r7, #12]
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3710      	adds	r7, #16
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}

080173f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b08e      	sub	sp, #56	; 0x38
 80173f4:	af04      	add	r7, sp, #16
 80173f6:	60f8      	str	r0, [r7, #12]
 80173f8:	60b9      	str	r1, [r7, #8]
 80173fa:	607a      	str	r2, [r7, #4]
 80173fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80173fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017400:	2b00      	cmp	r3, #0
 8017402:	d10c      	bne.n	801741e <xTaskCreateStatic+0x2e>
	__asm volatile
 8017404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017408:	b672      	cpsid	i
 801740a:	f383 8811 	msr	BASEPRI, r3
 801740e:	f3bf 8f6f 	isb	sy
 8017412:	f3bf 8f4f 	dsb	sy
 8017416:	b662      	cpsie	i
 8017418:	623b      	str	r3, [r7, #32]
}
 801741a:	bf00      	nop
 801741c:	e7fe      	b.n	801741c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017420:	2b00      	cmp	r3, #0
 8017422:	d10c      	bne.n	801743e <xTaskCreateStatic+0x4e>
	__asm volatile
 8017424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017428:	b672      	cpsid	i
 801742a:	f383 8811 	msr	BASEPRI, r3
 801742e:	f3bf 8f6f 	isb	sy
 8017432:	f3bf 8f4f 	dsb	sy
 8017436:	b662      	cpsie	i
 8017438:	61fb      	str	r3, [r7, #28]
}
 801743a:	bf00      	nop
 801743c:	e7fe      	b.n	801743c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801743e:	2358      	movs	r3, #88	; 0x58
 8017440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017442:	693b      	ldr	r3, [r7, #16]
 8017444:	2b58      	cmp	r3, #88	; 0x58
 8017446:	d00c      	beq.n	8017462 <xTaskCreateStatic+0x72>
	__asm volatile
 8017448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801744c:	b672      	cpsid	i
 801744e:	f383 8811 	msr	BASEPRI, r3
 8017452:	f3bf 8f6f 	isb	sy
 8017456:	f3bf 8f4f 	dsb	sy
 801745a:	b662      	cpsie	i
 801745c:	61bb      	str	r3, [r7, #24]
}
 801745e:	bf00      	nop
 8017460:	e7fe      	b.n	8017460 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017462:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017466:	2b00      	cmp	r3, #0
 8017468:	d01e      	beq.n	80174a8 <xTaskCreateStatic+0xb8>
 801746a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801746c:	2b00      	cmp	r3, #0
 801746e:	d01b      	beq.n	80174a8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017472:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017478:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801747c:	2202      	movs	r2, #2
 801747e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017482:	2300      	movs	r3, #0
 8017484:	9303      	str	r3, [sp, #12]
 8017486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017488:	9302      	str	r3, [sp, #8]
 801748a:	f107 0314 	add.w	r3, r7, #20
 801748e:	9301      	str	r3, [sp, #4]
 8017490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017492:	9300      	str	r3, [sp, #0]
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	687a      	ldr	r2, [r7, #4]
 8017498:	68b9      	ldr	r1, [r7, #8]
 801749a:	68f8      	ldr	r0, [r7, #12]
 801749c:	f000 f850 	bl	8017540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80174a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174a2:	f000 f8e1 	bl	8017668 <prvAddNewTaskToReadyList>
 80174a6:	e001      	b.n	80174ac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80174a8:	2300      	movs	r3, #0
 80174aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80174ac:	697b      	ldr	r3, [r7, #20]
	}
 80174ae:	4618      	mov	r0, r3
 80174b0:	3728      	adds	r7, #40	; 0x28
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}

080174b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80174b6:	b580      	push	{r7, lr}
 80174b8:	b08c      	sub	sp, #48	; 0x30
 80174ba:	af04      	add	r7, sp, #16
 80174bc:	60f8      	str	r0, [r7, #12]
 80174be:	60b9      	str	r1, [r7, #8]
 80174c0:	603b      	str	r3, [r7, #0]
 80174c2:	4613      	mov	r3, r2
 80174c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80174c6:	88fb      	ldrh	r3, [r7, #6]
 80174c8:	009b      	lsls	r3, r3, #2
 80174ca:	4618      	mov	r0, r3
 80174cc:	f001 fb02 	bl	8018ad4 <pvPortMalloc>
 80174d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80174d2:	697b      	ldr	r3, [r7, #20]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d00e      	beq.n	80174f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80174d8:	2058      	movs	r0, #88	; 0x58
 80174da:	f001 fafb 	bl	8018ad4 <pvPortMalloc>
 80174de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80174e0:	69fb      	ldr	r3, [r7, #28]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d003      	beq.n	80174ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80174e6:	69fb      	ldr	r3, [r7, #28]
 80174e8:	697a      	ldr	r2, [r7, #20]
 80174ea:	631a      	str	r2, [r3, #48]	; 0x30
 80174ec:	e005      	b.n	80174fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80174ee:	6978      	ldr	r0, [r7, #20]
 80174f0:	f001 fbc0 	bl	8018c74 <vPortFree>
 80174f4:	e001      	b.n	80174fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80174f6:	2300      	movs	r3, #0
 80174f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80174fa:	69fb      	ldr	r3, [r7, #28]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d017      	beq.n	8017530 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017500:	69fb      	ldr	r3, [r7, #28]
 8017502:	2200      	movs	r2, #0
 8017504:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017508:	88fa      	ldrh	r2, [r7, #6]
 801750a:	2300      	movs	r3, #0
 801750c:	9303      	str	r3, [sp, #12]
 801750e:	69fb      	ldr	r3, [r7, #28]
 8017510:	9302      	str	r3, [sp, #8]
 8017512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017514:	9301      	str	r3, [sp, #4]
 8017516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017518:	9300      	str	r3, [sp, #0]
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	68b9      	ldr	r1, [r7, #8]
 801751e:	68f8      	ldr	r0, [r7, #12]
 8017520:	f000 f80e 	bl	8017540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017524:	69f8      	ldr	r0, [r7, #28]
 8017526:	f000 f89f 	bl	8017668 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801752a:	2301      	movs	r3, #1
 801752c:	61bb      	str	r3, [r7, #24]
 801752e:	e002      	b.n	8017536 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017530:	f04f 33ff 	mov.w	r3, #4294967295
 8017534:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017536:	69bb      	ldr	r3, [r7, #24]
	}
 8017538:	4618      	mov	r0, r3
 801753a:	3720      	adds	r7, #32
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}

08017540 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b088      	sub	sp, #32
 8017544:	af00      	add	r7, sp, #0
 8017546:	60f8      	str	r0, [r7, #12]
 8017548:	60b9      	str	r1, [r7, #8]
 801754a:	607a      	str	r2, [r7, #4]
 801754c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017550:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	009b      	lsls	r3, r3, #2
 8017556:	461a      	mov	r2, r3
 8017558:	21a5      	movs	r1, #165	; 0xa5
 801755a:	f002 f897 	bl	801968c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017562:	6879      	ldr	r1, [r7, #4]
 8017564:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017568:	440b      	add	r3, r1
 801756a:	009b      	lsls	r3, r3, #2
 801756c:	4413      	add	r3, r2
 801756e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017570:	69bb      	ldr	r3, [r7, #24]
 8017572:	f023 0307 	bic.w	r3, r3, #7
 8017576:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017578:	69bb      	ldr	r3, [r7, #24]
 801757a:	f003 0307 	and.w	r3, r3, #7
 801757e:	2b00      	cmp	r3, #0
 8017580:	d00c      	beq.n	801759c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8017582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017586:	b672      	cpsid	i
 8017588:	f383 8811 	msr	BASEPRI, r3
 801758c:	f3bf 8f6f 	isb	sy
 8017590:	f3bf 8f4f 	dsb	sy
 8017594:	b662      	cpsie	i
 8017596:	617b      	str	r3, [r7, #20]
}
 8017598:	bf00      	nop
 801759a:	e7fe      	b.n	801759a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801759c:	68bb      	ldr	r3, [r7, #8]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d01f      	beq.n	80175e2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80175a2:	2300      	movs	r3, #0
 80175a4:	61fb      	str	r3, [r7, #28]
 80175a6:	e012      	b.n	80175ce <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80175a8:	68ba      	ldr	r2, [r7, #8]
 80175aa:	69fb      	ldr	r3, [r7, #28]
 80175ac:	4413      	add	r3, r2
 80175ae:	7819      	ldrb	r1, [r3, #0]
 80175b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175b2:	69fb      	ldr	r3, [r7, #28]
 80175b4:	4413      	add	r3, r2
 80175b6:	3334      	adds	r3, #52	; 0x34
 80175b8:	460a      	mov	r2, r1
 80175ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80175bc:	68ba      	ldr	r2, [r7, #8]
 80175be:	69fb      	ldr	r3, [r7, #28]
 80175c0:	4413      	add	r3, r2
 80175c2:	781b      	ldrb	r3, [r3, #0]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d006      	beq.n	80175d6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80175c8:	69fb      	ldr	r3, [r7, #28]
 80175ca:	3301      	adds	r3, #1
 80175cc:	61fb      	str	r3, [r7, #28]
 80175ce:	69fb      	ldr	r3, [r7, #28]
 80175d0:	2b0f      	cmp	r3, #15
 80175d2:	d9e9      	bls.n	80175a8 <prvInitialiseNewTask+0x68>
 80175d4:	e000      	b.n	80175d8 <prvInitialiseNewTask+0x98>
			{
				break;
 80175d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80175d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175da:	2200      	movs	r2, #0
 80175dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80175e0:	e003      	b.n	80175ea <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80175e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e4:	2200      	movs	r2, #0
 80175e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80175ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ec:	2b06      	cmp	r3, #6
 80175ee:	d901      	bls.n	80175f4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80175f0:	2306      	movs	r3, #6
 80175f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80175f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80175fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8017600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017602:	2200      	movs	r2, #0
 8017604:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017608:	3304      	adds	r3, #4
 801760a:	4618      	mov	r0, r3
 801760c:	f7ff f8ec 	bl	80167e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017612:	3318      	adds	r3, #24
 8017614:	4618      	mov	r0, r3
 8017616:	f7ff f8e7 	bl	80167e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801761c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801761e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017622:	f1c3 0207 	rsb	r2, r3, #7
 8017626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017628:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801762c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801762e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017632:	2200      	movs	r2, #0
 8017634:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017638:	2200      	movs	r2, #0
 801763a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801763e:	2200      	movs	r2, #0
 8017640:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017644:	683a      	ldr	r2, [r7, #0]
 8017646:	68f9      	ldr	r1, [r7, #12]
 8017648:	69b8      	ldr	r0, [r7, #24]
 801764a:	f001 f80d 	bl	8018668 <pxPortInitialiseStack>
 801764e:	4602      	mov	r2, r0
 8017650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017652:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017656:	2b00      	cmp	r3, #0
 8017658:	d002      	beq.n	8017660 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801765c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801765e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017660:	bf00      	nop
 8017662:	3720      	adds	r7, #32
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}

08017668 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b082      	sub	sp, #8
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017670:	f001 f904 	bl	801887c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017674:	4b2a      	ldr	r3, [pc, #168]	; (8017720 <prvAddNewTaskToReadyList+0xb8>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	3301      	adds	r3, #1
 801767a:	4a29      	ldr	r2, [pc, #164]	; (8017720 <prvAddNewTaskToReadyList+0xb8>)
 801767c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801767e:	4b29      	ldr	r3, [pc, #164]	; (8017724 <prvAddNewTaskToReadyList+0xbc>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d109      	bne.n	801769a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017686:	4a27      	ldr	r2, [pc, #156]	; (8017724 <prvAddNewTaskToReadyList+0xbc>)
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801768c:	4b24      	ldr	r3, [pc, #144]	; (8017720 <prvAddNewTaskToReadyList+0xb8>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	2b01      	cmp	r3, #1
 8017692:	d110      	bne.n	80176b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017694:	f000 fc22 	bl	8017edc <prvInitialiseTaskLists>
 8017698:	e00d      	b.n	80176b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801769a:	4b23      	ldr	r3, [pc, #140]	; (8017728 <prvAddNewTaskToReadyList+0xc0>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d109      	bne.n	80176b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80176a2:	4b20      	ldr	r3, [pc, #128]	; (8017724 <prvAddNewTaskToReadyList+0xbc>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ac:	429a      	cmp	r2, r3
 80176ae:	d802      	bhi.n	80176b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80176b0:	4a1c      	ldr	r2, [pc, #112]	; (8017724 <prvAddNewTaskToReadyList+0xbc>)
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80176b6:	4b1d      	ldr	r3, [pc, #116]	; (801772c <prvAddNewTaskToReadyList+0xc4>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	3301      	adds	r3, #1
 80176bc:	4a1b      	ldr	r2, [pc, #108]	; (801772c <prvAddNewTaskToReadyList+0xc4>)
 80176be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c4:	2201      	movs	r2, #1
 80176c6:	409a      	lsls	r2, r3
 80176c8:	4b19      	ldr	r3, [pc, #100]	; (8017730 <prvAddNewTaskToReadyList+0xc8>)
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	4313      	orrs	r3, r2
 80176ce:	4a18      	ldr	r2, [pc, #96]	; (8017730 <prvAddNewTaskToReadyList+0xc8>)
 80176d0:	6013      	str	r3, [r2, #0]
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176d6:	4613      	mov	r3, r2
 80176d8:	009b      	lsls	r3, r3, #2
 80176da:	4413      	add	r3, r2
 80176dc:	009b      	lsls	r3, r3, #2
 80176de:	4a15      	ldr	r2, [pc, #84]	; (8017734 <prvAddNewTaskToReadyList+0xcc>)
 80176e0:	441a      	add	r2, r3
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	3304      	adds	r3, #4
 80176e6:	4619      	mov	r1, r3
 80176e8:	4610      	mov	r0, r2
 80176ea:	f7ff f88a 	bl	8016802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80176ee:	f001 f8f9 	bl	80188e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80176f2:	4b0d      	ldr	r3, [pc, #52]	; (8017728 <prvAddNewTaskToReadyList+0xc0>)
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d00e      	beq.n	8017718 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80176fa:	4b0a      	ldr	r3, [pc, #40]	; (8017724 <prvAddNewTaskToReadyList+0xbc>)
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017704:	429a      	cmp	r2, r3
 8017706:	d207      	bcs.n	8017718 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017708:	4b0b      	ldr	r3, [pc, #44]	; (8017738 <prvAddNewTaskToReadyList+0xd0>)
 801770a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801770e:	601a      	str	r2, [r3, #0]
 8017710:	f3bf 8f4f 	dsb	sy
 8017714:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017718:	bf00      	nop
 801771a:	3708      	adds	r7, #8
 801771c:	46bd      	mov	sp, r7
 801771e:	bd80      	pop	{r7, pc}
 8017720:	2001f51c 	.word	0x2001f51c
 8017724:	2001f41c 	.word	0x2001f41c
 8017728:	2001f528 	.word	0x2001f528
 801772c:	2001f538 	.word	0x2001f538
 8017730:	2001f524 	.word	0x2001f524
 8017734:	2001f420 	.word	0x2001f420
 8017738:	e000ed04 	.word	0xe000ed04

0801773c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801773c:	b580      	push	{r7, lr}
 801773e:	b084      	sub	sp, #16
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017744:	2300      	movs	r3, #0
 8017746:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d019      	beq.n	8017782 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801774e:	4b14      	ldr	r3, [pc, #80]	; (80177a0 <vTaskDelay+0x64>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d00c      	beq.n	8017770 <vTaskDelay+0x34>
	__asm volatile
 8017756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801775a:	b672      	cpsid	i
 801775c:	f383 8811 	msr	BASEPRI, r3
 8017760:	f3bf 8f6f 	isb	sy
 8017764:	f3bf 8f4f 	dsb	sy
 8017768:	b662      	cpsie	i
 801776a:	60bb      	str	r3, [r7, #8]
}
 801776c:	bf00      	nop
 801776e:	e7fe      	b.n	801776e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8017770:	f000 f87e 	bl	8017870 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017774:	2100      	movs	r1, #0
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f000 ff10 	bl	801859c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801777c:	f000 f886 	bl	801788c <xTaskResumeAll>
 8017780:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d107      	bne.n	8017798 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8017788:	4b06      	ldr	r3, [pc, #24]	; (80177a4 <vTaskDelay+0x68>)
 801778a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801778e:	601a      	str	r2, [r3, #0]
 8017790:	f3bf 8f4f 	dsb	sy
 8017794:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017798:	bf00      	nop
 801779a:	3710      	adds	r7, #16
 801779c:	46bd      	mov	sp, r7
 801779e:	bd80      	pop	{r7, pc}
 80177a0:	2001f544 	.word	0x2001f544
 80177a4:	e000ed04 	.word	0xe000ed04

080177a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b08a      	sub	sp, #40	; 0x28
 80177ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80177ae:	2300      	movs	r3, #0
 80177b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80177b2:	2300      	movs	r3, #0
 80177b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80177b6:	463a      	mov	r2, r7
 80177b8:	1d39      	adds	r1, r7, #4
 80177ba:	f107 0308 	add.w	r3, r7, #8
 80177be:	4618      	mov	r0, r3
 80177c0:	f7e9 ff80 	bl	80016c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80177c4:	6839      	ldr	r1, [r7, #0]
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	68ba      	ldr	r2, [r7, #8]
 80177ca:	9202      	str	r2, [sp, #8]
 80177cc:	9301      	str	r3, [sp, #4]
 80177ce:	2300      	movs	r3, #0
 80177d0:	9300      	str	r3, [sp, #0]
 80177d2:	2300      	movs	r3, #0
 80177d4:	460a      	mov	r2, r1
 80177d6:	4920      	ldr	r1, [pc, #128]	; (8017858 <vTaskStartScheduler+0xb0>)
 80177d8:	4820      	ldr	r0, [pc, #128]	; (801785c <vTaskStartScheduler+0xb4>)
 80177da:	f7ff fe09 	bl	80173f0 <xTaskCreateStatic>
 80177de:	4603      	mov	r3, r0
 80177e0:	4a1f      	ldr	r2, [pc, #124]	; (8017860 <vTaskStartScheduler+0xb8>)
 80177e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80177e4:	4b1e      	ldr	r3, [pc, #120]	; (8017860 <vTaskStartScheduler+0xb8>)
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d002      	beq.n	80177f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80177ec:	2301      	movs	r3, #1
 80177ee:	617b      	str	r3, [r7, #20]
 80177f0:	e001      	b.n	80177f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80177f2:	2300      	movs	r3, #0
 80177f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	2b01      	cmp	r3, #1
 80177fa:	d118      	bne.n	801782e <vTaskStartScheduler+0x86>
	__asm volatile
 80177fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017800:	b672      	cpsid	i
 8017802:	f383 8811 	msr	BASEPRI, r3
 8017806:	f3bf 8f6f 	isb	sy
 801780a:	f3bf 8f4f 	dsb	sy
 801780e:	b662      	cpsie	i
 8017810:	613b      	str	r3, [r7, #16]
}
 8017812:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017814:	4b13      	ldr	r3, [pc, #76]	; (8017864 <vTaskStartScheduler+0xbc>)
 8017816:	f04f 32ff 	mov.w	r2, #4294967295
 801781a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801781c:	4b12      	ldr	r3, [pc, #72]	; (8017868 <vTaskStartScheduler+0xc0>)
 801781e:	2201      	movs	r2, #1
 8017820:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017822:	4b12      	ldr	r3, [pc, #72]	; (801786c <vTaskStartScheduler+0xc4>)
 8017824:	2200      	movs	r2, #0
 8017826:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017828:	f000 ffaa 	bl	8018780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801782c:	e010      	b.n	8017850 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801782e:	697b      	ldr	r3, [r7, #20]
 8017830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017834:	d10c      	bne.n	8017850 <vTaskStartScheduler+0xa8>
	__asm volatile
 8017836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801783a:	b672      	cpsid	i
 801783c:	f383 8811 	msr	BASEPRI, r3
 8017840:	f3bf 8f6f 	isb	sy
 8017844:	f3bf 8f4f 	dsb	sy
 8017848:	b662      	cpsie	i
 801784a:	60fb      	str	r3, [r7, #12]
}
 801784c:	bf00      	nop
 801784e:	e7fe      	b.n	801784e <vTaskStartScheduler+0xa6>
}
 8017850:	bf00      	nop
 8017852:	3718      	adds	r7, #24
 8017854:	46bd      	mov	sp, r7
 8017856:	bd80      	pop	{r7, pc}
 8017858:	0801acd0 	.word	0x0801acd0
 801785c:	08017ea9 	.word	0x08017ea9
 8017860:	2001f540 	.word	0x2001f540
 8017864:	2001f53c 	.word	0x2001f53c
 8017868:	2001f528 	.word	0x2001f528
 801786c:	2001f520 	.word	0x2001f520

08017870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017870:	b480      	push	{r7}
 8017872:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8017874:	4b04      	ldr	r3, [pc, #16]	; (8017888 <vTaskSuspendAll+0x18>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	3301      	adds	r3, #1
 801787a:	4a03      	ldr	r2, [pc, #12]	; (8017888 <vTaskSuspendAll+0x18>)
 801787c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801787e:	bf00      	nop
 8017880:	46bd      	mov	sp, r7
 8017882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017886:	4770      	bx	lr
 8017888:	2001f544 	.word	0x2001f544

0801788c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b084      	sub	sp, #16
 8017890:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017892:	2300      	movs	r3, #0
 8017894:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017896:	2300      	movs	r3, #0
 8017898:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801789a:	4b42      	ldr	r3, [pc, #264]	; (80179a4 <xTaskResumeAll+0x118>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d10c      	bne.n	80178bc <xTaskResumeAll+0x30>
	__asm volatile
 80178a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178a6:	b672      	cpsid	i
 80178a8:	f383 8811 	msr	BASEPRI, r3
 80178ac:	f3bf 8f6f 	isb	sy
 80178b0:	f3bf 8f4f 	dsb	sy
 80178b4:	b662      	cpsie	i
 80178b6:	603b      	str	r3, [r7, #0]
}
 80178b8:	bf00      	nop
 80178ba:	e7fe      	b.n	80178ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80178bc:	f000 ffde 	bl	801887c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80178c0:	4b38      	ldr	r3, [pc, #224]	; (80179a4 <xTaskResumeAll+0x118>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	3b01      	subs	r3, #1
 80178c6:	4a37      	ldr	r2, [pc, #220]	; (80179a4 <xTaskResumeAll+0x118>)
 80178c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80178ca:	4b36      	ldr	r3, [pc, #216]	; (80179a4 <xTaskResumeAll+0x118>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d161      	bne.n	8017996 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80178d2:	4b35      	ldr	r3, [pc, #212]	; (80179a8 <xTaskResumeAll+0x11c>)
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d05d      	beq.n	8017996 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80178da:	e02e      	b.n	801793a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80178dc:	4b33      	ldr	r3, [pc, #204]	; (80179ac <xTaskResumeAll+0x120>)
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	68db      	ldr	r3, [r3, #12]
 80178e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	3318      	adds	r3, #24
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7fe ffe7 	bl	80168bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	3304      	adds	r3, #4
 80178f2:	4618      	mov	r0, r3
 80178f4:	f7fe ffe2 	bl	80168bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178fc:	2201      	movs	r2, #1
 80178fe:	409a      	lsls	r2, r3
 8017900:	4b2b      	ldr	r3, [pc, #172]	; (80179b0 <xTaskResumeAll+0x124>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	4313      	orrs	r3, r2
 8017906:	4a2a      	ldr	r2, [pc, #168]	; (80179b0 <xTaskResumeAll+0x124>)
 8017908:	6013      	str	r3, [r2, #0]
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801790e:	4613      	mov	r3, r2
 8017910:	009b      	lsls	r3, r3, #2
 8017912:	4413      	add	r3, r2
 8017914:	009b      	lsls	r3, r3, #2
 8017916:	4a27      	ldr	r2, [pc, #156]	; (80179b4 <xTaskResumeAll+0x128>)
 8017918:	441a      	add	r2, r3
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	3304      	adds	r3, #4
 801791e:	4619      	mov	r1, r3
 8017920:	4610      	mov	r0, r2
 8017922:	f7fe ff6e 	bl	8016802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801792a:	4b23      	ldr	r3, [pc, #140]	; (80179b8 <xTaskResumeAll+0x12c>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017930:	429a      	cmp	r2, r3
 8017932:	d302      	bcc.n	801793a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8017934:	4b21      	ldr	r3, [pc, #132]	; (80179bc <xTaskResumeAll+0x130>)
 8017936:	2201      	movs	r2, #1
 8017938:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801793a:	4b1c      	ldr	r3, [pc, #112]	; (80179ac <xTaskResumeAll+0x120>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d1cc      	bne.n	80178dc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d001      	beq.n	801794c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017948:	f000 fb68 	bl	801801c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801794c:	4b1c      	ldr	r3, [pc, #112]	; (80179c0 <xTaskResumeAll+0x134>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d010      	beq.n	801797a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017958:	f000 f858 	bl	8017a0c <xTaskIncrementTick>
 801795c:	4603      	mov	r3, r0
 801795e:	2b00      	cmp	r3, #0
 8017960:	d002      	beq.n	8017968 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8017962:	4b16      	ldr	r3, [pc, #88]	; (80179bc <xTaskResumeAll+0x130>)
 8017964:	2201      	movs	r2, #1
 8017966:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	3b01      	subs	r3, #1
 801796c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d1f1      	bne.n	8017958 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8017974:	4b12      	ldr	r3, [pc, #72]	; (80179c0 <xTaskResumeAll+0x134>)
 8017976:	2200      	movs	r2, #0
 8017978:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801797a:	4b10      	ldr	r3, [pc, #64]	; (80179bc <xTaskResumeAll+0x130>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d009      	beq.n	8017996 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017982:	2301      	movs	r3, #1
 8017984:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017986:	4b0f      	ldr	r3, [pc, #60]	; (80179c4 <xTaskResumeAll+0x138>)
 8017988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801798c:	601a      	str	r2, [r3, #0]
 801798e:	f3bf 8f4f 	dsb	sy
 8017992:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017996:	f000 ffa5 	bl	80188e4 <vPortExitCritical>

	return xAlreadyYielded;
 801799a:	68bb      	ldr	r3, [r7, #8]
}
 801799c:	4618      	mov	r0, r3
 801799e:	3710      	adds	r7, #16
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	2001f544 	.word	0x2001f544
 80179a8:	2001f51c 	.word	0x2001f51c
 80179ac:	2001f4dc 	.word	0x2001f4dc
 80179b0:	2001f524 	.word	0x2001f524
 80179b4:	2001f420 	.word	0x2001f420
 80179b8:	2001f41c 	.word	0x2001f41c
 80179bc:	2001f530 	.word	0x2001f530
 80179c0:	2001f52c 	.word	0x2001f52c
 80179c4:	e000ed04 	.word	0xe000ed04

080179c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80179c8:	b480      	push	{r7}
 80179ca:	b083      	sub	sp, #12
 80179cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80179ce:	4b05      	ldr	r3, [pc, #20]	; (80179e4 <xTaskGetTickCount+0x1c>)
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80179d4:	687b      	ldr	r3, [r7, #4]
}
 80179d6:	4618      	mov	r0, r3
 80179d8:	370c      	adds	r7, #12
 80179da:	46bd      	mov	sp, r7
 80179dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e0:	4770      	bx	lr
 80179e2:	bf00      	nop
 80179e4:	2001f520 	.word	0x2001f520

080179e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b082      	sub	sp, #8
 80179ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80179ee:	f001 f82d 	bl	8018a4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80179f2:	2300      	movs	r3, #0
 80179f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80179f6:	4b04      	ldr	r3, [pc, #16]	; (8017a08 <xTaskGetTickCountFromISR+0x20>)
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80179fc:	683b      	ldr	r3, [r7, #0]
}
 80179fe:	4618      	mov	r0, r3
 8017a00:	3708      	adds	r7, #8
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}
 8017a06:	bf00      	nop
 8017a08:	2001f520 	.word	0x2001f520

08017a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b086      	sub	sp, #24
 8017a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017a12:	2300      	movs	r3, #0
 8017a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017a16:	4b4f      	ldr	r3, [pc, #316]	; (8017b54 <xTaskIncrementTick+0x148>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	f040 808a 	bne.w	8017b34 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017a20:	4b4d      	ldr	r3, [pc, #308]	; (8017b58 <xTaskIncrementTick+0x14c>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	3301      	adds	r3, #1
 8017a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017a28:	4a4b      	ldr	r2, [pc, #300]	; (8017b58 <xTaskIncrementTick+0x14c>)
 8017a2a:	693b      	ldr	r3, [r7, #16]
 8017a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d122      	bne.n	8017a7a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8017a34:	4b49      	ldr	r3, [pc, #292]	; (8017b5c <xTaskIncrementTick+0x150>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d00c      	beq.n	8017a58 <xTaskIncrementTick+0x4c>
	__asm volatile
 8017a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a42:	b672      	cpsid	i
 8017a44:	f383 8811 	msr	BASEPRI, r3
 8017a48:	f3bf 8f6f 	isb	sy
 8017a4c:	f3bf 8f4f 	dsb	sy
 8017a50:	b662      	cpsie	i
 8017a52:	603b      	str	r3, [r7, #0]
}
 8017a54:	bf00      	nop
 8017a56:	e7fe      	b.n	8017a56 <xTaskIncrementTick+0x4a>
 8017a58:	4b40      	ldr	r3, [pc, #256]	; (8017b5c <xTaskIncrementTick+0x150>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	60fb      	str	r3, [r7, #12]
 8017a5e:	4b40      	ldr	r3, [pc, #256]	; (8017b60 <xTaskIncrementTick+0x154>)
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	4a3e      	ldr	r2, [pc, #248]	; (8017b5c <xTaskIncrementTick+0x150>)
 8017a64:	6013      	str	r3, [r2, #0]
 8017a66:	4a3e      	ldr	r2, [pc, #248]	; (8017b60 <xTaskIncrementTick+0x154>)
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	6013      	str	r3, [r2, #0]
 8017a6c:	4b3d      	ldr	r3, [pc, #244]	; (8017b64 <xTaskIncrementTick+0x158>)
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	3301      	adds	r3, #1
 8017a72:	4a3c      	ldr	r2, [pc, #240]	; (8017b64 <xTaskIncrementTick+0x158>)
 8017a74:	6013      	str	r3, [r2, #0]
 8017a76:	f000 fad1 	bl	801801c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017a7a:	4b3b      	ldr	r3, [pc, #236]	; (8017b68 <xTaskIncrementTick+0x15c>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	693a      	ldr	r2, [r7, #16]
 8017a80:	429a      	cmp	r2, r3
 8017a82:	d348      	bcc.n	8017b16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017a84:	4b35      	ldr	r3, [pc, #212]	; (8017b5c <xTaskIncrementTick+0x150>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d104      	bne.n	8017a98 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017a8e:	4b36      	ldr	r3, [pc, #216]	; (8017b68 <xTaskIncrementTick+0x15c>)
 8017a90:	f04f 32ff 	mov.w	r2, #4294967295
 8017a94:	601a      	str	r2, [r3, #0]
					break;
 8017a96:	e03e      	b.n	8017b16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a98:	4b30      	ldr	r3, [pc, #192]	; (8017b5c <xTaskIncrementTick+0x150>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	68db      	ldr	r3, [r3, #12]
 8017a9e:	68db      	ldr	r3, [r3, #12]
 8017aa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017aa2:	68bb      	ldr	r3, [r7, #8]
 8017aa4:	685b      	ldr	r3, [r3, #4]
 8017aa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017aa8:	693a      	ldr	r2, [r7, #16]
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d203      	bcs.n	8017ab8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017ab0:	4a2d      	ldr	r2, [pc, #180]	; (8017b68 <xTaskIncrementTick+0x15c>)
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017ab6:	e02e      	b.n	8017b16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ab8:	68bb      	ldr	r3, [r7, #8]
 8017aba:	3304      	adds	r3, #4
 8017abc:	4618      	mov	r0, r3
 8017abe:	f7fe fefd 	bl	80168bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d004      	beq.n	8017ad4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017aca:	68bb      	ldr	r3, [r7, #8]
 8017acc:	3318      	adds	r3, #24
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7fe fef4 	bl	80168bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017ad4:	68bb      	ldr	r3, [r7, #8]
 8017ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ad8:	2201      	movs	r2, #1
 8017ada:	409a      	lsls	r2, r3
 8017adc:	4b23      	ldr	r3, [pc, #140]	; (8017b6c <xTaskIncrementTick+0x160>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	4313      	orrs	r3, r2
 8017ae2:	4a22      	ldr	r2, [pc, #136]	; (8017b6c <xTaskIncrementTick+0x160>)
 8017ae4:	6013      	str	r3, [r2, #0]
 8017ae6:	68bb      	ldr	r3, [r7, #8]
 8017ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017aea:	4613      	mov	r3, r2
 8017aec:	009b      	lsls	r3, r3, #2
 8017aee:	4413      	add	r3, r2
 8017af0:	009b      	lsls	r3, r3, #2
 8017af2:	4a1f      	ldr	r2, [pc, #124]	; (8017b70 <xTaskIncrementTick+0x164>)
 8017af4:	441a      	add	r2, r3
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	3304      	adds	r3, #4
 8017afa:	4619      	mov	r1, r3
 8017afc:	4610      	mov	r0, r2
 8017afe:	f7fe fe80 	bl	8016802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017b02:	68bb      	ldr	r3, [r7, #8]
 8017b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b06:	4b1b      	ldr	r3, [pc, #108]	; (8017b74 <xTaskIncrementTick+0x168>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d3b9      	bcc.n	8017a84 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8017b10:	2301      	movs	r3, #1
 8017b12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017b14:	e7b6      	b.n	8017a84 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017b16:	4b17      	ldr	r3, [pc, #92]	; (8017b74 <xTaskIncrementTick+0x168>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b1c:	4914      	ldr	r1, [pc, #80]	; (8017b70 <xTaskIncrementTick+0x164>)
 8017b1e:	4613      	mov	r3, r2
 8017b20:	009b      	lsls	r3, r3, #2
 8017b22:	4413      	add	r3, r2
 8017b24:	009b      	lsls	r3, r3, #2
 8017b26:	440b      	add	r3, r1
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	2b01      	cmp	r3, #1
 8017b2c:	d907      	bls.n	8017b3e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8017b2e:	2301      	movs	r3, #1
 8017b30:	617b      	str	r3, [r7, #20]
 8017b32:	e004      	b.n	8017b3e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8017b34:	4b10      	ldr	r3, [pc, #64]	; (8017b78 <xTaskIncrementTick+0x16c>)
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	3301      	adds	r3, #1
 8017b3a:	4a0f      	ldr	r2, [pc, #60]	; (8017b78 <xTaskIncrementTick+0x16c>)
 8017b3c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8017b3e:	4b0f      	ldr	r3, [pc, #60]	; (8017b7c <xTaskIncrementTick+0x170>)
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d001      	beq.n	8017b4a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8017b46:	2301      	movs	r3, #1
 8017b48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8017b4a:	697b      	ldr	r3, [r7, #20]
}
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	3718      	adds	r7, #24
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bd80      	pop	{r7, pc}
 8017b54:	2001f544 	.word	0x2001f544
 8017b58:	2001f520 	.word	0x2001f520
 8017b5c:	2001f4d4 	.word	0x2001f4d4
 8017b60:	2001f4d8 	.word	0x2001f4d8
 8017b64:	2001f534 	.word	0x2001f534
 8017b68:	2001f53c 	.word	0x2001f53c
 8017b6c:	2001f524 	.word	0x2001f524
 8017b70:	2001f420 	.word	0x2001f420
 8017b74:	2001f41c 	.word	0x2001f41c
 8017b78:	2001f52c 	.word	0x2001f52c
 8017b7c:	2001f530 	.word	0x2001f530

08017b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b088      	sub	sp, #32
 8017b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017b86:	4b3a      	ldr	r3, [pc, #232]	; (8017c70 <vTaskSwitchContext+0xf0>)
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d003      	beq.n	8017b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017b8e:	4b39      	ldr	r3, [pc, #228]	; (8017c74 <vTaskSwitchContext+0xf4>)
 8017b90:	2201      	movs	r2, #1
 8017b92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017b94:	e068      	b.n	8017c68 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8017b96:	4b37      	ldr	r3, [pc, #220]	; (8017c74 <vTaskSwitchContext+0xf4>)
 8017b98:	2200      	movs	r2, #0
 8017b9a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017b9c:	4b36      	ldr	r3, [pc, #216]	; (8017c78 <vTaskSwitchContext+0xf8>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ba2:	61fb      	str	r3, [r7, #28]
 8017ba4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8017ba8:	61bb      	str	r3, [r7, #24]
 8017baa:	69fb      	ldr	r3, [r7, #28]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	69ba      	ldr	r2, [r7, #24]
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d111      	bne.n	8017bd8 <vTaskSwitchContext+0x58>
 8017bb4:	69fb      	ldr	r3, [r7, #28]
 8017bb6:	3304      	adds	r3, #4
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	69ba      	ldr	r2, [r7, #24]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d10b      	bne.n	8017bd8 <vTaskSwitchContext+0x58>
 8017bc0:	69fb      	ldr	r3, [r7, #28]
 8017bc2:	3308      	adds	r3, #8
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	69ba      	ldr	r2, [r7, #24]
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d105      	bne.n	8017bd8 <vTaskSwitchContext+0x58>
 8017bcc:	69fb      	ldr	r3, [r7, #28]
 8017bce:	330c      	adds	r3, #12
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	69ba      	ldr	r2, [r7, #24]
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d008      	beq.n	8017bea <vTaskSwitchContext+0x6a>
 8017bd8:	4b27      	ldr	r3, [pc, #156]	; (8017c78 <vTaskSwitchContext+0xf8>)
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	4b26      	ldr	r3, [pc, #152]	; (8017c78 <vTaskSwitchContext+0xf8>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	3334      	adds	r3, #52	; 0x34
 8017be2:	4619      	mov	r1, r3
 8017be4:	4610      	mov	r0, r2
 8017be6:	f7e9 fd5a 	bl	800169e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bea:	4b24      	ldr	r3, [pc, #144]	; (8017c7c <vTaskSwitchContext+0xfc>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	fab3 f383 	clz	r3, r3
 8017bf6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8017bf8:	7afb      	ldrb	r3, [r7, #11]
 8017bfa:	f1c3 031f 	rsb	r3, r3, #31
 8017bfe:	617b      	str	r3, [r7, #20]
 8017c00:	491f      	ldr	r1, [pc, #124]	; (8017c80 <vTaskSwitchContext+0x100>)
 8017c02:	697a      	ldr	r2, [r7, #20]
 8017c04:	4613      	mov	r3, r2
 8017c06:	009b      	lsls	r3, r3, #2
 8017c08:	4413      	add	r3, r2
 8017c0a:	009b      	lsls	r3, r3, #2
 8017c0c:	440b      	add	r3, r1
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d10c      	bne.n	8017c2e <vTaskSwitchContext+0xae>
	__asm volatile
 8017c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c18:	b672      	cpsid	i
 8017c1a:	f383 8811 	msr	BASEPRI, r3
 8017c1e:	f3bf 8f6f 	isb	sy
 8017c22:	f3bf 8f4f 	dsb	sy
 8017c26:	b662      	cpsie	i
 8017c28:	607b      	str	r3, [r7, #4]
}
 8017c2a:	bf00      	nop
 8017c2c:	e7fe      	b.n	8017c2c <vTaskSwitchContext+0xac>
 8017c2e:	697a      	ldr	r2, [r7, #20]
 8017c30:	4613      	mov	r3, r2
 8017c32:	009b      	lsls	r3, r3, #2
 8017c34:	4413      	add	r3, r2
 8017c36:	009b      	lsls	r3, r3, #2
 8017c38:	4a11      	ldr	r2, [pc, #68]	; (8017c80 <vTaskSwitchContext+0x100>)
 8017c3a:	4413      	add	r3, r2
 8017c3c:	613b      	str	r3, [r7, #16]
 8017c3e:	693b      	ldr	r3, [r7, #16]
 8017c40:	685b      	ldr	r3, [r3, #4]
 8017c42:	685a      	ldr	r2, [r3, #4]
 8017c44:	693b      	ldr	r3, [r7, #16]
 8017c46:	605a      	str	r2, [r3, #4]
 8017c48:	693b      	ldr	r3, [r7, #16]
 8017c4a:	685a      	ldr	r2, [r3, #4]
 8017c4c:	693b      	ldr	r3, [r7, #16]
 8017c4e:	3308      	adds	r3, #8
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d104      	bne.n	8017c5e <vTaskSwitchContext+0xde>
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	685b      	ldr	r3, [r3, #4]
 8017c58:	685a      	ldr	r2, [r3, #4]
 8017c5a:	693b      	ldr	r3, [r7, #16]
 8017c5c:	605a      	str	r2, [r3, #4]
 8017c5e:	693b      	ldr	r3, [r7, #16]
 8017c60:	685b      	ldr	r3, [r3, #4]
 8017c62:	68db      	ldr	r3, [r3, #12]
 8017c64:	4a04      	ldr	r2, [pc, #16]	; (8017c78 <vTaskSwitchContext+0xf8>)
 8017c66:	6013      	str	r3, [r2, #0]
}
 8017c68:	bf00      	nop
 8017c6a:	3720      	adds	r7, #32
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	2001f544 	.word	0x2001f544
 8017c74:	2001f530 	.word	0x2001f530
 8017c78:	2001f41c 	.word	0x2001f41c
 8017c7c:	2001f524 	.word	0x2001f524
 8017c80:	2001f420 	.word	0x2001f420

08017c84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b084      	sub	sp, #16
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
 8017c8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d10c      	bne.n	8017cae <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8017c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c98:	b672      	cpsid	i
 8017c9a:	f383 8811 	msr	BASEPRI, r3
 8017c9e:	f3bf 8f6f 	isb	sy
 8017ca2:	f3bf 8f4f 	dsb	sy
 8017ca6:	b662      	cpsie	i
 8017ca8:	60fb      	str	r3, [r7, #12]
}
 8017caa:	bf00      	nop
 8017cac:	e7fe      	b.n	8017cac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017cae:	4b07      	ldr	r3, [pc, #28]	; (8017ccc <vTaskPlaceOnEventList+0x48>)
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	3318      	adds	r3, #24
 8017cb4:	4619      	mov	r1, r3
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f7fe fdc7 	bl	801684a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017cbc:	2101      	movs	r1, #1
 8017cbe:	6838      	ldr	r0, [r7, #0]
 8017cc0:	f000 fc6c 	bl	801859c <prvAddCurrentTaskToDelayedList>
}
 8017cc4:	bf00      	nop
 8017cc6:	3710      	adds	r7, #16
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	2001f41c 	.word	0x2001f41c

08017cd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b086      	sub	sp, #24
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	68db      	ldr	r3, [r3, #12]
 8017cdc:	68db      	ldr	r3, [r3, #12]
 8017cde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017ce0:	693b      	ldr	r3, [r7, #16]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d10c      	bne.n	8017d00 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8017ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cea:	b672      	cpsid	i
 8017cec:	f383 8811 	msr	BASEPRI, r3
 8017cf0:	f3bf 8f6f 	isb	sy
 8017cf4:	f3bf 8f4f 	dsb	sy
 8017cf8:	b662      	cpsie	i
 8017cfa:	60fb      	str	r3, [r7, #12]
}
 8017cfc:	bf00      	nop
 8017cfe:	e7fe      	b.n	8017cfe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	3318      	adds	r3, #24
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7fe fdd9 	bl	80168bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d0a:	4b1d      	ldr	r3, [pc, #116]	; (8017d80 <xTaskRemoveFromEventList+0xb0>)
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d11c      	bne.n	8017d4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017d12:	693b      	ldr	r3, [r7, #16]
 8017d14:	3304      	adds	r3, #4
 8017d16:	4618      	mov	r0, r3
 8017d18:	f7fe fdd0 	bl	80168bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017d1c:	693b      	ldr	r3, [r7, #16]
 8017d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d20:	2201      	movs	r2, #1
 8017d22:	409a      	lsls	r2, r3
 8017d24:	4b17      	ldr	r3, [pc, #92]	; (8017d84 <xTaskRemoveFromEventList+0xb4>)
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	4313      	orrs	r3, r2
 8017d2a:	4a16      	ldr	r2, [pc, #88]	; (8017d84 <xTaskRemoveFromEventList+0xb4>)
 8017d2c:	6013      	str	r3, [r2, #0]
 8017d2e:	693b      	ldr	r3, [r7, #16]
 8017d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d32:	4613      	mov	r3, r2
 8017d34:	009b      	lsls	r3, r3, #2
 8017d36:	4413      	add	r3, r2
 8017d38:	009b      	lsls	r3, r3, #2
 8017d3a:	4a13      	ldr	r2, [pc, #76]	; (8017d88 <xTaskRemoveFromEventList+0xb8>)
 8017d3c:	441a      	add	r2, r3
 8017d3e:	693b      	ldr	r3, [r7, #16]
 8017d40:	3304      	adds	r3, #4
 8017d42:	4619      	mov	r1, r3
 8017d44:	4610      	mov	r0, r2
 8017d46:	f7fe fd5c 	bl	8016802 <vListInsertEnd>
 8017d4a:	e005      	b.n	8017d58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017d4c:	693b      	ldr	r3, [r7, #16]
 8017d4e:	3318      	adds	r3, #24
 8017d50:	4619      	mov	r1, r3
 8017d52:	480e      	ldr	r0, [pc, #56]	; (8017d8c <xTaskRemoveFromEventList+0xbc>)
 8017d54:	f7fe fd55 	bl	8016802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017d58:	693b      	ldr	r3, [r7, #16]
 8017d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d5c:	4b0c      	ldr	r3, [pc, #48]	; (8017d90 <xTaskRemoveFromEventList+0xc0>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d62:	429a      	cmp	r2, r3
 8017d64:	d905      	bls.n	8017d72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017d66:	2301      	movs	r3, #1
 8017d68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017d6a:	4b0a      	ldr	r3, [pc, #40]	; (8017d94 <xTaskRemoveFromEventList+0xc4>)
 8017d6c:	2201      	movs	r2, #1
 8017d6e:	601a      	str	r2, [r3, #0]
 8017d70:	e001      	b.n	8017d76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8017d72:	2300      	movs	r3, #0
 8017d74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017d76:	697b      	ldr	r3, [r7, #20]
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3718      	adds	r7, #24
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}
 8017d80:	2001f544 	.word	0x2001f544
 8017d84:	2001f524 	.word	0x2001f524
 8017d88:	2001f420 	.word	0x2001f420
 8017d8c:	2001f4dc 	.word	0x2001f4dc
 8017d90:	2001f41c 	.word	0x2001f41c
 8017d94:	2001f530 	.word	0x2001f530

08017d98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017d98:	b480      	push	{r7}
 8017d9a:	b083      	sub	sp, #12
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017da0:	4b06      	ldr	r3, [pc, #24]	; (8017dbc <vTaskInternalSetTimeOutState+0x24>)
 8017da2:	681a      	ldr	r2, [r3, #0]
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017da8:	4b05      	ldr	r3, [pc, #20]	; (8017dc0 <vTaskInternalSetTimeOutState+0x28>)
 8017daa:	681a      	ldr	r2, [r3, #0]
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	605a      	str	r2, [r3, #4]
}
 8017db0:	bf00      	nop
 8017db2:	370c      	adds	r7, #12
 8017db4:	46bd      	mov	sp, r7
 8017db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dba:	4770      	bx	lr
 8017dbc:	2001f534 	.word	0x2001f534
 8017dc0:	2001f520 	.word	0x2001f520

08017dc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b088      	sub	sp, #32
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
 8017dcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d10c      	bne.n	8017dee <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8017dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dd8:	b672      	cpsid	i
 8017dda:	f383 8811 	msr	BASEPRI, r3
 8017dde:	f3bf 8f6f 	isb	sy
 8017de2:	f3bf 8f4f 	dsb	sy
 8017de6:	b662      	cpsie	i
 8017de8:	613b      	str	r3, [r7, #16]
}
 8017dea:	bf00      	nop
 8017dec:	e7fe      	b.n	8017dec <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8017dee:	683b      	ldr	r3, [r7, #0]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d10c      	bne.n	8017e0e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8017df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017df8:	b672      	cpsid	i
 8017dfa:	f383 8811 	msr	BASEPRI, r3
 8017dfe:	f3bf 8f6f 	isb	sy
 8017e02:	f3bf 8f4f 	dsb	sy
 8017e06:	b662      	cpsie	i
 8017e08:	60fb      	str	r3, [r7, #12]
}
 8017e0a:	bf00      	nop
 8017e0c:	e7fe      	b.n	8017e0c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8017e0e:	f000 fd35 	bl	801887c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017e12:	4b1d      	ldr	r3, [pc, #116]	; (8017e88 <xTaskCheckForTimeOut+0xc4>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	685b      	ldr	r3, [r3, #4]
 8017e1c:	69ba      	ldr	r2, [r7, #24]
 8017e1e:	1ad3      	subs	r3, r2, r3
 8017e20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017e22:	683b      	ldr	r3, [r7, #0]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e2a:	d102      	bne.n	8017e32 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	61fb      	str	r3, [r7, #28]
 8017e30:	e023      	b.n	8017e7a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	4b15      	ldr	r3, [pc, #84]	; (8017e8c <xTaskCheckForTimeOut+0xc8>)
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d007      	beq.n	8017e4e <xTaskCheckForTimeOut+0x8a>
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	685b      	ldr	r3, [r3, #4]
 8017e42:	69ba      	ldr	r2, [r7, #24]
 8017e44:	429a      	cmp	r2, r3
 8017e46:	d302      	bcc.n	8017e4e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017e48:	2301      	movs	r3, #1
 8017e4a:	61fb      	str	r3, [r7, #28]
 8017e4c:	e015      	b.n	8017e7a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	697a      	ldr	r2, [r7, #20]
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d20b      	bcs.n	8017e70 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017e58:	683b      	ldr	r3, [r7, #0]
 8017e5a:	681a      	ldr	r2, [r3, #0]
 8017e5c:	697b      	ldr	r3, [r7, #20]
 8017e5e:	1ad2      	subs	r2, r2, r3
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017e64:	6878      	ldr	r0, [r7, #4]
 8017e66:	f7ff ff97 	bl	8017d98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	61fb      	str	r3, [r7, #28]
 8017e6e:	e004      	b.n	8017e7a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	2200      	movs	r2, #0
 8017e74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017e76:	2301      	movs	r3, #1
 8017e78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017e7a:	f000 fd33 	bl	80188e4 <vPortExitCritical>

	return xReturn;
 8017e7e:	69fb      	ldr	r3, [r7, #28]
}
 8017e80:	4618      	mov	r0, r3
 8017e82:	3720      	adds	r7, #32
 8017e84:	46bd      	mov	sp, r7
 8017e86:	bd80      	pop	{r7, pc}
 8017e88:	2001f520 	.word	0x2001f520
 8017e8c:	2001f534 	.word	0x2001f534

08017e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017e90:	b480      	push	{r7}
 8017e92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017e94:	4b03      	ldr	r3, [pc, #12]	; (8017ea4 <vTaskMissedYield+0x14>)
 8017e96:	2201      	movs	r2, #1
 8017e98:	601a      	str	r2, [r3, #0]
}
 8017e9a:	bf00      	nop
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea2:	4770      	bx	lr
 8017ea4:	2001f530 	.word	0x2001f530

08017ea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b082      	sub	sp, #8
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017eb0:	f000 f854 	bl	8017f5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017eb4:	4b07      	ldr	r3, [pc, #28]	; (8017ed4 <prvIdleTask+0x2c>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	2b01      	cmp	r3, #1
 8017eba:	d907      	bls.n	8017ecc <prvIdleTask+0x24>
			{
				taskYIELD();
 8017ebc:	4b06      	ldr	r3, [pc, #24]	; (8017ed8 <prvIdleTask+0x30>)
 8017ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ec2:	601a      	str	r2, [r3, #0]
 8017ec4:	f3bf 8f4f 	dsb	sy
 8017ec8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8017ecc:	f7e9 fbe0 	bl	8001690 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8017ed0:	e7ee      	b.n	8017eb0 <prvIdleTask+0x8>
 8017ed2:	bf00      	nop
 8017ed4:	2001f420 	.word	0x2001f420
 8017ed8:	e000ed04 	.word	0xe000ed04

08017edc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	607b      	str	r3, [r7, #4]
 8017ee6:	e00c      	b.n	8017f02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017ee8:	687a      	ldr	r2, [r7, #4]
 8017eea:	4613      	mov	r3, r2
 8017eec:	009b      	lsls	r3, r3, #2
 8017eee:	4413      	add	r3, r2
 8017ef0:	009b      	lsls	r3, r3, #2
 8017ef2:	4a12      	ldr	r2, [pc, #72]	; (8017f3c <prvInitialiseTaskLists+0x60>)
 8017ef4:	4413      	add	r3, r2
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7fe fc56 	bl	80167a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	3301      	adds	r3, #1
 8017f00:	607b      	str	r3, [r7, #4]
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	2b06      	cmp	r3, #6
 8017f06:	d9ef      	bls.n	8017ee8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017f08:	480d      	ldr	r0, [pc, #52]	; (8017f40 <prvInitialiseTaskLists+0x64>)
 8017f0a:	f7fe fc4d 	bl	80167a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017f0e:	480d      	ldr	r0, [pc, #52]	; (8017f44 <prvInitialiseTaskLists+0x68>)
 8017f10:	f7fe fc4a 	bl	80167a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017f14:	480c      	ldr	r0, [pc, #48]	; (8017f48 <prvInitialiseTaskLists+0x6c>)
 8017f16:	f7fe fc47 	bl	80167a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017f1a:	480c      	ldr	r0, [pc, #48]	; (8017f4c <prvInitialiseTaskLists+0x70>)
 8017f1c:	f7fe fc44 	bl	80167a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017f20:	480b      	ldr	r0, [pc, #44]	; (8017f50 <prvInitialiseTaskLists+0x74>)
 8017f22:	f7fe fc41 	bl	80167a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017f26:	4b0b      	ldr	r3, [pc, #44]	; (8017f54 <prvInitialiseTaskLists+0x78>)
 8017f28:	4a05      	ldr	r2, [pc, #20]	; (8017f40 <prvInitialiseTaskLists+0x64>)
 8017f2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017f2c:	4b0a      	ldr	r3, [pc, #40]	; (8017f58 <prvInitialiseTaskLists+0x7c>)
 8017f2e:	4a05      	ldr	r2, [pc, #20]	; (8017f44 <prvInitialiseTaskLists+0x68>)
 8017f30:	601a      	str	r2, [r3, #0]
}
 8017f32:	bf00      	nop
 8017f34:	3708      	adds	r7, #8
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}
 8017f3a:	bf00      	nop
 8017f3c:	2001f420 	.word	0x2001f420
 8017f40:	2001f4ac 	.word	0x2001f4ac
 8017f44:	2001f4c0 	.word	0x2001f4c0
 8017f48:	2001f4dc 	.word	0x2001f4dc
 8017f4c:	2001f4f0 	.word	0x2001f4f0
 8017f50:	2001f508 	.word	0x2001f508
 8017f54:	2001f4d4 	.word	0x2001f4d4
 8017f58:	2001f4d8 	.word	0x2001f4d8

08017f5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b082      	sub	sp, #8
 8017f60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017f62:	e019      	b.n	8017f98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017f64:	f000 fc8a 	bl	801887c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f68:	4b10      	ldr	r3, [pc, #64]	; (8017fac <prvCheckTasksWaitingTermination+0x50>)
 8017f6a:	68db      	ldr	r3, [r3, #12]
 8017f6c:	68db      	ldr	r3, [r3, #12]
 8017f6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	3304      	adds	r3, #4
 8017f74:	4618      	mov	r0, r3
 8017f76:	f7fe fca1 	bl	80168bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017f7a:	4b0d      	ldr	r3, [pc, #52]	; (8017fb0 <prvCheckTasksWaitingTermination+0x54>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	3b01      	subs	r3, #1
 8017f80:	4a0b      	ldr	r2, [pc, #44]	; (8017fb0 <prvCheckTasksWaitingTermination+0x54>)
 8017f82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017f84:	4b0b      	ldr	r3, [pc, #44]	; (8017fb4 <prvCheckTasksWaitingTermination+0x58>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	3b01      	subs	r3, #1
 8017f8a:	4a0a      	ldr	r2, [pc, #40]	; (8017fb4 <prvCheckTasksWaitingTermination+0x58>)
 8017f8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017f8e:	f000 fca9 	bl	80188e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	f000 f810 	bl	8017fb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017f98:	4b06      	ldr	r3, [pc, #24]	; (8017fb4 <prvCheckTasksWaitingTermination+0x58>)
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d1e1      	bne.n	8017f64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017fa0:	bf00      	nop
 8017fa2:	bf00      	nop
 8017fa4:	3708      	adds	r7, #8
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bd80      	pop	{r7, pc}
 8017faa:	bf00      	nop
 8017fac:	2001f4f0 	.word	0x2001f4f0
 8017fb0:	2001f51c 	.word	0x2001f51c
 8017fb4:	2001f504 	.word	0x2001f504

08017fb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b084      	sub	sp, #16
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d108      	bne.n	8017fdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f000 fe50 	bl	8018c74 <vPortFree>
				vPortFree( pxTCB );
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f000 fe4d 	bl	8018c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017fda:	e01a      	b.n	8018012 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017fe2:	2b01      	cmp	r3, #1
 8017fe4:	d103      	bne.n	8017fee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017fe6:	6878      	ldr	r0, [r7, #4]
 8017fe8:	f000 fe44 	bl	8018c74 <vPortFree>
	}
 8017fec:	e011      	b.n	8018012 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017ff4:	2b02      	cmp	r3, #2
 8017ff6:	d00c      	beq.n	8018012 <prvDeleteTCB+0x5a>
	__asm volatile
 8017ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ffc:	b672      	cpsid	i
 8017ffe:	f383 8811 	msr	BASEPRI, r3
 8018002:	f3bf 8f6f 	isb	sy
 8018006:	f3bf 8f4f 	dsb	sy
 801800a:	b662      	cpsie	i
 801800c:	60fb      	str	r3, [r7, #12]
}
 801800e:	bf00      	nop
 8018010:	e7fe      	b.n	8018010 <prvDeleteTCB+0x58>
	}
 8018012:	bf00      	nop
 8018014:	3710      	adds	r7, #16
 8018016:	46bd      	mov	sp, r7
 8018018:	bd80      	pop	{r7, pc}
	...

0801801c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801801c:	b480      	push	{r7}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018022:	4b0c      	ldr	r3, [pc, #48]	; (8018054 <prvResetNextTaskUnblockTime+0x38>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d104      	bne.n	8018036 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801802c:	4b0a      	ldr	r3, [pc, #40]	; (8018058 <prvResetNextTaskUnblockTime+0x3c>)
 801802e:	f04f 32ff 	mov.w	r2, #4294967295
 8018032:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018034:	e008      	b.n	8018048 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018036:	4b07      	ldr	r3, [pc, #28]	; (8018054 <prvResetNextTaskUnblockTime+0x38>)
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	68db      	ldr	r3, [r3, #12]
 801803c:	68db      	ldr	r3, [r3, #12]
 801803e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	685b      	ldr	r3, [r3, #4]
 8018044:	4a04      	ldr	r2, [pc, #16]	; (8018058 <prvResetNextTaskUnblockTime+0x3c>)
 8018046:	6013      	str	r3, [r2, #0]
}
 8018048:	bf00      	nop
 801804a:	370c      	adds	r7, #12
 801804c:	46bd      	mov	sp, r7
 801804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018052:	4770      	bx	lr
 8018054:	2001f4d4 	.word	0x2001f4d4
 8018058:	2001f53c 	.word	0x2001f53c

0801805c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801805c:	b480      	push	{r7}
 801805e:	b083      	sub	sp, #12
 8018060:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018062:	4b0b      	ldr	r3, [pc, #44]	; (8018090 <xTaskGetSchedulerState+0x34>)
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d102      	bne.n	8018070 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801806a:	2301      	movs	r3, #1
 801806c:	607b      	str	r3, [r7, #4]
 801806e:	e008      	b.n	8018082 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018070:	4b08      	ldr	r3, [pc, #32]	; (8018094 <xTaskGetSchedulerState+0x38>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d102      	bne.n	801807e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018078:	2302      	movs	r3, #2
 801807a:	607b      	str	r3, [r7, #4]
 801807c:	e001      	b.n	8018082 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801807e:	2300      	movs	r3, #0
 8018080:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018082:	687b      	ldr	r3, [r7, #4]
	}
 8018084:	4618      	mov	r0, r3
 8018086:	370c      	adds	r7, #12
 8018088:	46bd      	mov	sp, r7
 801808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808e:	4770      	bx	lr
 8018090:	2001f528 	.word	0x2001f528
 8018094:	2001f544 	.word	0x2001f544

08018098 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018098:	b580      	push	{r7, lr}
 801809a:	b086      	sub	sp, #24
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80180a4:	2300      	movs	r3, #0
 80180a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d072      	beq.n	8018194 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80180ae:	4b3c      	ldr	r3, [pc, #240]	; (80181a0 <xTaskPriorityDisinherit+0x108>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	693a      	ldr	r2, [r7, #16]
 80180b4:	429a      	cmp	r2, r3
 80180b6:	d00c      	beq.n	80180d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80180b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180bc:	b672      	cpsid	i
 80180be:	f383 8811 	msr	BASEPRI, r3
 80180c2:	f3bf 8f6f 	isb	sy
 80180c6:	f3bf 8f4f 	dsb	sy
 80180ca:	b662      	cpsie	i
 80180cc:	60fb      	str	r3, [r7, #12]
}
 80180ce:	bf00      	nop
 80180d0:	e7fe      	b.n	80180d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80180d2:	693b      	ldr	r3, [r7, #16]
 80180d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d10c      	bne.n	80180f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80180da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180de:	b672      	cpsid	i
 80180e0:	f383 8811 	msr	BASEPRI, r3
 80180e4:	f3bf 8f6f 	isb	sy
 80180e8:	f3bf 8f4f 	dsb	sy
 80180ec:	b662      	cpsie	i
 80180ee:	60bb      	str	r3, [r7, #8]
}
 80180f0:	bf00      	nop
 80180f2:	e7fe      	b.n	80180f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80180f4:	693b      	ldr	r3, [r7, #16]
 80180f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180f8:	1e5a      	subs	r2, r3, #1
 80180fa:	693b      	ldr	r3, [r7, #16]
 80180fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80180fe:	693b      	ldr	r3, [r7, #16]
 8018100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018102:	693b      	ldr	r3, [r7, #16]
 8018104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018106:	429a      	cmp	r2, r3
 8018108:	d044      	beq.n	8018194 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801810a:	693b      	ldr	r3, [r7, #16]
 801810c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801810e:	2b00      	cmp	r3, #0
 8018110:	d140      	bne.n	8018194 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018112:	693b      	ldr	r3, [r7, #16]
 8018114:	3304      	adds	r3, #4
 8018116:	4618      	mov	r0, r3
 8018118:	f7fe fbd0 	bl	80168bc <uxListRemove>
 801811c:	4603      	mov	r3, r0
 801811e:	2b00      	cmp	r3, #0
 8018120:	d115      	bne.n	801814e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018126:	491f      	ldr	r1, [pc, #124]	; (80181a4 <xTaskPriorityDisinherit+0x10c>)
 8018128:	4613      	mov	r3, r2
 801812a:	009b      	lsls	r3, r3, #2
 801812c:	4413      	add	r3, r2
 801812e:	009b      	lsls	r3, r3, #2
 8018130:	440b      	add	r3, r1
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d10a      	bne.n	801814e <xTaskPriorityDisinherit+0xb6>
 8018138:	693b      	ldr	r3, [r7, #16]
 801813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801813c:	2201      	movs	r2, #1
 801813e:	fa02 f303 	lsl.w	r3, r2, r3
 8018142:	43da      	mvns	r2, r3
 8018144:	4b18      	ldr	r3, [pc, #96]	; (80181a8 <xTaskPriorityDisinherit+0x110>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	4013      	ands	r3, r2
 801814a:	4a17      	ldr	r2, [pc, #92]	; (80181a8 <xTaskPriorityDisinherit+0x110>)
 801814c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801814e:	693b      	ldr	r3, [r7, #16]
 8018150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018152:	693b      	ldr	r3, [r7, #16]
 8018154:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018156:	693b      	ldr	r3, [r7, #16]
 8018158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801815a:	f1c3 0207 	rsb	r2, r3, #7
 801815e:	693b      	ldr	r3, [r7, #16]
 8018160:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018162:	693b      	ldr	r3, [r7, #16]
 8018164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018166:	2201      	movs	r2, #1
 8018168:	409a      	lsls	r2, r3
 801816a:	4b0f      	ldr	r3, [pc, #60]	; (80181a8 <xTaskPriorityDisinherit+0x110>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	4313      	orrs	r3, r2
 8018170:	4a0d      	ldr	r2, [pc, #52]	; (80181a8 <xTaskPriorityDisinherit+0x110>)
 8018172:	6013      	str	r3, [r2, #0]
 8018174:	693b      	ldr	r3, [r7, #16]
 8018176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018178:	4613      	mov	r3, r2
 801817a:	009b      	lsls	r3, r3, #2
 801817c:	4413      	add	r3, r2
 801817e:	009b      	lsls	r3, r3, #2
 8018180:	4a08      	ldr	r2, [pc, #32]	; (80181a4 <xTaskPriorityDisinherit+0x10c>)
 8018182:	441a      	add	r2, r3
 8018184:	693b      	ldr	r3, [r7, #16]
 8018186:	3304      	adds	r3, #4
 8018188:	4619      	mov	r1, r3
 801818a:	4610      	mov	r0, r2
 801818c:	f7fe fb39 	bl	8016802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018190:	2301      	movs	r3, #1
 8018192:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018194:	697b      	ldr	r3, [r7, #20]
	}
 8018196:	4618      	mov	r0, r3
 8018198:	3718      	adds	r7, #24
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	2001f41c 	.word	0x2001f41c
 80181a4:	2001f420 	.word	0x2001f420
 80181a8:	2001f524 	.word	0x2001f524

080181ac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b086      	sub	sp, #24
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	60f8      	str	r0, [r7, #12]
 80181b4:	60b9      	str	r1, [r7, #8]
 80181b6:	607a      	str	r2, [r7, #4]
 80181b8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80181ba:	f000 fb5f 	bl	801887c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80181be:	4b26      	ldr	r3, [pc, #152]	; (8018258 <xTaskNotifyWait+0xac>)
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80181c6:	b2db      	uxtb	r3, r3
 80181c8:	2b02      	cmp	r3, #2
 80181ca:	d01a      	beq.n	8018202 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80181cc:	4b22      	ldr	r3, [pc, #136]	; (8018258 <xTaskNotifyWait+0xac>)
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80181d2:	68fa      	ldr	r2, [r7, #12]
 80181d4:	43d2      	mvns	r2, r2
 80181d6:	400a      	ands	r2, r1
 80181d8:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80181da:	4b1f      	ldr	r3, [pc, #124]	; (8018258 <xTaskNotifyWait+0xac>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	2201      	movs	r2, #1
 80181e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 80181e4:	683b      	ldr	r3, [r7, #0]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d00b      	beq.n	8018202 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80181ea:	2101      	movs	r1, #1
 80181ec:	6838      	ldr	r0, [r7, #0]
 80181ee:	f000 f9d5 	bl	801859c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80181f2:	4b1a      	ldr	r3, [pc, #104]	; (801825c <xTaskNotifyWait+0xb0>)
 80181f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181f8:	601a      	str	r2, [r3, #0]
 80181fa:	f3bf 8f4f 	dsb	sy
 80181fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8018202:	f000 fb6f 	bl	80188e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8018206:	f000 fb39 	bl	801887c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d004      	beq.n	801821a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8018210:	4b11      	ldr	r3, [pc, #68]	; (8018258 <xTaskNotifyWait+0xac>)
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801821a:	4b0f      	ldr	r3, [pc, #60]	; (8018258 <xTaskNotifyWait+0xac>)
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018222:	b2db      	uxtb	r3, r3
 8018224:	2b02      	cmp	r3, #2
 8018226:	d002      	beq.n	801822e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8018228:	2300      	movs	r3, #0
 801822a:	617b      	str	r3, [r7, #20]
 801822c:	e008      	b.n	8018240 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801822e:	4b0a      	ldr	r3, [pc, #40]	; (8018258 <xTaskNotifyWait+0xac>)
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8018234:	68ba      	ldr	r2, [r7, #8]
 8018236:	43d2      	mvns	r2, r2
 8018238:	400a      	ands	r2, r1
 801823a:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 801823c:	2301      	movs	r3, #1
 801823e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018240:	4b05      	ldr	r3, [pc, #20]	; (8018258 <xTaskNotifyWait+0xac>)
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	2200      	movs	r2, #0
 8018246:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801824a:	f000 fb4b 	bl	80188e4 <vPortExitCritical>

		return xReturn;
 801824e:	697b      	ldr	r3, [r7, #20]
	}
 8018250:	4618      	mov	r0, r3
 8018252:	3718      	adds	r7, #24
 8018254:	46bd      	mov	sp, r7
 8018256:	bd80      	pop	{r7, pc}
 8018258:	2001f41c 	.word	0x2001f41c
 801825c:	e000ed04 	.word	0xe000ed04

08018260 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8018260:	b580      	push	{r7, lr}
 8018262:	b08a      	sub	sp, #40	; 0x28
 8018264:	af00      	add	r7, sp, #0
 8018266:	60f8      	str	r0, [r7, #12]
 8018268:	60b9      	str	r1, [r7, #8]
 801826a:	603b      	str	r3, [r7, #0]
 801826c:	4613      	mov	r3, r2
 801826e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8018270:	2301      	movs	r3, #1
 8018272:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d10c      	bne.n	8018294 <xTaskGenericNotify+0x34>
	__asm volatile
 801827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801827e:	b672      	cpsid	i
 8018280:	f383 8811 	msr	BASEPRI, r3
 8018284:	f3bf 8f6f 	isb	sy
 8018288:	f3bf 8f4f 	dsb	sy
 801828c:	b662      	cpsie	i
 801828e:	61bb      	str	r3, [r7, #24]
}
 8018290:	bf00      	nop
 8018292:	e7fe      	b.n	8018292 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8018298:	f000 faf0 	bl	801887c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801829c:	683b      	ldr	r3, [r7, #0]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d003      	beq.n	80182aa <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80182a2:	6a3b      	ldr	r3, [r7, #32]
 80182a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80182a6:	683b      	ldr	r3, [r7, #0]
 80182a8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80182aa:	6a3b      	ldr	r3, [r7, #32]
 80182ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80182b0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80182b2:	6a3b      	ldr	r3, [r7, #32]
 80182b4:	2202      	movs	r2, #2
 80182b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80182ba:	79fb      	ldrb	r3, [r7, #7]
 80182bc:	2b04      	cmp	r3, #4
 80182be:	d828      	bhi.n	8018312 <xTaskGenericNotify+0xb2>
 80182c0:	a201      	add	r2, pc, #4	; (adr r2, 80182c8 <xTaskGenericNotify+0x68>)
 80182c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182c6:	bf00      	nop
 80182c8:	08018337 	.word	0x08018337
 80182cc:	080182dd 	.word	0x080182dd
 80182d0:	080182eb 	.word	0x080182eb
 80182d4:	080182f7 	.word	0x080182f7
 80182d8:	080182ff 	.word	0x080182ff
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80182dc:	6a3b      	ldr	r3, [r7, #32]
 80182de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80182e0:	68bb      	ldr	r3, [r7, #8]
 80182e2:	431a      	orrs	r2, r3
 80182e4:	6a3b      	ldr	r3, [r7, #32]
 80182e6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80182e8:	e028      	b.n	801833c <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80182ea:	6a3b      	ldr	r3, [r7, #32]
 80182ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182ee:	1c5a      	adds	r2, r3, #1
 80182f0:	6a3b      	ldr	r3, [r7, #32]
 80182f2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80182f4:	e022      	b.n	801833c <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80182f6:	6a3b      	ldr	r3, [r7, #32]
 80182f8:	68ba      	ldr	r2, [r7, #8]
 80182fa:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80182fc:	e01e      	b.n	801833c <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80182fe:	7ffb      	ldrb	r3, [r7, #31]
 8018300:	2b02      	cmp	r3, #2
 8018302:	d003      	beq.n	801830c <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8018304:	6a3b      	ldr	r3, [r7, #32]
 8018306:	68ba      	ldr	r2, [r7, #8]
 8018308:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801830a:	e017      	b.n	801833c <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 801830c:	2300      	movs	r3, #0
 801830e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8018310:	e014      	b.n	801833c <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8018312:	6a3b      	ldr	r3, [r7, #32]
 8018314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801831a:	d00e      	beq.n	801833a <xTaskGenericNotify+0xda>
	__asm volatile
 801831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018320:	b672      	cpsid	i
 8018322:	f383 8811 	msr	BASEPRI, r3
 8018326:	f3bf 8f6f 	isb	sy
 801832a:	f3bf 8f4f 	dsb	sy
 801832e:	b662      	cpsie	i
 8018330:	617b      	str	r3, [r7, #20]
}
 8018332:	bf00      	nop
 8018334:	e7fe      	b.n	8018334 <xTaskGenericNotify+0xd4>
					break;
 8018336:	bf00      	nop
 8018338:	e000      	b.n	801833c <xTaskGenericNotify+0xdc>

					break;
 801833a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801833c:	7ffb      	ldrb	r3, [r7, #31]
 801833e:	2b01      	cmp	r3, #1
 8018340:	d13b      	bne.n	80183ba <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018342:	6a3b      	ldr	r3, [r7, #32]
 8018344:	3304      	adds	r3, #4
 8018346:	4618      	mov	r0, r3
 8018348:	f7fe fab8 	bl	80168bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801834c:	6a3b      	ldr	r3, [r7, #32]
 801834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018350:	2201      	movs	r2, #1
 8018352:	409a      	lsls	r2, r3
 8018354:	4b1c      	ldr	r3, [pc, #112]	; (80183c8 <xTaskGenericNotify+0x168>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	4313      	orrs	r3, r2
 801835a:	4a1b      	ldr	r2, [pc, #108]	; (80183c8 <xTaskGenericNotify+0x168>)
 801835c:	6013      	str	r3, [r2, #0]
 801835e:	6a3b      	ldr	r3, [r7, #32]
 8018360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018362:	4613      	mov	r3, r2
 8018364:	009b      	lsls	r3, r3, #2
 8018366:	4413      	add	r3, r2
 8018368:	009b      	lsls	r3, r3, #2
 801836a:	4a18      	ldr	r2, [pc, #96]	; (80183cc <xTaskGenericNotify+0x16c>)
 801836c:	441a      	add	r2, r3
 801836e:	6a3b      	ldr	r3, [r7, #32]
 8018370:	3304      	adds	r3, #4
 8018372:	4619      	mov	r1, r3
 8018374:	4610      	mov	r0, r2
 8018376:	f7fe fa44 	bl	8016802 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801837a:	6a3b      	ldr	r3, [r7, #32]
 801837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801837e:	2b00      	cmp	r3, #0
 8018380:	d00c      	beq.n	801839c <xTaskGenericNotify+0x13c>
	__asm volatile
 8018382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018386:	b672      	cpsid	i
 8018388:	f383 8811 	msr	BASEPRI, r3
 801838c:	f3bf 8f6f 	isb	sy
 8018390:	f3bf 8f4f 	dsb	sy
 8018394:	b662      	cpsie	i
 8018396:	613b      	str	r3, [r7, #16]
}
 8018398:	bf00      	nop
 801839a:	e7fe      	b.n	801839a <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801839c:	6a3b      	ldr	r3, [r7, #32]
 801839e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183a0:	4b0b      	ldr	r3, [pc, #44]	; (80183d0 <xTaskGenericNotify+0x170>)
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d907      	bls.n	80183ba <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80183aa:	4b0a      	ldr	r3, [pc, #40]	; (80183d4 <xTaskGenericNotify+0x174>)
 80183ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183b0:	601a      	str	r2, [r3, #0]
 80183b2:	f3bf 8f4f 	dsb	sy
 80183b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80183ba:	f000 fa93 	bl	80188e4 <vPortExitCritical>

		return xReturn;
 80183be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80183c0:	4618      	mov	r0, r3
 80183c2:	3728      	adds	r7, #40	; 0x28
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bd80      	pop	{r7, pc}
 80183c8:	2001f524 	.word	0x2001f524
 80183cc:	2001f420 	.word	0x2001f420
 80183d0:	2001f41c 	.word	0x2001f41c
 80183d4:	e000ed04 	.word	0xe000ed04

080183d8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b08e      	sub	sp, #56	; 0x38
 80183dc:	af00      	add	r7, sp, #0
 80183de:	60f8      	str	r0, [r7, #12]
 80183e0:	60b9      	str	r1, [r7, #8]
 80183e2:	603b      	str	r3, [r7, #0]
 80183e4:	4613      	mov	r3, r2
 80183e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80183e8:	2301      	movs	r3, #1
 80183ea:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d10c      	bne.n	801840c <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 80183f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183f6:	b672      	cpsid	i
 80183f8:	f383 8811 	msr	BASEPRI, r3
 80183fc:	f3bf 8f6f 	isb	sy
 8018400:	f3bf 8f4f 	dsb	sy
 8018404:	b662      	cpsie	i
 8018406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018408:	bf00      	nop
 801840a:	e7fe      	b.n	801840a <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801840c:	f000 fb1e 	bl	8018a4c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8018414:	f3ef 8211 	mrs	r2, BASEPRI
 8018418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801841c:	b672      	cpsid	i
 801841e:	f383 8811 	msr	BASEPRI, r3
 8018422:	f3bf 8f6f 	isb	sy
 8018426:	f3bf 8f4f 	dsb	sy
 801842a:	b662      	cpsie	i
 801842c:	623a      	str	r2, [r7, #32]
 801842e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8018430:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018432:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8018434:	683b      	ldr	r3, [r7, #0]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d003      	beq.n	8018442 <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801843c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018444:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801844e:	2202      	movs	r2, #2
 8018450:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8018454:	79fb      	ldrb	r3, [r7, #7]
 8018456:	2b04      	cmp	r3, #4
 8018458:	d828      	bhi.n	80184ac <xTaskGenericNotifyFromISR+0xd4>
 801845a:	a201      	add	r2, pc, #4	; (adr r2, 8018460 <xTaskGenericNotifyFromISR+0x88>)
 801845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018460:	080184d1 	.word	0x080184d1
 8018464:	08018475 	.word	0x08018475
 8018468:	08018483 	.word	0x08018483
 801846c:	0801848f 	.word	0x0801848f
 8018470:	08018497 	.word	0x08018497
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8018474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	431a      	orrs	r2, r3
 801847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801847e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018480:	e029      	b.n	80184d6 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8018482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018486:	1c5a      	adds	r2, r3, #1
 8018488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801848a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801848c:	e023      	b.n	80184d6 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018490:	68ba      	ldr	r2, [r7, #8]
 8018492:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018494:	e01f      	b.n	80184d6 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8018496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801849a:	2b02      	cmp	r3, #2
 801849c:	d003      	beq.n	80184a6 <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a0:	68ba      	ldr	r2, [r7, #8]
 80184a2:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80184a4:	e017      	b.n	80184d6 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 80184a6:	2300      	movs	r3, #0
 80184a8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80184aa:	e014      	b.n	80184d6 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80184ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184b4:	d00e      	beq.n	80184d4 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 80184b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184ba:	b672      	cpsid	i
 80184bc:	f383 8811 	msr	BASEPRI, r3
 80184c0:	f3bf 8f6f 	isb	sy
 80184c4:	f3bf 8f4f 	dsb	sy
 80184c8:	b662      	cpsie	i
 80184ca:	61bb      	str	r3, [r7, #24]
}
 80184cc:	bf00      	nop
 80184ce:	e7fe      	b.n	80184ce <xTaskGenericNotifyFromISR+0xf6>
					break;
 80184d0:	bf00      	nop
 80184d2:	e000      	b.n	80184d6 <xTaskGenericNotifyFromISR+0xfe>
					break;
 80184d4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80184d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80184da:	2b01      	cmp	r3, #1
 80184dc:	d147      	bne.n	801856e <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80184de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d00c      	beq.n	8018500 <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 80184e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184ea:	b672      	cpsid	i
 80184ec:	f383 8811 	msr	BASEPRI, r3
 80184f0:	f3bf 8f6f 	isb	sy
 80184f4:	f3bf 8f4f 	dsb	sy
 80184f8:	b662      	cpsie	i
 80184fa:	617b      	str	r3, [r7, #20]
}
 80184fc:	bf00      	nop
 80184fe:	e7fe      	b.n	80184fe <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018500:	4b20      	ldr	r3, [pc, #128]	; (8018584 <xTaskGenericNotifyFromISR+0x1ac>)
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d11c      	bne.n	8018542 <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801850a:	3304      	adds	r3, #4
 801850c:	4618      	mov	r0, r3
 801850e:	f7fe f9d5 	bl	80168bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018516:	2201      	movs	r2, #1
 8018518:	409a      	lsls	r2, r3
 801851a:	4b1b      	ldr	r3, [pc, #108]	; (8018588 <xTaskGenericNotifyFromISR+0x1b0>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	4313      	orrs	r3, r2
 8018520:	4a19      	ldr	r2, [pc, #100]	; (8018588 <xTaskGenericNotifyFromISR+0x1b0>)
 8018522:	6013      	str	r3, [r2, #0]
 8018524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018528:	4613      	mov	r3, r2
 801852a:	009b      	lsls	r3, r3, #2
 801852c:	4413      	add	r3, r2
 801852e:	009b      	lsls	r3, r3, #2
 8018530:	4a16      	ldr	r2, [pc, #88]	; (801858c <xTaskGenericNotifyFromISR+0x1b4>)
 8018532:	441a      	add	r2, r3
 8018534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018536:	3304      	adds	r3, #4
 8018538:	4619      	mov	r1, r3
 801853a:	4610      	mov	r0, r2
 801853c:	f7fe f961 	bl	8016802 <vListInsertEnd>
 8018540:	e005      	b.n	801854e <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018544:	3318      	adds	r3, #24
 8018546:	4619      	mov	r1, r3
 8018548:	4811      	ldr	r0, [pc, #68]	; (8018590 <xTaskGenericNotifyFromISR+0x1b8>)
 801854a:	f7fe f95a 	bl	8016802 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018552:	4b10      	ldr	r3, [pc, #64]	; (8018594 <xTaskGenericNotifyFromISR+0x1bc>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018558:	429a      	cmp	r2, r3
 801855a:	d908      	bls.n	801856e <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801855c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801855e:	2b00      	cmp	r3, #0
 8018560:	d002      	beq.n	8018568 <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8018562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018564:	2201      	movs	r2, #1
 8018566:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8018568:	4b0b      	ldr	r3, [pc, #44]	; (8018598 <xTaskGenericNotifyFromISR+0x1c0>)
 801856a:	2201      	movs	r2, #1
 801856c:	601a      	str	r2, [r3, #0]
 801856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018570:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018572:	693b      	ldr	r3, [r7, #16]
 8018574:	f383 8811 	msr	BASEPRI, r3
}
 8018578:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801857c:	4618      	mov	r0, r3
 801857e:	3738      	adds	r7, #56	; 0x38
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}
 8018584:	2001f544 	.word	0x2001f544
 8018588:	2001f524 	.word	0x2001f524
 801858c:	2001f420 	.word	0x2001f420
 8018590:	2001f4dc 	.word	0x2001f4dc
 8018594:	2001f41c 	.word	0x2001f41c
 8018598:	2001f530 	.word	0x2001f530

0801859c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b084      	sub	sp, #16
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
 80185a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80185a6:	4b29      	ldr	r3, [pc, #164]	; (801864c <prvAddCurrentTaskToDelayedList+0xb0>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80185ac:	4b28      	ldr	r3, [pc, #160]	; (8018650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	3304      	adds	r3, #4
 80185b2:	4618      	mov	r0, r3
 80185b4:	f7fe f982 	bl	80168bc <uxListRemove>
 80185b8:	4603      	mov	r3, r0
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d10b      	bne.n	80185d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80185be:	4b24      	ldr	r3, [pc, #144]	; (8018650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185c4:	2201      	movs	r2, #1
 80185c6:	fa02 f303 	lsl.w	r3, r2, r3
 80185ca:	43da      	mvns	r2, r3
 80185cc:	4b21      	ldr	r3, [pc, #132]	; (8018654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	4013      	ands	r3, r2
 80185d2:	4a20      	ldr	r2, [pc, #128]	; (8018654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80185d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185dc:	d10a      	bne.n	80185f4 <prvAddCurrentTaskToDelayedList+0x58>
 80185de:	683b      	ldr	r3, [r7, #0]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d007      	beq.n	80185f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80185e4:	4b1a      	ldr	r3, [pc, #104]	; (8018650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	3304      	adds	r3, #4
 80185ea:	4619      	mov	r1, r3
 80185ec:	481a      	ldr	r0, [pc, #104]	; (8018658 <prvAddCurrentTaskToDelayedList+0xbc>)
 80185ee:	f7fe f908 	bl	8016802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80185f2:	e026      	b.n	8018642 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80185f4:	68fa      	ldr	r2, [r7, #12]
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	4413      	add	r3, r2
 80185fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80185fc:	4b14      	ldr	r3, [pc, #80]	; (8018650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	68ba      	ldr	r2, [r7, #8]
 8018602:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018604:	68ba      	ldr	r2, [r7, #8]
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	429a      	cmp	r2, r3
 801860a:	d209      	bcs.n	8018620 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801860c:	4b13      	ldr	r3, [pc, #76]	; (801865c <prvAddCurrentTaskToDelayedList+0xc0>)
 801860e:	681a      	ldr	r2, [r3, #0]
 8018610:	4b0f      	ldr	r3, [pc, #60]	; (8018650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	3304      	adds	r3, #4
 8018616:	4619      	mov	r1, r3
 8018618:	4610      	mov	r0, r2
 801861a:	f7fe f916 	bl	801684a <vListInsert>
}
 801861e:	e010      	b.n	8018642 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018620:	4b0f      	ldr	r3, [pc, #60]	; (8018660 <prvAddCurrentTaskToDelayedList+0xc4>)
 8018622:	681a      	ldr	r2, [r3, #0]
 8018624:	4b0a      	ldr	r3, [pc, #40]	; (8018650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	3304      	adds	r3, #4
 801862a:	4619      	mov	r1, r3
 801862c:	4610      	mov	r0, r2
 801862e:	f7fe f90c 	bl	801684a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018632:	4b0c      	ldr	r3, [pc, #48]	; (8018664 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	68ba      	ldr	r2, [r7, #8]
 8018638:	429a      	cmp	r2, r3
 801863a:	d202      	bcs.n	8018642 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801863c:	4a09      	ldr	r2, [pc, #36]	; (8018664 <prvAddCurrentTaskToDelayedList+0xc8>)
 801863e:	68bb      	ldr	r3, [r7, #8]
 8018640:	6013      	str	r3, [r2, #0]
}
 8018642:	bf00      	nop
 8018644:	3710      	adds	r7, #16
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}
 801864a:	bf00      	nop
 801864c:	2001f520 	.word	0x2001f520
 8018650:	2001f41c 	.word	0x2001f41c
 8018654:	2001f524 	.word	0x2001f524
 8018658:	2001f508 	.word	0x2001f508
 801865c:	2001f4d8 	.word	0x2001f4d8
 8018660:	2001f4d4 	.word	0x2001f4d4
 8018664:	2001f53c 	.word	0x2001f53c

08018668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018668:	b480      	push	{r7}
 801866a:	b085      	sub	sp, #20
 801866c:	af00      	add	r7, sp, #0
 801866e:	60f8      	str	r0, [r7, #12]
 8018670:	60b9      	str	r1, [r7, #8]
 8018672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	3b04      	subs	r3, #4
 8018678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	3b04      	subs	r3, #4
 8018686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	f023 0201 	bic.w	r2, r3, #1
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	3b04      	subs	r3, #4
 8018696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018698:	4a0c      	ldr	r2, [pc, #48]	; (80186cc <pxPortInitialiseStack+0x64>)
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	3b14      	subs	r3, #20
 80186a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80186a4:	687a      	ldr	r2, [r7, #4]
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	3b04      	subs	r3, #4
 80186ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	f06f 0202 	mvn.w	r2, #2
 80186b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	3b20      	subs	r3, #32
 80186bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80186be:	68fb      	ldr	r3, [r7, #12]
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	3714      	adds	r7, #20
 80186c4:	46bd      	mov	sp, r7
 80186c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ca:	4770      	bx	lr
 80186cc:	080186d1 	.word	0x080186d1

080186d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80186d0:	b480      	push	{r7}
 80186d2:	b085      	sub	sp, #20
 80186d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80186d6:	2300      	movs	r3, #0
 80186d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80186da:	4b14      	ldr	r3, [pc, #80]	; (801872c <prvTaskExitError+0x5c>)
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186e2:	d00c      	beq.n	80186fe <prvTaskExitError+0x2e>
	__asm volatile
 80186e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186e8:	b672      	cpsid	i
 80186ea:	f383 8811 	msr	BASEPRI, r3
 80186ee:	f3bf 8f6f 	isb	sy
 80186f2:	f3bf 8f4f 	dsb	sy
 80186f6:	b662      	cpsie	i
 80186f8:	60fb      	str	r3, [r7, #12]
}
 80186fa:	bf00      	nop
 80186fc:	e7fe      	b.n	80186fc <prvTaskExitError+0x2c>
	__asm volatile
 80186fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018702:	b672      	cpsid	i
 8018704:	f383 8811 	msr	BASEPRI, r3
 8018708:	f3bf 8f6f 	isb	sy
 801870c:	f3bf 8f4f 	dsb	sy
 8018710:	b662      	cpsie	i
 8018712:	60bb      	str	r3, [r7, #8]
}
 8018714:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018716:	bf00      	nop
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d0fc      	beq.n	8018718 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801871e:	bf00      	nop
 8018720:	bf00      	nop
 8018722:	3714      	adds	r7, #20
 8018724:	46bd      	mov	sp, r7
 8018726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801872a:	4770      	bx	lr
 801872c:	2000007c 	.word	0x2000007c

08018730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018730:	4b07      	ldr	r3, [pc, #28]	; (8018750 <pxCurrentTCBConst2>)
 8018732:	6819      	ldr	r1, [r3, #0]
 8018734:	6808      	ldr	r0, [r1, #0]
 8018736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801873a:	f380 8809 	msr	PSP, r0
 801873e:	f3bf 8f6f 	isb	sy
 8018742:	f04f 0000 	mov.w	r0, #0
 8018746:	f380 8811 	msr	BASEPRI, r0
 801874a:	4770      	bx	lr
 801874c:	f3af 8000 	nop.w

08018750 <pxCurrentTCBConst2>:
 8018750:	2001f41c 	.word	0x2001f41c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018754:	bf00      	nop
 8018756:	bf00      	nop

08018758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018758:	4808      	ldr	r0, [pc, #32]	; (801877c <prvPortStartFirstTask+0x24>)
 801875a:	6800      	ldr	r0, [r0, #0]
 801875c:	6800      	ldr	r0, [r0, #0]
 801875e:	f380 8808 	msr	MSP, r0
 8018762:	f04f 0000 	mov.w	r0, #0
 8018766:	f380 8814 	msr	CONTROL, r0
 801876a:	b662      	cpsie	i
 801876c:	b661      	cpsie	f
 801876e:	f3bf 8f4f 	dsb	sy
 8018772:	f3bf 8f6f 	isb	sy
 8018776:	df00      	svc	0
 8018778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801877a:	bf00      	nop
 801877c:	e000ed08 	.word	0xe000ed08

08018780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b084      	sub	sp, #16
 8018784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018786:	4b37      	ldr	r3, [pc, #220]	; (8018864 <xPortStartScheduler+0xe4>)
 8018788:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	781b      	ldrb	r3, [r3, #0]
 801878e:	b2db      	uxtb	r3, r3
 8018790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	22ff      	movs	r2, #255	; 0xff
 8018796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	b2db      	uxtb	r3, r3
 801879e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80187a0:	78fb      	ldrb	r3, [r7, #3]
 80187a2:	b2db      	uxtb	r3, r3
 80187a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80187a8:	b2da      	uxtb	r2, r3
 80187aa:	4b2f      	ldr	r3, [pc, #188]	; (8018868 <xPortStartScheduler+0xe8>)
 80187ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80187ae:	4b2f      	ldr	r3, [pc, #188]	; (801886c <xPortStartScheduler+0xec>)
 80187b0:	2207      	movs	r2, #7
 80187b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80187b4:	e009      	b.n	80187ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80187b6:	4b2d      	ldr	r3, [pc, #180]	; (801886c <xPortStartScheduler+0xec>)
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	3b01      	subs	r3, #1
 80187bc:	4a2b      	ldr	r2, [pc, #172]	; (801886c <xPortStartScheduler+0xec>)
 80187be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80187c0:	78fb      	ldrb	r3, [r7, #3]
 80187c2:	b2db      	uxtb	r3, r3
 80187c4:	005b      	lsls	r3, r3, #1
 80187c6:	b2db      	uxtb	r3, r3
 80187c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80187ca:	78fb      	ldrb	r3, [r7, #3]
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80187d2:	2b80      	cmp	r3, #128	; 0x80
 80187d4:	d0ef      	beq.n	80187b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80187d6:	4b25      	ldr	r3, [pc, #148]	; (801886c <xPortStartScheduler+0xec>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	f1c3 0307 	rsb	r3, r3, #7
 80187de:	2b04      	cmp	r3, #4
 80187e0:	d00c      	beq.n	80187fc <xPortStartScheduler+0x7c>
	__asm volatile
 80187e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187e6:	b672      	cpsid	i
 80187e8:	f383 8811 	msr	BASEPRI, r3
 80187ec:	f3bf 8f6f 	isb	sy
 80187f0:	f3bf 8f4f 	dsb	sy
 80187f4:	b662      	cpsie	i
 80187f6:	60bb      	str	r3, [r7, #8]
}
 80187f8:	bf00      	nop
 80187fa:	e7fe      	b.n	80187fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80187fc:	4b1b      	ldr	r3, [pc, #108]	; (801886c <xPortStartScheduler+0xec>)
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	021b      	lsls	r3, r3, #8
 8018802:	4a1a      	ldr	r2, [pc, #104]	; (801886c <xPortStartScheduler+0xec>)
 8018804:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018806:	4b19      	ldr	r3, [pc, #100]	; (801886c <xPortStartScheduler+0xec>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801880e:	4a17      	ldr	r2, [pc, #92]	; (801886c <xPortStartScheduler+0xec>)
 8018810:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	b2da      	uxtb	r2, r3
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801881a:	4b15      	ldr	r3, [pc, #84]	; (8018870 <xPortStartScheduler+0xf0>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	4a14      	ldr	r2, [pc, #80]	; (8018870 <xPortStartScheduler+0xf0>)
 8018820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018824:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018826:	4b12      	ldr	r3, [pc, #72]	; (8018870 <xPortStartScheduler+0xf0>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	4a11      	ldr	r2, [pc, #68]	; (8018870 <xPortStartScheduler+0xf0>)
 801882c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018830:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018832:	f000 f8dd 	bl	80189f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018836:	4b0f      	ldr	r3, [pc, #60]	; (8018874 <xPortStartScheduler+0xf4>)
 8018838:	2200      	movs	r2, #0
 801883a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801883c:	f000 f8fc 	bl	8018a38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018840:	4b0d      	ldr	r3, [pc, #52]	; (8018878 <xPortStartScheduler+0xf8>)
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	4a0c      	ldr	r2, [pc, #48]	; (8018878 <xPortStartScheduler+0xf8>)
 8018846:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801884a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801884c:	f7ff ff84 	bl	8018758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018850:	f7ff f996 	bl	8017b80 <vTaskSwitchContext>
	prvTaskExitError();
 8018854:	f7ff ff3c 	bl	80186d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018858:	2300      	movs	r3, #0
}
 801885a:	4618      	mov	r0, r3
 801885c:	3710      	adds	r7, #16
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	e000e400 	.word	0xe000e400
 8018868:	2001f548 	.word	0x2001f548
 801886c:	2001f54c 	.word	0x2001f54c
 8018870:	e000ed20 	.word	0xe000ed20
 8018874:	2000007c 	.word	0x2000007c
 8018878:	e000ef34 	.word	0xe000ef34

0801887c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801887c:	b480      	push	{r7}
 801887e:	b083      	sub	sp, #12
 8018880:	af00      	add	r7, sp, #0
	__asm volatile
 8018882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018886:	b672      	cpsid	i
 8018888:	f383 8811 	msr	BASEPRI, r3
 801888c:	f3bf 8f6f 	isb	sy
 8018890:	f3bf 8f4f 	dsb	sy
 8018894:	b662      	cpsie	i
 8018896:	607b      	str	r3, [r7, #4]
}
 8018898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801889a:	4b10      	ldr	r3, [pc, #64]	; (80188dc <vPortEnterCritical+0x60>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	3301      	adds	r3, #1
 80188a0:	4a0e      	ldr	r2, [pc, #56]	; (80188dc <vPortEnterCritical+0x60>)
 80188a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80188a4:	4b0d      	ldr	r3, [pc, #52]	; (80188dc <vPortEnterCritical+0x60>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	2b01      	cmp	r3, #1
 80188aa:	d111      	bne.n	80188d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80188ac:	4b0c      	ldr	r3, [pc, #48]	; (80188e0 <vPortEnterCritical+0x64>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	b2db      	uxtb	r3, r3
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d00c      	beq.n	80188d0 <vPortEnterCritical+0x54>
	__asm volatile
 80188b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ba:	b672      	cpsid	i
 80188bc:	f383 8811 	msr	BASEPRI, r3
 80188c0:	f3bf 8f6f 	isb	sy
 80188c4:	f3bf 8f4f 	dsb	sy
 80188c8:	b662      	cpsie	i
 80188ca:	603b      	str	r3, [r7, #0]
}
 80188cc:	bf00      	nop
 80188ce:	e7fe      	b.n	80188ce <vPortEnterCritical+0x52>
	}
}
 80188d0:	bf00      	nop
 80188d2:	370c      	adds	r7, #12
 80188d4:	46bd      	mov	sp, r7
 80188d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188da:	4770      	bx	lr
 80188dc:	2000007c 	.word	0x2000007c
 80188e0:	e000ed04 	.word	0xe000ed04

080188e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80188e4:	b480      	push	{r7}
 80188e6:	b083      	sub	sp, #12
 80188e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80188ea:	4b13      	ldr	r3, [pc, #76]	; (8018938 <vPortExitCritical+0x54>)
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d10c      	bne.n	801890c <vPortExitCritical+0x28>
	__asm volatile
 80188f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188f6:	b672      	cpsid	i
 80188f8:	f383 8811 	msr	BASEPRI, r3
 80188fc:	f3bf 8f6f 	isb	sy
 8018900:	f3bf 8f4f 	dsb	sy
 8018904:	b662      	cpsie	i
 8018906:	607b      	str	r3, [r7, #4]
}
 8018908:	bf00      	nop
 801890a:	e7fe      	b.n	801890a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801890c:	4b0a      	ldr	r3, [pc, #40]	; (8018938 <vPortExitCritical+0x54>)
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	3b01      	subs	r3, #1
 8018912:	4a09      	ldr	r2, [pc, #36]	; (8018938 <vPortExitCritical+0x54>)
 8018914:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018916:	4b08      	ldr	r3, [pc, #32]	; (8018938 <vPortExitCritical+0x54>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d105      	bne.n	801892a <vPortExitCritical+0x46>
 801891e:	2300      	movs	r3, #0
 8018920:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	f383 8811 	msr	BASEPRI, r3
}
 8018928:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801892a:	bf00      	nop
 801892c:	370c      	adds	r7, #12
 801892e:	46bd      	mov	sp, r7
 8018930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018934:	4770      	bx	lr
 8018936:	bf00      	nop
 8018938:	2000007c 	.word	0x2000007c
 801893c:	00000000 	.word	0x00000000

08018940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018940:	f3ef 8009 	mrs	r0, PSP
 8018944:	f3bf 8f6f 	isb	sy
 8018948:	4b15      	ldr	r3, [pc, #84]	; (80189a0 <pxCurrentTCBConst>)
 801894a:	681a      	ldr	r2, [r3, #0]
 801894c:	f01e 0f10 	tst.w	lr, #16
 8018950:	bf08      	it	eq
 8018952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801895a:	6010      	str	r0, [r2, #0]
 801895c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018964:	b672      	cpsid	i
 8018966:	f380 8811 	msr	BASEPRI, r0
 801896a:	f3bf 8f4f 	dsb	sy
 801896e:	f3bf 8f6f 	isb	sy
 8018972:	b662      	cpsie	i
 8018974:	f7ff f904 	bl	8017b80 <vTaskSwitchContext>
 8018978:	f04f 0000 	mov.w	r0, #0
 801897c:	f380 8811 	msr	BASEPRI, r0
 8018980:	bc09      	pop	{r0, r3}
 8018982:	6819      	ldr	r1, [r3, #0]
 8018984:	6808      	ldr	r0, [r1, #0]
 8018986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801898a:	f01e 0f10 	tst.w	lr, #16
 801898e:	bf08      	it	eq
 8018990:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018994:	f380 8809 	msr	PSP, r0
 8018998:	f3bf 8f6f 	isb	sy
 801899c:	4770      	bx	lr
 801899e:	bf00      	nop

080189a0 <pxCurrentTCBConst>:
 80189a0:	2001f41c 	.word	0x2001f41c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80189a4:	bf00      	nop
 80189a6:	bf00      	nop

080189a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
	__asm volatile
 80189ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189b2:	b672      	cpsid	i
 80189b4:	f383 8811 	msr	BASEPRI, r3
 80189b8:	f3bf 8f6f 	isb	sy
 80189bc:	f3bf 8f4f 	dsb	sy
 80189c0:	b662      	cpsie	i
 80189c2:	607b      	str	r3, [r7, #4]
}
 80189c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80189c6:	f7ff f821 	bl	8017a0c <xTaskIncrementTick>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d003      	beq.n	80189d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80189d0:	4b06      	ldr	r3, [pc, #24]	; (80189ec <SysTick_Handler+0x44>)
 80189d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189d6:	601a      	str	r2, [r3, #0]
 80189d8:	2300      	movs	r3, #0
 80189da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80189dc:	683b      	ldr	r3, [r7, #0]
 80189de:	f383 8811 	msr	BASEPRI, r3
}
 80189e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80189e4:	bf00      	nop
 80189e6:	3708      	adds	r7, #8
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}
 80189ec:	e000ed04 	.word	0xe000ed04

080189f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80189f0:	b480      	push	{r7}
 80189f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80189f4:	4b0b      	ldr	r3, [pc, #44]	; (8018a24 <vPortSetupTimerInterrupt+0x34>)
 80189f6:	2200      	movs	r2, #0
 80189f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80189fa:	4b0b      	ldr	r3, [pc, #44]	; (8018a28 <vPortSetupTimerInterrupt+0x38>)
 80189fc:	2200      	movs	r2, #0
 80189fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018a00:	4b0a      	ldr	r3, [pc, #40]	; (8018a2c <vPortSetupTimerInterrupt+0x3c>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	4a0a      	ldr	r2, [pc, #40]	; (8018a30 <vPortSetupTimerInterrupt+0x40>)
 8018a06:	fba2 2303 	umull	r2, r3, r2, r3
 8018a0a:	099b      	lsrs	r3, r3, #6
 8018a0c:	4a09      	ldr	r2, [pc, #36]	; (8018a34 <vPortSetupTimerInterrupt+0x44>)
 8018a0e:	3b01      	subs	r3, #1
 8018a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018a12:	4b04      	ldr	r3, [pc, #16]	; (8018a24 <vPortSetupTimerInterrupt+0x34>)
 8018a14:	2207      	movs	r2, #7
 8018a16:	601a      	str	r2, [r3, #0]
}
 8018a18:	bf00      	nop
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a20:	4770      	bx	lr
 8018a22:	bf00      	nop
 8018a24:	e000e010 	.word	0xe000e010
 8018a28:	e000e018 	.word	0xe000e018
 8018a2c:	2000002c 	.word	0x2000002c
 8018a30:	10624dd3 	.word	0x10624dd3
 8018a34:	e000e014 	.word	0xe000e014

08018a38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018a38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018a48 <vPortEnableVFP+0x10>
 8018a3c:	6801      	ldr	r1, [r0, #0]
 8018a3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018a42:	6001      	str	r1, [r0, #0]
 8018a44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018a46:	bf00      	nop
 8018a48:	e000ed88 	.word	0xe000ed88

08018a4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018a4c:	b480      	push	{r7}
 8018a4e:	b085      	sub	sp, #20
 8018a50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018a52:	f3ef 8305 	mrs	r3, IPSR
 8018a56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	2b0f      	cmp	r3, #15
 8018a5c:	d916      	bls.n	8018a8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018a5e:	4a19      	ldr	r2, [pc, #100]	; (8018ac4 <vPortValidateInterruptPriority+0x78>)
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	4413      	add	r3, r2
 8018a64:	781b      	ldrb	r3, [r3, #0]
 8018a66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018a68:	4b17      	ldr	r3, [pc, #92]	; (8018ac8 <vPortValidateInterruptPriority+0x7c>)
 8018a6a:	781b      	ldrb	r3, [r3, #0]
 8018a6c:	7afa      	ldrb	r2, [r7, #11]
 8018a6e:	429a      	cmp	r2, r3
 8018a70:	d20c      	bcs.n	8018a8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8018a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a76:	b672      	cpsid	i
 8018a78:	f383 8811 	msr	BASEPRI, r3
 8018a7c:	f3bf 8f6f 	isb	sy
 8018a80:	f3bf 8f4f 	dsb	sy
 8018a84:	b662      	cpsie	i
 8018a86:	607b      	str	r3, [r7, #4]
}
 8018a88:	bf00      	nop
 8018a8a:	e7fe      	b.n	8018a8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018a8c:	4b0f      	ldr	r3, [pc, #60]	; (8018acc <vPortValidateInterruptPriority+0x80>)
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018a94:	4b0e      	ldr	r3, [pc, #56]	; (8018ad0 <vPortValidateInterruptPriority+0x84>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	429a      	cmp	r2, r3
 8018a9a:	d90c      	bls.n	8018ab6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8018a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa0:	b672      	cpsid	i
 8018aa2:	f383 8811 	msr	BASEPRI, r3
 8018aa6:	f3bf 8f6f 	isb	sy
 8018aaa:	f3bf 8f4f 	dsb	sy
 8018aae:	b662      	cpsie	i
 8018ab0:	603b      	str	r3, [r7, #0]
}
 8018ab2:	bf00      	nop
 8018ab4:	e7fe      	b.n	8018ab4 <vPortValidateInterruptPriority+0x68>
	}
 8018ab6:	bf00      	nop
 8018ab8:	3714      	adds	r7, #20
 8018aba:	46bd      	mov	sp, r7
 8018abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac0:	4770      	bx	lr
 8018ac2:	bf00      	nop
 8018ac4:	e000e3f0 	.word	0xe000e3f0
 8018ac8:	2001f548 	.word	0x2001f548
 8018acc:	e000ed0c 	.word	0xe000ed0c
 8018ad0:	2001f54c 	.word	0x2001f54c

08018ad4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b08a      	sub	sp, #40	; 0x28
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018adc:	2300      	movs	r3, #0
 8018ade:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018ae0:	f7fe fec6 	bl	8017870 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018ae4:	4b5e      	ldr	r3, [pc, #376]	; (8018c60 <pvPortMalloc+0x18c>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d101      	bne.n	8018af0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018aec:	f000 f920 	bl	8018d30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018af0:	4b5c      	ldr	r3, [pc, #368]	; (8018c64 <pvPortMalloc+0x190>)
 8018af2:	681a      	ldr	r2, [r3, #0]
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	4013      	ands	r3, r2
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	f040 8092 	bne.w	8018c22 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d01f      	beq.n	8018b44 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8018b04:	2208      	movs	r2, #8
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	4413      	add	r3, r2
 8018b0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	f003 0307 	and.w	r3, r3, #7
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d016      	beq.n	8018b44 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	f023 0307 	bic.w	r3, r3, #7
 8018b1c:	3308      	adds	r3, #8
 8018b1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	f003 0307 	and.w	r3, r3, #7
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d00c      	beq.n	8018b44 <pvPortMalloc+0x70>
	__asm volatile
 8018b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b2e:	b672      	cpsid	i
 8018b30:	f383 8811 	msr	BASEPRI, r3
 8018b34:	f3bf 8f6f 	isb	sy
 8018b38:	f3bf 8f4f 	dsb	sy
 8018b3c:	b662      	cpsie	i
 8018b3e:	617b      	str	r3, [r7, #20]
}
 8018b40:	bf00      	nop
 8018b42:	e7fe      	b.n	8018b42 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d06b      	beq.n	8018c22 <pvPortMalloc+0x14e>
 8018b4a:	4b47      	ldr	r3, [pc, #284]	; (8018c68 <pvPortMalloc+0x194>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	687a      	ldr	r2, [r7, #4]
 8018b50:	429a      	cmp	r2, r3
 8018b52:	d866      	bhi.n	8018c22 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018b54:	4b45      	ldr	r3, [pc, #276]	; (8018c6c <pvPortMalloc+0x198>)
 8018b56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018b58:	4b44      	ldr	r3, [pc, #272]	; (8018c6c <pvPortMalloc+0x198>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018b5e:	e004      	b.n	8018b6a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8018b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b6c:	685b      	ldr	r3, [r3, #4]
 8018b6e:	687a      	ldr	r2, [r7, #4]
 8018b70:	429a      	cmp	r2, r3
 8018b72:	d903      	bls.n	8018b7c <pvPortMalloc+0xa8>
 8018b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d1f1      	bne.n	8018b60 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018b7c:	4b38      	ldr	r3, [pc, #224]	; (8018c60 <pvPortMalloc+0x18c>)
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b82:	429a      	cmp	r2, r3
 8018b84:	d04d      	beq.n	8018c22 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018b86:	6a3b      	ldr	r3, [r7, #32]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	2208      	movs	r2, #8
 8018b8c:	4413      	add	r3, r2
 8018b8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b92:	681a      	ldr	r2, [r3, #0]
 8018b94:	6a3b      	ldr	r3, [r7, #32]
 8018b96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b9a:	685a      	ldr	r2, [r3, #4]
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	1ad2      	subs	r2, r2, r3
 8018ba0:	2308      	movs	r3, #8
 8018ba2:	005b      	lsls	r3, r3, #1
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d921      	bls.n	8018bec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	4413      	add	r3, r2
 8018bae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018bb0:	69bb      	ldr	r3, [r7, #24]
 8018bb2:	f003 0307 	and.w	r3, r3, #7
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d00c      	beq.n	8018bd4 <pvPortMalloc+0x100>
	__asm volatile
 8018bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bbe:	b672      	cpsid	i
 8018bc0:	f383 8811 	msr	BASEPRI, r3
 8018bc4:	f3bf 8f6f 	isb	sy
 8018bc8:	f3bf 8f4f 	dsb	sy
 8018bcc:	b662      	cpsie	i
 8018bce:	613b      	str	r3, [r7, #16]
}
 8018bd0:	bf00      	nop
 8018bd2:	e7fe      	b.n	8018bd2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bd6:	685a      	ldr	r2, [r3, #4]
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	1ad2      	subs	r2, r2, r3
 8018bdc:	69bb      	ldr	r3, [r7, #24]
 8018bde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018be2:	687a      	ldr	r2, [r7, #4]
 8018be4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018be6:	69b8      	ldr	r0, [r7, #24]
 8018be8:	f000 f904 	bl	8018df4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018bec:	4b1e      	ldr	r3, [pc, #120]	; (8018c68 <pvPortMalloc+0x194>)
 8018bee:	681a      	ldr	r2, [r3, #0]
 8018bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf2:	685b      	ldr	r3, [r3, #4]
 8018bf4:	1ad3      	subs	r3, r2, r3
 8018bf6:	4a1c      	ldr	r2, [pc, #112]	; (8018c68 <pvPortMalloc+0x194>)
 8018bf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018bfa:	4b1b      	ldr	r3, [pc, #108]	; (8018c68 <pvPortMalloc+0x194>)
 8018bfc:	681a      	ldr	r2, [r3, #0]
 8018bfe:	4b1c      	ldr	r3, [pc, #112]	; (8018c70 <pvPortMalloc+0x19c>)
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	429a      	cmp	r2, r3
 8018c04:	d203      	bcs.n	8018c0e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018c06:	4b18      	ldr	r3, [pc, #96]	; (8018c68 <pvPortMalloc+0x194>)
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	4a19      	ldr	r2, [pc, #100]	; (8018c70 <pvPortMalloc+0x19c>)
 8018c0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c10:	685a      	ldr	r2, [r3, #4]
 8018c12:	4b14      	ldr	r3, [pc, #80]	; (8018c64 <pvPortMalloc+0x190>)
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	431a      	orrs	r2, r3
 8018c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c1e:	2200      	movs	r2, #0
 8018c20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018c22:	f7fe fe33 	bl	801788c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8018c26:	69fb      	ldr	r3, [r7, #28]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d101      	bne.n	8018c30 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8018c2c:	f7e8 fd42 	bl	80016b4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018c30:	69fb      	ldr	r3, [r7, #28]
 8018c32:	f003 0307 	and.w	r3, r3, #7
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d00c      	beq.n	8018c54 <pvPortMalloc+0x180>
	__asm volatile
 8018c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c3e:	b672      	cpsid	i
 8018c40:	f383 8811 	msr	BASEPRI, r3
 8018c44:	f3bf 8f6f 	isb	sy
 8018c48:	f3bf 8f4f 	dsb	sy
 8018c4c:	b662      	cpsie	i
 8018c4e:	60fb      	str	r3, [r7, #12]
}
 8018c50:	bf00      	nop
 8018c52:	e7fe      	b.n	8018c52 <pvPortMalloc+0x17e>
	return pvReturn;
 8018c54:	69fb      	ldr	r3, [r7, #28]
}
 8018c56:	4618      	mov	r0, r3
 8018c58:	3728      	adds	r7, #40	; 0x28
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}
 8018c5e:	bf00      	nop
 8018c60:	20027558 	.word	0x20027558
 8018c64:	20027564 	.word	0x20027564
 8018c68:	2002755c 	.word	0x2002755c
 8018c6c:	20027550 	.word	0x20027550
 8018c70:	20027560 	.word	0x20027560

08018c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b086      	sub	sp, #24
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d04c      	beq.n	8018d20 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018c86:	2308      	movs	r3, #8
 8018c88:	425b      	negs	r3, r3
 8018c8a:	697a      	ldr	r2, [r7, #20]
 8018c8c:	4413      	add	r3, r2
 8018c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018c90:	697b      	ldr	r3, [r7, #20]
 8018c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018c94:	693b      	ldr	r3, [r7, #16]
 8018c96:	685a      	ldr	r2, [r3, #4]
 8018c98:	4b23      	ldr	r3, [pc, #140]	; (8018d28 <vPortFree+0xb4>)
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	4013      	ands	r3, r2
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d10c      	bne.n	8018cbc <vPortFree+0x48>
	__asm volatile
 8018ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ca6:	b672      	cpsid	i
 8018ca8:	f383 8811 	msr	BASEPRI, r3
 8018cac:	f3bf 8f6f 	isb	sy
 8018cb0:	f3bf 8f4f 	dsb	sy
 8018cb4:	b662      	cpsie	i
 8018cb6:	60fb      	str	r3, [r7, #12]
}
 8018cb8:	bf00      	nop
 8018cba:	e7fe      	b.n	8018cba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018cbc:	693b      	ldr	r3, [r7, #16]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d00c      	beq.n	8018cde <vPortFree+0x6a>
	__asm volatile
 8018cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cc8:	b672      	cpsid	i
 8018cca:	f383 8811 	msr	BASEPRI, r3
 8018cce:	f3bf 8f6f 	isb	sy
 8018cd2:	f3bf 8f4f 	dsb	sy
 8018cd6:	b662      	cpsie	i
 8018cd8:	60bb      	str	r3, [r7, #8]
}
 8018cda:	bf00      	nop
 8018cdc:	e7fe      	b.n	8018cdc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018cde:	693b      	ldr	r3, [r7, #16]
 8018ce0:	685a      	ldr	r2, [r3, #4]
 8018ce2:	4b11      	ldr	r3, [pc, #68]	; (8018d28 <vPortFree+0xb4>)
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	4013      	ands	r3, r2
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d019      	beq.n	8018d20 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018cec:	693b      	ldr	r3, [r7, #16]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d115      	bne.n	8018d20 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018cf4:	693b      	ldr	r3, [r7, #16]
 8018cf6:	685a      	ldr	r2, [r3, #4]
 8018cf8:	4b0b      	ldr	r3, [pc, #44]	; (8018d28 <vPortFree+0xb4>)
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	43db      	mvns	r3, r3
 8018cfe:	401a      	ands	r2, r3
 8018d00:	693b      	ldr	r3, [r7, #16]
 8018d02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018d04:	f7fe fdb4 	bl	8017870 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018d08:	693b      	ldr	r3, [r7, #16]
 8018d0a:	685a      	ldr	r2, [r3, #4]
 8018d0c:	4b07      	ldr	r3, [pc, #28]	; (8018d2c <vPortFree+0xb8>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	4413      	add	r3, r2
 8018d12:	4a06      	ldr	r2, [pc, #24]	; (8018d2c <vPortFree+0xb8>)
 8018d14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018d16:	6938      	ldr	r0, [r7, #16]
 8018d18:	f000 f86c 	bl	8018df4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018d1c:	f7fe fdb6 	bl	801788c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018d20:	bf00      	nop
 8018d22:	3718      	adds	r7, #24
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}
 8018d28:	20027564 	.word	0x20027564
 8018d2c:	2002755c 	.word	0x2002755c

08018d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018d30:	b480      	push	{r7}
 8018d32:	b085      	sub	sp, #20
 8018d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018d3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018d3c:	4b27      	ldr	r3, [pc, #156]	; (8018ddc <prvHeapInit+0xac>)
 8018d3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	f003 0307 	and.w	r3, r3, #7
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d00c      	beq.n	8018d64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	3307      	adds	r3, #7
 8018d4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	f023 0307 	bic.w	r3, r3, #7
 8018d56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018d58:	68ba      	ldr	r2, [r7, #8]
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	1ad3      	subs	r3, r2, r3
 8018d5e:	4a1f      	ldr	r2, [pc, #124]	; (8018ddc <prvHeapInit+0xac>)
 8018d60:	4413      	add	r3, r2
 8018d62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018d68:	4a1d      	ldr	r2, [pc, #116]	; (8018de0 <prvHeapInit+0xb0>)
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018d6e:	4b1c      	ldr	r3, [pc, #112]	; (8018de0 <prvHeapInit+0xb0>)
 8018d70:	2200      	movs	r2, #0
 8018d72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	68ba      	ldr	r2, [r7, #8]
 8018d78:	4413      	add	r3, r2
 8018d7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018d7c:	2208      	movs	r2, #8
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	1a9b      	subs	r3, r3, r2
 8018d82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	f023 0307 	bic.w	r3, r3, #7
 8018d8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	4a15      	ldr	r2, [pc, #84]	; (8018de4 <prvHeapInit+0xb4>)
 8018d90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018d92:	4b14      	ldr	r3, [pc, #80]	; (8018de4 <prvHeapInit+0xb4>)
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	2200      	movs	r2, #0
 8018d98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018d9a:	4b12      	ldr	r3, [pc, #72]	; (8018de4 <prvHeapInit+0xb4>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	2200      	movs	r2, #0
 8018da0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018da6:	683b      	ldr	r3, [r7, #0]
 8018da8:	68fa      	ldr	r2, [r7, #12]
 8018daa:	1ad2      	subs	r2, r2, r3
 8018dac:	683b      	ldr	r3, [r7, #0]
 8018dae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018db0:	4b0c      	ldr	r3, [pc, #48]	; (8018de4 <prvHeapInit+0xb4>)
 8018db2:	681a      	ldr	r2, [r3, #0]
 8018db4:	683b      	ldr	r3, [r7, #0]
 8018db6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	685b      	ldr	r3, [r3, #4]
 8018dbc:	4a0a      	ldr	r2, [pc, #40]	; (8018de8 <prvHeapInit+0xb8>)
 8018dbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018dc0:	683b      	ldr	r3, [r7, #0]
 8018dc2:	685b      	ldr	r3, [r3, #4]
 8018dc4:	4a09      	ldr	r2, [pc, #36]	; (8018dec <prvHeapInit+0xbc>)
 8018dc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018dc8:	4b09      	ldr	r3, [pc, #36]	; (8018df0 <prvHeapInit+0xc0>)
 8018dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018dce:	601a      	str	r2, [r3, #0]
}
 8018dd0:	bf00      	nop
 8018dd2:	3714      	adds	r7, #20
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dda:	4770      	bx	lr
 8018ddc:	2001f550 	.word	0x2001f550
 8018de0:	20027550 	.word	0x20027550
 8018de4:	20027558 	.word	0x20027558
 8018de8:	20027560 	.word	0x20027560
 8018dec:	2002755c 	.word	0x2002755c
 8018df0:	20027564 	.word	0x20027564

08018df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018df4:	b480      	push	{r7}
 8018df6:	b085      	sub	sp, #20
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018dfc:	4b28      	ldr	r3, [pc, #160]	; (8018ea0 <prvInsertBlockIntoFreeList+0xac>)
 8018dfe:	60fb      	str	r3, [r7, #12]
 8018e00:	e002      	b.n	8018e08 <prvInsertBlockIntoFreeList+0x14>
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	60fb      	str	r3, [r7, #12]
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	687a      	ldr	r2, [r7, #4]
 8018e0e:	429a      	cmp	r2, r3
 8018e10:	d8f7      	bhi.n	8018e02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	685b      	ldr	r3, [r3, #4]
 8018e1a:	68ba      	ldr	r2, [r7, #8]
 8018e1c:	4413      	add	r3, r2
 8018e1e:	687a      	ldr	r2, [r7, #4]
 8018e20:	429a      	cmp	r2, r3
 8018e22:	d108      	bne.n	8018e36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	685a      	ldr	r2, [r3, #4]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	685b      	ldr	r3, [r3, #4]
 8018e2c:	441a      	add	r2, r3
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	685b      	ldr	r3, [r3, #4]
 8018e3e:	68ba      	ldr	r2, [r7, #8]
 8018e40:	441a      	add	r2, r3
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	429a      	cmp	r2, r3
 8018e48:	d118      	bne.n	8018e7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	681a      	ldr	r2, [r3, #0]
 8018e4e:	4b15      	ldr	r3, [pc, #84]	; (8018ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	429a      	cmp	r2, r3
 8018e54:	d00d      	beq.n	8018e72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	685a      	ldr	r2, [r3, #4]
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	685b      	ldr	r3, [r3, #4]
 8018e60:	441a      	add	r2, r3
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	681a      	ldr	r2, [r3, #0]
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	601a      	str	r2, [r3, #0]
 8018e70:	e008      	b.n	8018e84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018e72:	4b0c      	ldr	r3, [pc, #48]	; (8018ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8018e74:	681a      	ldr	r2, [r3, #0]
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	601a      	str	r2, [r3, #0]
 8018e7a:	e003      	b.n	8018e84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	681a      	ldr	r2, [r3, #0]
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018e84:	68fa      	ldr	r2, [r7, #12]
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	429a      	cmp	r2, r3
 8018e8a:	d002      	beq.n	8018e92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	687a      	ldr	r2, [r7, #4]
 8018e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018e92:	bf00      	nop
 8018e94:	3714      	adds	r7, #20
 8018e96:	46bd      	mov	sp, r7
 8018e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9c:	4770      	bx	lr
 8018e9e:	bf00      	nop
 8018ea0:	20027550 	.word	0x20027550
 8018ea4:	20027558 	.word	0x20027558

08018ea8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8018eac:	2201      	movs	r2, #1
 8018eae:	490e      	ldr	r1, [pc, #56]	; (8018ee8 <MX_USB_HOST_Init+0x40>)
 8018eb0:	480e      	ldr	r0, [pc, #56]	; (8018eec <MX_USB_HOST_Init+0x44>)
 8018eb2:	f7fb fc7d 	bl	80147b0 <USBH_Init>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d001      	beq.n	8018ec0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8018ebc:	f7ea f826 	bl	8002f0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8018ec0:	490b      	ldr	r1, [pc, #44]	; (8018ef0 <MX_USB_HOST_Init+0x48>)
 8018ec2:	480a      	ldr	r0, [pc, #40]	; (8018eec <MX_USB_HOST_Init+0x44>)
 8018ec4:	f7fb fd2a 	bl	801491c <USBH_RegisterClass>
 8018ec8:	4603      	mov	r3, r0
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d001      	beq.n	8018ed2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8018ece:	f7ea f81d 	bl	8002f0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8018ed2:	4806      	ldr	r0, [pc, #24]	; (8018eec <MX_USB_HOST_Init+0x44>)
 8018ed4:	f7fb fdae 	bl	8014a34 <USBH_Start>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d001      	beq.n	8018ee2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8018ede:	f7ea f815 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8018ee2:	bf00      	nop
 8018ee4:	bd80      	pop	{r7, pc}
 8018ee6:	bf00      	nop
 8018ee8:	08018ef5 	.word	0x08018ef5
 8018eec:	20027568 	.word	0x20027568
 8018ef0:	2000005c 	.word	0x2000005c

08018ef4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8018ef4:	b480      	push	{r7}
 8018ef6:	b083      	sub	sp, #12
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
 8018efc:	460b      	mov	r3, r1
 8018efe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8018f00:	78fb      	ldrb	r3, [r7, #3]
 8018f02:	3b01      	subs	r3, #1
 8018f04:	2b04      	cmp	r3, #4
 8018f06:	d819      	bhi.n	8018f3c <USBH_UserProcess+0x48>
 8018f08:	a201      	add	r2, pc, #4	; (adr r2, 8018f10 <USBH_UserProcess+0x1c>)
 8018f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f0e:	bf00      	nop
 8018f10:	08018f3d 	.word	0x08018f3d
 8018f14:	08018f2d 	.word	0x08018f2d
 8018f18:	08018f3d 	.word	0x08018f3d
 8018f1c:	08018f35 	.word	0x08018f35
 8018f20:	08018f25 	.word	0x08018f25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018f24:	4b09      	ldr	r3, [pc, #36]	; (8018f4c <USBH_UserProcess+0x58>)
 8018f26:	2203      	movs	r2, #3
 8018f28:	701a      	strb	r2, [r3, #0]
  break;
 8018f2a:	e008      	b.n	8018f3e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8018f2c:	4b07      	ldr	r3, [pc, #28]	; (8018f4c <USBH_UserProcess+0x58>)
 8018f2e:	2202      	movs	r2, #2
 8018f30:	701a      	strb	r2, [r3, #0]
  break;
 8018f32:	e004      	b.n	8018f3e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018f34:	4b05      	ldr	r3, [pc, #20]	; (8018f4c <USBH_UserProcess+0x58>)
 8018f36:	2201      	movs	r2, #1
 8018f38:	701a      	strb	r2, [r3, #0]
  break;
 8018f3a:	e000      	b.n	8018f3e <USBH_UserProcess+0x4a>

  default:
  break;
 8018f3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8018f3e:	bf00      	nop
 8018f40:	370c      	adds	r7, #12
 8018f42:	46bd      	mov	sp, r7
 8018f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f48:	4770      	bx	lr
 8018f4a:	bf00      	nop
 8018f4c:	2002794c 	.word	0x2002794c

08018f50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b08a      	sub	sp, #40	; 0x28
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018f58:	f107 0314 	add.w	r3, r7, #20
 8018f5c:	2200      	movs	r2, #0
 8018f5e:	601a      	str	r2, [r3, #0]
 8018f60:	605a      	str	r2, [r3, #4]
 8018f62:	609a      	str	r2, [r3, #8]
 8018f64:	60da      	str	r2, [r3, #12]
 8018f66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018f70:	d13c      	bne.n	8018fec <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018f72:	4b20      	ldr	r3, [pc, #128]	; (8018ff4 <HAL_HCD_MspInit+0xa4>)
 8018f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f76:	4a1f      	ldr	r2, [pc, #124]	; (8018ff4 <HAL_HCD_MspInit+0xa4>)
 8018f78:	f043 0301 	orr.w	r3, r3, #1
 8018f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8018f7e:	4b1d      	ldr	r3, [pc, #116]	; (8018ff4 <HAL_HCD_MspInit+0xa4>)
 8018f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f82:	f003 0301 	and.w	r3, r3, #1
 8018f86:	613b      	str	r3, [r7, #16]
 8018f88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8018f8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8018f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f90:	2302      	movs	r3, #2
 8018f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f94:	2300      	movs	r3, #0
 8018f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f98:	2303      	movs	r3, #3
 8018f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018f9c:	230a      	movs	r3, #10
 8018f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018fa0:	f107 0314 	add.w	r3, r7, #20
 8018fa4:	4619      	mov	r1, r3
 8018fa6:	4814      	ldr	r0, [pc, #80]	; (8018ff8 <HAL_HCD_MspInit+0xa8>)
 8018fa8:	f7ef fe4a 	bl	8008c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018fac:	4b11      	ldr	r3, [pc, #68]	; (8018ff4 <HAL_HCD_MspInit+0xa4>)
 8018fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018fb0:	4a10      	ldr	r2, [pc, #64]	; (8018ff4 <HAL_HCD_MspInit+0xa4>)
 8018fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fb6:	6353      	str	r3, [r2, #52]	; 0x34
 8018fb8:	4b0e      	ldr	r3, [pc, #56]	; (8018ff4 <HAL_HCD_MspInit+0xa4>)
 8018fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018fc0:	60fb      	str	r3, [r7, #12]
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	4b0b      	ldr	r3, [pc, #44]	; (8018ff4 <HAL_HCD_MspInit+0xa4>)
 8018fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fc8:	4a0a      	ldr	r2, [pc, #40]	; (8018ff4 <HAL_HCD_MspInit+0xa4>)
 8018fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018fce:	6453      	str	r3, [r2, #68]	; 0x44
 8018fd0:	4b08      	ldr	r3, [pc, #32]	; (8018ff4 <HAL_HCD_MspInit+0xa4>)
 8018fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018fd8:	60bb      	str	r3, [r7, #8]
 8018fda:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018fdc:	2200      	movs	r2, #0
 8018fde:	2105      	movs	r1, #5
 8018fe0:	2043      	movs	r0, #67	; 0x43
 8018fe2:	f7ee fb93 	bl	800770c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018fe6:	2043      	movs	r0, #67	; 0x43
 8018fe8:	f7ee fbac 	bl	8007744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018fec:	bf00      	nop
 8018fee:	3728      	adds	r7, #40	; 0x28
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}
 8018ff4:	40023800 	.word	0x40023800
 8018ff8:	40020000 	.word	0x40020000

08018ffc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b082      	sub	sp, #8
 8019000:	af00      	add	r7, sp, #0
 8019002:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801900a:	4618      	mov	r0, r3
 801900c:	f7fc f9bf 	bl	801538e <USBH_LL_IncTimer>
}
 8019010:	bf00      	nop
 8019012:	3708      	adds	r7, #8
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}

08019018 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b082      	sub	sp, #8
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019026:	4618      	mov	r0, r3
 8019028:	f7fc fa03 	bl	8015432 <USBH_LL_Connect>
}
 801902c:	bf00      	nop
 801902e:	3708      	adds	r7, #8
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}

08019034 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019042:	4618      	mov	r0, r3
 8019044:	f7fc fa18 	bl	8015478 <USBH_LL_Disconnect>
}
 8019048:	bf00      	nop
 801904a:	3708      	adds	r7, #8
 801904c:	46bd      	mov	sp, r7
 801904e:	bd80      	pop	{r7, pc}

08019050 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b082      	sub	sp, #8
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
 8019058:	460b      	mov	r3, r1
 801905a:	70fb      	strb	r3, [r7, #3]
 801905c:	4613      	mov	r3, r2
 801905e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019066:	4618      	mov	r0, r3
 8019068:	f7fc fa4d 	bl	8015506 <USBH_LL_NotifyURBChange>
#endif
}
 801906c:	bf00      	nop
 801906e:	3708      	adds	r7, #8
 8019070:	46bd      	mov	sp, r7
 8019072:	bd80      	pop	{r7, pc}

08019074 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b082      	sub	sp, #8
 8019078:	af00      	add	r7, sp, #0
 801907a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019082:	4618      	mov	r0, r3
 8019084:	f7fc f9ad 	bl	80153e2 <USBH_LL_PortEnabled>
}
 8019088:	bf00      	nop
 801908a:	3708      	adds	r7, #8
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}

08019090 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b082      	sub	sp, #8
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801909e:	4618      	mov	r0, r3
 80190a0:	f7fc f9b9 	bl	8015416 <USBH_LL_PortDisabled>
}
 80190a4:	bf00      	nop
 80190a6:	3708      	adds	r7, #8
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}

080190ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b082      	sub	sp, #8
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80190ba:	2b01      	cmp	r3, #1
 80190bc:	d12a      	bne.n	8019114 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80190be:	4a18      	ldr	r2, [pc, #96]	; (8019120 <USBH_LL_Init+0x74>)
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	4a15      	ldr	r2, [pc, #84]	; (8019120 <USBH_LL_Init+0x74>)
 80190ca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80190ce:	4b14      	ldr	r3, [pc, #80]	; (8019120 <USBH_LL_Init+0x74>)
 80190d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80190d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80190d6:	4b12      	ldr	r3, [pc, #72]	; (8019120 <USBH_LL_Init+0x74>)
 80190d8:	2208      	movs	r2, #8
 80190da:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80190dc:	4b10      	ldr	r3, [pc, #64]	; (8019120 <USBH_LL_Init+0x74>)
 80190de:	2201      	movs	r2, #1
 80190e0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80190e2:	4b0f      	ldr	r3, [pc, #60]	; (8019120 <USBH_LL_Init+0x74>)
 80190e4:	2200      	movs	r2, #0
 80190e6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80190e8:	4b0d      	ldr	r3, [pc, #52]	; (8019120 <USBH_LL_Init+0x74>)
 80190ea:	2202      	movs	r2, #2
 80190ec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80190ee:	4b0c      	ldr	r3, [pc, #48]	; (8019120 <USBH_LL_Init+0x74>)
 80190f0:	2200      	movs	r2, #0
 80190f2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80190f4:	480a      	ldr	r0, [pc, #40]	; (8019120 <USBH_LL_Init+0x74>)
 80190f6:	f7f0 f8ca 	bl	800928e <HAL_HCD_Init>
 80190fa:	4603      	mov	r3, r0
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d001      	beq.n	8019104 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8019100:	f7e9 ff04 	bl	8002f0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8019104:	4806      	ldr	r0, [pc, #24]	; (8019120 <USBH_LL_Init+0x74>)
 8019106:	f7f0 fca7 	bl	8009a58 <HAL_HCD_GetCurrentFrame>
 801910a:	4603      	mov	r3, r0
 801910c:	4619      	mov	r1, r3
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f7fc f92e 	bl	8015370 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019114:	2300      	movs	r3, #0
}
 8019116:	4618      	mov	r0, r3
 8019118:	3708      	adds	r7, #8
 801911a:	46bd      	mov	sp, r7
 801911c:	bd80      	pop	{r7, pc}
 801911e:	bf00      	nop
 8019120:	20027950 	.word	0x20027950

08019124 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b084      	sub	sp, #16
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801912c:	2300      	movs	r3, #0
 801912e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019130:	2300      	movs	r3, #0
 8019132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801913a:	4618      	mov	r0, r3
 801913c:	f7f0 fc16 	bl	800996c <HAL_HCD_Start>
 8019140:	4603      	mov	r3, r0
 8019142:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019144:	7bfb      	ldrb	r3, [r7, #15]
 8019146:	4618      	mov	r0, r3
 8019148:	f000 f95c 	bl	8019404 <USBH_Get_USB_Status>
 801914c:	4603      	mov	r3, r0
 801914e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019150:	7bbb      	ldrb	r3, [r7, #14]
}
 8019152:	4618      	mov	r0, r3
 8019154:	3710      	adds	r7, #16
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}

0801915a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801915a:	b580      	push	{r7, lr}
 801915c:	b084      	sub	sp, #16
 801915e:	af00      	add	r7, sp, #0
 8019160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019162:	2300      	movs	r3, #0
 8019164:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019166:	2300      	movs	r3, #0
 8019168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019170:	4618      	mov	r0, r3
 8019172:	f7f0 fc1e 	bl	80099b2 <HAL_HCD_Stop>
 8019176:	4603      	mov	r3, r0
 8019178:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801917a:	7bfb      	ldrb	r3, [r7, #15]
 801917c:	4618      	mov	r0, r3
 801917e:	f000 f941 	bl	8019404 <USBH_Get_USB_Status>
 8019182:	4603      	mov	r3, r0
 8019184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019186:	7bbb      	ldrb	r3, [r7, #14]
}
 8019188:	4618      	mov	r0, r3
 801918a:	3710      	adds	r7, #16
 801918c:	46bd      	mov	sp, r7
 801918e:	bd80      	pop	{r7, pc}

08019190 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b084      	sub	sp, #16
 8019194:	af00      	add	r7, sp, #0
 8019196:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019198:	2301      	movs	r3, #1
 801919a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80191a2:	4618      	mov	r0, r3
 80191a4:	f7f0 fc66 	bl	8009a74 <HAL_HCD_GetCurrentSpeed>
 80191a8:	4603      	mov	r3, r0
 80191aa:	2b02      	cmp	r3, #2
 80191ac:	d00c      	beq.n	80191c8 <USBH_LL_GetSpeed+0x38>
 80191ae:	2b02      	cmp	r3, #2
 80191b0:	d80d      	bhi.n	80191ce <USBH_LL_GetSpeed+0x3e>
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d002      	beq.n	80191bc <USBH_LL_GetSpeed+0x2c>
 80191b6:	2b01      	cmp	r3, #1
 80191b8:	d003      	beq.n	80191c2 <USBH_LL_GetSpeed+0x32>
 80191ba:	e008      	b.n	80191ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80191bc:	2300      	movs	r3, #0
 80191be:	73fb      	strb	r3, [r7, #15]
    break;
 80191c0:	e008      	b.n	80191d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80191c2:	2301      	movs	r3, #1
 80191c4:	73fb      	strb	r3, [r7, #15]
    break;
 80191c6:	e005      	b.n	80191d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80191c8:	2302      	movs	r3, #2
 80191ca:	73fb      	strb	r3, [r7, #15]
    break;
 80191cc:	e002      	b.n	80191d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80191ce:	2301      	movs	r3, #1
 80191d0:	73fb      	strb	r3, [r7, #15]
    break;
 80191d2:	bf00      	nop
  }
  return  speed;
 80191d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80191d6:	4618      	mov	r0, r3
 80191d8:	3710      	adds	r7, #16
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd80      	pop	{r7, pc}

080191de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80191de:	b580      	push	{r7, lr}
 80191e0:	b084      	sub	sp, #16
 80191e2:	af00      	add	r7, sp, #0
 80191e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191e6:	2300      	movs	r3, #0
 80191e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80191ea:	2300      	movs	r3, #0
 80191ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80191f4:	4618      	mov	r0, r3
 80191f6:	f7f0 fbf9 	bl	80099ec <HAL_HCD_ResetPort>
 80191fa:	4603      	mov	r3, r0
 80191fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80191fe:	7bfb      	ldrb	r3, [r7, #15]
 8019200:	4618      	mov	r0, r3
 8019202:	f000 f8ff 	bl	8019404 <USBH_Get_USB_Status>
 8019206:	4603      	mov	r3, r0
 8019208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801920a:	7bbb      	ldrb	r3, [r7, #14]
}
 801920c:	4618      	mov	r0, r3
 801920e:	3710      	adds	r7, #16
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}

08019214 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b082      	sub	sp, #8
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
 801921c:	460b      	mov	r3, r1
 801921e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019226:	78fa      	ldrb	r2, [r7, #3]
 8019228:	4611      	mov	r1, r2
 801922a:	4618      	mov	r0, r3
 801922c:	f7f0 fc00 	bl	8009a30 <HAL_HCD_HC_GetXferCount>
 8019230:	4603      	mov	r3, r0
}
 8019232:	4618      	mov	r0, r3
 8019234:	3708      	adds	r7, #8
 8019236:	46bd      	mov	sp, r7
 8019238:	bd80      	pop	{r7, pc}

0801923a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801923a:	b590      	push	{r4, r7, lr}
 801923c:	b089      	sub	sp, #36	; 0x24
 801923e:	af04      	add	r7, sp, #16
 8019240:	6078      	str	r0, [r7, #4]
 8019242:	4608      	mov	r0, r1
 8019244:	4611      	mov	r1, r2
 8019246:	461a      	mov	r2, r3
 8019248:	4603      	mov	r3, r0
 801924a:	70fb      	strb	r3, [r7, #3]
 801924c:	460b      	mov	r3, r1
 801924e:	70bb      	strb	r3, [r7, #2]
 8019250:	4613      	mov	r3, r2
 8019252:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019254:	2300      	movs	r3, #0
 8019256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019258:	2300      	movs	r3, #0
 801925a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019262:	787c      	ldrb	r4, [r7, #1]
 8019264:	78ba      	ldrb	r2, [r7, #2]
 8019266:	78f9      	ldrb	r1, [r7, #3]
 8019268:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801926a:	9302      	str	r3, [sp, #8]
 801926c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019270:	9301      	str	r3, [sp, #4]
 8019272:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019276:	9300      	str	r3, [sp, #0]
 8019278:	4623      	mov	r3, r4
 801927a:	f7f0 f86a 	bl	8009352 <HAL_HCD_HC_Init>
 801927e:	4603      	mov	r3, r0
 8019280:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019282:	7bfb      	ldrb	r3, [r7, #15]
 8019284:	4618      	mov	r0, r3
 8019286:	f000 f8bd 	bl	8019404 <USBH_Get_USB_Status>
 801928a:	4603      	mov	r3, r0
 801928c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801928e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019290:	4618      	mov	r0, r3
 8019292:	3714      	adds	r7, #20
 8019294:	46bd      	mov	sp, r7
 8019296:	bd90      	pop	{r4, r7, pc}

08019298 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b084      	sub	sp, #16
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
 80192a0:	460b      	mov	r3, r1
 80192a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192a4:	2300      	movs	r3, #0
 80192a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80192a8:	2300      	movs	r3, #0
 80192aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80192b2:	78fa      	ldrb	r2, [r7, #3]
 80192b4:	4611      	mov	r1, r2
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7f0 f8da 	bl	8009470 <HAL_HCD_HC_Halt>
 80192bc:	4603      	mov	r3, r0
 80192be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80192c0:	7bfb      	ldrb	r3, [r7, #15]
 80192c2:	4618      	mov	r0, r3
 80192c4:	f000 f89e 	bl	8019404 <USBH_Get_USB_Status>
 80192c8:	4603      	mov	r3, r0
 80192ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80192ce:	4618      	mov	r0, r3
 80192d0:	3710      	adds	r7, #16
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}

080192d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80192d6:	b590      	push	{r4, r7, lr}
 80192d8:	b089      	sub	sp, #36	; 0x24
 80192da:	af04      	add	r7, sp, #16
 80192dc:	6078      	str	r0, [r7, #4]
 80192de:	4608      	mov	r0, r1
 80192e0:	4611      	mov	r1, r2
 80192e2:	461a      	mov	r2, r3
 80192e4:	4603      	mov	r3, r0
 80192e6:	70fb      	strb	r3, [r7, #3]
 80192e8:	460b      	mov	r3, r1
 80192ea:	70bb      	strb	r3, [r7, #2]
 80192ec:	4613      	mov	r3, r2
 80192ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192f0:	2300      	movs	r3, #0
 80192f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80192f4:	2300      	movs	r3, #0
 80192f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80192fe:	787c      	ldrb	r4, [r7, #1]
 8019300:	78ba      	ldrb	r2, [r7, #2]
 8019302:	78f9      	ldrb	r1, [r7, #3]
 8019304:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019308:	9303      	str	r3, [sp, #12]
 801930a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801930c:	9302      	str	r3, [sp, #8]
 801930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019310:	9301      	str	r3, [sp, #4]
 8019312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019316:	9300      	str	r3, [sp, #0]
 8019318:	4623      	mov	r3, r4
 801931a:	f7f0 f8cd 	bl	80094b8 <HAL_HCD_HC_SubmitRequest>
 801931e:	4603      	mov	r3, r0
 8019320:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8019322:	7bfb      	ldrb	r3, [r7, #15]
 8019324:	4618      	mov	r0, r3
 8019326:	f000 f86d 	bl	8019404 <USBH_Get_USB_Status>
 801932a:	4603      	mov	r3, r0
 801932c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801932e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019330:	4618      	mov	r0, r3
 8019332:	3714      	adds	r7, #20
 8019334:	46bd      	mov	sp, r7
 8019336:	bd90      	pop	{r4, r7, pc}

08019338 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b082      	sub	sp, #8
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
 8019340:	460b      	mov	r3, r1
 8019342:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801934a:	78fa      	ldrb	r2, [r7, #3]
 801934c:	4611      	mov	r1, r2
 801934e:	4618      	mov	r0, r3
 8019350:	f7f0 fb5a 	bl	8009a08 <HAL_HCD_HC_GetURBState>
 8019354:	4603      	mov	r3, r0
}
 8019356:	4618      	mov	r0, r3
 8019358:	3708      	adds	r7, #8
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}

0801935e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801935e:	b580      	push	{r7, lr}
 8019360:	b082      	sub	sp, #8
 8019362:	af00      	add	r7, sp, #0
 8019364:	6078      	str	r0, [r7, #4]
 8019366:	460b      	mov	r3, r1
 8019368:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019370:	2b01      	cmp	r3, #1
 8019372:	d103      	bne.n	801937c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019374:	78fb      	ldrb	r3, [r7, #3]
 8019376:	4618      	mov	r0, r3
 8019378:	f000 f870 	bl	801945c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801937c:	20c8      	movs	r0, #200	; 0xc8
 801937e:	f7ed fe3d 	bl	8006ffc <HAL_Delay>
  return USBH_OK;
 8019382:	2300      	movs	r3, #0
}
 8019384:	4618      	mov	r0, r3
 8019386:	3708      	adds	r7, #8
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}

0801938c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801938c:	b480      	push	{r7}
 801938e:	b085      	sub	sp, #20
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
 8019394:	460b      	mov	r3, r1
 8019396:	70fb      	strb	r3, [r7, #3]
 8019398:	4613      	mov	r3, r2
 801939a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80193a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80193a4:	78fb      	ldrb	r3, [r7, #3]
 80193a6:	68fa      	ldr	r2, [r7, #12]
 80193a8:	212c      	movs	r1, #44	; 0x2c
 80193aa:	fb01 f303 	mul.w	r3, r1, r3
 80193ae:	4413      	add	r3, r2
 80193b0:	333b      	adds	r3, #59	; 0x3b
 80193b2:	781b      	ldrb	r3, [r3, #0]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d009      	beq.n	80193cc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80193b8:	78fb      	ldrb	r3, [r7, #3]
 80193ba:	68fa      	ldr	r2, [r7, #12]
 80193bc:	212c      	movs	r1, #44	; 0x2c
 80193be:	fb01 f303 	mul.w	r3, r1, r3
 80193c2:	4413      	add	r3, r2
 80193c4:	3354      	adds	r3, #84	; 0x54
 80193c6:	78ba      	ldrb	r2, [r7, #2]
 80193c8:	701a      	strb	r2, [r3, #0]
 80193ca:	e008      	b.n	80193de <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80193cc:	78fb      	ldrb	r3, [r7, #3]
 80193ce:	68fa      	ldr	r2, [r7, #12]
 80193d0:	212c      	movs	r1, #44	; 0x2c
 80193d2:	fb01 f303 	mul.w	r3, r1, r3
 80193d6:	4413      	add	r3, r2
 80193d8:	3355      	adds	r3, #85	; 0x55
 80193da:	78ba      	ldrb	r2, [r7, #2]
 80193dc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80193de:	2300      	movs	r3, #0
}
 80193e0:	4618      	mov	r0, r3
 80193e2:	3714      	adds	r7, #20
 80193e4:	46bd      	mov	sp, r7
 80193e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ea:	4770      	bx	lr

080193ec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80193f4:	6878      	ldr	r0, [r7, #4]
 80193f6:	f7ed fe01 	bl	8006ffc <HAL_Delay>
}
 80193fa:	bf00      	nop
 80193fc:	3708      	adds	r7, #8
 80193fe:	46bd      	mov	sp, r7
 8019400:	bd80      	pop	{r7, pc}
	...

08019404 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019404:	b480      	push	{r7}
 8019406:	b085      	sub	sp, #20
 8019408:	af00      	add	r7, sp, #0
 801940a:	4603      	mov	r3, r0
 801940c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801940e:	2300      	movs	r3, #0
 8019410:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019412:	79fb      	ldrb	r3, [r7, #7]
 8019414:	2b03      	cmp	r3, #3
 8019416:	d817      	bhi.n	8019448 <USBH_Get_USB_Status+0x44>
 8019418:	a201      	add	r2, pc, #4	; (adr r2, 8019420 <USBH_Get_USB_Status+0x1c>)
 801941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801941e:	bf00      	nop
 8019420:	08019431 	.word	0x08019431
 8019424:	08019437 	.word	0x08019437
 8019428:	0801943d 	.word	0x0801943d
 801942c:	08019443 	.word	0x08019443
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019430:	2300      	movs	r3, #0
 8019432:	73fb      	strb	r3, [r7, #15]
    break;
 8019434:	e00b      	b.n	801944e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019436:	2302      	movs	r3, #2
 8019438:	73fb      	strb	r3, [r7, #15]
    break;
 801943a:	e008      	b.n	801944e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801943c:	2301      	movs	r3, #1
 801943e:	73fb      	strb	r3, [r7, #15]
    break;
 8019440:	e005      	b.n	801944e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019442:	2302      	movs	r3, #2
 8019444:	73fb      	strb	r3, [r7, #15]
    break;
 8019446:	e002      	b.n	801944e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019448:	2302      	movs	r3, #2
 801944a:	73fb      	strb	r3, [r7, #15]
    break;
 801944c:	bf00      	nop
  }
  return usb_status;
 801944e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019450:	4618      	mov	r0, r3
 8019452:	3714      	adds	r7, #20
 8019454:	46bd      	mov	sp, r7
 8019456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945a:	4770      	bx	lr

0801945c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b084      	sub	sp, #16
 8019460:	af00      	add	r7, sp, #0
 8019462:	4603      	mov	r3, r0
 8019464:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019466:	79fb      	ldrb	r3, [r7, #7]
 8019468:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801946a:	79fb      	ldrb	r3, [r7, #7]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d102      	bne.n	8019476 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8019470:	2301      	movs	r3, #1
 8019472:	73fb      	strb	r3, [r7, #15]
 8019474:	e001      	b.n	801947a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8019476:	2300      	movs	r3, #0
 8019478:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801947a:	7bfb      	ldrb	r3, [r7, #15]
 801947c:	461a      	mov	r2, r3
 801947e:	2120      	movs	r1, #32
 8019480:	4803      	ldr	r0, [pc, #12]	; (8019490 <MX_DriverVbusFS+0x34>)
 8019482:	f7ef fead 	bl	80091e0 <HAL_GPIO_WritePin>
}
 8019486:	bf00      	nop
 8019488:	3710      	adds	r7, #16
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}
 801948e:	bf00      	nop
 8019490:	40020c00 	.word	0x40020c00

08019494 <arm_rfft_fast_init_f32>:
 8019494:	084b      	lsrs	r3, r1, #1
 8019496:	2b80      	cmp	r3, #128	; 0x80
 8019498:	b430      	push	{r4, r5}
 801949a:	8201      	strh	r1, [r0, #16]
 801949c:	8003      	strh	r3, [r0, #0]
 801949e:	d070      	beq.n	8019582 <arm_rfft_fast_init_f32+0xee>
 80194a0:	d916      	bls.n	80194d0 <arm_rfft_fast_init_f32+0x3c>
 80194a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80194a6:	d05f      	beq.n	8019568 <arm_rfft_fast_init_f32+0xd4>
 80194a8:	d936      	bls.n	8019518 <arm_rfft_fast_init_f32+0x84>
 80194aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80194ae:	d026      	beq.n	80194fe <arm_rfft_fast_init_f32+0x6a>
 80194b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80194b4:	d112      	bne.n	80194dc <arm_rfft_fast_init_f32+0x48>
 80194b6:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 80194ba:	4c38      	ldr	r4, [pc, #224]	; (801959c <arm_rfft_fast_init_f32+0x108>)
 80194bc:	4938      	ldr	r1, [pc, #224]	; (80195a0 <arm_rfft_fast_init_f32+0x10c>)
 80194be:	2300      	movs	r3, #0
 80194c0:	4a38      	ldr	r2, [pc, #224]	; (80195a4 <arm_rfft_fast_init_f32+0x110>)
 80194c2:	8185      	strh	r5, [r0, #12]
 80194c4:	6084      	str	r4, [r0, #8]
 80194c6:	6041      	str	r1, [r0, #4]
 80194c8:	6142      	str	r2, [r0, #20]
 80194ca:	4618      	mov	r0, r3
 80194cc:	bc30      	pop	{r4, r5}
 80194ce:	4770      	bx	lr
 80194d0:	2b20      	cmp	r3, #32
 80194d2:	d031      	beq.n	8019538 <arm_rfft_fast_init_f32+0xa4>
 80194d4:	2b40      	cmp	r3, #64	; 0x40
 80194d6:	d006      	beq.n	80194e6 <arm_rfft_fast_init_f32+0x52>
 80194d8:	2b10      	cmp	r3, #16
 80194da:	d039      	beq.n	8019550 <arm_rfft_fast_init_f32+0xbc>
 80194dc:	f04f 33ff 	mov.w	r3, #4294967295
 80194e0:	bc30      	pop	{r4, r5}
 80194e2:	4618      	mov	r0, r3
 80194e4:	4770      	bx	lr
 80194e6:	2538      	movs	r5, #56	; 0x38
 80194e8:	4c2f      	ldr	r4, [pc, #188]	; (80195a8 <arm_rfft_fast_init_f32+0x114>)
 80194ea:	4930      	ldr	r1, [pc, #192]	; (80195ac <arm_rfft_fast_init_f32+0x118>)
 80194ec:	2300      	movs	r3, #0
 80194ee:	4a30      	ldr	r2, [pc, #192]	; (80195b0 <arm_rfft_fast_init_f32+0x11c>)
 80194f0:	8185      	strh	r5, [r0, #12]
 80194f2:	6084      	str	r4, [r0, #8]
 80194f4:	6041      	str	r1, [r0, #4]
 80194f6:	6142      	str	r2, [r0, #20]
 80194f8:	4618      	mov	r0, r3
 80194fa:	bc30      	pop	{r4, r5}
 80194fc:	4770      	bx	lr
 80194fe:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8019502:	4c2c      	ldr	r4, [pc, #176]	; (80195b4 <arm_rfft_fast_init_f32+0x120>)
 8019504:	492c      	ldr	r1, [pc, #176]	; (80195b8 <arm_rfft_fast_init_f32+0x124>)
 8019506:	2300      	movs	r3, #0
 8019508:	4a2c      	ldr	r2, [pc, #176]	; (80195bc <arm_rfft_fast_init_f32+0x128>)
 801950a:	8185      	strh	r5, [r0, #12]
 801950c:	6084      	str	r4, [r0, #8]
 801950e:	6041      	str	r1, [r0, #4]
 8019510:	6142      	str	r2, [r0, #20]
 8019512:	4618      	mov	r0, r3
 8019514:	bc30      	pop	{r4, r5}
 8019516:	4770      	bx	lr
 8019518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801951c:	d1de      	bne.n	80194dc <arm_rfft_fast_init_f32+0x48>
 801951e:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8019522:	4c27      	ldr	r4, [pc, #156]	; (80195c0 <arm_rfft_fast_init_f32+0x12c>)
 8019524:	4927      	ldr	r1, [pc, #156]	; (80195c4 <arm_rfft_fast_init_f32+0x130>)
 8019526:	2300      	movs	r3, #0
 8019528:	4a27      	ldr	r2, [pc, #156]	; (80195c8 <arm_rfft_fast_init_f32+0x134>)
 801952a:	8185      	strh	r5, [r0, #12]
 801952c:	6084      	str	r4, [r0, #8]
 801952e:	6041      	str	r1, [r0, #4]
 8019530:	6142      	str	r2, [r0, #20]
 8019532:	4618      	mov	r0, r3
 8019534:	bc30      	pop	{r4, r5}
 8019536:	4770      	bx	lr
 8019538:	2530      	movs	r5, #48	; 0x30
 801953a:	4c24      	ldr	r4, [pc, #144]	; (80195cc <arm_rfft_fast_init_f32+0x138>)
 801953c:	4924      	ldr	r1, [pc, #144]	; (80195d0 <arm_rfft_fast_init_f32+0x13c>)
 801953e:	2300      	movs	r3, #0
 8019540:	4a24      	ldr	r2, [pc, #144]	; (80195d4 <arm_rfft_fast_init_f32+0x140>)
 8019542:	8185      	strh	r5, [r0, #12]
 8019544:	6084      	str	r4, [r0, #8]
 8019546:	6041      	str	r1, [r0, #4]
 8019548:	6142      	str	r2, [r0, #20]
 801954a:	4618      	mov	r0, r3
 801954c:	bc30      	pop	{r4, r5}
 801954e:	4770      	bx	lr
 8019550:	2514      	movs	r5, #20
 8019552:	4c21      	ldr	r4, [pc, #132]	; (80195d8 <arm_rfft_fast_init_f32+0x144>)
 8019554:	4921      	ldr	r1, [pc, #132]	; (80195dc <arm_rfft_fast_init_f32+0x148>)
 8019556:	2300      	movs	r3, #0
 8019558:	4a21      	ldr	r2, [pc, #132]	; (80195e0 <arm_rfft_fast_init_f32+0x14c>)
 801955a:	8185      	strh	r5, [r0, #12]
 801955c:	6084      	str	r4, [r0, #8]
 801955e:	6041      	str	r1, [r0, #4]
 8019560:	6142      	str	r2, [r0, #20]
 8019562:	4618      	mov	r0, r3
 8019564:	bc30      	pop	{r4, r5}
 8019566:	4770      	bx	lr
 8019568:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 801956c:	4c1d      	ldr	r4, [pc, #116]	; (80195e4 <arm_rfft_fast_init_f32+0x150>)
 801956e:	491e      	ldr	r1, [pc, #120]	; (80195e8 <arm_rfft_fast_init_f32+0x154>)
 8019570:	2300      	movs	r3, #0
 8019572:	4a1e      	ldr	r2, [pc, #120]	; (80195ec <arm_rfft_fast_init_f32+0x158>)
 8019574:	8185      	strh	r5, [r0, #12]
 8019576:	6084      	str	r4, [r0, #8]
 8019578:	6041      	str	r1, [r0, #4]
 801957a:	6142      	str	r2, [r0, #20]
 801957c:	4618      	mov	r0, r3
 801957e:	bc30      	pop	{r4, r5}
 8019580:	4770      	bx	lr
 8019582:	25d0      	movs	r5, #208	; 0xd0
 8019584:	4c1a      	ldr	r4, [pc, #104]	; (80195f0 <arm_rfft_fast_init_f32+0x15c>)
 8019586:	491b      	ldr	r1, [pc, #108]	; (80195f4 <arm_rfft_fast_init_f32+0x160>)
 8019588:	2300      	movs	r3, #0
 801958a:	4a1b      	ldr	r2, [pc, #108]	; (80195f8 <arm_rfft_fast_init_f32+0x164>)
 801958c:	8185      	strh	r5, [r0, #12]
 801958e:	6084      	str	r4, [r0, #8]
 8019590:	6041      	str	r1, [r0, #4]
 8019592:	6142      	str	r2, [r0, #20]
 8019594:	4618      	mov	r0, r3
 8019596:	bc30      	pop	{r4, r5}
 8019598:	4770      	bx	lr
 801959a:	bf00      	nop
 801959c:	0802c620 	.word	0x0802c620
 80195a0:	0801d818 	.word	0x0801d818
 80195a4:	08023988 	.word	0x08023988
 80195a8:	08021918 	.word	0x08021918
 80195ac:	0802e3e0 	.word	0x0802e3e0
 80195b0:	080308d0 	.word	0x080308d0
 80195b4:	0802a308 	.word	0x0802a308
 80195b8:	08028208 	.word	0x08028208
 80195bc:	08021988 	.word	0x08021988
 80195c0:	08030560 	.word	0x08030560
 80195c4:	08027988 	.word	0x08027988
 80195c8:	0802e5e0 	.word	0x0802e5e0
 80195cc:	0802b1c0 	.word	0x0802b1c0
 80195d0:	0802a208 	.word	0x0802a208
 80195d4:	08021818 	.word	0x08021818
 80195d8:	0802b118 	.word	0x0802b118
 80195dc:	08028188 	.word	0x08028188
 80195e0:	0802b140 	.word	0x0802b140
 80195e4:	0802ede0 	.word	0x0802ede0
 80195e8:	0802b620 	.word	0x0802b620
 80195ec:	0802f160 	.word	0x0802f160
 80195f0:	08030ad0 	.word	0x08030ad0
 80195f4:	0802b220 	.word	0x0802b220
 80195f8:	08030160 	.word	0x08030160

080195fc <__errno>:
 80195fc:	4b01      	ldr	r3, [pc, #4]	; (8019604 <__errno+0x8>)
 80195fe:	6818      	ldr	r0, [r3, #0]
 8019600:	4770      	bx	lr
 8019602:	bf00      	nop
 8019604:	20000080 	.word	0x20000080

08019608 <__libc_init_array>:
 8019608:	b570      	push	{r4, r5, r6, lr}
 801960a:	4d0d      	ldr	r5, [pc, #52]	; (8019640 <__libc_init_array+0x38>)
 801960c:	4c0d      	ldr	r4, [pc, #52]	; (8019644 <__libc_init_array+0x3c>)
 801960e:	1b64      	subs	r4, r4, r5
 8019610:	10a4      	asrs	r4, r4, #2
 8019612:	2600      	movs	r6, #0
 8019614:	42a6      	cmp	r6, r4
 8019616:	d109      	bne.n	801962c <__libc_init_array+0x24>
 8019618:	4d0b      	ldr	r5, [pc, #44]	; (8019648 <__libc_init_array+0x40>)
 801961a:	4c0c      	ldr	r4, [pc, #48]	; (801964c <__libc_init_array+0x44>)
 801961c:	f001 fa6e 	bl	801aafc <_init>
 8019620:	1b64      	subs	r4, r4, r5
 8019622:	10a4      	asrs	r4, r4, #2
 8019624:	2600      	movs	r6, #0
 8019626:	42a6      	cmp	r6, r4
 8019628:	d105      	bne.n	8019636 <__libc_init_array+0x2e>
 801962a:	bd70      	pop	{r4, r5, r6, pc}
 801962c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019630:	4798      	blx	r3
 8019632:	3601      	adds	r6, #1
 8019634:	e7ee      	b.n	8019614 <__libc_init_array+0xc>
 8019636:	f855 3b04 	ldr.w	r3, [r5], #4
 801963a:	4798      	blx	r3
 801963c:	3601      	adds	r6, #1
 801963e:	e7f2      	b.n	8019626 <__libc_init_array+0x1e>
 8019640:	08030d10 	.word	0x08030d10
 8019644:	08030d10 	.word	0x08030d10
 8019648:	08030d10 	.word	0x08030d10
 801964c:	08030d14 	.word	0x08030d14

08019650 <malloc>:
 8019650:	4b02      	ldr	r3, [pc, #8]	; (801965c <malloc+0xc>)
 8019652:	4601      	mov	r1, r0
 8019654:	6818      	ldr	r0, [r3, #0]
 8019656:	f000 b88d 	b.w	8019774 <_malloc_r>
 801965a:	bf00      	nop
 801965c:	20000080 	.word	0x20000080

08019660 <free>:
 8019660:	4b02      	ldr	r3, [pc, #8]	; (801966c <free+0xc>)
 8019662:	4601      	mov	r1, r0
 8019664:	6818      	ldr	r0, [r3, #0]
 8019666:	f000 b819 	b.w	801969c <_free_r>
 801966a:	bf00      	nop
 801966c:	20000080 	.word	0x20000080

08019670 <memcpy>:
 8019670:	440a      	add	r2, r1
 8019672:	4291      	cmp	r1, r2
 8019674:	f100 33ff 	add.w	r3, r0, #4294967295
 8019678:	d100      	bne.n	801967c <memcpy+0xc>
 801967a:	4770      	bx	lr
 801967c:	b510      	push	{r4, lr}
 801967e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019686:	4291      	cmp	r1, r2
 8019688:	d1f9      	bne.n	801967e <memcpy+0xe>
 801968a:	bd10      	pop	{r4, pc}

0801968c <memset>:
 801968c:	4402      	add	r2, r0
 801968e:	4603      	mov	r3, r0
 8019690:	4293      	cmp	r3, r2
 8019692:	d100      	bne.n	8019696 <memset+0xa>
 8019694:	4770      	bx	lr
 8019696:	f803 1b01 	strb.w	r1, [r3], #1
 801969a:	e7f9      	b.n	8019690 <memset+0x4>

0801969c <_free_r>:
 801969c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801969e:	2900      	cmp	r1, #0
 80196a0:	d044      	beq.n	801972c <_free_r+0x90>
 80196a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196a6:	9001      	str	r0, [sp, #4]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	f1a1 0404 	sub.w	r4, r1, #4
 80196ae:	bfb8      	it	lt
 80196b0:	18e4      	addlt	r4, r4, r3
 80196b2:	f000 fc87 	bl	8019fc4 <__malloc_lock>
 80196b6:	4a1e      	ldr	r2, [pc, #120]	; (8019730 <_free_r+0x94>)
 80196b8:	9801      	ldr	r0, [sp, #4]
 80196ba:	6813      	ldr	r3, [r2, #0]
 80196bc:	b933      	cbnz	r3, 80196cc <_free_r+0x30>
 80196be:	6063      	str	r3, [r4, #4]
 80196c0:	6014      	str	r4, [r2, #0]
 80196c2:	b003      	add	sp, #12
 80196c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80196c8:	f000 bc82 	b.w	8019fd0 <__malloc_unlock>
 80196cc:	42a3      	cmp	r3, r4
 80196ce:	d908      	bls.n	80196e2 <_free_r+0x46>
 80196d0:	6825      	ldr	r5, [r4, #0]
 80196d2:	1961      	adds	r1, r4, r5
 80196d4:	428b      	cmp	r3, r1
 80196d6:	bf01      	itttt	eq
 80196d8:	6819      	ldreq	r1, [r3, #0]
 80196da:	685b      	ldreq	r3, [r3, #4]
 80196dc:	1949      	addeq	r1, r1, r5
 80196de:	6021      	streq	r1, [r4, #0]
 80196e0:	e7ed      	b.n	80196be <_free_r+0x22>
 80196e2:	461a      	mov	r2, r3
 80196e4:	685b      	ldr	r3, [r3, #4]
 80196e6:	b10b      	cbz	r3, 80196ec <_free_r+0x50>
 80196e8:	42a3      	cmp	r3, r4
 80196ea:	d9fa      	bls.n	80196e2 <_free_r+0x46>
 80196ec:	6811      	ldr	r1, [r2, #0]
 80196ee:	1855      	adds	r5, r2, r1
 80196f0:	42a5      	cmp	r5, r4
 80196f2:	d10b      	bne.n	801970c <_free_r+0x70>
 80196f4:	6824      	ldr	r4, [r4, #0]
 80196f6:	4421      	add	r1, r4
 80196f8:	1854      	adds	r4, r2, r1
 80196fa:	42a3      	cmp	r3, r4
 80196fc:	6011      	str	r1, [r2, #0]
 80196fe:	d1e0      	bne.n	80196c2 <_free_r+0x26>
 8019700:	681c      	ldr	r4, [r3, #0]
 8019702:	685b      	ldr	r3, [r3, #4]
 8019704:	6053      	str	r3, [r2, #4]
 8019706:	4421      	add	r1, r4
 8019708:	6011      	str	r1, [r2, #0]
 801970a:	e7da      	b.n	80196c2 <_free_r+0x26>
 801970c:	d902      	bls.n	8019714 <_free_r+0x78>
 801970e:	230c      	movs	r3, #12
 8019710:	6003      	str	r3, [r0, #0]
 8019712:	e7d6      	b.n	80196c2 <_free_r+0x26>
 8019714:	6825      	ldr	r5, [r4, #0]
 8019716:	1961      	adds	r1, r4, r5
 8019718:	428b      	cmp	r3, r1
 801971a:	bf04      	itt	eq
 801971c:	6819      	ldreq	r1, [r3, #0]
 801971e:	685b      	ldreq	r3, [r3, #4]
 8019720:	6063      	str	r3, [r4, #4]
 8019722:	bf04      	itt	eq
 8019724:	1949      	addeq	r1, r1, r5
 8019726:	6021      	streq	r1, [r4, #0]
 8019728:	6054      	str	r4, [r2, #4]
 801972a:	e7ca      	b.n	80196c2 <_free_r+0x26>
 801972c:	b003      	add	sp, #12
 801972e:	bd30      	pop	{r4, r5, pc}
 8019730:	20027c54 	.word	0x20027c54

08019734 <sbrk_aligned>:
 8019734:	b570      	push	{r4, r5, r6, lr}
 8019736:	4e0e      	ldr	r6, [pc, #56]	; (8019770 <sbrk_aligned+0x3c>)
 8019738:	460c      	mov	r4, r1
 801973a:	6831      	ldr	r1, [r6, #0]
 801973c:	4605      	mov	r5, r0
 801973e:	b911      	cbnz	r1, 8019746 <sbrk_aligned+0x12>
 8019740:	f000 f930 	bl	80199a4 <_sbrk_r>
 8019744:	6030      	str	r0, [r6, #0]
 8019746:	4621      	mov	r1, r4
 8019748:	4628      	mov	r0, r5
 801974a:	f000 f92b 	bl	80199a4 <_sbrk_r>
 801974e:	1c43      	adds	r3, r0, #1
 8019750:	d00a      	beq.n	8019768 <sbrk_aligned+0x34>
 8019752:	1cc4      	adds	r4, r0, #3
 8019754:	f024 0403 	bic.w	r4, r4, #3
 8019758:	42a0      	cmp	r0, r4
 801975a:	d007      	beq.n	801976c <sbrk_aligned+0x38>
 801975c:	1a21      	subs	r1, r4, r0
 801975e:	4628      	mov	r0, r5
 8019760:	f000 f920 	bl	80199a4 <_sbrk_r>
 8019764:	3001      	adds	r0, #1
 8019766:	d101      	bne.n	801976c <sbrk_aligned+0x38>
 8019768:	f04f 34ff 	mov.w	r4, #4294967295
 801976c:	4620      	mov	r0, r4
 801976e:	bd70      	pop	{r4, r5, r6, pc}
 8019770:	20027c58 	.word	0x20027c58

08019774 <_malloc_r>:
 8019774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019778:	1ccd      	adds	r5, r1, #3
 801977a:	f025 0503 	bic.w	r5, r5, #3
 801977e:	3508      	adds	r5, #8
 8019780:	2d0c      	cmp	r5, #12
 8019782:	bf38      	it	cc
 8019784:	250c      	movcc	r5, #12
 8019786:	2d00      	cmp	r5, #0
 8019788:	4607      	mov	r7, r0
 801978a:	db01      	blt.n	8019790 <_malloc_r+0x1c>
 801978c:	42a9      	cmp	r1, r5
 801978e:	d905      	bls.n	801979c <_malloc_r+0x28>
 8019790:	230c      	movs	r3, #12
 8019792:	603b      	str	r3, [r7, #0]
 8019794:	2600      	movs	r6, #0
 8019796:	4630      	mov	r0, r6
 8019798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801979c:	4e2e      	ldr	r6, [pc, #184]	; (8019858 <_malloc_r+0xe4>)
 801979e:	f000 fc11 	bl	8019fc4 <__malloc_lock>
 80197a2:	6833      	ldr	r3, [r6, #0]
 80197a4:	461c      	mov	r4, r3
 80197a6:	bb34      	cbnz	r4, 80197f6 <_malloc_r+0x82>
 80197a8:	4629      	mov	r1, r5
 80197aa:	4638      	mov	r0, r7
 80197ac:	f7ff ffc2 	bl	8019734 <sbrk_aligned>
 80197b0:	1c43      	adds	r3, r0, #1
 80197b2:	4604      	mov	r4, r0
 80197b4:	d14d      	bne.n	8019852 <_malloc_r+0xde>
 80197b6:	6834      	ldr	r4, [r6, #0]
 80197b8:	4626      	mov	r6, r4
 80197ba:	2e00      	cmp	r6, #0
 80197bc:	d140      	bne.n	8019840 <_malloc_r+0xcc>
 80197be:	6823      	ldr	r3, [r4, #0]
 80197c0:	4631      	mov	r1, r6
 80197c2:	4638      	mov	r0, r7
 80197c4:	eb04 0803 	add.w	r8, r4, r3
 80197c8:	f000 f8ec 	bl	80199a4 <_sbrk_r>
 80197cc:	4580      	cmp	r8, r0
 80197ce:	d13a      	bne.n	8019846 <_malloc_r+0xd2>
 80197d0:	6821      	ldr	r1, [r4, #0]
 80197d2:	3503      	adds	r5, #3
 80197d4:	1a6d      	subs	r5, r5, r1
 80197d6:	f025 0503 	bic.w	r5, r5, #3
 80197da:	3508      	adds	r5, #8
 80197dc:	2d0c      	cmp	r5, #12
 80197de:	bf38      	it	cc
 80197e0:	250c      	movcc	r5, #12
 80197e2:	4629      	mov	r1, r5
 80197e4:	4638      	mov	r0, r7
 80197e6:	f7ff ffa5 	bl	8019734 <sbrk_aligned>
 80197ea:	3001      	adds	r0, #1
 80197ec:	d02b      	beq.n	8019846 <_malloc_r+0xd2>
 80197ee:	6823      	ldr	r3, [r4, #0]
 80197f0:	442b      	add	r3, r5
 80197f2:	6023      	str	r3, [r4, #0]
 80197f4:	e00e      	b.n	8019814 <_malloc_r+0xa0>
 80197f6:	6822      	ldr	r2, [r4, #0]
 80197f8:	1b52      	subs	r2, r2, r5
 80197fa:	d41e      	bmi.n	801983a <_malloc_r+0xc6>
 80197fc:	2a0b      	cmp	r2, #11
 80197fe:	d916      	bls.n	801982e <_malloc_r+0xba>
 8019800:	1961      	adds	r1, r4, r5
 8019802:	42a3      	cmp	r3, r4
 8019804:	6025      	str	r5, [r4, #0]
 8019806:	bf18      	it	ne
 8019808:	6059      	strne	r1, [r3, #4]
 801980a:	6863      	ldr	r3, [r4, #4]
 801980c:	bf08      	it	eq
 801980e:	6031      	streq	r1, [r6, #0]
 8019810:	5162      	str	r2, [r4, r5]
 8019812:	604b      	str	r3, [r1, #4]
 8019814:	4638      	mov	r0, r7
 8019816:	f104 060b 	add.w	r6, r4, #11
 801981a:	f000 fbd9 	bl	8019fd0 <__malloc_unlock>
 801981e:	f026 0607 	bic.w	r6, r6, #7
 8019822:	1d23      	adds	r3, r4, #4
 8019824:	1af2      	subs	r2, r6, r3
 8019826:	d0b6      	beq.n	8019796 <_malloc_r+0x22>
 8019828:	1b9b      	subs	r3, r3, r6
 801982a:	50a3      	str	r3, [r4, r2]
 801982c:	e7b3      	b.n	8019796 <_malloc_r+0x22>
 801982e:	6862      	ldr	r2, [r4, #4]
 8019830:	42a3      	cmp	r3, r4
 8019832:	bf0c      	ite	eq
 8019834:	6032      	streq	r2, [r6, #0]
 8019836:	605a      	strne	r2, [r3, #4]
 8019838:	e7ec      	b.n	8019814 <_malloc_r+0xa0>
 801983a:	4623      	mov	r3, r4
 801983c:	6864      	ldr	r4, [r4, #4]
 801983e:	e7b2      	b.n	80197a6 <_malloc_r+0x32>
 8019840:	4634      	mov	r4, r6
 8019842:	6876      	ldr	r6, [r6, #4]
 8019844:	e7b9      	b.n	80197ba <_malloc_r+0x46>
 8019846:	230c      	movs	r3, #12
 8019848:	603b      	str	r3, [r7, #0]
 801984a:	4638      	mov	r0, r7
 801984c:	f000 fbc0 	bl	8019fd0 <__malloc_unlock>
 8019850:	e7a1      	b.n	8019796 <_malloc_r+0x22>
 8019852:	6025      	str	r5, [r4, #0]
 8019854:	e7de      	b.n	8019814 <_malloc_r+0xa0>
 8019856:	bf00      	nop
 8019858:	20027c54 	.word	0x20027c54

0801985c <iprintf>:
 801985c:	b40f      	push	{r0, r1, r2, r3}
 801985e:	4b0a      	ldr	r3, [pc, #40]	; (8019888 <iprintf+0x2c>)
 8019860:	b513      	push	{r0, r1, r4, lr}
 8019862:	681c      	ldr	r4, [r3, #0]
 8019864:	b124      	cbz	r4, 8019870 <iprintf+0x14>
 8019866:	69a3      	ldr	r3, [r4, #24]
 8019868:	b913      	cbnz	r3, 8019870 <iprintf+0x14>
 801986a:	4620      	mov	r0, r4
 801986c:	f000 faa4 	bl	8019db8 <__sinit>
 8019870:	ab05      	add	r3, sp, #20
 8019872:	9a04      	ldr	r2, [sp, #16]
 8019874:	68a1      	ldr	r1, [r4, #8]
 8019876:	9301      	str	r3, [sp, #4]
 8019878:	4620      	mov	r0, r4
 801987a:	f000 fd35 	bl	801a2e8 <_vfiprintf_r>
 801987e:	b002      	add	sp, #8
 8019880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019884:	b004      	add	sp, #16
 8019886:	4770      	bx	lr
 8019888:	20000080 	.word	0x20000080

0801988c <putchar>:
 801988c:	4b09      	ldr	r3, [pc, #36]	; (80198b4 <putchar+0x28>)
 801988e:	b513      	push	{r0, r1, r4, lr}
 8019890:	681c      	ldr	r4, [r3, #0]
 8019892:	4601      	mov	r1, r0
 8019894:	b134      	cbz	r4, 80198a4 <putchar+0x18>
 8019896:	69a3      	ldr	r3, [r4, #24]
 8019898:	b923      	cbnz	r3, 80198a4 <putchar+0x18>
 801989a:	9001      	str	r0, [sp, #4]
 801989c:	4620      	mov	r0, r4
 801989e:	f000 fa8b 	bl	8019db8 <__sinit>
 80198a2:	9901      	ldr	r1, [sp, #4]
 80198a4:	68a2      	ldr	r2, [r4, #8]
 80198a6:	4620      	mov	r0, r4
 80198a8:	b002      	add	sp, #8
 80198aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198ae:	f000 bfdf 	b.w	801a870 <_putc_r>
 80198b2:	bf00      	nop
 80198b4:	20000080 	.word	0x20000080

080198b8 <_puts_r>:
 80198b8:	b570      	push	{r4, r5, r6, lr}
 80198ba:	460e      	mov	r6, r1
 80198bc:	4605      	mov	r5, r0
 80198be:	b118      	cbz	r0, 80198c8 <_puts_r+0x10>
 80198c0:	6983      	ldr	r3, [r0, #24]
 80198c2:	b90b      	cbnz	r3, 80198c8 <_puts_r+0x10>
 80198c4:	f000 fa78 	bl	8019db8 <__sinit>
 80198c8:	69ab      	ldr	r3, [r5, #24]
 80198ca:	68ac      	ldr	r4, [r5, #8]
 80198cc:	b913      	cbnz	r3, 80198d4 <_puts_r+0x1c>
 80198ce:	4628      	mov	r0, r5
 80198d0:	f000 fa72 	bl	8019db8 <__sinit>
 80198d4:	4b2c      	ldr	r3, [pc, #176]	; (8019988 <_puts_r+0xd0>)
 80198d6:	429c      	cmp	r4, r3
 80198d8:	d120      	bne.n	801991c <_puts_r+0x64>
 80198da:	686c      	ldr	r4, [r5, #4]
 80198dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80198de:	07db      	lsls	r3, r3, #31
 80198e0:	d405      	bmi.n	80198ee <_puts_r+0x36>
 80198e2:	89a3      	ldrh	r3, [r4, #12]
 80198e4:	0598      	lsls	r0, r3, #22
 80198e6:	d402      	bmi.n	80198ee <_puts_r+0x36>
 80198e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80198ea:	f000 fb03 	bl	8019ef4 <__retarget_lock_acquire_recursive>
 80198ee:	89a3      	ldrh	r3, [r4, #12]
 80198f0:	0719      	lsls	r1, r3, #28
 80198f2:	d51d      	bpl.n	8019930 <_puts_r+0x78>
 80198f4:	6923      	ldr	r3, [r4, #16]
 80198f6:	b1db      	cbz	r3, 8019930 <_puts_r+0x78>
 80198f8:	3e01      	subs	r6, #1
 80198fa:	68a3      	ldr	r3, [r4, #8]
 80198fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019900:	3b01      	subs	r3, #1
 8019902:	60a3      	str	r3, [r4, #8]
 8019904:	bb39      	cbnz	r1, 8019956 <_puts_r+0x9e>
 8019906:	2b00      	cmp	r3, #0
 8019908:	da38      	bge.n	801997c <_puts_r+0xc4>
 801990a:	4622      	mov	r2, r4
 801990c:	210a      	movs	r1, #10
 801990e:	4628      	mov	r0, r5
 8019910:	f000 f878 	bl	8019a04 <__swbuf_r>
 8019914:	3001      	adds	r0, #1
 8019916:	d011      	beq.n	801993c <_puts_r+0x84>
 8019918:	250a      	movs	r5, #10
 801991a:	e011      	b.n	8019940 <_puts_r+0x88>
 801991c:	4b1b      	ldr	r3, [pc, #108]	; (801998c <_puts_r+0xd4>)
 801991e:	429c      	cmp	r4, r3
 8019920:	d101      	bne.n	8019926 <_puts_r+0x6e>
 8019922:	68ac      	ldr	r4, [r5, #8]
 8019924:	e7da      	b.n	80198dc <_puts_r+0x24>
 8019926:	4b1a      	ldr	r3, [pc, #104]	; (8019990 <_puts_r+0xd8>)
 8019928:	429c      	cmp	r4, r3
 801992a:	bf08      	it	eq
 801992c:	68ec      	ldreq	r4, [r5, #12]
 801992e:	e7d5      	b.n	80198dc <_puts_r+0x24>
 8019930:	4621      	mov	r1, r4
 8019932:	4628      	mov	r0, r5
 8019934:	f000 f8b8 	bl	8019aa8 <__swsetup_r>
 8019938:	2800      	cmp	r0, #0
 801993a:	d0dd      	beq.n	80198f8 <_puts_r+0x40>
 801993c:	f04f 35ff 	mov.w	r5, #4294967295
 8019940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019942:	07da      	lsls	r2, r3, #31
 8019944:	d405      	bmi.n	8019952 <_puts_r+0x9a>
 8019946:	89a3      	ldrh	r3, [r4, #12]
 8019948:	059b      	lsls	r3, r3, #22
 801994a:	d402      	bmi.n	8019952 <_puts_r+0x9a>
 801994c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801994e:	f000 fad2 	bl	8019ef6 <__retarget_lock_release_recursive>
 8019952:	4628      	mov	r0, r5
 8019954:	bd70      	pop	{r4, r5, r6, pc}
 8019956:	2b00      	cmp	r3, #0
 8019958:	da04      	bge.n	8019964 <_puts_r+0xac>
 801995a:	69a2      	ldr	r2, [r4, #24]
 801995c:	429a      	cmp	r2, r3
 801995e:	dc06      	bgt.n	801996e <_puts_r+0xb6>
 8019960:	290a      	cmp	r1, #10
 8019962:	d004      	beq.n	801996e <_puts_r+0xb6>
 8019964:	6823      	ldr	r3, [r4, #0]
 8019966:	1c5a      	adds	r2, r3, #1
 8019968:	6022      	str	r2, [r4, #0]
 801996a:	7019      	strb	r1, [r3, #0]
 801996c:	e7c5      	b.n	80198fa <_puts_r+0x42>
 801996e:	4622      	mov	r2, r4
 8019970:	4628      	mov	r0, r5
 8019972:	f000 f847 	bl	8019a04 <__swbuf_r>
 8019976:	3001      	adds	r0, #1
 8019978:	d1bf      	bne.n	80198fa <_puts_r+0x42>
 801997a:	e7df      	b.n	801993c <_puts_r+0x84>
 801997c:	6823      	ldr	r3, [r4, #0]
 801997e:	250a      	movs	r5, #10
 8019980:	1c5a      	adds	r2, r3, #1
 8019982:	6022      	str	r2, [r4, #0]
 8019984:	701d      	strb	r5, [r3, #0]
 8019986:	e7db      	b.n	8019940 <_puts_r+0x88>
 8019988:	08030c94 	.word	0x08030c94
 801998c:	08030cb4 	.word	0x08030cb4
 8019990:	08030c74 	.word	0x08030c74

08019994 <puts>:
 8019994:	4b02      	ldr	r3, [pc, #8]	; (80199a0 <puts+0xc>)
 8019996:	4601      	mov	r1, r0
 8019998:	6818      	ldr	r0, [r3, #0]
 801999a:	f7ff bf8d 	b.w	80198b8 <_puts_r>
 801999e:	bf00      	nop
 80199a0:	20000080 	.word	0x20000080

080199a4 <_sbrk_r>:
 80199a4:	b538      	push	{r3, r4, r5, lr}
 80199a6:	4d06      	ldr	r5, [pc, #24]	; (80199c0 <_sbrk_r+0x1c>)
 80199a8:	2300      	movs	r3, #0
 80199aa:	4604      	mov	r4, r0
 80199ac:	4608      	mov	r0, r1
 80199ae:	602b      	str	r3, [r5, #0]
 80199b0:	f7ea fc0c 	bl	80041cc <_sbrk>
 80199b4:	1c43      	adds	r3, r0, #1
 80199b6:	d102      	bne.n	80199be <_sbrk_r+0x1a>
 80199b8:	682b      	ldr	r3, [r5, #0]
 80199ba:	b103      	cbz	r3, 80199be <_sbrk_r+0x1a>
 80199bc:	6023      	str	r3, [r4, #0]
 80199be:	bd38      	pop	{r3, r4, r5, pc}
 80199c0:	20027c60 	.word	0x20027c60

080199c4 <siprintf>:
 80199c4:	b40e      	push	{r1, r2, r3}
 80199c6:	b500      	push	{lr}
 80199c8:	b09c      	sub	sp, #112	; 0x70
 80199ca:	ab1d      	add	r3, sp, #116	; 0x74
 80199cc:	9002      	str	r0, [sp, #8]
 80199ce:	9006      	str	r0, [sp, #24]
 80199d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80199d4:	4809      	ldr	r0, [pc, #36]	; (80199fc <siprintf+0x38>)
 80199d6:	9107      	str	r1, [sp, #28]
 80199d8:	9104      	str	r1, [sp, #16]
 80199da:	4909      	ldr	r1, [pc, #36]	; (8019a00 <siprintf+0x3c>)
 80199dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80199e0:	9105      	str	r1, [sp, #20]
 80199e2:	6800      	ldr	r0, [r0, #0]
 80199e4:	9301      	str	r3, [sp, #4]
 80199e6:	a902      	add	r1, sp, #8
 80199e8:	f000 fb54 	bl	801a094 <_svfiprintf_r>
 80199ec:	9b02      	ldr	r3, [sp, #8]
 80199ee:	2200      	movs	r2, #0
 80199f0:	701a      	strb	r2, [r3, #0]
 80199f2:	b01c      	add	sp, #112	; 0x70
 80199f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80199f8:	b003      	add	sp, #12
 80199fa:	4770      	bx	lr
 80199fc:	20000080 	.word	0x20000080
 8019a00:	ffff0208 	.word	0xffff0208

08019a04 <__swbuf_r>:
 8019a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a06:	460e      	mov	r6, r1
 8019a08:	4614      	mov	r4, r2
 8019a0a:	4605      	mov	r5, r0
 8019a0c:	b118      	cbz	r0, 8019a16 <__swbuf_r+0x12>
 8019a0e:	6983      	ldr	r3, [r0, #24]
 8019a10:	b90b      	cbnz	r3, 8019a16 <__swbuf_r+0x12>
 8019a12:	f000 f9d1 	bl	8019db8 <__sinit>
 8019a16:	4b21      	ldr	r3, [pc, #132]	; (8019a9c <__swbuf_r+0x98>)
 8019a18:	429c      	cmp	r4, r3
 8019a1a:	d12b      	bne.n	8019a74 <__swbuf_r+0x70>
 8019a1c:	686c      	ldr	r4, [r5, #4]
 8019a1e:	69a3      	ldr	r3, [r4, #24]
 8019a20:	60a3      	str	r3, [r4, #8]
 8019a22:	89a3      	ldrh	r3, [r4, #12]
 8019a24:	071a      	lsls	r2, r3, #28
 8019a26:	d52f      	bpl.n	8019a88 <__swbuf_r+0x84>
 8019a28:	6923      	ldr	r3, [r4, #16]
 8019a2a:	b36b      	cbz	r3, 8019a88 <__swbuf_r+0x84>
 8019a2c:	6923      	ldr	r3, [r4, #16]
 8019a2e:	6820      	ldr	r0, [r4, #0]
 8019a30:	1ac0      	subs	r0, r0, r3
 8019a32:	6963      	ldr	r3, [r4, #20]
 8019a34:	b2f6      	uxtb	r6, r6
 8019a36:	4283      	cmp	r3, r0
 8019a38:	4637      	mov	r7, r6
 8019a3a:	dc04      	bgt.n	8019a46 <__swbuf_r+0x42>
 8019a3c:	4621      	mov	r1, r4
 8019a3e:	4628      	mov	r0, r5
 8019a40:	f000 f926 	bl	8019c90 <_fflush_r>
 8019a44:	bb30      	cbnz	r0, 8019a94 <__swbuf_r+0x90>
 8019a46:	68a3      	ldr	r3, [r4, #8]
 8019a48:	3b01      	subs	r3, #1
 8019a4a:	60a3      	str	r3, [r4, #8]
 8019a4c:	6823      	ldr	r3, [r4, #0]
 8019a4e:	1c5a      	adds	r2, r3, #1
 8019a50:	6022      	str	r2, [r4, #0]
 8019a52:	701e      	strb	r6, [r3, #0]
 8019a54:	6963      	ldr	r3, [r4, #20]
 8019a56:	3001      	adds	r0, #1
 8019a58:	4283      	cmp	r3, r0
 8019a5a:	d004      	beq.n	8019a66 <__swbuf_r+0x62>
 8019a5c:	89a3      	ldrh	r3, [r4, #12]
 8019a5e:	07db      	lsls	r3, r3, #31
 8019a60:	d506      	bpl.n	8019a70 <__swbuf_r+0x6c>
 8019a62:	2e0a      	cmp	r6, #10
 8019a64:	d104      	bne.n	8019a70 <__swbuf_r+0x6c>
 8019a66:	4621      	mov	r1, r4
 8019a68:	4628      	mov	r0, r5
 8019a6a:	f000 f911 	bl	8019c90 <_fflush_r>
 8019a6e:	b988      	cbnz	r0, 8019a94 <__swbuf_r+0x90>
 8019a70:	4638      	mov	r0, r7
 8019a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a74:	4b0a      	ldr	r3, [pc, #40]	; (8019aa0 <__swbuf_r+0x9c>)
 8019a76:	429c      	cmp	r4, r3
 8019a78:	d101      	bne.n	8019a7e <__swbuf_r+0x7a>
 8019a7a:	68ac      	ldr	r4, [r5, #8]
 8019a7c:	e7cf      	b.n	8019a1e <__swbuf_r+0x1a>
 8019a7e:	4b09      	ldr	r3, [pc, #36]	; (8019aa4 <__swbuf_r+0xa0>)
 8019a80:	429c      	cmp	r4, r3
 8019a82:	bf08      	it	eq
 8019a84:	68ec      	ldreq	r4, [r5, #12]
 8019a86:	e7ca      	b.n	8019a1e <__swbuf_r+0x1a>
 8019a88:	4621      	mov	r1, r4
 8019a8a:	4628      	mov	r0, r5
 8019a8c:	f000 f80c 	bl	8019aa8 <__swsetup_r>
 8019a90:	2800      	cmp	r0, #0
 8019a92:	d0cb      	beq.n	8019a2c <__swbuf_r+0x28>
 8019a94:	f04f 37ff 	mov.w	r7, #4294967295
 8019a98:	e7ea      	b.n	8019a70 <__swbuf_r+0x6c>
 8019a9a:	bf00      	nop
 8019a9c:	08030c94 	.word	0x08030c94
 8019aa0:	08030cb4 	.word	0x08030cb4
 8019aa4:	08030c74 	.word	0x08030c74

08019aa8 <__swsetup_r>:
 8019aa8:	4b32      	ldr	r3, [pc, #200]	; (8019b74 <__swsetup_r+0xcc>)
 8019aaa:	b570      	push	{r4, r5, r6, lr}
 8019aac:	681d      	ldr	r5, [r3, #0]
 8019aae:	4606      	mov	r6, r0
 8019ab0:	460c      	mov	r4, r1
 8019ab2:	b125      	cbz	r5, 8019abe <__swsetup_r+0x16>
 8019ab4:	69ab      	ldr	r3, [r5, #24]
 8019ab6:	b913      	cbnz	r3, 8019abe <__swsetup_r+0x16>
 8019ab8:	4628      	mov	r0, r5
 8019aba:	f000 f97d 	bl	8019db8 <__sinit>
 8019abe:	4b2e      	ldr	r3, [pc, #184]	; (8019b78 <__swsetup_r+0xd0>)
 8019ac0:	429c      	cmp	r4, r3
 8019ac2:	d10f      	bne.n	8019ae4 <__swsetup_r+0x3c>
 8019ac4:	686c      	ldr	r4, [r5, #4]
 8019ac6:	89a3      	ldrh	r3, [r4, #12]
 8019ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019acc:	0719      	lsls	r1, r3, #28
 8019ace:	d42c      	bmi.n	8019b2a <__swsetup_r+0x82>
 8019ad0:	06dd      	lsls	r5, r3, #27
 8019ad2:	d411      	bmi.n	8019af8 <__swsetup_r+0x50>
 8019ad4:	2309      	movs	r3, #9
 8019ad6:	6033      	str	r3, [r6, #0]
 8019ad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019adc:	81a3      	strh	r3, [r4, #12]
 8019ade:	f04f 30ff 	mov.w	r0, #4294967295
 8019ae2:	e03e      	b.n	8019b62 <__swsetup_r+0xba>
 8019ae4:	4b25      	ldr	r3, [pc, #148]	; (8019b7c <__swsetup_r+0xd4>)
 8019ae6:	429c      	cmp	r4, r3
 8019ae8:	d101      	bne.n	8019aee <__swsetup_r+0x46>
 8019aea:	68ac      	ldr	r4, [r5, #8]
 8019aec:	e7eb      	b.n	8019ac6 <__swsetup_r+0x1e>
 8019aee:	4b24      	ldr	r3, [pc, #144]	; (8019b80 <__swsetup_r+0xd8>)
 8019af0:	429c      	cmp	r4, r3
 8019af2:	bf08      	it	eq
 8019af4:	68ec      	ldreq	r4, [r5, #12]
 8019af6:	e7e6      	b.n	8019ac6 <__swsetup_r+0x1e>
 8019af8:	0758      	lsls	r0, r3, #29
 8019afa:	d512      	bpl.n	8019b22 <__swsetup_r+0x7a>
 8019afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019afe:	b141      	cbz	r1, 8019b12 <__swsetup_r+0x6a>
 8019b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b04:	4299      	cmp	r1, r3
 8019b06:	d002      	beq.n	8019b0e <__swsetup_r+0x66>
 8019b08:	4630      	mov	r0, r6
 8019b0a:	f7ff fdc7 	bl	801969c <_free_r>
 8019b0e:	2300      	movs	r3, #0
 8019b10:	6363      	str	r3, [r4, #52]	; 0x34
 8019b12:	89a3      	ldrh	r3, [r4, #12]
 8019b14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019b18:	81a3      	strh	r3, [r4, #12]
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	6063      	str	r3, [r4, #4]
 8019b1e:	6923      	ldr	r3, [r4, #16]
 8019b20:	6023      	str	r3, [r4, #0]
 8019b22:	89a3      	ldrh	r3, [r4, #12]
 8019b24:	f043 0308 	orr.w	r3, r3, #8
 8019b28:	81a3      	strh	r3, [r4, #12]
 8019b2a:	6923      	ldr	r3, [r4, #16]
 8019b2c:	b94b      	cbnz	r3, 8019b42 <__swsetup_r+0x9a>
 8019b2e:	89a3      	ldrh	r3, [r4, #12]
 8019b30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019b38:	d003      	beq.n	8019b42 <__swsetup_r+0x9a>
 8019b3a:	4621      	mov	r1, r4
 8019b3c:	4630      	mov	r0, r6
 8019b3e:	f000 fa01 	bl	8019f44 <__smakebuf_r>
 8019b42:	89a0      	ldrh	r0, [r4, #12]
 8019b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b48:	f010 0301 	ands.w	r3, r0, #1
 8019b4c:	d00a      	beq.n	8019b64 <__swsetup_r+0xbc>
 8019b4e:	2300      	movs	r3, #0
 8019b50:	60a3      	str	r3, [r4, #8]
 8019b52:	6963      	ldr	r3, [r4, #20]
 8019b54:	425b      	negs	r3, r3
 8019b56:	61a3      	str	r3, [r4, #24]
 8019b58:	6923      	ldr	r3, [r4, #16]
 8019b5a:	b943      	cbnz	r3, 8019b6e <__swsetup_r+0xc6>
 8019b5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019b60:	d1ba      	bne.n	8019ad8 <__swsetup_r+0x30>
 8019b62:	bd70      	pop	{r4, r5, r6, pc}
 8019b64:	0781      	lsls	r1, r0, #30
 8019b66:	bf58      	it	pl
 8019b68:	6963      	ldrpl	r3, [r4, #20]
 8019b6a:	60a3      	str	r3, [r4, #8]
 8019b6c:	e7f4      	b.n	8019b58 <__swsetup_r+0xb0>
 8019b6e:	2000      	movs	r0, #0
 8019b70:	e7f7      	b.n	8019b62 <__swsetup_r+0xba>
 8019b72:	bf00      	nop
 8019b74:	20000080 	.word	0x20000080
 8019b78:	08030c94 	.word	0x08030c94
 8019b7c:	08030cb4 	.word	0x08030cb4
 8019b80:	08030c74 	.word	0x08030c74

08019b84 <__sflush_r>:
 8019b84:	898a      	ldrh	r2, [r1, #12]
 8019b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b8a:	4605      	mov	r5, r0
 8019b8c:	0710      	lsls	r0, r2, #28
 8019b8e:	460c      	mov	r4, r1
 8019b90:	d458      	bmi.n	8019c44 <__sflush_r+0xc0>
 8019b92:	684b      	ldr	r3, [r1, #4]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	dc05      	bgt.n	8019ba4 <__sflush_r+0x20>
 8019b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	dc02      	bgt.n	8019ba4 <__sflush_r+0x20>
 8019b9e:	2000      	movs	r0, #0
 8019ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019ba6:	2e00      	cmp	r6, #0
 8019ba8:	d0f9      	beq.n	8019b9e <__sflush_r+0x1a>
 8019baa:	2300      	movs	r3, #0
 8019bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019bb0:	682f      	ldr	r7, [r5, #0]
 8019bb2:	602b      	str	r3, [r5, #0]
 8019bb4:	d032      	beq.n	8019c1c <__sflush_r+0x98>
 8019bb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019bb8:	89a3      	ldrh	r3, [r4, #12]
 8019bba:	075a      	lsls	r2, r3, #29
 8019bbc:	d505      	bpl.n	8019bca <__sflush_r+0x46>
 8019bbe:	6863      	ldr	r3, [r4, #4]
 8019bc0:	1ac0      	subs	r0, r0, r3
 8019bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019bc4:	b10b      	cbz	r3, 8019bca <__sflush_r+0x46>
 8019bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019bc8:	1ac0      	subs	r0, r0, r3
 8019bca:	2300      	movs	r3, #0
 8019bcc:	4602      	mov	r2, r0
 8019bce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019bd0:	6a21      	ldr	r1, [r4, #32]
 8019bd2:	4628      	mov	r0, r5
 8019bd4:	47b0      	blx	r6
 8019bd6:	1c43      	adds	r3, r0, #1
 8019bd8:	89a3      	ldrh	r3, [r4, #12]
 8019bda:	d106      	bne.n	8019bea <__sflush_r+0x66>
 8019bdc:	6829      	ldr	r1, [r5, #0]
 8019bde:	291d      	cmp	r1, #29
 8019be0:	d82c      	bhi.n	8019c3c <__sflush_r+0xb8>
 8019be2:	4a2a      	ldr	r2, [pc, #168]	; (8019c8c <__sflush_r+0x108>)
 8019be4:	40ca      	lsrs	r2, r1
 8019be6:	07d6      	lsls	r6, r2, #31
 8019be8:	d528      	bpl.n	8019c3c <__sflush_r+0xb8>
 8019bea:	2200      	movs	r2, #0
 8019bec:	6062      	str	r2, [r4, #4]
 8019bee:	04d9      	lsls	r1, r3, #19
 8019bf0:	6922      	ldr	r2, [r4, #16]
 8019bf2:	6022      	str	r2, [r4, #0]
 8019bf4:	d504      	bpl.n	8019c00 <__sflush_r+0x7c>
 8019bf6:	1c42      	adds	r2, r0, #1
 8019bf8:	d101      	bne.n	8019bfe <__sflush_r+0x7a>
 8019bfa:	682b      	ldr	r3, [r5, #0]
 8019bfc:	b903      	cbnz	r3, 8019c00 <__sflush_r+0x7c>
 8019bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8019c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c02:	602f      	str	r7, [r5, #0]
 8019c04:	2900      	cmp	r1, #0
 8019c06:	d0ca      	beq.n	8019b9e <__sflush_r+0x1a>
 8019c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c0c:	4299      	cmp	r1, r3
 8019c0e:	d002      	beq.n	8019c16 <__sflush_r+0x92>
 8019c10:	4628      	mov	r0, r5
 8019c12:	f7ff fd43 	bl	801969c <_free_r>
 8019c16:	2000      	movs	r0, #0
 8019c18:	6360      	str	r0, [r4, #52]	; 0x34
 8019c1a:	e7c1      	b.n	8019ba0 <__sflush_r+0x1c>
 8019c1c:	6a21      	ldr	r1, [r4, #32]
 8019c1e:	2301      	movs	r3, #1
 8019c20:	4628      	mov	r0, r5
 8019c22:	47b0      	blx	r6
 8019c24:	1c41      	adds	r1, r0, #1
 8019c26:	d1c7      	bne.n	8019bb8 <__sflush_r+0x34>
 8019c28:	682b      	ldr	r3, [r5, #0]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d0c4      	beq.n	8019bb8 <__sflush_r+0x34>
 8019c2e:	2b1d      	cmp	r3, #29
 8019c30:	d001      	beq.n	8019c36 <__sflush_r+0xb2>
 8019c32:	2b16      	cmp	r3, #22
 8019c34:	d101      	bne.n	8019c3a <__sflush_r+0xb6>
 8019c36:	602f      	str	r7, [r5, #0]
 8019c38:	e7b1      	b.n	8019b9e <__sflush_r+0x1a>
 8019c3a:	89a3      	ldrh	r3, [r4, #12]
 8019c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c40:	81a3      	strh	r3, [r4, #12]
 8019c42:	e7ad      	b.n	8019ba0 <__sflush_r+0x1c>
 8019c44:	690f      	ldr	r7, [r1, #16]
 8019c46:	2f00      	cmp	r7, #0
 8019c48:	d0a9      	beq.n	8019b9e <__sflush_r+0x1a>
 8019c4a:	0793      	lsls	r3, r2, #30
 8019c4c:	680e      	ldr	r6, [r1, #0]
 8019c4e:	bf08      	it	eq
 8019c50:	694b      	ldreq	r3, [r1, #20]
 8019c52:	600f      	str	r7, [r1, #0]
 8019c54:	bf18      	it	ne
 8019c56:	2300      	movne	r3, #0
 8019c58:	eba6 0807 	sub.w	r8, r6, r7
 8019c5c:	608b      	str	r3, [r1, #8]
 8019c5e:	f1b8 0f00 	cmp.w	r8, #0
 8019c62:	dd9c      	ble.n	8019b9e <__sflush_r+0x1a>
 8019c64:	6a21      	ldr	r1, [r4, #32]
 8019c66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019c68:	4643      	mov	r3, r8
 8019c6a:	463a      	mov	r2, r7
 8019c6c:	4628      	mov	r0, r5
 8019c6e:	47b0      	blx	r6
 8019c70:	2800      	cmp	r0, #0
 8019c72:	dc06      	bgt.n	8019c82 <__sflush_r+0xfe>
 8019c74:	89a3      	ldrh	r3, [r4, #12]
 8019c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c7a:	81a3      	strh	r3, [r4, #12]
 8019c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8019c80:	e78e      	b.n	8019ba0 <__sflush_r+0x1c>
 8019c82:	4407      	add	r7, r0
 8019c84:	eba8 0800 	sub.w	r8, r8, r0
 8019c88:	e7e9      	b.n	8019c5e <__sflush_r+0xda>
 8019c8a:	bf00      	nop
 8019c8c:	20400001 	.word	0x20400001

08019c90 <_fflush_r>:
 8019c90:	b538      	push	{r3, r4, r5, lr}
 8019c92:	690b      	ldr	r3, [r1, #16]
 8019c94:	4605      	mov	r5, r0
 8019c96:	460c      	mov	r4, r1
 8019c98:	b913      	cbnz	r3, 8019ca0 <_fflush_r+0x10>
 8019c9a:	2500      	movs	r5, #0
 8019c9c:	4628      	mov	r0, r5
 8019c9e:	bd38      	pop	{r3, r4, r5, pc}
 8019ca0:	b118      	cbz	r0, 8019caa <_fflush_r+0x1a>
 8019ca2:	6983      	ldr	r3, [r0, #24]
 8019ca4:	b90b      	cbnz	r3, 8019caa <_fflush_r+0x1a>
 8019ca6:	f000 f887 	bl	8019db8 <__sinit>
 8019caa:	4b14      	ldr	r3, [pc, #80]	; (8019cfc <_fflush_r+0x6c>)
 8019cac:	429c      	cmp	r4, r3
 8019cae:	d11b      	bne.n	8019ce8 <_fflush_r+0x58>
 8019cb0:	686c      	ldr	r4, [r5, #4]
 8019cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d0ef      	beq.n	8019c9a <_fflush_r+0xa>
 8019cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019cbc:	07d0      	lsls	r0, r2, #31
 8019cbe:	d404      	bmi.n	8019cca <_fflush_r+0x3a>
 8019cc0:	0599      	lsls	r1, r3, #22
 8019cc2:	d402      	bmi.n	8019cca <_fflush_r+0x3a>
 8019cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019cc6:	f000 f915 	bl	8019ef4 <__retarget_lock_acquire_recursive>
 8019cca:	4628      	mov	r0, r5
 8019ccc:	4621      	mov	r1, r4
 8019cce:	f7ff ff59 	bl	8019b84 <__sflush_r>
 8019cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019cd4:	07da      	lsls	r2, r3, #31
 8019cd6:	4605      	mov	r5, r0
 8019cd8:	d4e0      	bmi.n	8019c9c <_fflush_r+0xc>
 8019cda:	89a3      	ldrh	r3, [r4, #12]
 8019cdc:	059b      	lsls	r3, r3, #22
 8019cde:	d4dd      	bmi.n	8019c9c <_fflush_r+0xc>
 8019ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ce2:	f000 f908 	bl	8019ef6 <__retarget_lock_release_recursive>
 8019ce6:	e7d9      	b.n	8019c9c <_fflush_r+0xc>
 8019ce8:	4b05      	ldr	r3, [pc, #20]	; (8019d00 <_fflush_r+0x70>)
 8019cea:	429c      	cmp	r4, r3
 8019cec:	d101      	bne.n	8019cf2 <_fflush_r+0x62>
 8019cee:	68ac      	ldr	r4, [r5, #8]
 8019cf0:	e7df      	b.n	8019cb2 <_fflush_r+0x22>
 8019cf2:	4b04      	ldr	r3, [pc, #16]	; (8019d04 <_fflush_r+0x74>)
 8019cf4:	429c      	cmp	r4, r3
 8019cf6:	bf08      	it	eq
 8019cf8:	68ec      	ldreq	r4, [r5, #12]
 8019cfa:	e7da      	b.n	8019cb2 <_fflush_r+0x22>
 8019cfc:	08030c94 	.word	0x08030c94
 8019d00:	08030cb4 	.word	0x08030cb4
 8019d04:	08030c74 	.word	0x08030c74

08019d08 <std>:
 8019d08:	2300      	movs	r3, #0
 8019d0a:	b510      	push	{r4, lr}
 8019d0c:	4604      	mov	r4, r0
 8019d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8019d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019d16:	6083      	str	r3, [r0, #8]
 8019d18:	8181      	strh	r1, [r0, #12]
 8019d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8019d1c:	81c2      	strh	r2, [r0, #14]
 8019d1e:	6183      	str	r3, [r0, #24]
 8019d20:	4619      	mov	r1, r3
 8019d22:	2208      	movs	r2, #8
 8019d24:	305c      	adds	r0, #92	; 0x5c
 8019d26:	f7ff fcb1 	bl	801968c <memset>
 8019d2a:	4b05      	ldr	r3, [pc, #20]	; (8019d40 <std+0x38>)
 8019d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8019d2e:	4b05      	ldr	r3, [pc, #20]	; (8019d44 <std+0x3c>)
 8019d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8019d32:	4b05      	ldr	r3, [pc, #20]	; (8019d48 <std+0x40>)
 8019d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019d36:	4b05      	ldr	r3, [pc, #20]	; (8019d4c <std+0x44>)
 8019d38:	6224      	str	r4, [r4, #32]
 8019d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8019d3c:	bd10      	pop	{r4, pc}
 8019d3e:	bf00      	nop
 8019d40:	0801a901 	.word	0x0801a901
 8019d44:	0801a923 	.word	0x0801a923
 8019d48:	0801a95b 	.word	0x0801a95b
 8019d4c:	0801a97f 	.word	0x0801a97f

08019d50 <_cleanup_r>:
 8019d50:	4901      	ldr	r1, [pc, #4]	; (8019d58 <_cleanup_r+0x8>)
 8019d52:	f000 b8af 	b.w	8019eb4 <_fwalk_reent>
 8019d56:	bf00      	nop
 8019d58:	08019c91 	.word	0x08019c91

08019d5c <__sfmoreglue>:
 8019d5c:	b570      	push	{r4, r5, r6, lr}
 8019d5e:	2268      	movs	r2, #104	; 0x68
 8019d60:	1e4d      	subs	r5, r1, #1
 8019d62:	4355      	muls	r5, r2
 8019d64:	460e      	mov	r6, r1
 8019d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019d6a:	f7ff fd03 	bl	8019774 <_malloc_r>
 8019d6e:	4604      	mov	r4, r0
 8019d70:	b140      	cbz	r0, 8019d84 <__sfmoreglue+0x28>
 8019d72:	2100      	movs	r1, #0
 8019d74:	e9c0 1600 	strd	r1, r6, [r0]
 8019d78:	300c      	adds	r0, #12
 8019d7a:	60a0      	str	r0, [r4, #8]
 8019d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019d80:	f7ff fc84 	bl	801968c <memset>
 8019d84:	4620      	mov	r0, r4
 8019d86:	bd70      	pop	{r4, r5, r6, pc}

08019d88 <__sfp_lock_acquire>:
 8019d88:	4801      	ldr	r0, [pc, #4]	; (8019d90 <__sfp_lock_acquire+0x8>)
 8019d8a:	f000 b8b3 	b.w	8019ef4 <__retarget_lock_acquire_recursive>
 8019d8e:	bf00      	nop
 8019d90:	20027c5d 	.word	0x20027c5d

08019d94 <__sfp_lock_release>:
 8019d94:	4801      	ldr	r0, [pc, #4]	; (8019d9c <__sfp_lock_release+0x8>)
 8019d96:	f000 b8ae 	b.w	8019ef6 <__retarget_lock_release_recursive>
 8019d9a:	bf00      	nop
 8019d9c:	20027c5d 	.word	0x20027c5d

08019da0 <__sinit_lock_acquire>:
 8019da0:	4801      	ldr	r0, [pc, #4]	; (8019da8 <__sinit_lock_acquire+0x8>)
 8019da2:	f000 b8a7 	b.w	8019ef4 <__retarget_lock_acquire_recursive>
 8019da6:	bf00      	nop
 8019da8:	20027c5e 	.word	0x20027c5e

08019dac <__sinit_lock_release>:
 8019dac:	4801      	ldr	r0, [pc, #4]	; (8019db4 <__sinit_lock_release+0x8>)
 8019dae:	f000 b8a2 	b.w	8019ef6 <__retarget_lock_release_recursive>
 8019db2:	bf00      	nop
 8019db4:	20027c5e 	.word	0x20027c5e

08019db8 <__sinit>:
 8019db8:	b510      	push	{r4, lr}
 8019dba:	4604      	mov	r4, r0
 8019dbc:	f7ff fff0 	bl	8019da0 <__sinit_lock_acquire>
 8019dc0:	69a3      	ldr	r3, [r4, #24]
 8019dc2:	b11b      	cbz	r3, 8019dcc <__sinit+0x14>
 8019dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019dc8:	f7ff bff0 	b.w	8019dac <__sinit_lock_release>
 8019dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8019dd2:	4b13      	ldr	r3, [pc, #76]	; (8019e20 <__sinit+0x68>)
 8019dd4:	4a13      	ldr	r2, [pc, #76]	; (8019e24 <__sinit+0x6c>)
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8019dda:	42a3      	cmp	r3, r4
 8019ddc:	bf04      	itt	eq
 8019dde:	2301      	moveq	r3, #1
 8019de0:	61a3      	streq	r3, [r4, #24]
 8019de2:	4620      	mov	r0, r4
 8019de4:	f000 f820 	bl	8019e28 <__sfp>
 8019de8:	6060      	str	r0, [r4, #4]
 8019dea:	4620      	mov	r0, r4
 8019dec:	f000 f81c 	bl	8019e28 <__sfp>
 8019df0:	60a0      	str	r0, [r4, #8]
 8019df2:	4620      	mov	r0, r4
 8019df4:	f000 f818 	bl	8019e28 <__sfp>
 8019df8:	2200      	movs	r2, #0
 8019dfa:	60e0      	str	r0, [r4, #12]
 8019dfc:	2104      	movs	r1, #4
 8019dfe:	6860      	ldr	r0, [r4, #4]
 8019e00:	f7ff ff82 	bl	8019d08 <std>
 8019e04:	68a0      	ldr	r0, [r4, #8]
 8019e06:	2201      	movs	r2, #1
 8019e08:	2109      	movs	r1, #9
 8019e0a:	f7ff ff7d 	bl	8019d08 <std>
 8019e0e:	68e0      	ldr	r0, [r4, #12]
 8019e10:	2202      	movs	r2, #2
 8019e12:	2112      	movs	r1, #18
 8019e14:	f7ff ff78 	bl	8019d08 <std>
 8019e18:	2301      	movs	r3, #1
 8019e1a:	61a3      	str	r3, [r4, #24]
 8019e1c:	e7d2      	b.n	8019dc4 <__sinit+0xc>
 8019e1e:	bf00      	nop
 8019e20:	08030c70 	.word	0x08030c70
 8019e24:	08019d51 	.word	0x08019d51

08019e28 <__sfp>:
 8019e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e2a:	4607      	mov	r7, r0
 8019e2c:	f7ff ffac 	bl	8019d88 <__sfp_lock_acquire>
 8019e30:	4b1e      	ldr	r3, [pc, #120]	; (8019eac <__sfp+0x84>)
 8019e32:	681e      	ldr	r6, [r3, #0]
 8019e34:	69b3      	ldr	r3, [r6, #24]
 8019e36:	b913      	cbnz	r3, 8019e3e <__sfp+0x16>
 8019e38:	4630      	mov	r0, r6
 8019e3a:	f7ff ffbd 	bl	8019db8 <__sinit>
 8019e3e:	3648      	adds	r6, #72	; 0x48
 8019e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019e44:	3b01      	subs	r3, #1
 8019e46:	d503      	bpl.n	8019e50 <__sfp+0x28>
 8019e48:	6833      	ldr	r3, [r6, #0]
 8019e4a:	b30b      	cbz	r3, 8019e90 <__sfp+0x68>
 8019e4c:	6836      	ldr	r6, [r6, #0]
 8019e4e:	e7f7      	b.n	8019e40 <__sfp+0x18>
 8019e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019e54:	b9d5      	cbnz	r5, 8019e8c <__sfp+0x64>
 8019e56:	4b16      	ldr	r3, [pc, #88]	; (8019eb0 <__sfp+0x88>)
 8019e58:	60e3      	str	r3, [r4, #12]
 8019e5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8019e60:	f000 f847 	bl	8019ef2 <__retarget_lock_init_recursive>
 8019e64:	f7ff ff96 	bl	8019d94 <__sfp_lock_release>
 8019e68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019e6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019e70:	6025      	str	r5, [r4, #0]
 8019e72:	61a5      	str	r5, [r4, #24]
 8019e74:	2208      	movs	r2, #8
 8019e76:	4629      	mov	r1, r5
 8019e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019e7c:	f7ff fc06 	bl	801968c <memset>
 8019e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019e88:	4620      	mov	r0, r4
 8019e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e8c:	3468      	adds	r4, #104	; 0x68
 8019e8e:	e7d9      	b.n	8019e44 <__sfp+0x1c>
 8019e90:	2104      	movs	r1, #4
 8019e92:	4638      	mov	r0, r7
 8019e94:	f7ff ff62 	bl	8019d5c <__sfmoreglue>
 8019e98:	4604      	mov	r4, r0
 8019e9a:	6030      	str	r0, [r6, #0]
 8019e9c:	2800      	cmp	r0, #0
 8019e9e:	d1d5      	bne.n	8019e4c <__sfp+0x24>
 8019ea0:	f7ff ff78 	bl	8019d94 <__sfp_lock_release>
 8019ea4:	230c      	movs	r3, #12
 8019ea6:	603b      	str	r3, [r7, #0]
 8019ea8:	e7ee      	b.n	8019e88 <__sfp+0x60>
 8019eaa:	bf00      	nop
 8019eac:	08030c70 	.word	0x08030c70
 8019eb0:	ffff0001 	.word	0xffff0001

08019eb4 <_fwalk_reent>:
 8019eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019eb8:	4606      	mov	r6, r0
 8019eba:	4688      	mov	r8, r1
 8019ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019ec0:	2700      	movs	r7, #0
 8019ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8019eca:	d505      	bpl.n	8019ed8 <_fwalk_reent+0x24>
 8019ecc:	6824      	ldr	r4, [r4, #0]
 8019ece:	2c00      	cmp	r4, #0
 8019ed0:	d1f7      	bne.n	8019ec2 <_fwalk_reent+0xe>
 8019ed2:	4638      	mov	r0, r7
 8019ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ed8:	89ab      	ldrh	r3, [r5, #12]
 8019eda:	2b01      	cmp	r3, #1
 8019edc:	d907      	bls.n	8019eee <_fwalk_reent+0x3a>
 8019ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019ee2:	3301      	adds	r3, #1
 8019ee4:	d003      	beq.n	8019eee <_fwalk_reent+0x3a>
 8019ee6:	4629      	mov	r1, r5
 8019ee8:	4630      	mov	r0, r6
 8019eea:	47c0      	blx	r8
 8019eec:	4307      	orrs	r7, r0
 8019eee:	3568      	adds	r5, #104	; 0x68
 8019ef0:	e7e9      	b.n	8019ec6 <_fwalk_reent+0x12>

08019ef2 <__retarget_lock_init_recursive>:
 8019ef2:	4770      	bx	lr

08019ef4 <__retarget_lock_acquire_recursive>:
 8019ef4:	4770      	bx	lr

08019ef6 <__retarget_lock_release_recursive>:
 8019ef6:	4770      	bx	lr

08019ef8 <__swhatbuf_r>:
 8019ef8:	b570      	push	{r4, r5, r6, lr}
 8019efa:	460e      	mov	r6, r1
 8019efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f00:	2900      	cmp	r1, #0
 8019f02:	b096      	sub	sp, #88	; 0x58
 8019f04:	4614      	mov	r4, r2
 8019f06:	461d      	mov	r5, r3
 8019f08:	da08      	bge.n	8019f1c <__swhatbuf_r+0x24>
 8019f0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019f0e:	2200      	movs	r2, #0
 8019f10:	602a      	str	r2, [r5, #0]
 8019f12:	061a      	lsls	r2, r3, #24
 8019f14:	d410      	bmi.n	8019f38 <__swhatbuf_r+0x40>
 8019f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019f1a:	e00e      	b.n	8019f3a <__swhatbuf_r+0x42>
 8019f1c:	466a      	mov	r2, sp
 8019f1e:	f000 fd55 	bl	801a9cc <_fstat_r>
 8019f22:	2800      	cmp	r0, #0
 8019f24:	dbf1      	blt.n	8019f0a <__swhatbuf_r+0x12>
 8019f26:	9a01      	ldr	r2, [sp, #4]
 8019f28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019f2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019f30:	425a      	negs	r2, r3
 8019f32:	415a      	adcs	r2, r3
 8019f34:	602a      	str	r2, [r5, #0]
 8019f36:	e7ee      	b.n	8019f16 <__swhatbuf_r+0x1e>
 8019f38:	2340      	movs	r3, #64	; 0x40
 8019f3a:	2000      	movs	r0, #0
 8019f3c:	6023      	str	r3, [r4, #0]
 8019f3e:	b016      	add	sp, #88	; 0x58
 8019f40:	bd70      	pop	{r4, r5, r6, pc}
	...

08019f44 <__smakebuf_r>:
 8019f44:	898b      	ldrh	r3, [r1, #12]
 8019f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019f48:	079d      	lsls	r5, r3, #30
 8019f4a:	4606      	mov	r6, r0
 8019f4c:	460c      	mov	r4, r1
 8019f4e:	d507      	bpl.n	8019f60 <__smakebuf_r+0x1c>
 8019f50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019f54:	6023      	str	r3, [r4, #0]
 8019f56:	6123      	str	r3, [r4, #16]
 8019f58:	2301      	movs	r3, #1
 8019f5a:	6163      	str	r3, [r4, #20]
 8019f5c:	b002      	add	sp, #8
 8019f5e:	bd70      	pop	{r4, r5, r6, pc}
 8019f60:	ab01      	add	r3, sp, #4
 8019f62:	466a      	mov	r2, sp
 8019f64:	f7ff ffc8 	bl	8019ef8 <__swhatbuf_r>
 8019f68:	9900      	ldr	r1, [sp, #0]
 8019f6a:	4605      	mov	r5, r0
 8019f6c:	4630      	mov	r0, r6
 8019f6e:	f7ff fc01 	bl	8019774 <_malloc_r>
 8019f72:	b948      	cbnz	r0, 8019f88 <__smakebuf_r+0x44>
 8019f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f78:	059a      	lsls	r2, r3, #22
 8019f7a:	d4ef      	bmi.n	8019f5c <__smakebuf_r+0x18>
 8019f7c:	f023 0303 	bic.w	r3, r3, #3
 8019f80:	f043 0302 	orr.w	r3, r3, #2
 8019f84:	81a3      	strh	r3, [r4, #12]
 8019f86:	e7e3      	b.n	8019f50 <__smakebuf_r+0xc>
 8019f88:	4b0d      	ldr	r3, [pc, #52]	; (8019fc0 <__smakebuf_r+0x7c>)
 8019f8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8019f8c:	89a3      	ldrh	r3, [r4, #12]
 8019f8e:	6020      	str	r0, [r4, #0]
 8019f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019f94:	81a3      	strh	r3, [r4, #12]
 8019f96:	9b00      	ldr	r3, [sp, #0]
 8019f98:	6163      	str	r3, [r4, #20]
 8019f9a:	9b01      	ldr	r3, [sp, #4]
 8019f9c:	6120      	str	r0, [r4, #16]
 8019f9e:	b15b      	cbz	r3, 8019fb8 <__smakebuf_r+0x74>
 8019fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019fa4:	4630      	mov	r0, r6
 8019fa6:	f000 fd23 	bl	801a9f0 <_isatty_r>
 8019faa:	b128      	cbz	r0, 8019fb8 <__smakebuf_r+0x74>
 8019fac:	89a3      	ldrh	r3, [r4, #12]
 8019fae:	f023 0303 	bic.w	r3, r3, #3
 8019fb2:	f043 0301 	orr.w	r3, r3, #1
 8019fb6:	81a3      	strh	r3, [r4, #12]
 8019fb8:	89a0      	ldrh	r0, [r4, #12]
 8019fba:	4305      	orrs	r5, r0
 8019fbc:	81a5      	strh	r5, [r4, #12]
 8019fbe:	e7cd      	b.n	8019f5c <__smakebuf_r+0x18>
 8019fc0:	08019d51 	.word	0x08019d51

08019fc4 <__malloc_lock>:
 8019fc4:	4801      	ldr	r0, [pc, #4]	; (8019fcc <__malloc_lock+0x8>)
 8019fc6:	f7ff bf95 	b.w	8019ef4 <__retarget_lock_acquire_recursive>
 8019fca:	bf00      	nop
 8019fcc:	20027c5c 	.word	0x20027c5c

08019fd0 <__malloc_unlock>:
 8019fd0:	4801      	ldr	r0, [pc, #4]	; (8019fd8 <__malloc_unlock+0x8>)
 8019fd2:	f7ff bf90 	b.w	8019ef6 <__retarget_lock_release_recursive>
 8019fd6:	bf00      	nop
 8019fd8:	20027c5c 	.word	0x20027c5c

08019fdc <__ssputs_r>:
 8019fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fe0:	688e      	ldr	r6, [r1, #8]
 8019fe2:	429e      	cmp	r6, r3
 8019fe4:	4682      	mov	sl, r0
 8019fe6:	460c      	mov	r4, r1
 8019fe8:	4690      	mov	r8, r2
 8019fea:	461f      	mov	r7, r3
 8019fec:	d838      	bhi.n	801a060 <__ssputs_r+0x84>
 8019fee:	898a      	ldrh	r2, [r1, #12]
 8019ff0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019ff4:	d032      	beq.n	801a05c <__ssputs_r+0x80>
 8019ff6:	6825      	ldr	r5, [r4, #0]
 8019ff8:	6909      	ldr	r1, [r1, #16]
 8019ffa:	eba5 0901 	sub.w	r9, r5, r1
 8019ffe:	6965      	ldr	r5, [r4, #20]
 801a000:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a008:	3301      	adds	r3, #1
 801a00a:	444b      	add	r3, r9
 801a00c:	106d      	asrs	r5, r5, #1
 801a00e:	429d      	cmp	r5, r3
 801a010:	bf38      	it	cc
 801a012:	461d      	movcc	r5, r3
 801a014:	0553      	lsls	r3, r2, #21
 801a016:	d531      	bpl.n	801a07c <__ssputs_r+0xa0>
 801a018:	4629      	mov	r1, r5
 801a01a:	f7ff fbab 	bl	8019774 <_malloc_r>
 801a01e:	4606      	mov	r6, r0
 801a020:	b950      	cbnz	r0, 801a038 <__ssputs_r+0x5c>
 801a022:	230c      	movs	r3, #12
 801a024:	f8ca 3000 	str.w	r3, [sl]
 801a028:	89a3      	ldrh	r3, [r4, #12]
 801a02a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a02e:	81a3      	strh	r3, [r4, #12]
 801a030:	f04f 30ff 	mov.w	r0, #4294967295
 801a034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a038:	6921      	ldr	r1, [r4, #16]
 801a03a:	464a      	mov	r2, r9
 801a03c:	f7ff fb18 	bl	8019670 <memcpy>
 801a040:	89a3      	ldrh	r3, [r4, #12]
 801a042:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a04a:	81a3      	strh	r3, [r4, #12]
 801a04c:	6126      	str	r6, [r4, #16]
 801a04e:	6165      	str	r5, [r4, #20]
 801a050:	444e      	add	r6, r9
 801a052:	eba5 0509 	sub.w	r5, r5, r9
 801a056:	6026      	str	r6, [r4, #0]
 801a058:	60a5      	str	r5, [r4, #8]
 801a05a:	463e      	mov	r6, r7
 801a05c:	42be      	cmp	r6, r7
 801a05e:	d900      	bls.n	801a062 <__ssputs_r+0x86>
 801a060:	463e      	mov	r6, r7
 801a062:	6820      	ldr	r0, [r4, #0]
 801a064:	4632      	mov	r2, r6
 801a066:	4641      	mov	r1, r8
 801a068:	f000 fce4 	bl	801aa34 <memmove>
 801a06c:	68a3      	ldr	r3, [r4, #8]
 801a06e:	1b9b      	subs	r3, r3, r6
 801a070:	60a3      	str	r3, [r4, #8]
 801a072:	6823      	ldr	r3, [r4, #0]
 801a074:	4433      	add	r3, r6
 801a076:	6023      	str	r3, [r4, #0]
 801a078:	2000      	movs	r0, #0
 801a07a:	e7db      	b.n	801a034 <__ssputs_r+0x58>
 801a07c:	462a      	mov	r2, r5
 801a07e:	f000 fcf3 	bl	801aa68 <_realloc_r>
 801a082:	4606      	mov	r6, r0
 801a084:	2800      	cmp	r0, #0
 801a086:	d1e1      	bne.n	801a04c <__ssputs_r+0x70>
 801a088:	6921      	ldr	r1, [r4, #16]
 801a08a:	4650      	mov	r0, sl
 801a08c:	f7ff fb06 	bl	801969c <_free_r>
 801a090:	e7c7      	b.n	801a022 <__ssputs_r+0x46>
	...

0801a094 <_svfiprintf_r>:
 801a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a098:	4698      	mov	r8, r3
 801a09a:	898b      	ldrh	r3, [r1, #12]
 801a09c:	061b      	lsls	r3, r3, #24
 801a09e:	b09d      	sub	sp, #116	; 0x74
 801a0a0:	4607      	mov	r7, r0
 801a0a2:	460d      	mov	r5, r1
 801a0a4:	4614      	mov	r4, r2
 801a0a6:	d50e      	bpl.n	801a0c6 <_svfiprintf_r+0x32>
 801a0a8:	690b      	ldr	r3, [r1, #16]
 801a0aa:	b963      	cbnz	r3, 801a0c6 <_svfiprintf_r+0x32>
 801a0ac:	2140      	movs	r1, #64	; 0x40
 801a0ae:	f7ff fb61 	bl	8019774 <_malloc_r>
 801a0b2:	6028      	str	r0, [r5, #0]
 801a0b4:	6128      	str	r0, [r5, #16]
 801a0b6:	b920      	cbnz	r0, 801a0c2 <_svfiprintf_r+0x2e>
 801a0b8:	230c      	movs	r3, #12
 801a0ba:	603b      	str	r3, [r7, #0]
 801a0bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a0c0:	e0d1      	b.n	801a266 <_svfiprintf_r+0x1d2>
 801a0c2:	2340      	movs	r3, #64	; 0x40
 801a0c4:	616b      	str	r3, [r5, #20]
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	9309      	str	r3, [sp, #36]	; 0x24
 801a0ca:	2320      	movs	r3, #32
 801a0cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a0d0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0d4:	2330      	movs	r3, #48	; 0x30
 801a0d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a280 <_svfiprintf_r+0x1ec>
 801a0da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a0de:	f04f 0901 	mov.w	r9, #1
 801a0e2:	4623      	mov	r3, r4
 801a0e4:	469a      	mov	sl, r3
 801a0e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0ea:	b10a      	cbz	r2, 801a0f0 <_svfiprintf_r+0x5c>
 801a0ec:	2a25      	cmp	r2, #37	; 0x25
 801a0ee:	d1f9      	bne.n	801a0e4 <_svfiprintf_r+0x50>
 801a0f0:	ebba 0b04 	subs.w	fp, sl, r4
 801a0f4:	d00b      	beq.n	801a10e <_svfiprintf_r+0x7a>
 801a0f6:	465b      	mov	r3, fp
 801a0f8:	4622      	mov	r2, r4
 801a0fa:	4629      	mov	r1, r5
 801a0fc:	4638      	mov	r0, r7
 801a0fe:	f7ff ff6d 	bl	8019fdc <__ssputs_r>
 801a102:	3001      	adds	r0, #1
 801a104:	f000 80aa 	beq.w	801a25c <_svfiprintf_r+0x1c8>
 801a108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a10a:	445a      	add	r2, fp
 801a10c:	9209      	str	r2, [sp, #36]	; 0x24
 801a10e:	f89a 3000 	ldrb.w	r3, [sl]
 801a112:	2b00      	cmp	r3, #0
 801a114:	f000 80a2 	beq.w	801a25c <_svfiprintf_r+0x1c8>
 801a118:	2300      	movs	r3, #0
 801a11a:	f04f 32ff 	mov.w	r2, #4294967295
 801a11e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a122:	f10a 0a01 	add.w	sl, sl, #1
 801a126:	9304      	str	r3, [sp, #16]
 801a128:	9307      	str	r3, [sp, #28]
 801a12a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a12e:	931a      	str	r3, [sp, #104]	; 0x68
 801a130:	4654      	mov	r4, sl
 801a132:	2205      	movs	r2, #5
 801a134:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a138:	4851      	ldr	r0, [pc, #324]	; (801a280 <_svfiprintf_r+0x1ec>)
 801a13a:	f7e6 f869 	bl	8000210 <memchr>
 801a13e:	9a04      	ldr	r2, [sp, #16]
 801a140:	b9d8      	cbnz	r0, 801a17a <_svfiprintf_r+0xe6>
 801a142:	06d0      	lsls	r0, r2, #27
 801a144:	bf44      	itt	mi
 801a146:	2320      	movmi	r3, #32
 801a148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a14c:	0711      	lsls	r1, r2, #28
 801a14e:	bf44      	itt	mi
 801a150:	232b      	movmi	r3, #43	; 0x2b
 801a152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a156:	f89a 3000 	ldrb.w	r3, [sl]
 801a15a:	2b2a      	cmp	r3, #42	; 0x2a
 801a15c:	d015      	beq.n	801a18a <_svfiprintf_r+0xf6>
 801a15e:	9a07      	ldr	r2, [sp, #28]
 801a160:	4654      	mov	r4, sl
 801a162:	2000      	movs	r0, #0
 801a164:	f04f 0c0a 	mov.w	ip, #10
 801a168:	4621      	mov	r1, r4
 801a16a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a16e:	3b30      	subs	r3, #48	; 0x30
 801a170:	2b09      	cmp	r3, #9
 801a172:	d94e      	bls.n	801a212 <_svfiprintf_r+0x17e>
 801a174:	b1b0      	cbz	r0, 801a1a4 <_svfiprintf_r+0x110>
 801a176:	9207      	str	r2, [sp, #28]
 801a178:	e014      	b.n	801a1a4 <_svfiprintf_r+0x110>
 801a17a:	eba0 0308 	sub.w	r3, r0, r8
 801a17e:	fa09 f303 	lsl.w	r3, r9, r3
 801a182:	4313      	orrs	r3, r2
 801a184:	9304      	str	r3, [sp, #16]
 801a186:	46a2      	mov	sl, r4
 801a188:	e7d2      	b.n	801a130 <_svfiprintf_r+0x9c>
 801a18a:	9b03      	ldr	r3, [sp, #12]
 801a18c:	1d19      	adds	r1, r3, #4
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	9103      	str	r1, [sp, #12]
 801a192:	2b00      	cmp	r3, #0
 801a194:	bfbb      	ittet	lt
 801a196:	425b      	neglt	r3, r3
 801a198:	f042 0202 	orrlt.w	r2, r2, #2
 801a19c:	9307      	strge	r3, [sp, #28]
 801a19e:	9307      	strlt	r3, [sp, #28]
 801a1a0:	bfb8      	it	lt
 801a1a2:	9204      	strlt	r2, [sp, #16]
 801a1a4:	7823      	ldrb	r3, [r4, #0]
 801a1a6:	2b2e      	cmp	r3, #46	; 0x2e
 801a1a8:	d10c      	bne.n	801a1c4 <_svfiprintf_r+0x130>
 801a1aa:	7863      	ldrb	r3, [r4, #1]
 801a1ac:	2b2a      	cmp	r3, #42	; 0x2a
 801a1ae:	d135      	bne.n	801a21c <_svfiprintf_r+0x188>
 801a1b0:	9b03      	ldr	r3, [sp, #12]
 801a1b2:	1d1a      	adds	r2, r3, #4
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	9203      	str	r2, [sp, #12]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	bfb8      	it	lt
 801a1bc:	f04f 33ff 	movlt.w	r3, #4294967295
 801a1c0:	3402      	adds	r4, #2
 801a1c2:	9305      	str	r3, [sp, #20]
 801a1c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a290 <_svfiprintf_r+0x1fc>
 801a1c8:	7821      	ldrb	r1, [r4, #0]
 801a1ca:	2203      	movs	r2, #3
 801a1cc:	4650      	mov	r0, sl
 801a1ce:	f7e6 f81f 	bl	8000210 <memchr>
 801a1d2:	b140      	cbz	r0, 801a1e6 <_svfiprintf_r+0x152>
 801a1d4:	2340      	movs	r3, #64	; 0x40
 801a1d6:	eba0 000a 	sub.w	r0, r0, sl
 801a1da:	fa03 f000 	lsl.w	r0, r3, r0
 801a1de:	9b04      	ldr	r3, [sp, #16]
 801a1e0:	4303      	orrs	r3, r0
 801a1e2:	3401      	adds	r4, #1
 801a1e4:	9304      	str	r3, [sp, #16]
 801a1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1ea:	4826      	ldr	r0, [pc, #152]	; (801a284 <_svfiprintf_r+0x1f0>)
 801a1ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1f0:	2206      	movs	r2, #6
 801a1f2:	f7e6 f80d 	bl	8000210 <memchr>
 801a1f6:	2800      	cmp	r0, #0
 801a1f8:	d038      	beq.n	801a26c <_svfiprintf_r+0x1d8>
 801a1fa:	4b23      	ldr	r3, [pc, #140]	; (801a288 <_svfiprintf_r+0x1f4>)
 801a1fc:	bb1b      	cbnz	r3, 801a246 <_svfiprintf_r+0x1b2>
 801a1fe:	9b03      	ldr	r3, [sp, #12]
 801a200:	3307      	adds	r3, #7
 801a202:	f023 0307 	bic.w	r3, r3, #7
 801a206:	3308      	adds	r3, #8
 801a208:	9303      	str	r3, [sp, #12]
 801a20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a20c:	4433      	add	r3, r6
 801a20e:	9309      	str	r3, [sp, #36]	; 0x24
 801a210:	e767      	b.n	801a0e2 <_svfiprintf_r+0x4e>
 801a212:	fb0c 3202 	mla	r2, ip, r2, r3
 801a216:	460c      	mov	r4, r1
 801a218:	2001      	movs	r0, #1
 801a21a:	e7a5      	b.n	801a168 <_svfiprintf_r+0xd4>
 801a21c:	2300      	movs	r3, #0
 801a21e:	3401      	adds	r4, #1
 801a220:	9305      	str	r3, [sp, #20]
 801a222:	4619      	mov	r1, r3
 801a224:	f04f 0c0a 	mov.w	ip, #10
 801a228:	4620      	mov	r0, r4
 801a22a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a22e:	3a30      	subs	r2, #48	; 0x30
 801a230:	2a09      	cmp	r2, #9
 801a232:	d903      	bls.n	801a23c <_svfiprintf_r+0x1a8>
 801a234:	2b00      	cmp	r3, #0
 801a236:	d0c5      	beq.n	801a1c4 <_svfiprintf_r+0x130>
 801a238:	9105      	str	r1, [sp, #20]
 801a23a:	e7c3      	b.n	801a1c4 <_svfiprintf_r+0x130>
 801a23c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a240:	4604      	mov	r4, r0
 801a242:	2301      	movs	r3, #1
 801a244:	e7f0      	b.n	801a228 <_svfiprintf_r+0x194>
 801a246:	ab03      	add	r3, sp, #12
 801a248:	9300      	str	r3, [sp, #0]
 801a24a:	462a      	mov	r2, r5
 801a24c:	4b0f      	ldr	r3, [pc, #60]	; (801a28c <_svfiprintf_r+0x1f8>)
 801a24e:	a904      	add	r1, sp, #16
 801a250:	4638      	mov	r0, r7
 801a252:	f3af 8000 	nop.w
 801a256:	1c42      	adds	r2, r0, #1
 801a258:	4606      	mov	r6, r0
 801a25a:	d1d6      	bne.n	801a20a <_svfiprintf_r+0x176>
 801a25c:	89ab      	ldrh	r3, [r5, #12]
 801a25e:	065b      	lsls	r3, r3, #25
 801a260:	f53f af2c 	bmi.w	801a0bc <_svfiprintf_r+0x28>
 801a264:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a266:	b01d      	add	sp, #116	; 0x74
 801a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a26c:	ab03      	add	r3, sp, #12
 801a26e:	9300      	str	r3, [sp, #0]
 801a270:	462a      	mov	r2, r5
 801a272:	4b06      	ldr	r3, [pc, #24]	; (801a28c <_svfiprintf_r+0x1f8>)
 801a274:	a904      	add	r1, sp, #16
 801a276:	4638      	mov	r0, r7
 801a278:	f000 f9d4 	bl	801a624 <_printf_i>
 801a27c:	e7eb      	b.n	801a256 <_svfiprintf_r+0x1c2>
 801a27e:	bf00      	nop
 801a280:	08030cd4 	.word	0x08030cd4
 801a284:	08030cde 	.word	0x08030cde
 801a288:	00000000 	.word	0x00000000
 801a28c:	08019fdd 	.word	0x08019fdd
 801a290:	08030cda 	.word	0x08030cda

0801a294 <__sfputc_r>:
 801a294:	6893      	ldr	r3, [r2, #8]
 801a296:	3b01      	subs	r3, #1
 801a298:	2b00      	cmp	r3, #0
 801a29a:	b410      	push	{r4}
 801a29c:	6093      	str	r3, [r2, #8]
 801a29e:	da08      	bge.n	801a2b2 <__sfputc_r+0x1e>
 801a2a0:	6994      	ldr	r4, [r2, #24]
 801a2a2:	42a3      	cmp	r3, r4
 801a2a4:	db01      	blt.n	801a2aa <__sfputc_r+0x16>
 801a2a6:	290a      	cmp	r1, #10
 801a2a8:	d103      	bne.n	801a2b2 <__sfputc_r+0x1e>
 801a2aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2ae:	f7ff bba9 	b.w	8019a04 <__swbuf_r>
 801a2b2:	6813      	ldr	r3, [r2, #0]
 801a2b4:	1c58      	adds	r0, r3, #1
 801a2b6:	6010      	str	r0, [r2, #0]
 801a2b8:	7019      	strb	r1, [r3, #0]
 801a2ba:	4608      	mov	r0, r1
 801a2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2c0:	4770      	bx	lr

0801a2c2 <__sfputs_r>:
 801a2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2c4:	4606      	mov	r6, r0
 801a2c6:	460f      	mov	r7, r1
 801a2c8:	4614      	mov	r4, r2
 801a2ca:	18d5      	adds	r5, r2, r3
 801a2cc:	42ac      	cmp	r4, r5
 801a2ce:	d101      	bne.n	801a2d4 <__sfputs_r+0x12>
 801a2d0:	2000      	movs	r0, #0
 801a2d2:	e007      	b.n	801a2e4 <__sfputs_r+0x22>
 801a2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2d8:	463a      	mov	r2, r7
 801a2da:	4630      	mov	r0, r6
 801a2dc:	f7ff ffda 	bl	801a294 <__sfputc_r>
 801a2e0:	1c43      	adds	r3, r0, #1
 801a2e2:	d1f3      	bne.n	801a2cc <__sfputs_r+0xa>
 801a2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a2e8 <_vfiprintf_r>:
 801a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2ec:	460d      	mov	r5, r1
 801a2ee:	b09d      	sub	sp, #116	; 0x74
 801a2f0:	4614      	mov	r4, r2
 801a2f2:	4698      	mov	r8, r3
 801a2f4:	4606      	mov	r6, r0
 801a2f6:	b118      	cbz	r0, 801a300 <_vfiprintf_r+0x18>
 801a2f8:	6983      	ldr	r3, [r0, #24]
 801a2fa:	b90b      	cbnz	r3, 801a300 <_vfiprintf_r+0x18>
 801a2fc:	f7ff fd5c 	bl	8019db8 <__sinit>
 801a300:	4b89      	ldr	r3, [pc, #548]	; (801a528 <_vfiprintf_r+0x240>)
 801a302:	429d      	cmp	r5, r3
 801a304:	d11b      	bne.n	801a33e <_vfiprintf_r+0x56>
 801a306:	6875      	ldr	r5, [r6, #4]
 801a308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a30a:	07d9      	lsls	r1, r3, #31
 801a30c:	d405      	bmi.n	801a31a <_vfiprintf_r+0x32>
 801a30e:	89ab      	ldrh	r3, [r5, #12]
 801a310:	059a      	lsls	r2, r3, #22
 801a312:	d402      	bmi.n	801a31a <_vfiprintf_r+0x32>
 801a314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a316:	f7ff fded 	bl	8019ef4 <__retarget_lock_acquire_recursive>
 801a31a:	89ab      	ldrh	r3, [r5, #12]
 801a31c:	071b      	lsls	r3, r3, #28
 801a31e:	d501      	bpl.n	801a324 <_vfiprintf_r+0x3c>
 801a320:	692b      	ldr	r3, [r5, #16]
 801a322:	b9eb      	cbnz	r3, 801a360 <_vfiprintf_r+0x78>
 801a324:	4629      	mov	r1, r5
 801a326:	4630      	mov	r0, r6
 801a328:	f7ff fbbe 	bl	8019aa8 <__swsetup_r>
 801a32c:	b1c0      	cbz	r0, 801a360 <_vfiprintf_r+0x78>
 801a32e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a330:	07dc      	lsls	r4, r3, #31
 801a332:	d50e      	bpl.n	801a352 <_vfiprintf_r+0x6a>
 801a334:	f04f 30ff 	mov.w	r0, #4294967295
 801a338:	b01d      	add	sp, #116	; 0x74
 801a33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a33e:	4b7b      	ldr	r3, [pc, #492]	; (801a52c <_vfiprintf_r+0x244>)
 801a340:	429d      	cmp	r5, r3
 801a342:	d101      	bne.n	801a348 <_vfiprintf_r+0x60>
 801a344:	68b5      	ldr	r5, [r6, #8]
 801a346:	e7df      	b.n	801a308 <_vfiprintf_r+0x20>
 801a348:	4b79      	ldr	r3, [pc, #484]	; (801a530 <_vfiprintf_r+0x248>)
 801a34a:	429d      	cmp	r5, r3
 801a34c:	bf08      	it	eq
 801a34e:	68f5      	ldreq	r5, [r6, #12]
 801a350:	e7da      	b.n	801a308 <_vfiprintf_r+0x20>
 801a352:	89ab      	ldrh	r3, [r5, #12]
 801a354:	0598      	lsls	r0, r3, #22
 801a356:	d4ed      	bmi.n	801a334 <_vfiprintf_r+0x4c>
 801a358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a35a:	f7ff fdcc 	bl	8019ef6 <__retarget_lock_release_recursive>
 801a35e:	e7e9      	b.n	801a334 <_vfiprintf_r+0x4c>
 801a360:	2300      	movs	r3, #0
 801a362:	9309      	str	r3, [sp, #36]	; 0x24
 801a364:	2320      	movs	r3, #32
 801a366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a36a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a36e:	2330      	movs	r3, #48	; 0x30
 801a370:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a534 <_vfiprintf_r+0x24c>
 801a374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a378:	f04f 0901 	mov.w	r9, #1
 801a37c:	4623      	mov	r3, r4
 801a37e:	469a      	mov	sl, r3
 801a380:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a384:	b10a      	cbz	r2, 801a38a <_vfiprintf_r+0xa2>
 801a386:	2a25      	cmp	r2, #37	; 0x25
 801a388:	d1f9      	bne.n	801a37e <_vfiprintf_r+0x96>
 801a38a:	ebba 0b04 	subs.w	fp, sl, r4
 801a38e:	d00b      	beq.n	801a3a8 <_vfiprintf_r+0xc0>
 801a390:	465b      	mov	r3, fp
 801a392:	4622      	mov	r2, r4
 801a394:	4629      	mov	r1, r5
 801a396:	4630      	mov	r0, r6
 801a398:	f7ff ff93 	bl	801a2c2 <__sfputs_r>
 801a39c:	3001      	adds	r0, #1
 801a39e:	f000 80aa 	beq.w	801a4f6 <_vfiprintf_r+0x20e>
 801a3a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a3a4:	445a      	add	r2, fp
 801a3a6:	9209      	str	r2, [sp, #36]	; 0x24
 801a3a8:	f89a 3000 	ldrb.w	r3, [sl]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	f000 80a2 	beq.w	801a4f6 <_vfiprintf_r+0x20e>
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	f04f 32ff 	mov.w	r2, #4294967295
 801a3b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a3bc:	f10a 0a01 	add.w	sl, sl, #1
 801a3c0:	9304      	str	r3, [sp, #16]
 801a3c2:	9307      	str	r3, [sp, #28]
 801a3c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a3c8:	931a      	str	r3, [sp, #104]	; 0x68
 801a3ca:	4654      	mov	r4, sl
 801a3cc:	2205      	movs	r2, #5
 801a3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3d2:	4858      	ldr	r0, [pc, #352]	; (801a534 <_vfiprintf_r+0x24c>)
 801a3d4:	f7e5 ff1c 	bl	8000210 <memchr>
 801a3d8:	9a04      	ldr	r2, [sp, #16]
 801a3da:	b9d8      	cbnz	r0, 801a414 <_vfiprintf_r+0x12c>
 801a3dc:	06d1      	lsls	r1, r2, #27
 801a3de:	bf44      	itt	mi
 801a3e0:	2320      	movmi	r3, #32
 801a3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a3e6:	0713      	lsls	r3, r2, #28
 801a3e8:	bf44      	itt	mi
 801a3ea:	232b      	movmi	r3, #43	; 0x2b
 801a3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a3f0:	f89a 3000 	ldrb.w	r3, [sl]
 801a3f4:	2b2a      	cmp	r3, #42	; 0x2a
 801a3f6:	d015      	beq.n	801a424 <_vfiprintf_r+0x13c>
 801a3f8:	9a07      	ldr	r2, [sp, #28]
 801a3fa:	4654      	mov	r4, sl
 801a3fc:	2000      	movs	r0, #0
 801a3fe:	f04f 0c0a 	mov.w	ip, #10
 801a402:	4621      	mov	r1, r4
 801a404:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a408:	3b30      	subs	r3, #48	; 0x30
 801a40a:	2b09      	cmp	r3, #9
 801a40c:	d94e      	bls.n	801a4ac <_vfiprintf_r+0x1c4>
 801a40e:	b1b0      	cbz	r0, 801a43e <_vfiprintf_r+0x156>
 801a410:	9207      	str	r2, [sp, #28]
 801a412:	e014      	b.n	801a43e <_vfiprintf_r+0x156>
 801a414:	eba0 0308 	sub.w	r3, r0, r8
 801a418:	fa09 f303 	lsl.w	r3, r9, r3
 801a41c:	4313      	orrs	r3, r2
 801a41e:	9304      	str	r3, [sp, #16]
 801a420:	46a2      	mov	sl, r4
 801a422:	e7d2      	b.n	801a3ca <_vfiprintf_r+0xe2>
 801a424:	9b03      	ldr	r3, [sp, #12]
 801a426:	1d19      	adds	r1, r3, #4
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	9103      	str	r1, [sp, #12]
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	bfbb      	ittet	lt
 801a430:	425b      	neglt	r3, r3
 801a432:	f042 0202 	orrlt.w	r2, r2, #2
 801a436:	9307      	strge	r3, [sp, #28]
 801a438:	9307      	strlt	r3, [sp, #28]
 801a43a:	bfb8      	it	lt
 801a43c:	9204      	strlt	r2, [sp, #16]
 801a43e:	7823      	ldrb	r3, [r4, #0]
 801a440:	2b2e      	cmp	r3, #46	; 0x2e
 801a442:	d10c      	bne.n	801a45e <_vfiprintf_r+0x176>
 801a444:	7863      	ldrb	r3, [r4, #1]
 801a446:	2b2a      	cmp	r3, #42	; 0x2a
 801a448:	d135      	bne.n	801a4b6 <_vfiprintf_r+0x1ce>
 801a44a:	9b03      	ldr	r3, [sp, #12]
 801a44c:	1d1a      	adds	r2, r3, #4
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	9203      	str	r2, [sp, #12]
 801a452:	2b00      	cmp	r3, #0
 801a454:	bfb8      	it	lt
 801a456:	f04f 33ff 	movlt.w	r3, #4294967295
 801a45a:	3402      	adds	r4, #2
 801a45c:	9305      	str	r3, [sp, #20]
 801a45e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a544 <_vfiprintf_r+0x25c>
 801a462:	7821      	ldrb	r1, [r4, #0]
 801a464:	2203      	movs	r2, #3
 801a466:	4650      	mov	r0, sl
 801a468:	f7e5 fed2 	bl	8000210 <memchr>
 801a46c:	b140      	cbz	r0, 801a480 <_vfiprintf_r+0x198>
 801a46e:	2340      	movs	r3, #64	; 0x40
 801a470:	eba0 000a 	sub.w	r0, r0, sl
 801a474:	fa03 f000 	lsl.w	r0, r3, r0
 801a478:	9b04      	ldr	r3, [sp, #16]
 801a47a:	4303      	orrs	r3, r0
 801a47c:	3401      	adds	r4, #1
 801a47e:	9304      	str	r3, [sp, #16]
 801a480:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a484:	482c      	ldr	r0, [pc, #176]	; (801a538 <_vfiprintf_r+0x250>)
 801a486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a48a:	2206      	movs	r2, #6
 801a48c:	f7e5 fec0 	bl	8000210 <memchr>
 801a490:	2800      	cmp	r0, #0
 801a492:	d03f      	beq.n	801a514 <_vfiprintf_r+0x22c>
 801a494:	4b29      	ldr	r3, [pc, #164]	; (801a53c <_vfiprintf_r+0x254>)
 801a496:	bb1b      	cbnz	r3, 801a4e0 <_vfiprintf_r+0x1f8>
 801a498:	9b03      	ldr	r3, [sp, #12]
 801a49a:	3307      	adds	r3, #7
 801a49c:	f023 0307 	bic.w	r3, r3, #7
 801a4a0:	3308      	adds	r3, #8
 801a4a2:	9303      	str	r3, [sp, #12]
 801a4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4a6:	443b      	add	r3, r7
 801a4a8:	9309      	str	r3, [sp, #36]	; 0x24
 801a4aa:	e767      	b.n	801a37c <_vfiprintf_r+0x94>
 801a4ac:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4b0:	460c      	mov	r4, r1
 801a4b2:	2001      	movs	r0, #1
 801a4b4:	e7a5      	b.n	801a402 <_vfiprintf_r+0x11a>
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	3401      	adds	r4, #1
 801a4ba:	9305      	str	r3, [sp, #20]
 801a4bc:	4619      	mov	r1, r3
 801a4be:	f04f 0c0a 	mov.w	ip, #10
 801a4c2:	4620      	mov	r0, r4
 801a4c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4c8:	3a30      	subs	r2, #48	; 0x30
 801a4ca:	2a09      	cmp	r2, #9
 801a4cc:	d903      	bls.n	801a4d6 <_vfiprintf_r+0x1ee>
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d0c5      	beq.n	801a45e <_vfiprintf_r+0x176>
 801a4d2:	9105      	str	r1, [sp, #20]
 801a4d4:	e7c3      	b.n	801a45e <_vfiprintf_r+0x176>
 801a4d6:	fb0c 2101 	mla	r1, ip, r1, r2
 801a4da:	4604      	mov	r4, r0
 801a4dc:	2301      	movs	r3, #1
 801a4de:	e7f0      	b.n	801a4c2 <_vfiprintf_r+0x1da>
 801a4e0:	ab03      	add	r3, sp, #12
 801a4e2:	9300      	str	r3, [sp, #0]
 801a4e4:	462a      	mov	r2, r5
 801a4e6:	4b16      	ldr	r3, [pc, #88]	; (801a540 <_vfiprintf_r+0x258>)
 801a4e8:	a904      	add	r1, sp, #16
 801a4ea:	4630      	mov	r0, r6
 801a4ec:	f3af 8000 	nop.w
 801a4f0:	4607      	mov	r7, r0
 801a4f2:	1c78      	adds	r0, r7, #1
 801a4f4:	d1d6      	bne.n	801a4a4 <_vfiprintf_r+0x1bc>
 801a4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a4f8:	07d9      	lsls	r1, r3, #31
 801a4fa:	d405      	bmi.n	801a508 <_vfiprintf_r+0x220>
 801a4fc:	89ab      	ldrh	r3, [r5, #12]
 801a4fe:	059a      	lsls	r2, r3, #22
 801a500:	d402      	bmi.n	801a508 <_vfiprintf_r+0x220>
 801a502:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a504:	f7ff fcf7 	bl	8019ef6 <__retarget_lock_release_recursive>
 801a508:	89ab      	ldrh	r3, [r5, #12]
 801a50a:	065b      	lsls	r3, r3, #25
 801a50c:	f53f af12 	bmi.w	801a334 <_vfiprintf_r+0x4c>
 801a510:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a512:	e711      	b.n	801a338 <_vfiprintf_r+0x50>
 801a514:	ab03      	add	r3, sp, #12
 801a516:	9300      	str	r3, [sp, #0]
 801a518:	462a      	mov	r2, r5
 801a51a:	4b09      	ldr	r3, [pc, #36]	; (801a540 <_vfiprintf_r+0x258>)
 801a51c:	a904      	add	r1, sp, #16
 801a51e:	4630      	mov	r0, r6
 801a520:	f000 f880 	bl	801a624 <_printf_i>
 801a524:	e7e4      	b.n	801a4f0 <_vfiprintf_r+0x208>
 801a526:	bf00      	nop
 801a528:	08030c94 	.word	0x08030c94
 801a52c:	08030cb4 	.word	0x08030cb4
 801a530:	08030c74 	.word	0x08030c74
 801a534:	08030cd4 	.word	0x08030cd4
 801a538:	08030cde 	.word	0x08030cde
 801a53c:	00000000 	.word	0x00000000
 801a540:	0801a2c3 	.word	0x0801a2c3
 801a544:	08030cda 	.word	0x08030cda

0801a548 <_printf_common>:
 801a548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a54c:	4616      	mov	r6, r2
 801a54e:	4699      	mov	r9, r3
 801a550:	688a      	ldr	r2, [r1, #8]
 801a552:	690b      	ldr	r3, [r1, #16]
 801a554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a558:	4293      	cmp	r3, r2
 801a55a:	bfb8      	it	lt
 801a55c:	4613      	movlt	r3, r2
 801a55e:	6033      	str	r3, [r6, #0]
 801a560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a564:	4607      	mov	r7, r0
 801a566:	460c      	mov	r4, r1
 801a568:	b10a      	cbz	r2, 801a56e <_printf_common+0x26>
 801a56a:	3301      	adds	r3, #1
 801a56c:	6033      	str	r3, [r6, #0]
 801a56e:	6823      	ldr	r3, [r4, #0]
 801a570:	0699      	lsls	r1, r3, #26
 801a572:	bf42      	ittt	mi
 801a574:	6833      	ldrmi	r3, [r6, #0]
 801a576:	3302      	addmi	r3, #2
 801a578:	6033      	strmi	r3, [r6, #0]
 801a57a:	6825      	ldr	r5, [r4, #0]
 801a57c:	f015 0506 	ands.w	r5, r5, #6
 801a580:	d106      	bne.n	801a590 <_printf_common+0x48>
 801a582:	f104 0a19 	add.w	sl, r4, #25
 801a586:	68e3      	ldr	r3, [r4, #12]
 801a588:	6832      	ldr	r2, [r6, #0]
 801a58a:	1a9b      	subs	r3, r3, r2
 801a58c:	42ab      	cmp	r3, r5
 801a58e:	dc26      	bgt.n	801a5de <_printf_common+0x96>
 801a590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a594:	1e13      	subs	r3, r2, #0
 801a596:	6822      	ldr	r2, [r4, #0]
 801a598:	bf18      	it	ne
 801a59a:	2301      	movne	r3, #1
 801a59c:	0692      	lsls	r2, r2, #26
 801a59e:	d42b      	bmi.n	801a5f8 <_printf_common+0xb0>
 801a5a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a5a4:	4649      	mov	r1, r9
 801a5a6:	4638      	mov	r0, r7
 801a5a8:	47c0      	blx	r8
 801a5aa:	3001      	adds	r0, #1
 801a5ac:	d01e      	beq.n	801a5ec <_printf_common+0xa4>
 801a5ae:	6823      	ldr	r3, [r4, #0]
 801a5b0:	68e5      	ldr	r5, [r4, #12]
 801a5b2:	6832      	ldr	r2, [r6, #0]
 801a5b4:	f003 0306 	and.w	r3, r3, #6
 801a5b8:	2b04      	cmp	r3, #4
 801a5ba:	bf08      	it	eq
 801a5bc:	1aad      	subeq	r5, r5, r2
 801a5be:	68a3      	ldr	r3, [r4, #8]
 801a5c0:	6922      	ldr	r2, [r4, #16]
 801a5c2:	bf0c      	ite	eq
 801a5c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a5c8:	2500      	movne	r5, #0
 801a5ca:	4293      	cmp	r3, r2
 801a5cc:	bfc4      	itt	gt
 801a5ce:	1a9b      	subgt	r3, r3, r2
 801a5d0:	18ed      	addgt	r5, r5, r3
 801a5d2:	2600      	movs	r6, #0
 801a5d4:	341a      	adds	r4, #26
 801a5d6:	42b5      	cmp	r5, r6
 801a5d8:	d11a      	bne.n	801a610 <_printf_common+0xc8>
 801a5da:	2000      	movs	r0, #0
 801a5dc:	e008      	b.n	801a5f0 <_printf_common+0xa8>
 801a5de:	2301      	movs	r3, #1
 801a5e0:	4652      	mov	r2, sl
 801a5e2:	4649      	mov	r1, r9
 801a5e4:	4638      	mov	r0, r7
 801a5e6:	47c0      	blx	r8
 801a5e8:	3001      	adds	r0, #1
 801a5ea:	d103      	bne.n	801a5f4 <_printf_common+0xac>
 801a5ec:	f04f 30ff 	mov.w	r0, #4294967295
 801a5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5f4:	3501      	adds	r5, #1
 801a5f6:	e7c6      	b.n	801a586 <_printf_common+0x3e>
 801a5f8:	18e1      	adds	r1, r4, r3
 801a5fa:	1c5a      	adds	r2, r3, #1
 801a5fc:	2030      	movs	r0, #48	; 0x30
 801a5fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a602:	4422      	add	r2, r4
 801a604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a60c:	3302      	adds	r3, #2
 801a60e:	e7c7      	b.n	801a5a0 <_printf_common+0x58>
 801a610:	2301      	movs	r3, #1
 801a612:	4622      	mov	r2, r4
 801a614:	4649      	mov	r1, r9
 801a616:	4638      	mov	r0, r7
 801a618:	47c0      	blx	r8
 801a61a:	3001      	adds	r0, #1
 801a61c:	d0e6      	beq.n	801a5ec <_printf_common+0xa4>
 801a61e:	3601      	adds	r6, #1
 801a620:	e7d9      	b.n	801a5d6 <_printf_common+0x8e>
	...

0801a624 <_printf_i>:
 801a624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a628:	7e0f      	ldrb	r7, [r1, #24]
 801a62a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a62c:	2f78      	cmp	r7, #120	; 0x78
 801a62e:	4691      	mov	r9, r2
 801a630:	4680      	mov	r8, r0
 801a632:	460c      	mov	r4, r1
 801a634:	469a      	mov	sl, r3
 801a636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a63a:	d807      	bhi.n	801a64c <_printf_i+0x28>
 801a63c:	2f62      	cmp	r7, #98	; 0x62
 801a63e:	d80a      	bhi.n	801a656 <_printf_i+0x32>
 801a640:	2f00      	cmp	r7, #0
 801a642:	f000 80d8 	beq.w	801a7f6 <_printf_i+0x1d2>
 801a646:	2f58      	cmp	r7, #88	; 0x58
 801a648:	f000 80a3 	beq.w	801a792 <_printf_i+0x16e>
 801a64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a654:	e03a      	b.n	801a6cc <_printf_i+0xa8>
 801a656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a65a:	2b15      	cmp	r3, #21
 801a65c:	d8f6      	bhi.n	801a64c <_printf_i+0x28>
 801a65e:	a101      	add	r1, pc, #4	; (adr r1, 801a664 <_printf_i+0x40>)
 801a660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a664:	0801a6bd 	.word	0x0801a6bd
 801a668:	0801a6d1 	.word	0x0801a6d1
 801a66c:	0801a64d 	.word	0x0801a64d
 801a670:	0801a64d 	.word	0x0801a64d
 801a674:	0801a64d 	.word	0x0801a64d
 801a678:	0801a64d 	.word	0x0801a64d
 801a67c:	0801a6d1 	.word	0x0801a6d1
 801a680:	0801a64d 	.word	0x0801a64d
 801a684:	0801a64d 	.word	0x0801a64d
 801a688:	0801a64d 	.word	0x0801a64d
 801a68c:	0801a64d 	.word	0x0801a64d
 801a690:	0801a7dd 	.word	0x0801a7dd
 801a694:	0801a701 	.word	0x0801a701
 801a698:	0801a7bf 	.word	0x0801a7bf
 801a69c:	0801a64d 	.word	0x0801a64d
 801a6a0:	0801a64d 	.word	0x0801a64d
 801a6a4:	0801a7ff 	.word	0x0801a7ff
 801a6a8:	0801a64d 	.word	0x0801a64d
 801a6ac:	0801a701 	.word	0x0801a701
 801a6b0:	0801a64d 	.word	0x0801a64d
 801a6b4:	0801a64d 	.word	0x0801a64d
 801a6b8:	0801a7c7 	.word	0x0801a7c7
 801a6bc:	682b      	ldr	r3, [r5, #0]
 801a6be:	1d1a      	adds	r2, r3, #4
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	602a      	str	r2, [r5, #0]
 801a6c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a6c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a6cc:	2301      	movs	r3, #1
 801a6ce:	e0a3      	b.n	801a818 <_printf_i+0x1f4>
 801a6d0:	6820      	ldr	r0, [r4, #0]
 801a6d2:	6829      	ldr	r1, [r5, #0]
 801a6d4:	0606      	lsls	r6, r0, #24
 801a6d6:	f101 0304 	add.w	r3, r1, #4
 801a6da:	d50a      	bpl.n	801a6f2 <_printf_i+0xce>
 801a6dc:	680e      	ldr	r6, [r1, #0]
 801a6de:	602b      	str	r3, [r5, #0]
 801a6e0:	2e00      	cmp	r6, #0
 801a6e2:	da03      	bge.n	801a6ec <_printf_i+0xc8>
 801a6e4:	232d      	movs	r3, #45	; 0x2d
 801a6e6:	4276      	negs	r6, r6
 801a6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a6ec:	485e      	ldr	r0, [pc, #376]	; (801a868 <_printf_i+0x244>)
 801a6ee:	230a      	movs	r3, #10
 801a6f0:	e019      	b.n	801a726 <_printf_i+0x102>
 801a6f2:	680e      	ldr	r6, [r1, #0]
 801a6f4:	602b      	str	r3, [r5, #0]
 801a6f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a6fa:	bf18      	it	ne
 801a6fc:	b236      	sxthne	r6, r6
 801a6fe:	e7ef      	b.n	801a6e0 <_printf_i+0xbc>
 801a700:	682b      	ldr	r3, [r5, #0]
 801a702:	6820      	ldr	r0, [r4, #0]
 801a704:	1d19      	adds	r1, r3, #4
 801a706:	6029      	str	r1, [r5, #0]
 801a708:	0601      	lsls	r1, r0, #24
 801a70a:	d501      	bpl.n	801a710 <_printf_i+0xec>
 801a70c:	681e      	ldr	r6, [r3, #0]
 801a70e:	e002      	b.n	801a716 <_printf_i+0xf2>
 801a710:	0646      	lsls	r6, r0, #25
 801a712:	d5fb      	bpl.n	801a70c <_printf_i+0xe8>
 801a714:	881e      	ldrh	r6, [r3, #0]
 801a716:	4854      	ldr	r0, [pc, #336]	; (801a868 <_printf_i+0x244>)
 801a718:	2f6f      	cmp	r7, #111	; 0x6f
 801a71a:	bf0c      	ite	eq
 801a71c:	2308      	moveq	r3, #8
 801a71e:	230a      	movne	r3, #10
 801a720:	2100      	movs	r1, #0
 801a722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a726:	6865      	ldr	r5, [r4, #4]
 801a728:	60a5      	str	r5, [r4, #8]
 801a72a:	2d00      	cmp	r5, #0
 801a72c:	bfa2      	ittt	ge
 801a72e:	6821      	ldrge	r1, [r4, #0]
 801a730:	f021 0104 	bicge.w	r1, r1, #4
 801a734:	6021      	strge	r1, [r4, #0]
 801a736:	b90e      	cbnz	r6, 801a73c <_printf_i+0x118>
 801a738:	2d00      	cmp	r5, #0
 801a73a:	d04d      	beq.n	801a7d8 <_printf_i+0x1b4>
 801a73c:	4615      	mov	r5, r2
 801a73e:	fbb6 f1f3 	udiv	r1, r6, r3
 801a742:	fb03 6711 	mls	r7, r3, r1, r6
 801a746:	5dc7      	ldrb	r7, [r0, r7]
 801a748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a74c:	4637      	mov	r7, r6
 801a74e:	42bb      	cmp	r3, r7
 801a750:	460e      	mov	r6, r1
 801a752:	d9f4      	bls.n	801a73e <_printf_i+0x11a>
 801a754:	2b08      	cmp	r3, #8
 801a756:	d10b      	bne.n	801a770 <_printf_i+0x14c>
 801a758:	6823      	ldr	r3, [r4, #0]
 801a75a:	07de      	lsls	r6, r3, #31
 801a75c:	d508      	bpl.n	801a770 <_printf_i+0x14c>
 801a75e:	6923      	ldr	r3, [r4, #16]
 801a760:	6861      	ldr	r1, [r4, #4]
 801a762:	4299      	cmp	r1, r3
 801a764:	bfde      	ittt	le
 801a766:	2330      	movle	r3, #48	; 0x30
 801a768:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a76c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a770:	1b52      	subs	r2, r2, r5
 801a772:	6122      	str	r2, [r4, #16]
 801a774:	f8cd a000 	str.w	sl, [sp]
 801a778:	464b      	mov	r3, r9
 801a77a:	aa03      	add	r2, sp, #12
 801a77c:	4621      	mov	r1, r4
 801a77e:	4640      	mov	r0, r8
 801a780:	f7ff fee2 	bl	801a548 <_printf_common>
 801a784:	3001      	adds	r0, #1
 801a786:	d14c      	bne.n	801a822 <_printf_i+0x1fe>
 801a788:	f04f 30ff 	mov.w	r0, #4294967295
 801a78c:	b004      	add	sp, #16
 801a78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a792:	4835      	ldr	r0, [pc, #212]	; (801a868 <_printf_i+0x244>)
 801a794:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a798:	6829      	ldr	r1, [r5, #0]
 801a79a:	6823      	ldr	r3, [r4, #0]
 801a79c:	f851 6b04 	ldr.w	r6, [r1], #4
 801a7a0:	6029      	str	r1, [r5, #0]
 801a7a2:	061d      	lsls	r5, r3, #24
 801a7a4:	d514      	bpl.n	801a7d0 <_printf_i+0x1ac>
 801a7a6:	07df      	lsls	r7, r3, #31
 801a7a8:	bf44      	itt	mi
 801a7aa:	f043 0320 	orrmi.w	r3, r3, #32
 801a7ae:	6023      	strmi	r3, [r4, #0]
 801a7b0:	b91e      	cbnz	r6, 801a7ba <_printf_i+0x196>
 801a7b2:	6823      	ldr	r3, [r4, #0]
 801a7b4:	f023 0320 	bic.w	r3, r3, #32
 801a7b8:	6023      	str	r3, [r4, #0]
 801a7ba:	2310      	movs	r3, #16
 801a7bc:	e7b0      	b.n	801a720 <_printf_i+0xfc>
 801a7be:	6823      	ldr	r3, [r4, #0]
 801a7c0:	f043 0320 	orr.w	r3, r3, #32
 801a7c4:	6023      	str	r3, [r4, #0]
 801a7c6:	2378      	movs	r3, #120	; 0x78
 801a7c8:	4828      	ldr	r0, [pc, #160]	; (801a86c <_printf_i+0x248>)
 801a7ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a7ce:	e7e3      	b.n	801a798 <_printf_i+0x174>
 801a7d0:	0659      	lsls	r1, r3, #25
 801a7d2:	bf48      	it	mi
 801a7d4:	b2b6      	uxthmi	r6, r6
 801a7d6:	e7e6      	b.n	801a7a6 <_printf_i+0x182>
 801a7d8:	4615      	mov	r5, r2
 801a7da:	e7bb      	b.n	801a754 <_printf_i+0x130>
 801a7dc:	682b      	ldr	r3, [r5, #0]
 801a7de:	6826      	ldr	r6, [r4, #0]
 801a7e0:	6961      	ldr	r1, [r4, #20]
 801a7e2:	1d18      	adds	r0, r3, #4
 801a7e4:	6028      	str	r0, [r5, #0]
 801a7e6:	0635      	lsls	r5, r6, #24
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	d501      	bpl.n	801a7f0 <_printf_i+0x1cc>
 801a7ec:	6019      	str	r1, [r3, #0]
 801a7ee:	e002      	b.n	801a7f6 <_printf_i+0x1d2>
 801a7f0:	0670      	lsls	r0, r6, #25
 801a7f2:	d5fb      	bpl.n	801a7ec <_printf_i+0x1c8>
 801a7f4:	8019      	strh	r1, [r3, #0]
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	6123      	str	r3, [r4, #16]
 801a7fa:	4615      	mov	r5, r2
 801a7fc:	e7ba      	b.n	801a774 <_printf_i+0x150>
 801a7fe:	682b      	ldr	r3, [r5, #0]
 801a800:	1d1a      	adds	r2, r3, #4
 801a802:	602a      	str	r2, [r5, #0]
 801a804:	681d      	ldr	r5, [r3, #0]
 801a806:	6862      	ldr	r2, [r4, #4]
 801a808:	2100      	movs	r1, #0
 801a80a:	4628      	mov	r0, r5
 801a80c:	f7e5 fd00 	bl	8000210 <memchr>
 801a810:	b108      	cbz	r0, 801a816 <_printf_i+0x1f2>
 801a812:	1b40      	subs	r0, r0, r5
 801a814:	6060      	str	r0, [r4, #4]
 801a816:	6863      	ldr	r3, [r4, #4]
 801a818:	6123      	str	r3, [r4, #16]
 801a81a:	2300      	movs	r3, #0
 801a81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a820:	e7a8      	b.n	801a774 <_printf_i+0x150>
 801a822:	6923      	ldr	r3, [r4, #16]
 801a824:	462a      	mov	r2, r5
 801a826:	4649      	mov	r1, r9
 801a828:	4640      	mov	r0, r8
 801a82a:	47d0      	blx	sl
 801a82c:	3001      	adds	r0, #1
 801a82e:	d0ab      	beq.n	801a788 <_printf_i+0x164>
 801a830:	6823      	ldr	r3, [r4, #0]
 801a832:	079b      	lsls	r3, r3, #30
 801a834:	d413      	bmi.n	801a85e <_printf_i+0x23a>
 801a836:	68e0      	ldr	r0, [r4, #12]
 801a838:	9b03      	ldr	r3, [sp, #12]
 801a83a:	4298      	cmp	r0, r3
 801a83c:	bfb8      	it	lt
 801a83e:	4618      	movlt	r0, r3
 801a840:	e7a4      	b.n	801a78c <_printf_i+0x168>
 801a842:	2301      	movs	r3, #1
 801a844:	4632      	mov	r2, r6
 801a846:	4649      	mov	r1, r9
 801a848:	4640      	mov	r0, r8
 801a84a:	47d0      	blx	sl
 801a84c:	3001      	adds	r0, #1
 801a84e:	d09b      	beq.n	801a788 <_printf_i+0x164>
 801a850:	3501      	adds	r5, #1
 801a852:	68e3      	ldr	r3, [r4, #12]
 801a854:	9903      	ldr	r1, [sp, #12]
 801a856:	1a5b      	subs	r3, r3, r1
 801a858:	42ab      	cmp	r3, r5
 801a85a:	dcf2      	bgt.n	801a842 <_printf_i+0x21e>
 801a85c:	e7eb      	b.n	801a836 <_printf_i+0x212>
 801a85e:	2500      	movs	r5, #0
 801a860:	f104 0619 	add.w	r6, r4, #25
 801a864:	e7f5      	b.n	801a852 <_printf_i+0x22e>
 801a866:	bf00      	nop
 801a868:	08030ce5 	.word	0x08030ce5
 801a86c:	08030cf6 	.word	0x08030cf6

0801a870 <_putc_r>:
 801a870:	b570      	push	{r4, r5, r6, lr}
 801a872:	460d      	mov	r5, r1
 801a874:	4614      	mov	r4, r2
 801a876:	4606      	mov	r6, r0
 801a878:	b118      	cbz	r0, 801a882 <_putc_r+0x12>
 801a87a:	6983      	ldr	r3, [r0, #24]
 801a87c:	b90b      	cbnz	r3, 801a882 <_putc_r+0x12>
 801a87e:	f7ff fa9b 	bl	8019db8 <__sinit>
 801a882:	4b1c      	ldr	r3, [pc, #112]	; (801a8f4 <_putc_r+0x84>)
 801a884:	429c      	cmp	r4, r3
 801a886:	d124      	bne.n	801a8d2 <_putc_r+0x62>
 801a888:	6874      	ldr	r4, [r6, #4]
 801a88a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a88c:	07d8      	lsls	r0, r3, #31
 801a88e:	d405      	bmi.n	801a89c <_putc_r+0x2c>
 801a890:	89a3      	ldrh	r3, [r4, #12]
 801a892:	0599      	lsls	r1, r3, #22
 801a894:	d402      	bmi.n	801a89c <_putc_r+0x2c>
 801a896:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a898:	f7ff fb2c 	bl	8019ef4 <__retarget_lock_acquire_recursive>
 801a89c:	68a3      	ldr	r3, [r4, #8]
 801a89e:	3b01      	subs	r3, #1
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	60a3      	str	r3, [r4, #8]
 801a8a4:	da05      	bge.n	801a8b2 <_putc_r+0x42>
 801a8a6:	69a2      	ldr	r2, [r4, #24]
 801a8a8:	4293      	cmp	r3, r2
 801a8aa:	db1c      	blt.n	801a8e6 <_putc_r+0x76>
 801a8ac:	b2eb      	uxtb	r3, r5
 801a8ae:	2b0a      	cmp	r3, #10
 801a8b0:	d019      	beq.n	801a8e6 <_putc_r+0x76>
 801a8b2:	6823      	ldr	r3, [r4, #0]
 801a8b4:	1c5a      	adds	r2, r3, #1
 801a8b6:	6022      	str	r2, [r4, #0]
 801a8b8:	701d      	strb	r5, [r3, #0]
 801a8ba:	b2ed      	uxtb	r5, r5
 801a8bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a8be:	07da      	lsls	r2, r3, #31
 801a8c0:	d405      	bmi.n	801a8ce <_putc_r+0x5e>
 801a8c2:	89a3      	ldrh	r3, [r4, #12]
 801a8c4:	059b      	lsls	r3, r3, #22
 801a8c6:	d402      	bmi.n	801a8ce <_putc_r+0x5e>
 801a8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a8ca:	f7ff fb14 	bl	8019ef6 <__retarget_lock_release_recursive>
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	bd70      	pop	{r4, r5, r6, pc}
 801a8d2:	4b09      	ldr	r3, [pc, #36]	; (801a8f8 <_putc_r+0x88>)
 801a8d4:	429c      	cmp	r4, r3
 801a8d6:	d101      	bne.n	801a8dc <_putc_r+0x6c>
 801a8d8:	68b4      	ldr	r4, [r6, #8]
 801a8da:	e7d6      	b.n	801a88a <_putc_r+0x1a>
 801a8dc:	4b07      	ldr	r3, [pc, #28]	; (801a8fc <_putc_r+0x8c>)
 801a8de:	429c      	cmp	r4, r3
 801a8e0:	bf08      	it	eq
 801a8e2:	68f4      	ldreq	r4, [r6, #12]
 801a8e4:	e7d1      	b.n	801a88a <_putc_r+0x1a>
 801a8e6:	4629      	mov	r1, r5
 801a8e8:	4622      	mov	r2, r4
 801a8ea:	4630      	mov	r0, r6
 801a8ec:	f7ff f88a 	bl	8019a04 <__swbuf_r>
 801a8f0:	4605      	mov	r5, r0
 801a8f2:	e7e3      	b.n	801a8bc <_putc_r+0x4c>
 801a8f4:	08030c94 	.word	0x08030c94
 801a8f8:	08030cb4 	.word	0x08030cb4
 801a8fc:	08030c74 	.word	0x08030c74

0801a900 <__sread>:
 801a900:	b510      	push	{r4, lr}
 801a902:	460c      	mov	r4, r1
 801a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a908:	f000 f8de 	bl	801aac8 <_read_r>
 801a90c:	2800      	cmp	r0, #0
 801a90e:	bfab      	itete	ge
 801a910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a912:	89a3      	ldrhlt	r3, [r4, #12]
 801a914:	181b      	addge	r3, r3, r0
 801a916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a91a:	bfac      	ite	ge
 801a91c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a91e:	81a3      	strhlt	r3, [r4, #12]
 801a920:	bd10      	pop	{r4, pc}

0801a922 <__swrite>:
 801a922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a926:	461f      	mov	r7, r3
 801a928:	898b      	ldrh	r3, [r1, #12]
 801a92a:	05db      	lsls	r3, r3, #23
 801a92c:	4605      	mov	r5, r0
 801a92e:	460c      	mov	r4, r1
 801a930:	4616      	mov	r6, r2
 801a932:	d505      	bpl.n	801a940 <__swrite+0x1e>
 801a934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a938:	2302      	movs	r3, #2
 801a93a:	2200      	movs	r2, #0
 801a93c:	f000 f868 	bl	801aa10 <_lseek_r>
 801a940:	89a3      	ldrh	r3, [r4, #12]
 801a942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a94a:	81a3      	strh	r3, [r4, #12]
 801a94c:	4632      	mov	r2, r6
 801a94e:	463b      	mov	r3, r7
 801a950:	4628      	mov	r0, r5
 801a952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a956:	f000 b817 	b.w	801a988 <_write_r>

0801a95a <__sseek>:
 801a95a:	b510      	push	{r4, lr}
 801a95c:	460c      	mov	r4, r1
 801a95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a962:	f000 f855 	bl	801aa10 <_lseek_r>
 801a966:	1c43      	adds	r3, r0, #1
 801a968:	89a3      	ldrh	r3, [r4, #12]
 801a96a:	bf15      	itete	ne
 801a96c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a96e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a976:	81a3      	strheq	r3, [r4, #12]
 801a978:	bf18      	it	ne
 801a97a:	81a3      	strhne	r3, [r4, #12]
 801a97c:	bd10      	pop	{r4, pc}

0801a97e <__sclose>:
 801a97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a982:	f000 b813 	b.w	801a9ac <_close_r>
	...

0801a988 <_write_r>:
 801a988:	b538      	push	{r3, r4, r5, lr}
 801a98a:	4d07      	ldr	r5, [pc, #28]	; (801a9a8 <_write_r+0x20>)
 801a98c:	4604      	mov	r4, r0
 801a98e:	4608      	mov	r0, r1
 801a990:	4611      	mov	r1, r2
 801a992:	2200      	movs	r2, #0
 801a994:	602a      	str	r2, [r5, #0]
 801a996:	461a      	mov	r2, r3
 801a998:	f7e9 fbc7 	bl	800412a <_write>
 801a99c:	1c43      	adds	r3, r0, #1
 801a99e:	d102      	bne.n	801a9a6 <_write_r+0x1e>
 801a9a0:	682b      	ldr	r3, [r5, #0]
 801a9a2:	b103      	cbz	r3, 801a9a6 <_write_r+0x1e>
 801a9a4:	6023      	str	r3, [r4, #0]
 801a9a6:	bd38      	pop	{r3, r4, r5, pc}
 801a9a8:	20027c60 	.word	0x20027c60

0801a9ac <_close_r>:
 801a9ac:	b538      	push	{r3, r4, r5, lr}
 801a9ae:	4d06      	ldr	r5, [pc, #24]	; (801a9c8 <_close_r+0x1c>)
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	4604      	mov	r4, r0
 801a9b4:	4608      	mov	r0, r1
 801a9b6:	602b      	str	r3, [r5, #0]
 801a9b8:	f7e9 fbd3 	bl	8004162 <_close>
 801a9bc:	1c43      	adds	r3, r0, #1
 801a9be:	d102      	bne.n	801a9c6 <_close_r+0x1a>
 801a9c0:	682b      	ldr	r3, [r5, #0]
 801a9c2:	b103      	cbz	r3, 801a9c6 <_close_r+0x1a>
 801a9c4:	6023      	str	r3, [r4, #0]
 801a9c6:	bd38      	pop	{r3, r4, r5, pc}
 801a9c8:	20027c60 	.word	0x20027c60

0801a9cc <_fstat_r>:
 801a9cc:	b538      	push	{r3, r4, r5, lr}
 801a9ce:	4d07      	ldr	r5, [pc, #28]	; (801a9ec <_fstat_r+0x20>)
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	4604      	mov	r4, r0
 801a9d4:	4608      	mov	r0, r1
 801a9d6:	4611      	mov	r1, r2
 801a9d8:	602b      	str	r3, [r5, #0]
 801a9da:	f7e9 fbce 	bl	800417a <_fstat>
 801a9de:	1c43      	adds	r3, r0, #1
 801a9e0:	d102      	bne.n	801a9e8 <_fstat_r+0x1c>
 801a9e2:	682b      	ldr	r3, [r5, #0]
 801a9e4:	b103      	cbz	r3, 801a9e8 <_fstat_r+0x1c>
 801a9e6:	6023      	str	r3, [r4, #0]
 801a9e8:	bd38      	pop	{r3, r4, r5, pc}
 801a9ea:	bf00      	nop
 801a9ec:	20027c60 	.word	0x20027c60

0801a9f0 <_isatty_r>:
 801a9f0:	b538      	push	{r3, r4, r5, lr}
 801a9f2:	4d06      	ldr	r5, [pc, #24]	; (801aa0c <_isatty_r+0x1c>)
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	4604      	mov	r4, r0
 801a9f8:	4608      	mov	r0, r1
 801a9fa:	602b      	str	r3, [r5, #0]
 801a9fc:	f7e9 fbcd 	bl	800419a <_isatty>
 801aa00:	1c43      	adds	r3, r0, #1
 801aa02:	d102      	bne.n	801aa0a <_isatty_r+0x1a>
 801aa04:	682b      	ldr	r3, [r5, #0]
 801aa06:	b103      	cbz	r3, 801aa0a <_isatty_r+0x1a>
 801aa08:	6023      	str	r3, [r4, #0]
 801aa0a:	bd38      	pop	{r3, r4, r5, pc}
 801aa0c:	20027c60 	.word	0x20027c60

0801aa10 <_lseek_r>:
 801aa10:	b538      	push	{r3, r4, r5, lr}
 801aa12:	4d07      	ldr	r5, [pc, #28]	; (801aa30 <_lseek_r+0x20>)
 801aa14:	4604      	mov	r4, r0
 801aa16:	4608      	mov	r0, r1
 801aa18:	4611      	mov	r1, r2
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	602a      	str	r2, [r5, #0]
 801aa1e:	461a      	mov	r2, r3
 801aa20:	f7e9 fbc6 	bl	80041b0 <_lseek>
 801aa24:	1c43      	adds	r3, r0, #1
 801aa26:	d102      	bne.n	801aa2e <_lseek_r+0x1e>
 801aa28:	682b      	ldr	r3, [r5, #0]
 801aa2a:	b103      	cbz	r3, 801aa2e <_lseek_r+0x1e>
 801aa2c:	6023      	str	r3, [r4, #0]
 801aa2e:	bd38      	pop	{r3, r4, r5, pc}
 801aa30:	20027c60 	.word	0x20027c60

0801aa34 <memmove>:
 801aa34:	4288      	cmp	r0, r1
 801aa36:	b510      	push	{r4, lr}
 801aa38:	eb01 0402 	add.w	r4, r1, r2
 801aa3c:	d902      	bls.n	801aa44 <memmove+0x10>
 801aa3e:	4284      	cmp	r4, r0
 801aa40:	4623      	mov	r3, r4
 801aa42:	d807      	bhi.n	801aa54 <memmove+0x20>
 801aa44:	1e43      	subs	r3, r0, #1
 801aa46:	42a1      	cmp	r1, r4
 801aa48:	d008      	beq.n	801aa5c <memmove+0x28>
 801aa4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aa4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aa52:	e7f8      	b.n	801aa46 <memmove+0x12>
 801aa54:	4402      	add	r2, r0
 801aa56:	4601      	mov	r1, r0
 801aa58:	428a      	cmp	r2, r1
 801aa5a:	d100      	bne.n	801aa5e <memmove+0x2a>
 801aa5c:	bd10      	pop	{r4, pc}
 801aa5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aa62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801aa66:	e7f7      	b.n	801aa58 <memmove+0x24>

0801aa68 <_realloc_r>:
 801aa68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa6c:	4680      	mov	r8, r0
 801aa6e:	4614      	mov	r4, r2
 801aa70:	460e      	mov	r6, r1
 801aa72:	b921      	cbnz	r1, 801aa7e <_realloc_r+0x16>
 801aa74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa78:	4611      	mov	r1, r2
 801aa7a:	f7fe be7b 	b.w	8019774 <_malloc_r>
 801aa7e:	b92a      	cbnz	r2, 801aa8c <_realloc_r+0x24>
 801aa80:	f7fe fe0c 	bl	801969c <_free_r>
 801aa84:	4625      	mov	r5, r4
 801aa86:	4628      	mov	r0, r5
 801aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa8c:	f000 f82e 	bl	801aaec <_malloc_usable_size_r>
 801aa90:	4284      	cmp	r4, r0
 801aa92:	4607      	mov	r7, r0
 801aa94:	d802      	bhi.n	801aa9c <_realloc_r+0x34>
 801aa96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801aa9a:	d812      	bhi.n	801aac2 <_realloc_r+0x5a>
 801aa9c:	4621      	mov	r1, r4
 801aa9e:	4640      	mov	r0, r8
 801aaa0:	f7fe fe68 	bl	8019774 <_malloc_r>
 801aaa4:	4605      	mov	r5, r0
 801aaa6:	2800      	cmp	r0, #0
 801aaa8:	d0ed      	beq.n	801aa86 <_realloc_r+0x1e>
 801aaaa:	42bc      	cmp	r4, r7
 801aaac:	4622      	mov	r2, r4
 801aaae:	4631      	mov	r1, r6
 801aab0:	bf28      	it	cs
 801aab2:	463a      	movcs	r2, r7
 801aab4:	f7fe fddc 	bl	8019670 <memcpy>
 801aab8:	4631      	mov	r1, r6
 801aaba:	4640      	mov	r0, r8
 801aabc:	f7fe fdee 	bl	801969c <_free_r>
 801aac0:	e7e1      	b.n	801aa86 <_realloc_r+0x1e>
 801aac2:	4635      	mov	r5, r6
 801aac4:	e7df      	b.n	801aa86 <_realloc_r+0x1e>
	...

0801aac8 <_read_r>:
 801aac8:	b538      	push	{r3, r4, r5, lr}
 801aaca:	4d07      	ldr	r5, [pc, #28]	; (801aae8 <_read_r+0x20>)
 801aacc:	4604      	mov	r4, r0
 801aace:	4608      	mov	r0, r1
 801aad0:	4611      	mov	r1, r2
 801aad2:	2200      	movs	r2, #0
 801aad4:	602a      	str	r2, [r5, #0]
 801aad6:	461a      	mov	r2, r3
 801aad8:	f7e9 fb0a 	bl	80040f0 <_read>
 801aadc:	1c43      	adds	r3, r0, #1
 801aade:	d102      	bne.n	801aae6 <_read_r+0x1e>
 801aae0:	682b      	ldr	r3, [r5, #0]
 801aae2:	b103      	cbz	r3, 801aae6 <_read_r+0x1e>
 801aae4:	6023      	str	r3, [r4, #0]
 801aae6:	bd38      	pop	{r3, r4, r5, pc}
 801aae8:	20027c60 	.word	0x20027c60

0801aaec <_malloc_usable_size_r>:
 801aaec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aaf0:	1f18      	subs	r0, r3, #4
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	bfbc      	itt	lt
 801aaf6:	580b      	ldrlt	r3, [r1, r0]
 801aaf8:	18c0      	addlt	r0, r0, r3
 801aafa:	4770      	bx	lr

0801aafc <_init>:
 801aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aafe:	bf00      	nop
 801ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab02:	bc08      	pop	{r3}
 801ab04:	469e      	mov	lr, r3
 801ab06:	4770      	bx	lr

0801ab08 <_fini>:
 801ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab0a:	bf00      	nop
 801ab0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab0e:	bc08      	pop	{r3}
 801ab10:	469e      	mov	lr, r3
 801ab12:	4770      	bx	lr
