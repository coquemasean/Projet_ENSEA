
F746disco-audio-processing-RTOS-TP-SIA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000196fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000221c  080198cc  080198cc  000298cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bae8  0801bae8  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801bae8  0801bae8  0002bae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801baf0  0801baf0  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801baf0  0801baf0  0002baf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801baf4  0801baf4  0002baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801baf8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004a08c  200000b8  0801bbac  000300b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2004a144  0801bbac  0003a144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000410a5  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000094be  00000000  00000000  00071189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003560  00000000  00000000  0007a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003130  00000000  00000000  0007dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000395d4  00000000  00000000  00080cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004734d  00000000  00000000  000ba2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001281ad  00000000  00000000  001015f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002297a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000eba8  00000000  00000000  002297f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080198b4 	.word	0x080198b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	080198b4 	.word	0x080198b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	uiDisplayBasic();
 8000ee4:	f002 ff60 	bl	8003da8 <uiDisplayBasic>

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000ee8:	4a3b      	ldr	r2, [pc, #236]	; (8000fd8 <audioLoop+0xf8>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	483b      	ldr	r0, [pc, #236]	; (8000fdc <audioLoop+0xfc>)
 8000eee:	f017 f819 	bl	8017f24 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <audioLoop+0x100>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]

	// start SAI (audio) DMA transfers:
	startAudioDMA(buf_output, buf_input, AUDIO_DMA_BUF_SIZE);
 8000ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efc:	4939      	ldr	r1, [pc, #228]	; (8000fe4 <audioLoop+0x104>)
 8000efe:	483a      	ldr	r0, [pc, #232]	; (8000fe8 <audioLoop+0x108>)
 8000f00:	f003 fd84 	bl	8004a0c <startAudioDMA>

	/* main audio loop */
	while (1) {

		/* calculate average input level over 20 audio frames */
		accumulateInputLevels();
 8000f04:	f000 f87c 	bl	8001000 <accumulateInputLevels>
		count++;
 8000f08:	4b38      	ldr	r3, [pc, #224]	; (8000fec <audioLoop+0x10c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a37      	ldr	r2, [pc, #220]	; (8000fec <audioLoop+0x10c>)
 8000f10:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <audioLoop+0x10c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b13      	cmp	r3, #19
 8000f18:	dd3c      	ble.n	8000f94 <audioLoop+0xb4>
			count = 0;
 8000f1a:	4b34      	ldr	r3, [pc, #208]	; (8000fec <audioLoop+0x10c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
			inputLevelL *= 0.05;
 8000f20:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <audioLoop+0x110>)
 8000f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f26:	a32a      	add	r3, pc, #168	; (adr r3, 8000fd0 <audioLoop+0xf0>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb7c 	bl	8000628 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	492e      	ldr	r1, [pc, #184]	; (8000ff0 <audioLoop+0x110>)
 8000f36:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR *= 0.05;
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <audioLoop+0x114>)
 8000f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f40:	a323      	add	r3, pc, #140	; (adr r3, 8000fd0 <audioLoop+0xf0>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fb6f 	bl	8000628 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4929      	ldr	r1, [pc, #164]	; (8000ff4 <audioLoop+0x114>)
 8000f50:	e9c1 2300 	strd	r2, r3, [r1]
			uiDisplayInputLevel(inputLevelL, inputLevelR);
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <audioLoop+0x110>)
 8000f56:	ed93 7b00 	vldr	d7, [r3]
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <audioLoop+0x114>)
 8000f5c:	ed93 6b00 	vldr	d6, [r3]
 8000f60:	eeb0 1a46 	vmov.f32	s2, s12
 8000f64:	eef0 1a66 	vmov.f32	s3, s13
 8000f68:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6c:	eef0 0a67 	vmov.f32	s1, s15
 8000f70:	f002 ff54 	bl	8003e1c <uiDisplayInputLevel>
			inputLevelL = 0.;
 8000f74:	491e      	ldr	r1, [pc, #120]	; (8000ff0 <audioLoop+0x110>)
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 8000f82:	491c      	ldr	r1, [pc, #112]	; (8000ff4 <audioLoop+0x114>)
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		/* Wait until first half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 8000f90:	e000      	b.n	8000f94 <audioLoop+0xb4>
			asm("NOP");
 8000f92:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <audioLoop+0x100>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d1fa      	bne.n	8000f92 <audioLoop+0xb2>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <audioLoop+0x100>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
		/* Copy recorded 1st half block */
		processAudio(buf_output, buf_input);
 8000fa2:	4910      	ldr	r1, [pc, #64]	; (8000fe4 <audioLoop+0x104>)
 8000fa4:	4810      	ldr	r0, [pc, #64]	; (8000fe8 <audioLoop+0x108>)
 8000fa6:	f000 f8db 	bl	8001160 <processAudio>

		/* Wait until second half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8000faa:	e000      	b.n	8000fae <audioLoop+0xce>
			asm("NOP");
 8000fac:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <audioLoop+0x100>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d1fa      	bne.n	8000fac <audioLoop+0xcc>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <audioLoop+0x100>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <audioLoop+0x118>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <audioLoop+0x11c>)
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f8ca 	bl	8001160 <processAudio>
		accumulateInputLevels();
 8000fcc:	e79a      	b.n	8000f04 <audioLoop+0x24>
 8000fce:	bf00      	nop
 8000fd0:	9999999a 	.word	0x9999999a
 8000fd4:	3fa99999 	.word	0x3fa99999
 8000fd8:	0076a000 	.word	0x0076a000
 8000fdc:	c0096000 	.word	0xc0096000
 8000fe0:	200000d4 	.word	0x200000d4
 8000fe4:	200000d8 	.word	0x200000d8
 8000fe8:	200008d8 	.word	0x200008d8
 8000fec:	200010d8 	.word	0x200010d8
 8000ff0:	200010e0 	.word	0x200010e0
 8000ff4:	200010e8 	.word	0x200010e8
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000000 	.word	0x20000000

08001000 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	e016      	b.n	800103e <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 8001010:	4a3e      	ldr	r2, [pc, #248]	; (800110c <accumulateInputLevels+0x10c>)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001018:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 800101a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dd05      	ble.n	800102e <accumulateInputLevels+0x2e>
			lvl += v;
 8001022:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e004      	b.n	8001038 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 800102e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3302      	adds	r3, #2
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001044:	d3e4      	bcc.n	8001010 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f7ff fa74 	bl	8000534 <__aeabi_ui2d>
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <accumulateInputLevels+0x110>)
 8001052:	f7ff fc13 	bl	800087c <__aeabi_ddiv>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <accumulateInputLevels+0x114>)
 8001064:	f7ff fc0a 	bl	800087c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <accumulateInputLevels+0x118>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff f921 	bl	80002bc <__adddf3>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4926      	ldr	r1, [pc, #152]	; (8001118 <accumulateInputLevels+0x118>)
 8001080:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001088:	2301      	movs	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	e016      	b.n	80010bc <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 800108e:	4a1f      	ldr	r2, [pc, #124]	; (800110c <accumulateInputLevels+0x10c>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 8001098:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800109c:	2b00      	cmp	r3, #0
 800109e:	dd05      	ble.n	80010ac <accumulateInputLevels+0xac>
			lvl += v;
 80010a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e004      	b.n	80010b6 <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 80010ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3302      	adds	r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c2:	d3e4      	bcc.n	800108e <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff fa35 	bl	8000534 <__aeabi_ui2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <accumulateInputLevels+0x110>)
 80010d0:	f7ff fbd4 	bl	800087c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <accumulateInputLevels+0x114>)
 80010e2:	f7ff fbcb 	bl	800087c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <accumulateInputLevels+0x11c>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff f8e2 	bl	80002bc <__adddf3>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <accumulateInputLevels+0x11c>)
 80010fe:	e9c1 2300 	strd	r2, r3, [r1]
	;
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000d8 	.word	0x200000d8
 8001110:	40900000 	.word	0x40900000
 8001114:	40e00000 	.word	0x40e00000
 8001118:	200010e0 	.word	0x200010e0
 800111c:	200010e8 	.word	0x200010e8

08001120 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_SAI_RxCpltCallback+0x1c>)
 800112a:	2202      	movs	r2, #2
 800112c:	601a      	str	r2, [r3, #0]
	return;
 800112e:	bf00      	nop
}
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200000d4 	.word	0x200000d4

08001140 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_SAI_RxHalfCpltCallback+0x1c>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
	return;
 800114e:	bf00      	nop
}
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200000d4 	.word	0x200000d4

08001160 <processAudio>:
 * has been filled by the DMA, that is,  AUDIO_BUF_SIZE samples
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */
static void processAudio(int16_t *out, int16_t *in) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 800116a:	f002 fee3 	bl	8003f34 <LED_On>

	for (int n = 0; n < AUDIO_BUF_SIZE; n++) out[n] = in[n];
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e00d      	b.n	8001190 <processAudio+0x30>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	441a      	add	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	440b      	add	r3, r1
 8001184:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001196:	d3ed      	bcc.n	8001174 <processAudio+0x14>

	LED_Off();
 8001198:	f002 fed8 	bl	8003f4c <LED_Off>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <vApplicationGetIdleTaskMemory+0x2c>)
 80011e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <vApplicationGetIdleTaskMemory+0x30>)
 80011ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200010f0 	.word	0x200010f0
 8001208:	20001148 	.word	0x20001148

0800120c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001210:	f3bf 8f4f 	dsb	sy
}
 8001214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001216:	f3bf 8f6f 	isb	sy
}
 800121a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <SCB_EnableICache+0x48>)
 800121e:	2200      	movs	r2, #0
 8001220:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001224:	f3bf 8f4f 	dsb	sy
}
 8001228:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800122a:	f3bf 8f6f 	isb	sy
}
 800122e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <SCB_EnableICache+0x48>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <SCB_EnableICache+0x48>)
 8001236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800123c:	f3bf 8f4f 	dsb	sy
}
 8001240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001242:	f3bf 8f6f 	isb	sy
}
 8001246:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800125c:	f3bf 8f4f 	dsb	sy
}
 8001260:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001262:	f3bf 8f6f 	isb	sy
}
 8001266:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <SCB_InvalidateICache+0x30>)
 800126a:	2200      	movs	r2, #0
 800126c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001270:	f3bf 8f4f 	dsb	sy
}
 8001274:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001276:	f3bf 8f6f 	isb	sy
}
 800127a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <SCB_EnableDCache+0x84>)
 8001294:	2200      	movs	r2, #0
 8001296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800129a:	f3bf 8f4f 	dsb	sy
}
 800129e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <SCB_EnableDCache+0x84>)
 80012a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0b5b      	lsrs	r3, r3, #13
 80012ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012b0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012ba:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	015a      	lsls	r2, r3, #5
 80012c0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80012c4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012ca:	4911      	ldr	r1, [pc, #68]	; (8001310 <SCB_EnableDCache+0x84>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	60ba      	str	r2, [r7, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1ef      	bne.n	80012bc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1e5a      	subs	r2, r3, #1
 80012e0:	60fa      	str	r2, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1e5      	bne.n	80012b2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80012e6:	f3bf 8f4f 	dsb	sy
}
 80012ea:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <SCB_EnableDCache+0x84>)
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <SCB_EnableDCache+0x84>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012f8:	f3bf 8f4f 	dsb	sy
}
 80012fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012fe:	f3bf 8f6f 	isb	sy
}
 8001302:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <SCB_InvalidateDCache+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001322:	f3bf 8f4f 	dsb	sy
}
 8001326:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <SCB_InvalidateDCache+0x74>)
 800132a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800132e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	0b5b      	lsrs	r3, r3, #13
 8001334:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001338:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001342:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	015a      	lsls	r2, r3, #5
 8001348:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800134c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001352:	490d      	ldr	r1, [pc, #52]	; (8001388 <SCB_InvalidateDCache+0x74>)
 8001354:	4313      	orrs	r3, r2
 8001356:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	60ba      	str	r2, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ef      	bne.n	8001344 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	60fa      	str	r2, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1e5      	bne.n	800133a <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800136e:	f3bf 8f4f 	dsb	sy
}
 8001372:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001374:	f3bf 8f6f 	isb	sy
}
 8001378:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	SCB_InvalidateDCache();
 8001392:	f7ff ffbf 	bl	8001314 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001396:	f7ff ff5f 	bl	8001258 <SCB_InvalidateICache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f004 fb46 	bl	8005a2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f879 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f001 f8d7 	bl	8002554 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a6:	f001 f813 	bl	80023d0 <MX_DMA_Init>
  MX_ADC3_Init();
 80013aa:	f000 f933 	bl	8001614 <MX_ADC3_Init>
  MX_CRC_Init();
 80013ae:	f000 f983 	bl	80016b8 <MX_CRC_Init>
  MX_DCMI_Init();
 80013b2:	f000 f9a3 	bl	80016fc <MX_DCMI_Init>
  MX_DMA2D_Init();
 80013b6:	f000 f9d5 	bl	8001764 <MX_DMA2D_Init>
  MX_FMC_Init();
 80013ba:	f001 f877 	bl	80024ac <MX_FMC_Init>
  MX_I2C1_Init();
 80013be:	f000 fa03 	bl	80017c8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80013c2:	f000 fa41 	bl	8001848 <MX_I2C3_Init>
  MX_LTDC_Init();
 80013c6:	f000 fa7f 	bl	80018c8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80013ca:	f000 fb01 	bl	80019d0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80013ce:	f000 fb41 	bl	8001a54 <MX_RTC_Init>
  MX_SAI2_Init();
 80013d2:	f000 fbe5 	bl	8001ba0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80013d6:	f000 fc9f 	bl	8001d18 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80013da:	f000 fcbd 	bl	8001d58 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 80013de:	f000 fceb 	bl	8001db8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013e2:	f000 fd95 	bl	8001f10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013e6:	f000 fe09 	bl	8001ffc <MX_TIM3_Init>
  MX_TIM5_Init();
 80013ea:	f000 fe7f 	bl	80020ec <MX_TIM5_Init>
  MX_TIM8_Init();
 80013ee:	f000 fef5 	bl	80021dc <MX_TIM8_Init>
  MX_TIM12_Init();
 80013f2:	f000 ff47 	bl	8002284 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80013f6:	f000 ff8b 	bl	8002310 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80013fa:	f000 ffb9 	bl	8002370 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80013fe:	f011 f8b7 	bl	8012570 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001402:	f011 fb05 	bl	8012a10 <MX_LIBJPEG_Init>

	//MPU_Init(); // uncomment in case of weird behaviors with SDRAM or LCD, see comment at mpu.c:74

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8001406:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800140a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800140e:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8001410:	f003 fbf0 	bl	8004bf4 <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001414:	4819      	ldr	r0, [pc, #100]	; (800147c <main+0xf0>)
 8001416:	f016 ff09 	bl	801822c <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 800141a:	f7ff fef7 	bl	800120c <SCB_EnableICache>
	SCB_EnableDCache();
 800141e:	f7ff ff35 	bl	800128c <SCB_EnableDCache>
	printf("Cache enabled\n");
 8001422:	4817      	ldr	r0, [pc, #92]	; (8001480 <main+0xf4>)
 8001424:	f016 ff02 	bl	801822c <puts>

	//test();
	audioLoop(); // comment to use RTOS (see below)
 8001428:	f7ff fd5a 	bl	8000ee0 <audioLoop>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <main+0xf8>)
 800142e:	f107 041c 	add.w	r4, r7, #28
 8001432:	461d      	mov	r5, r3
 8001434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800143c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f013 fce4 	bl	8014e14 <osThreadCreate>
 800144c:	4603      	mov	r3, r0
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <main+0xfc>)
 8001450:	6013      	str	r3, [r2, #0]

  /* definition and creation of uiTask */
  osThreadDef(uiTask, startUITask, osPriorityLow, 0, 2048);
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <main+0x100>)
 8001454:	463c      	mov	r4, r7
 8001456:	461d      	mov	r5, r3
 8001458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001460:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 8001464:	463b      	mov	r3, r7
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f013 fcd3 	bl	8014e14 <osThreadCreate>
 800146e:	4603      	mov	r3, r0
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <main+0x104>)
 8001472:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001474:	f013 fcab 	bl	8014dce <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001478:	e7fe      	b.n	8001478 <main+0xec>
 800147a:	bf00      	nop
 800147c:	080198e0 	.word	0x080198e0
 8001480:	080198f8 	.word	0x080198f8
 8001484:	08019908 	.word	0x08019908
 8001488:	20001c4c 	.word	0x20001c4c
 800148c:	08019924 	.word	0x08019924
 8001490:	20001c50 	.word	0x20001c50

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0b4      	sub	sp, #208	; 0xd0
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800149e:	2230      	movs	r2, #48	; 0x30
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f016 fd3e 	bl	8017f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	2284      	movs	r2, #132	; 0x84
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f016 fd2f 	bl	8017f24 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014c6:	f009 f98f 	bl	800a7e8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b4f      	ldr	r3, [pc, #316]	; (8001608 <SystemClock_Config+0x174>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a4e      	ldr	r2, [pc, #312]	; (8001608 <SystemClock_Config+0x174>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <SystemClock_Config+0x174>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e2:	4b4a      	ldr	r3, [pc, #296]	; (800160c <SystemClock_Config+0x178>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a49      	ldr	r2, [pc, #292]	; (800160c <SystemClock_Config+0x178>)
 80014e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <SystemClock_Config+0x178>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80014fa:	2309      	movs	r3, #9
 80014fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001514:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001518:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800151c:	2319      	movs	r3, #25
 800151e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001522:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001526:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001530:	2309      	movs	r3, #9
 8001532:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800153a:	4618      	mov	r0, r3
 800153c:	f00a f978 	bl	800b830 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001546:	f001 fa87 	bl	8002a58 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800154a:	f009 f95d 	bl	800a808 <HAL_PWREx_EnableOverDrive>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001554:	f001 fa80 	bl	8002a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800156a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800156e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800157a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800157e:	2106      	movs	r1, #6
 8001580:	4618      	mov	r0, r3
 8001582:	f00a fbf9 	bl	800bd78 <HAL_RCC_ClockConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800158c:	f001 fa64 	bl	8002a58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <SystemClock_Config+0x17c>)
 8001592:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001594:	2364      	movs	r3, #100	; 0x64
 8001596:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80015a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80015aa:	2305      	movs	r3, #5
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 80015ae:	2308      	movs	r3, #8
 80015b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80015b2:	2303      	movs	r3, #3
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80015be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80015ca:	2300      	movs	r3, #0
 80015cc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015ce:	2300      	movs	r3, #0
 80015d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80015d2:	2300      	movs	r3, #0
 80015d4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80015da:	2300      	movs	r3, #0
 80015dc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80015de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00a fdd9 	bl	800c1a8 <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80015fc:	f001 fa2c 	bl	8002a58 <Error_Handler>
  }
}
 8001600:	bf00      	nop
 8001602:	37d0      	adds	r7, #208	; 0xd0
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000
 8001610:	01b14868 	.word	0x01b14868

08001614 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <MX_ADC3_Init+0x98>)
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <MX_ADC3_Init+0x9c>)
 800162a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_ADC3_Init+0x98>)
 800162e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001632:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_ADC3_Init+0x98>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_ADC3_Init+0x98>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_ADC3_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_ADC3_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_ADC3_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_ADC3_Init+0x98>)
 8001656:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <MX_ADC3_Init+0xa0>)
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_ADC3_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_ADC3_Init+0x98>)
 8001662:	2201      	movs	r2, #1
 8001664:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_ADC3_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_ADC3_Init+0x98>)
 8001670:	2201      	movs	r2, #1
 8001672:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_ADC3_Init+0x98>)
 8001676:	f004 fa29 	bl	8005acc <HAL_ADC_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001680:	f001 f9ea 	bl	8002a58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001684:	2304      	movs	r3, #4
 8001686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001688:	2301      	movs	r3, #1
 800168a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001690:	463b      	mov	r3, r7
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_ADC3_Init+0x98>)
 8001696:	f004 fa5d 	bl	8005b54 <HAL_ADC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80016a0:	f001 f9da 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20001348 	.word	0x20001348
 80016b0:	40012200 	.word	0x40012200
 80016b4:	0f000001 	.word	0x0f000001

080016b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <MX_CRC_Init+0x3c>)
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <MX_CRC_Init+0x40>)
 80016c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_CRC_Init+0x3c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <MX_CRC_Init+0x3c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_CRC_Init+0x3c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <MX_CRC_Init+0x3c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_CRC_Init+0x3c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_CRC_Init+0x3c>)
 80016e2:	f004 fd8f 	bl	8006204 <HAL_CRC_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80016ec:	f001 f9b4 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20001390 	.word	0x20001390
 80016f8:	40023000 	.word	0x40023000

080016fc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_DCMI_Init+0x60>)
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <MX_DCMI_Init+0x64>)
 8001704:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_DCMI_Init+0x60>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_DCMI_Init+0x60>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_DCMI_Init+0x60>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_DCMI_Init+0x60>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_DCMI_Init+0x60>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <MX_DCMI_Init+0x60>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_DCMI_Init+0x60>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_DCMI_Init+0x60>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_DCMI_Init+0x60>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_DCMI_Init+0x60>)
 800173e:	2200      	movs	r2, #0
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_DCMI_Init+0x60>)
 8001744:	2200      	movs	r2, #0
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_DCMI_Init+0x60>)
 800174a:	f004 fe45 	bl	80063d8 <HAL_DCMI_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001754:	f001 f980 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200013b4 	.word	0x200013b4
 8001760:	50050000 	.word	0x50050000

08001764 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 800176a:	4a16      	ldr	r2, [pc, #88]	; (80017c4 <MX_DMA2D_Init+0x60>)
 800176c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 8001782:	2200      	movs	r2, #0
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 8001788:	2200      	movs	r2, #0
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 800178e:	2200      	movs	r2, #0
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 8001794:	2200      	movs	r2, #0
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001798:	4809      	ldr	r0, [pc, #36]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 800179a:	f005 fb7d 	bl	8006e98 <HAL_DMA2D_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80017a4:	f001 f958 	bl	8002a58 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80017a8:	2101      	movs	r1, #1
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_DMA2D_Init+0x5c>)
 80017ac:	f005 fde2 	bl	8007374 <HAL_DMA2D_ConfigLayer>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80017b6:	f001 f94f 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20001464 	.word	0x20001464
 80017c4:	4002b000 	.word	0x4002b000

080017c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_I2C1_Init+0x74>)
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <MX_I2C1_Init+0x78>)
 80017d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_I2C1_Init+0x74>)
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <MX_I2C1_Init+0x7c>)
 80017d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_I2C1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_I2C1_Init+0x74>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_I2C1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_I2C1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <MX_I2C1_Init+0x74>)
 8001804:	f007 ff70 	bl	80096e8 <HAL_I2C_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800180e:	f001 f923 	bl	8002a58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <MX_I2C1_Init+0x74>)
 8001816:	f008 fc71 	bl	800a0fc <HAL_I2CEx_ConfigAnalogFilter>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001820:	f001 f91a 	bl	8002a58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_I2C1_Init+0x74>)
 8001828:	f008 fcb3 	bl	800a192 <HAL_I2CEx_ConfigDigitalFilter>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001832:	f001 f911 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200014a4 	.word	0x200014a4
 8001840:	40005400 	.word	0x40005400
 8001844:	00c0eaff 	.word	0x00c0eaff

08001848 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_I2C3_Init+0x74>)
 800184e:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <MX_I2C3_Init+0x78>)
 8001850:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_I2C3_Init+0x74>)
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <MX_I2C3_Init+0x7c>)
 8001856:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_I2C3_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_I2C3_Init+0x74>)
 8001860:	2201      	movs	r2, #1
 8001862:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_I2C3_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_I2C3_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_I2C3_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_I2C3_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_I2C3_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001882:	480e      	ldr	r0, [pc, #56]	; (80018bc <MX_I2C3_Init+0x74>)
 8001884:	f007 ff30 	bl	80096e8 <HAL_I2C_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800188e:	f001 f8e3 	bl	8002a58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001892:	2100      	movs	r1, #0
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <MX_I2C3_Init+0x74>)
 8001896:	f008 fc31 	bl	800a0fc <HAL_I2CEx_ConfigAnalogFilter>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018a0:	f001 f8da 	bl	8002a58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018a4:	2100      	movs	r1, #0
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_I2C3_Init+0x74>)
 80018a8:	f008 fc73 	bl	800a192 <HAL_I2CEx_ConfigDigitalFilter>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018b2:	f001 f8d1 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200014f0 	.word	0x200014f0
 80018c0:	40005c00 	.word	0x40005c00
 80018c4:	00c0eaff 	.word	0x00c0eaff

080018c8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08e      	sub	sp, #56	; 0x38
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2234      	movs	r2, #52	; 0x34
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f016 fb25 	bl	8017f24 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <MX_LTDC_Init+0x100>)
 80018dc:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <MX_LTDC_Init+0x104>)
 80018de:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <MX_LTDC_Init+0x100>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <MX_LTDC_Init+0x100>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <MX_LTDC_Init+0x100>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018f2:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <MX_LTDC_Init+0x100>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <MX_LTDC_Init+0x100>)
 80018fa:	2228      	movs	r2, #40	; 0x28
 80018fc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <MX_LTDC_Init+0x100>)
 8001900:	2209      	movs	r2, #9
 8001902:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <MX_LTDC_Init+0x100>)
 8001906:	2235      	movs	r2, #53	; 0x35
 8001908:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <MX_LTDC_Init+0x100>)
 800190c:	220b      	movs	r2, #11
 800190e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <MX_LTDC_Init+0x100>)
 8001912:	f240 2215 	movw	r2, #533	; 0x215
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <MX_LTDC_Init+0x100>)
 800191a:	f240 121b 	movw	r2, #283	; 0x11b
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <MX_LTDC_Init+0x100>)
 8001922:	f240 2235 	movw	r2, #565	; 0x235
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <MX_LTDC_Init+0x100>)
 800192a:	f240 121d 	movw	r2, #285	; 0x11d
 800192e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <MX_LTDC_Init+0x100>)
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <MX_LTDC_Init+0x100>)
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <MX_LTDC_Init+0x100>)
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001948:	481f      	ldr	r0, [pc, #124]	; (80019c8 <MX_LTDC_Init+0x100>)
 800194a:	f008 fc6f 	bl	800a22c <HAL_LTDC_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001954:	f001 f880 	bl	8002a58 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800195c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001960:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001966:	f44f 7388 	mov.w	r3, #272	; 0x110
 800196a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800196c:	2302      	movs	r3, #2
 800196e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001970:	23ff      	movs	r3, #255	; 0xff
 8001972:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001978:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800197c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800197e:	2307      	movs	r3, #7
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001982:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001988:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800198e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_LTDC_Init+0x100>)
 80019ae:	f008 fd0d 	bl	800a3cc <HAL_LTDC_ConfigLayer>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80019b8:	f001 f84e 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 80019bc:	f002 fc0c 	bl	80041d8 <LCD_Init>

  /* USER CODE END LTDC_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3738      	adds	r7, #56	; 0x38
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000153c 	.word	0x2000153c
 80019cc:	40016800 	.word	0x40016800

080019d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 80019d6:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <MX_QUADSPI_Init+0x80>)
 80019d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 80019dc:	2201      	movs	r2, #1
 80019de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 80019e2:	2204      	movs	r2, #4
 80019e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 80019e8:	2210      	movs	r2, #16
 80019ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 80019ee:	2218      	movs	r2, #24
 80019f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 80019f4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80019f8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a0c:	480f      	ldr	r0, [pc, #60]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 8001a0e:	f008 ff4b 	bl	800a8a8 <HAL_QSPI_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001a18:	f001 f81e 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 8001a1e:	f002 febd 	bl	800479c <DISCO_QSPI_ResetMemory>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_QUADSPI_Init+0x5c>
 8001a28:	f001 f816 	bl	8002a58 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_QUADSPI_Init+0x7c>)
 8001a2e:	f002 fef7 	bl	8004820 <DISCO_QSPI_DummyCyclesCfg>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_QUADSPI_Init+0x6c>
 8001a38:	f001 f80e 	bl	8002a58 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001a3c:	f002 fe7c 	bl	8004738 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001a40:	205c      	movs	r0, #92	; 0x5c
 8001a42:	f004 fbd1 	bl	80061e8 <HAL_NVIC_DisableIRQ>


  /* USER CODE END QUADSPI_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200015e4 	.word	0x200015e4
 8001a50:	a0001000 	.word	0xa0001000

08001a54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b092      	sub	sp, #72	; 0x48
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001a70:	463b      	mov	r3, r7
 8001a72:	222c      	movs	r2, #44	; 0x2c
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f016 fa54 	bl	8017f24 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a7c:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <MX_RTC_Init+0x144>)
 8001a7e:	4a47      	ldr	r2, [pc, #284]	; (8001b9c <MX_RTC_Init+0x148>)
 8001a80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a82:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <MX_RTC_Init+0x144>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a88:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <MX_RTC_Init+0x144>)
 8001a8a:	227f      	movs	r2, #127	; 0x7f
 8001a8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a8e:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <MX_RTC_Init+0x144>)
 8001a90:	22ff      	movs	r2, #255	; 0xff
 8001a92:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <MX_RTC_Init+0x144>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <MX_RTC_Init+0x144>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <MX_RTC_Init+0x144>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aa6:	483c      	ldr	r0, [pc, #240]	; (8001b98 <MX_RTC_Init+0x144>)
 8001aa8:	f00b f8b2 	bl	800cc10 <HAL_RTC_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001ab2:	f000 ffd1 	bl	8002a58 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	482f      	ldr	r0, [pc, #188]	; (8001b98 <MX_RTC_Init+0x144>)
 8001ada:	f00b f92b 	bl	800cd34 <HAL_RTC_SetTime>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ae4:	f000 ffb8 	bl	8002a58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b04:	2201      	movs	r2, #1
 8001b06:	4619      	mov	r1, r3
 8001b08:	4823      	ldr	r0, [pc, #140]	; (8001b98 <MX_RTC_Init+0x144>)
 8001b0a:	f00b f9d1 	bl	800ceb0 <HAL_RTC_SetDate>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001b14:	f000 ffa0 	bl	8002a58 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4812      	ldr	r0, [pc, #72]	; (8001b98 <MX_RTC_Init+0x144>)
 8001b50:	f00b fa56 	bl	800d000 <HAL_RTC_SetAlarm>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001b5a:	f000 ff7d 	bl	8002a58 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	2201      	movs	r2, #1
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <MX_RTC_Init+0x144>)
 8001b6c:	f00b fa48 	bl	800d000 <HAL_RTC_SetAlarm>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001b76:	f000 ff6f 	bl	8002a58 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <MX_RTC_Init+0x144>)
 8001b80:	f00b fbc8 	bl	800d314 <HAL_RTCEx_SetTimeStamp>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001b8a:	f000 ff65 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3748      	adds	r7, #72	; 0x48
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20001630 	.word	0x20001630
 8001b9c:	40002800 	.word	0x40002800

08001ba0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001ba4:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001ba6:	4a59      	ldr	r2, [pc, #356]	; (8001d0c <MX_SAI2_Init+0x16c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001bb0:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001bb6:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bbc:	4b52      	ldr	r3, [pc, #328]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bc8:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001bce:	4b4e      	ldr	r3, [pc, #312]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd4:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001bdc:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001be4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001be8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bf0:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bf6:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bfc:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c04:	2240      	movs	r2, #64	; 0x40
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001c08:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c14:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c16:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c22:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001c24:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c2a:	4b37      	ldr	r3, [pc, #220]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001c30:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c32:	2204      	movs	r2, #4
 8001c34:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c38:	2205      	movs	r2, #5
 8001c3a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001c3c:	4832      	ldr	r0, [pc, #200]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001c3e:	f00b fbbf 	bl	800d3c0 <HAL_SAI_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_SAI2_Init+0xac>
  {
    Error_Handler();
 8001c48:	f000 ff06 	bl	8002a58 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c4e:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <MX_SAI2_Init+0x174>)
 8001c50:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c52:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 64;
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001c9c:	2240      	movs	r2, #64	; 0x40
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001ca8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cac:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001cb6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001cca:	2204      	movs	r2, #4
 8001ccc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001cd4:	480e      	ldr	r0, [pc, #56]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001cd6:	f00b fb73 	bl	800d3c0 <HAL_SAI_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_SAI2_Init+0x144>
  {
    Error_Handler();
 8001ce0:	f000 feba 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <MX_SAI2_Init+0x168>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cf2:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <MX_SAI2_Init+0x170>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d02:	601a      	str	r2, [r3, #0]

  /* USER CODE END SAI2_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20001650 	.word	0x20001650
 8001d0c:	40015c04 	.word	0x40015c04
 8001d10:	200016d4 	.word	0x200016d4
 8001d14:	40015c24 	.word	0x40015c24

08001d18 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_SDMMC1_SD_Init+0x38>)
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <MX_SDMMC1_SD_Init+0x3c>)
 8001d20:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_SDMMC1_SD_Init+0x38>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_SDMMC1_SD_Init+0x38>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_SDMMC1_SD_Init+0x38>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_SDMMC1_SD_Init+0x38>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <MX_SDMMC1_SD_Init+0x38>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <MX_SDMMC1_SD_Init+0x38>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	20001818 	.word	0x20001818
 8001d54:	40012c00 	.word	0x40012c00

08001d58 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d5e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d62:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_SPDIFRX_Init+0x5c>)
 8001da2:	f00d f805 	bl	800edb0 <HAL_SPDIFRX_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001dac:	f000 fe54 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000189c 	.word	0x2000189c

08001db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b09a      	sub	sp, #104	; 0x68
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	222c      	movs	r2, #44	; 0x2c
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f016 f896 	bl	8017f24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001dfa:	4a44      	ldr	r2, [pc, #272]	; (8001f0c <MX_TIM1_Init+0x154>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b40      	ldr	r3, [pc, #256]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e18:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e24:	4838      	ldr	r0, [pc, #224]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e26:	f00d f81f 	bl	800ee68 <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e30:	f000 fe12 	bl	8002a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4831      	ldr	r0, [pc, #196]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e42:	f00d fb67 	bl	800f514 <HAL_TIM_ConfigClockSource>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e4c:	f000 fe04 	bl	8002a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e50:	482d      	ldr	r0, [pc, #180]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e52:	f00d f8d9 	bl	800f008 <HAL_TIM_PWM_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e5c:	f000 fdfc 	bl	8002a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e70:	4619      	mov	r1, r3
 8001e72:	4825      	ldr	r0, [pc, #148]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e74:	f00d ffd4 	bl	800fe20 <HAL_TIMEx_MasterConfigSynchronization>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e7e:	f000 fdeb 	bl	8002a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e82:	2360      	movs	r3, #96	; 0x60
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4818      	ldr	r0, [pc, #96]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001ea8:	f00d fa24 	bl	800f2f4 <HAL_TIM_PWM_ConfigChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001eb2:	f000 fdd1 	bl	8002a58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4807      	ldr	r0, [pc, #28]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001eec:	f00e f826 	bl	800ff3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001ef6:	f000 fdaf 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001efa:	4803      	ldr	r0, [pc, #12]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001efc:	f001 face 	bl	800349c <HAL_TIM_MspPostInit>

}
 8001f00:	bf00      	nop
 8001f02:	3768      	adds	r7, #104	; 0x68
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200018e8 	.word	0x200018e8
 8001f0c:	40010000 	.word	0x40010000

08001f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	; 0x38
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f30:	463b      	mov	r3, r7
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001f44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f6a:	4823      	ldr	r0, [pc, #140]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001f6c:	f00c ff7c 	bl	800ee68 <HAL_TIM_Base_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001f76:	f000 fd6f 	bl	8002a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f84:	4619      	mov	r1, r3
 8001f86:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001f88:	f00d fac4 	bl	800f514 <HAL_TIM_ConfigClockSource>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001f92:	f000 fd61 	bl	8002a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f96:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001f98:	f00d f836 	bl	800f008 <HAL_TIM_PWM_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001fa2:	f000 fd59 	bl	8002a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4810      	ldr	r0, [pc, #64]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001fb6:	f00d ff33 	bl	800fe20 <HAL_TIMEx_MasterConfigSynchronization>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001fc0:	f000 fd4a 	bl	8002a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc4:	2360      	movs	r3, #96	; 0x60
 8001fc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4807      	ldr	r0, [pc, #28]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001fdc:	f00d f98a 	bl	800f2f4 <HAL_TIM_PWM_ConfigChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001fe6:	f000 fd37 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <MX_TIM2_Init+0xe8>)
 8001fec:	f001 fa56 	bl	800349c <HAL_TIM_MspPostInit>

}
 8001ff0:	bf00      	nop
 8001ff2:	3738      	adds	r7, #56	; 0x38
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20001934 	.word	0x20001934

08001ffc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800201c:	463b      	mov	r3, r7
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]
 800202a:	615a      	str	r2, [r3, #20]
 800202c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <MX_TIM3_Init+0xe8>)
 8002030:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <MX_TIM3_Init+0xec>)
 8002032:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <MX_TIM3_Init+0xe8>)
 8002036:	2200      	movs	r2, #0
 8002038:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <MX_TIM3_Init+0xe8>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <MX_TIM3_Init+0xe8>)
 8002042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002046:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <MX_TIM3_Init+0xe8>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <MX_TIM3_Init+0xe8>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002054:	4823      	ldr	r0, [pc, #140]	; (80020e4 <MX_TIM3_Init+0xe8>)
 8002056:	f00c ff07 	bl	800ee68 <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002060:	f000 fcfa 	bl	8002a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800206a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800206e:	4619      	mov	r1, r3
 8002070:	481c      	ldr	r0, [pc, #112]	; (80020e4 <MX_TIM3_Init+0xe8>)
 8002072:	f00d fa4f 	bl	800f514 <HAL_TIM_ConfigClockSource>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800207c:	f000 fcec 	bl	8002a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002080:	4818      	ldr	r0, [pc, #96]	; (80020e4 <MX_TIM3_Init+0xe8>)
 8002082:	f00c ffc1 	bl	800f008 <HAL_TIM_PWM_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800208c:	f000 fce4 	bl	8002a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	4619      	mov	r1, r3
 800209e:	4811      	ldr	r0, [pc, #68]	; (80020e4 <MX_TIM3_Init+0xe8>)
 80020a0:	f00d febe 	bl	800fe20 <HAL_TIMEx_MasterConfigSynchronization>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80020aa:	f000 fcd5 	bl	8002a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ae:	2360      	movs	r3, #96	; 0x60
 80020b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020be:	463b      	mov	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	; (80020e4 <MX_TIM3_Init+0xe8>)
 80020c6:	f00d f915 	bl	800f2f4 <HAL_TIM_PWM_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80020d0:	f000 fcc2 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <MX_TIM3_Init+0xe8>)
 80020d6:	f001 f9e1 	bl	800349c <HAL_TIM_MspPostInit>

}
 80020da:	bf00      	nop
 80020dc:	3738      	adds	r7, #56	; 0x38
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20001980 	.word	0x20001980
 80020e8:	40000400 	.word	0x40000400

080020ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	; 0x38
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800210c:	463b      	mov	r3, r7
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]
 800211a:	615a      	str	r2, [r3, #20]
 800211c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <MX_TIM5_Init+0xe8>)
 8002120:	4a2d      	ldr	r2, [pc, #180]	; (80021d8 <MX_TIM5_Init+0xec>)
 8002122:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002124:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <MX_TIM5_Init+0xe8>)
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <MX_TIM5_Init+0xe8>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <MX_TIM5_Init+0xe8>)
 8002132:	f04f 32ff 	mov.w	r2, #4294967295
 8002136:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <MX_TIM5_Init+0xe8>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213e:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <MX_TIM5_Init+0xe8>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002144:	4823      	ldr	r0, [pc, #140]	; (80021d4 <MX_TIM5_Init+0xe8>)
 8002146:	f00c fe8f 	bl	800ee68 <HAL_TIM_Base_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002150:	f000 fc82 	bl	8002a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800215a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800215e:	4619      	mov	r1, r3
 8002160:	481c      	ldr	r0, [pc, #112]	; (80021d4 <MX_TIM5_Init+0xe8>)
 8002162:	f00d f9d7 	bl	800f514 <HAL_TIM_ConfigClockSource>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800216c:	f000 fc74 	bl	8002a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002170:	4818      	ldr	r0, [pc, #96]	; (80021d4 <MX_TIM5_Init+0xe8>)
 8002172:	f00c ff49 	bl	800f008 <HAL_TIM_PWM_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800217c:	f000 fc6c 	bl	8002a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4811      	ldr	r0, [pc, #68]	; (80021d4 <MX_TIM5_Init+0xe8>)
 8002190:	f00d fe46 	bl	800fe20 <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800219a:	f000 fc5d 	bl	8002a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800219e:	2360      	movs	r3, #96	; 0x60
 80021a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021ae:	463b      	mov	r3, r7
 80021b0:	220c      	movs	r2, #12
 80021b2:	4619      	mov	r1, r3
 80021b4:	4807      	ldr	r0, [pc, #28]	; (80021d4 <MX_TIM5_Init+0xe8>)
 80021b6:	f00d f89d 	bl	800f2f4 <HAL_TIM_PWM_ConfigChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80021c0:	f000 fc4a 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <MX_TIM5_Init+0xe8>)
 80021c6:	f001 f969 	bl	800349c <HAL_TIM_MspPostInit>

}
 80021ca:	bf00      	nop
 80021cc:	3738      	adds	r7, #56	; 0x38
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200019cc 	.word	0x200019cc
 80021d8:	40000c00 	.word	0x40000c00

080021dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <MX_TIM8_Init+0xa0>)
 80021fc:	4a20      	ldr	r2, [pc, #128]	; (8002280 <MX_TIM8_Init+0xa4>)
 80021fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <MX_TIM8_Init+0xa0>)
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <MX_TIM8_Init+0xa0>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <MX_TIM8_Init+0xa0>)
 800220e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002212:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <MX_TIM8_Init+0xa0>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <MX_TIM8_Init+0xa0>)
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <MX_TIM8_Init+0xa0>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002226:	4815      	ldr	r0, [pc, #84]	; (800227c <MX_TIM8_Init+0xa0>)
 8002228:	f00c fe1e 	bl	800ee68 <HAL_TIM_Base_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002232:	f000 fc11 	bl	8002a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4619      	mov	r1, r3
 8002242:	480e      	ldr	r0, [pc, #56]	; (800227c <MX_TIM8_Init+0xa0>)
 8002244:	f00d f966 	bl	800f514 <HAL_TIM_ConfigClockSource>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800224e:	f000 fc03 	bl	8002a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	4619      	mov	r1, r3
 8002262:	4806      	ldr	r0, [pc, #24]	; (800227c <MX_TIM8_Init+0xa0>)
 8002264:	f00d fddc 	bl	800fe20 <HAL_TIMEx_MasterConfigSynchronization>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800226e:	f000 fbf3 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20001a18 	.word	0x20001a18
 8002280:	40010400 	.word	0x40010400

08002284 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
 8002298:	615a      	str	r2, [r3, #20]
 800229a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <MX_TIM12_Init+0x84>)
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <MX_TIM12_Init+0x88>)
 80022a0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <MX_TIM12_Init+0x84>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_TIM12_Init+0x84>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <MX_TIM12_Init+0x84>)
 80022b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <MX_TIM12_Init+0x84>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <MX_TIM12_Init+0x84>)
 80022be:	2200      	movs	r2, #0
 80022c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80022c2:	4811      	ldr	r0, [pc, #68]	; (8002308 <MX_TIM12_Init+0x84>)
 80022c4:	f00c fea0 	bl	800f008 <HAL_TIM_PWM_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80022ce:	f000 fbc3 	bl	8002a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022d2:	2360      	movs	r3, #96	; 0x60
 80022d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2200      	movs	r2, #0
 80022e6:	4619      	mov	r1, r3
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <MX_TIM12_Init+0x84>)
 80022ea:	f00d f803 	bl	800f2f4 <HAL_TIM_PWM_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80022f4:	f000 fbb0 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <MX_TIM12_Init+0x84>)
 80022fa:	f001 f8cf 	bl	800349c <HAL_TIM_MspPostInit>

}
 80022fe:	bf00      	nop
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20001a64 	.word	0x20001a64
 800230c:	40001800 	.word	0x40001800

08002310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <MX_USART1_UART_Init+0x58>)
 8002316:	4a15      	ldr	r2, [pc, #84]	; (800236c <MX_USART1_UART_Init+0x5c>)
 8002318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <MX_USART1_UART_Init+0x58>)
 800231c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <MX_USART1_UART_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <MX_USART1_UART_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_USART1_UART_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_USART1_UART_Init+0x58>)
 8002336:	220c      	movs	r2, #12
 8002338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <MX_USART1_UART_Init+0x58>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_USART1_UART_Init+0x58>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <MX_USART1_UART_Init+0x58>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_USART1_UART_Init+0x58>)
 800234e:	2200      	movs	r2, #0
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_USART1_UART_Init+0x58>)
 8002354:	f00d fe8e 	bl	8010074 <HAL_UART_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800235e:	f000 fb7b 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20001ab0 	.word	0x20001ab0
 800236c:	40011000 	.word	0x40011000

08002370 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 8002376:	4a15      	ldr	r2, [pc, #84]	; (80023cc <MX_USART6_UART_Init+0x5c>)
 8002378:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 800237c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002380:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_USART6_UART_Init+0x58>)
 80023b4:	f00d fe5e 	bl	8010074 <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80023be:	f000 fb4b 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20001b34 	.word	0x20001b34
 80023cc:	40011400 	.word	0x40011400

080023d0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023d6:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <MX_DMA_Init+0xd0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <MX_DMA_Init+0xd0>)
 80023dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <MX_DMA_Init+0xd0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <MX_DMA_Init+0xd4>)
 80023f0:	4a2d      	ldr	r2, [pc, #180]	; (80024a8 <MX_DMA_Init+0xd8>)
 80023f2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <MX_DMA_Init+0xd4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <MX_DMA_Init+0xd4>)
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002400:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <MX_DMA_Init+0xd4>)
 8002402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002406:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002408:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <MX_DMA_Init+0xd4>)
 800240a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <MX_DMA_Init+0xd4>)
 8002412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002416:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <MX_DMA_Init+0xd4>)
 800241a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <MX_DMA_Init+0xd4>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <MX_DMA_Init+0xd4>)
 8002428:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800242c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <MX_DMA_Init+0xd4>)
 8002430:	2204      	movs	r2, #4
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <MX_DMA_Init+0xd4>)
 8002436:	2203      	movs	r2, #3
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <MX_DMA_Init+0xd4>)
 800243c:	2200      	movs	r2, #0
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <MX_DMA_Init+0xd4>)
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002446:	4817      	ldr	r0, [pc, #92]	; (80024a4 <MX_DMA_Init+0xd4>)
 8002448:	f004 f910 	bl	800666c <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 8002452:	f000 fb01 	bl	8002a58 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2105      	movs	r1, #5
 800245a:	2038      	movs	r0, #56	; 0x38
 800245c:	f003 fe9a 	bl	8006194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002460:	2038      	movs	r0, #56	; 0x38
 8002462:	f003 feb3 	bl	80061cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2105      	movs	r1, #5
 800246a:	2039      	movs	r0, #57	; 0x39
 800246c:	f003 fe92 	bl	8006194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002470:	2039      	movs	r0, #57	; 0x39
 8002472:	f003 feab 	bl	80061cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2105      	movs	r1, #5
 800247a:	203c      	movs	r0, #60	; 0x3c
 800247c:	f003 fe8a 	bl	8006194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002480:	203c      	movs	r0, #60	; 0x3c
 8002482:	f003 fea3 	bl	80061cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2105      	movs	r1, #5
 800248a:	2046      	movs	r0, #70	; 0x46
 800248c:	f003 fe82 	bl	8006194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002490:	2046      	movs	r0, #70	; 0x46
 8002492:	f003 fe9b 	bl	80061cc <HAL_NVIC_EnableIRQ>

}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	20001bb8 	.word	0x20001bb8
 80024a8:	40026410 	.word	0x40026410

080024ac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
 80024c0:	615a      	str	r2, [r3, #20]
 80024c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <MX_FMC_Init+0xa0>)
 80024c6:	4a22      	ldr	r2, [pc, #136]	; (8002550 <MX_FMC_Init+0xa4>)
 80024c8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <MX_FMC_Init+0xa0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <MX_FMC_Init+0xa0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <MX_FMC_Init+0xa0>)
 80024d8:	2204      	movs	r2, #4
 80024da:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <MX_FMC_Init+0xa0>)
 80024de:	2210      	movs	r2, #16
 80024e0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <MX_FMC_Init+0xa0>)
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <MX_FMC_Init+0xa0>)
 80024ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <MX_FMC_Init+0xa0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <MX_FMC_Init+0xa0>)
 80024f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <MX_FMC_Init+0xa0>)
 8002500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_FMC_Init+0xa0>)
 8002508:	2200      	movs	r2, #0
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800250c:	2302      	movs	r3, #2
 800250e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002510:	2307      	movs	r3, #7
 8002512:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002514:	2304      	movs	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002518:	2307      	movs	r3, #7
 800251a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800251c:	2303      	movs	r3, #3
 800251e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002520:	2302      	movs	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002524:	2302      	movs	r3, #2
 8002526:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	4619      	mov	r1, r3
 800252c:	4807      	ldr	r0, [pc, #28]	; (800254c <MX_FMC_Init+0xa0>)
 800252e:	f00c fbc0 	bl	800ecb2 <HAL_SDRAM_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002538:	f000 fa8e 	bl	8002a58 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800253c:	f240 6003 	movw	r0, #1539	; 0x603
 8002540:	f002 faf8 	bl	8004b34 <DISCO_SDRAM_Initialization_sequence>

  /* USER CODE END FMC_Init 2 */
}
 8002544:	bf00      	nop
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20001c18 	.word	0x20001c18
 8002550:	a0000140 	.word	0xa0000140

08002554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b090      	sub	sp, #64	; 0x40
 8002558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800256a:	4baf      	ldr	r3, [pc, #700]	; (8002828 <MX_GPIO_Init+0x2d4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4aae      	ldr	r2, [pc, #696]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002570:	f043 0310 	orr.w	r3, r3, #16
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4bac      	ldr	r3, [pc, #688]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002582:	4ba9      	ldr	r3, [pc, #676]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4aa8      	ldr	r2, [pc, #672]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4ba6      	ldr	r3, [pc, #664]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	4ba3      	ldr	r3, [pc, #652]	; (8002828 <MX_GPIO_Init+0x2d4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4aa2      	ldr	r2, [pc, #648]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4ba0      	ldr	r3, [pc, #640]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b2:	4b9d      	ldr	r3, [pc, #628]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a9c      	ldr	r2, [pc, #624]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b9a      	ldr	r3, [pc, #616]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ca:	4b97      	ldr	r3, [pc, #604]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a96      	ldr	r2, [pc, #600]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b94      	ldr	r3, [pc, #592]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	4b91      	ldr	r3, [pc, #580]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a90      	ldr	r2, [pc, #576]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b8e      	ldr	r3, [pc, #568]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025fa:	4b8b      	ldr	r3, [pc, #556]	; (8002828 <MX_GPIO_Init+0x2d4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a8a      	ldr	r2, [pc, #552]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b88      	ldr	r3, [pc, #544]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002612:	4b85      	ldr	r3, [pc, #532]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a84      	ldr	r2, [pc, #528]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b82      	ldr	r3, [pc, #520]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800262a:	4b7f      	ldr	r3, [pc, #508]	; (8002828 <MX_GPIO_Init+0x2d4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a7e      	ldr	r2, [pc, #504]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b7c      	ldr	r3, [pc, #496]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002642:	4b79      	ldr	r3, [pc, #484]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a78      	ldr	r2, [pc, #480]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002648:	f043 0320 	orr.w	r3, r3, #32
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b76      	ldr	r3, [pc, #472]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800265a:	4b73      	ldr	r3, [pc, #460]	; (8002828 <MX_GPIO_Init+0x2d4>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a72      	ldr	r2, [pc, #456]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b70      	ldr	r3, [pc, #448]	; (8002828 <MX_GPIO_Init+0x2d4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002672:	2201      	movs	r2, #1
 8002674:	2120      	movs	r1, #32
 8002676:	486d      	ldr	r0, [pc, #436]	; (800282c <MX_GPIO_Init+0x2d8>)
 8002678:	f005 fa7a 	bl	8007b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 800267c:	2200      	movs	r2, #0
 800267e:	210e      	movs	r1, #14
 8002680:	486b      	ldr	r0, [pc, #428]	; (8002830 <MX_GPIO_Init+0x2dc>)
 8002682:	f005 fa75 	bl	8007b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002686:	2201      	movs	r2, #1
 8002688:	2108      	movs	r1, #8
 800268a:	486a      	ldr	r0, [pc, #424]	; (8002834 <MX_GPIO_Init+0x2e0>)
 800268c:	f005 fa70 	bl	8007b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002690:	2201      	movs	r2, #1
 8002692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002696:	4866      	ldr	r0, [pc, #408]	; (8002830 <MX_GPIO_Init+0x2dc>)
 8002698:	f005 fa6a 	bl	8007b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800269c:	2200      	movs	r2, #0
 800269e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a2:	4865      	ldr	r0, [pc, #404]	; (8002838 <MX_GPIO_Init+0x2e4>)
 80026a4:	f005 fa64 	bl	8007b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80026a8:	2200      	movs	r2, #0
 80026aa:	21c8      	movs	r1, #200	; 0xc8
 80026ac:	4863      	ldr	r0, [pc, #396]	; (800283c <MX_GPIO_Init+0x2e8>)
 80026ae:	f005 fa5f 	bl	8007b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80026b2:	2308      	movs	r3, #8
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b6:	2300      	movs	r3, #0
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c2:	4619      	mov	r1, r3
 80026c4:	485e      	ldr	r0, [pc, #376]	; (8002840 <MX_GPIO_Init+0x2ec>)
 80026c6:	f004 ff83 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80026ca:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d8:	2303      	movs	r3, #3
 80026da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026dc:	230b      	movs	r3, #11
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e4:	4619      	mov	r1, r3
 80026e6:	4855      	ldr	r0, [pc, #340]	; (800283c <MX_GPIO_Init+0x2e8>)
 80026e8:	f004 ff72 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80026ec:	f643 4323 	movw	r3, #15395	; 0x3c23
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fa:	2303      	movs	r3, #3
 80026fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026fe:	230a      	movs	r3, #10
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002706:	4619      	mov	r1, r3
 8002708:	484e      	ldr	r0, [pc, #312]	; (8002844 <MX_GPIO_Init+0x2f0>)
 800270a:	f004 ff61 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800270e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800271c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002720:	4619      	mov	r1, r3
 8002722:	4849      	ldr	r0, [pc, #292]	; (8002848 <MX_GPIO_Init+0x2f4>)
 8002724:	f004 ff54 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002728:	2340      	movs	r3, #64	; 0x40
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800272c:	4b47      	ldr	r3, [pc, #284]	; (800284c <MX_GPIO_Init+0x2f8>)
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002738:	4619      	mov	r1, r3
 800273a:	483c      	ldr	r0, [pc, #240]	; (800282c <MX_GPIO_Init+0x2d8>)
 800273c:	f004 ff48 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002740:	2320      	movs	r3, #32
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002744:	2301      	movs	r3, #1
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	4835      	ldr	r0, [pc, #212]	; (800282c <MX_GPIO_Init+0x2d8>)
 8002758:	f004 ff3a 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 800275c:	f241 030e 	movw	r3, #4110	; 0x100e
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002762:	2301      	movs	r3, #1
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800276e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002772:	4619      	mov	r1, r3
 8002774:	482e      	ldr	r0, [pc, #184]	; (8002830 <MX_GPIO_Init+0x2dc>)
 8002776:	f004 ff2b 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800277a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002780:	2300      	movs	r3, #0
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800278c:	4619      	mov	r1, r3
 800278e:	4830      	ldr	r0, [pc, #192]	; (8002850 <MX_GPIO_Init+0x2fc>)
 8002790:	f004 ff1e 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002794:	2308      	movs	r3, #8
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002798:	2301      	movs	r3, #1
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a8:	4619      	mov	r1, r3
 80027aa:	4822      	ldr	r0, [pc, #136]	; (8002834 <MX_GPIO_Init+0x2e0>)
 80027ac:	f004 ff10 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80027b0:	2310      	movs	r3, #16
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b4:	2300      	movs	r3, #0
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80027bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c0:	4619      	mov	r1, r3
 80027c2:	481a      	ldr	r0, [pc, #104]	; (800282c <MX_GPIO_Init+0x2d8>)
 80027c4:	f004 ff04 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80027c8:	f248 0304 	movw	r3, #32772	; 0x8004
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ce:	2300      	movs	r3, #0
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027da:	4619      	mov	r1, r3
 80027dc:	4816      	ldr	r0, [pc, #88]	; (8002838 <MX_GPIO_Init+0x2e4>)
 80027de:	f004 fef7 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80027e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80027f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027f8:	4619      	mov	r1, r3
 80027fa:	480f      	ldr	r0, [pc, #60]	; (8002838 <MX_GPIO_Init+0x2e4>)
 80027fc:	f004 fee8 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002800:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002812:	4619      	mov	r1, r3
 8002814:	4806      	ldr	r0, [pc, #24]	; (8002830 <MX_GPIO_Init+0x2dc>)
 8002816:	f004 fedb 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800281a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_GPIO_Init+0x300>)
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	e017      	b.n	8002858 <MX_GPIO_Init+0x304>
 8002828:	40023800 	.word	0x40023800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40022000 	.word	0x40022000
 8002834:	40022800 	.word	0x40022800
 8002838:	40021c00 	.word	0x40021c00
 800283c:	40021800 	.word	0x40021800
 8002840:	40021000 	.word	0x40021000
 8002844:	40020400 	.word	0x40020400
 8002848:	40022400 	.word	0x40022400
 800284c:	10120000 	.word	0x10120000
 8002850:	40020800 	.word	0x40020800
 8002854:	10110000 	.word	0x10110000
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	4619      	mov	r1, r3
 8002860:	4844      	ldr	r0, [pc, #272]	; (8002974 <MX_GPIO_Init+0x420>)
 8002862:	f004 feb5 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002866:	2310      	movs	r3, #16
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002876:	230a      	movs	r3, #10
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800287a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800287e:	4619      	mov	r1, r3
 8002880:	483d      	ldr	r0, [pc, #244]	; (8002978 <MX_GPIO_Init+0x424>)
 8002882:	f004 fea5 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002886:	23c8      	movs	r3, #200	; 0xc8
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288a:	2301      	movs	r3, #1
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289a:	4619      	mov	r1, r3
 800289c:	4837      	ldr	r0, [pc, #220]	; (800297c <MX_GPIO_Init+0x428>)
 800289e:	f004 fe97 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80028a2:	2305      	movs	r3, #5
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028b2:	230a      	movs	r3, #10
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ba:	4619      	mov	r1, r3
 80028bc:	4830      	ldr	r0, [pc, #192]	; (8002980 <MX_GPIO_Init+0x42c>)
 80028be:	f004 fe87 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80028c2:	2332      	movs	r3, #50	; 0x32
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ce:	2303      	movs	r3, #3
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028d2:	230b      	movs	r3, #11
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028da:	4619      	mov	r1, r3
 80028dc:	4828      	ldr	r0, [pc, #160]	; (8002980 <MX_GPIO_Init+0x42c>)
 80028de:	f004 fe77 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80028e2:	2304      	movs	r3, #4
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e6:	2300      	movs	r3, #0
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80028ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f2:	4619      	mov	r1, r3
 80028f4:	4821      	ldr	r0, [pc, #132]	; (800297c <MX_GPIO_Init+0x428>)
 80028f6:	f004 fe6b 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80028fa:	2386      	movs	r3, #134	; 0x86
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002906:	2303      	movs	r3, #3
 8002908:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800290a:	230b      	movs	r3, #11
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002912:	4619      	mov	r1, r3
 8002914:	481b      	ldr	r0, [pc, #108]	; (8002984 <MX_GPIO_Init+0x430>)
 8002916:	f004 fe5b 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800291a:	2328      	movs	r3, #40	; 0x28
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800292a:	230a      	movs	r3, #10
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002932:	4619      	mov	r1, r3
 8002934:	4813      	ldr	r0, [pc, #76]	; (8002984 <MX_GPIO_Init+0x430>)
 8002936:	f004 fe4b 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800293a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800294c:	2305      	movs	r3, #5
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002954:	4619      	mov	r1, r3
 8002956:	480c      	ldr	r0, [pc, #48]	; (8002988 <MX_GPIO_Init+0x434>)
 8002958:	f004 fe3a 	bl	80075d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2105      	movs	r1, #5
 8002960:	2028      	movs	r0, #40	; 0x28
 8002962:	f003 fc17 	bl	8006194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002966:	2028      	movs	r0, #40	; 0x28
 8002968:	f003 fc30 	bl	80061cc <HAL_NVIC_EnableIRQ>

}
 800296c:	bf00      	nop
 800296e:	3740      	adds	r7, #64	; 0x40
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40022000 	.word	0x40022000
 8002978:	40021c00 	.word	0x40021c00
 800297c:	40021800 	.word	0x40021800
 8002980:	40020800 	.word	0x40020800
 8002984:	40020000 	.word	0x40020000
 8002988:	40020400 	.word	0x40020400

0800298c <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f015 fbad 	bl	80180f4 <iprintf>
	printf("\n");
 800299a:	200a      	movs	r0, #10
 800299c:	f015 fbc2 	bl	8018124 <putchar>
	Error_Handler();
 80029a0:	f000 f85a 	bl	8002a58 <Error_Handler>
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6178      	str	r0, [r7, #20]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80029b4:	f014 ff78 	bl	80178a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 80029b8:	480b      	ldr	r0, [pc, #44]	; (80029e8 <StartDefaultTask+0x3c>)
 80029ba:	f015 fc37 	bl	801822c <puts>

	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
	for(;;)
	{
		//osDelay(1000);
		//osDelayUntil (&PreviousWakeTime, 500);
		printf("thread alive : %d\n", i++);
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	61fa      	str	r2, [r7, #28]
 80029c8:	4619      	mov	r1, r3
 80029ca:	4808      	ldr	r0, [pc, #32]	; (80029ec <StartDefaultTask+0x40>)
 80029cc:	f015 fb92 	bl	80180f4 <iprintf>
		printf("waiting for signal...\n");
 80029d0:	4807      	ldr	r0, [pc, #28]	; (80029f0 <StartDefaultTask+0x44>)
 80029d2:	f015 fc2b 	bl	801822c <puts>
		osSignalWait (0x0001, osWaitForever);
 80029d6:	463b      	mov	r3, r7
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f012 fab8 	bl	8014f54 <osSignalWait>
		printf("thread alive : %d\n", i++);
 80029e4:	e7ed      	b.n	80029c2 <StartDefaultTask+0x16>
 80029e6:	bf00      	nop
 80029e8:	08019940 	.word	0x08019940
 80029ec:	08019954 	.word	0x08019954
 80029f0:	08019968 	.word	0x08019968

080029f4 <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUITask */

	osDelay(200);
 80029fc:	20c8      	movs	r0, #200	; 0xc8
 80029fe:	f012 fa55 	bl	8014eac <osDelay>
	printf("StartLedTask\n");
 8002a02:	480a      	ldr	r0, [pc, #40]	; (8002a2c <startUITask+0x38>)
 8002a04:	f015 fc12 	bl	801822c <puts>
	// PB_GetState() = GPIO_PIN_SET ou GPIO_PIN_RESET

	/* Infinite loop */
	for(;;)
	{
		osDelay(900);
 8002a08:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002a0c:	f012 fa4e 	bl	8014eac <osDelay>
		LED_Toggle();
 8002a10:	f001 faa8 	bl	8003f64 <LED_Toggle>
		if (PB_GetState() == GPIO_PIN_SET ) osSignalSet(defaultTaskHandle, 0x0001);
 8002a14:	f001 fab0 	bl	8003f78 <PB_GetState>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d1f4      	bne.n	8002a08 <startUITask+0x14>
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <startUITask+0x3c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	4618      	mov	r0, r3
 8002a26:	f012 fa55 	bl	8014ed4 <osSignalSet>
		osDelay(900);
 8002a2a:	e7ed      	b.n	8002a08 <startUITask+0x14>
 8002a2c:	08019980 	.word	0x08019980
 8002a30:	20001c4c 	.word	0x20001c4c

08002a34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a46:	f002 fffd 	bl	8005a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40001000 	.word	0x40001000

08002a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002a5c:	f001 fa82 	bl	8003f64 <LED_Toggle>
		HAL_Delay(100);
 8002a60:	2064      	movs	r0, #100	; 0x64
 8002a62:	f003 f80f 	bl	8005a84 <HAL_Delay>
		LED_Toggle();
 8002a66:	e7f9      	b.n	8002a5c <Error_Handler+0x4>

08002a68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a78:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	f06f 0001 	mvn.w	r0, #1
 8002aa6:	f003 fb75 	bl	8006194 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <HAL_ADC_MspInit+0xa4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d13c      	bne.n	8002b54 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002ae0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002af8:	f043 0320 	orr.w	r3, r3, #32
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002b22:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002b26:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	4619      	mov	r1, r3
 8002b36:	480b      	ldr	r0, [pc, #44]	; (8002b64 <HAL_ADC_MspInit+0xac>)
 8002b38:	f004 fd4a 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b40:	2303      	movs	r3, #3
 8002b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4806      	ldr	r0, [pc, #24]	; (8002b68 <HAL_ADC_MspInit+0xb0>)
 8002b50:	f004 fd3e 	bl	80075d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002b54:	bf00      	nop
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40012200 	.word	0x40012200
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40021400 	.word	0x40021400
 8002b68:	40020000 	.word	0x40020000

08002b6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_CRC_MspInit+0x38>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10b      	bne.n	8002b96 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_CRC_MspInit+0x3c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_CRC_MspInit+0x3c>)
 8002b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_CRC_MspInit+0x3c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023000 	.word	0x40023000
 8002ba8:	40023800 	.word	0x40023800

08002bac <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08e      	sub	sp, #56	; 0x38
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6c      	ldr	r2, [pc, #432]	; (8002d7c <HAL_DCMI_MspInit+0x1d0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	f040 80d2 	bne.w	8002d74 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002bd0:	4b6b      	ldr	r3, [pc, #428]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	4a6a      	ldr	r2, [pc, #424]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6353      	str	r3, [r2, #52]	; 0x34
 8002bdc:	4b68      	ldr	r3, [pc, #416]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	623b      	str	r3, [r7, #32]
 8002be6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002be8:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	4a64      	ldr	r2, [pc, #400]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002bee:	f043 0310 	orr.w	r3, r3, #16
 8002bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf4:	4b62      	ldr	r3, [pc, #392]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c00:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	4a5e      	ldr	r2, [pc, #376]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c06:	f043 0308 	orr.w	r3, r3, #8
 8002c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0c:	4b5c      	ldr	r3, [pc, #368]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c22:	6313      	str	r3, [r2, #48]	; 0x30
 8002c24:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3c:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <HAL_DCMI_MspInit+0x1d4>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002c60:	2360      	movs	r3, #96	; 0x60
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c70:	230d      	movs	r3, #13
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4842      	ldr	r0, [pc, #264]	; (8002d84 <HAL_DCMI_MspInit+0x1d8>)
 8002c7c:	f004 fca8 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002c80:	2308      	movs	r3, #8
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c90:	230d      	movs	r3, #13
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c98:	4619      	mov	r1, r3
 8002c9a:	483b      	ldr	r0, [pc, #236]	; (8002d88 <HAL_DCMI_MspInit+0x1dc>)
 8002c9c:	f004 fc98 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cb2:	230d      	movs	r3, #13
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4833      	ldr	r0, [pc, #204]	; (8002d8c <HAL_DCMI_MspInit+0x1e0>)
 8002cbe:	f004 fc87 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002cc2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cd4:	230d      	movs	r3, #13
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cdc:	4619      	mov	r1, r3
 8002cde:	482c      	ldr	r0, [pc, #176]	; (8002d90 <HAL_DCMI_MspInit+0x1e4>)
 8002ce0:	f004 fc76 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002ce4:	2350      	movs	r3, #80	; 0x50
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cf4:	230d      	movs	r3, #13
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4825      	ldr	r0, [pc, #148]	; (8002d94 <HAL_DCMI_MspInit+0x1e8>)
 8002d00:	f004 fc66 	bl	80075d0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d06:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <HAL_DCMI_MspInit+0x1f0>)
 8002d08:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002d0a:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d10:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d12:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d18:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d24:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d2c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d34:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002d48:	4813      	ldr	r0, [pc, #76]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d4a:	f003 fc8f 	bl	800666c <HAL_DMA_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002d54:	f7ff fe80 	bl	8002a58 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a0f      	ldr	r2, [pc, #60]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d5c:	649a      	str	r2, [r3, #72]	; 0x48
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <HAL_DCMI_MspInit+0x1ec>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2105      	movs	r1, #5
 8002d68:	204e      	movs	r0, #78	; 0x4e
 8002d6a:	f003 fa13 	bl	8006194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002d6e:	204e      	movs	r0, #78	; 0x4e
 8002d70:	f003 fa2c 	bl	80061cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002d74:	bf00      	nop
 8002d76:	3738      	adds	r7, #56	; 0x38
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	50050000 	.word	0x50050000
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	40021800 	.word	0x40021800
 8002d90:	40021c00 	.word	0x40021c00
 8002d94:	40020000 	.word	0x40020000
 8002d98:	20001404 	.word	0x20001404
 8002d9c:	40026428 	.word	0x40026428

08002da0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <HAL_DMA2D_MspInit+0x44>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d113      	bne.n	8002dda <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HAL_DMA2D_MspInit+0x48>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <HAL_DMA2D_MspInit+0x48>)
 8002db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_DMA2D_MspInit+0x48>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2105      	movs	r1, #5
 8002dce:	205a      	movs	r0, #90	; 0x5a
 8002dd0:	f003 f9e0 	bl	8006194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002dd4:	205a      	movs	r0, #90	; 0x5a
 8002dd6:	f003 f9f9 	bl	80061cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	4002b000 	.word	0x4002b000
 8002de8:	40023800 	.word	0x40023800

08002dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <HAL_I2C_MspInit+0xdc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d129      	bne.n	8002e62 <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a2e      	ldr	r2, [pc, #184]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002e26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e2c:	2312      	movs	r3, #18
 8002e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e38:	2304      	movs	r3, #4
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	4619      	mov	r1, r3
 8002e42:	4823      	ldr	r0, [pc, #140]	; (8002ed0 <HAL_I2C_MspInit+0xe4>)
 8002e44:	f004 fbc4 	bl	80075d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e48:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e52:	6413      	str	r3, [r2, #64]	; 0x40
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e60:	e02d      	b.n	8002ebe <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <HAL_I2C_MspInit+0xe8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d128      	bne.n	8002ebe <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4a16      	ldr	r2, [pc, #88]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	6313      	str	r3, [r2, #48]	; 0x30
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002e84:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e8a:	2312      	movs	r3, #18
 8002e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e92:	2303      	movs	r3, #3
 8002e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e96:	2304      	movs	r3, #4
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e9a:	f107 031c 	add.w	r3, r7, #28
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480d      	ldr	r0, [pc, #52]	; (8002ed8 <HAL_I2C_MspInit+0xec>)
 8002ea2:	f004 fb95 	bl	80075d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_I2C_MspInit+0xe0>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
}
 8002ebe:	bf00      	nop
 8002ec0:	3730      	adds	r7, #48	; 0x30
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40005400 	.word	0x40005400
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40005c00 	.word	0x40005c00
 8002ed8:	40021c00 	.word	0x40021c00

08002edc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_I2C_MspDeInit+0x64>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d110      	bne.n	8002f10 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_I2C_MspDeInit+0x68>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_I2C_MspDeInit+0x68>)
 8002ef4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002efe:	4812      	ldr	r0, [pc, #72]	; (8002f48 <HAL_I2C_MspDeInit+0x6c>)
 8002f00:	f004 fd12 	bl	8007928 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f08:	480f      	ldr	r0, [pc, #60]	; (8002f48 <HAL_I2C_MspDeInit+0x6c>)
 8002f0a:	f004 fd0d 	bl	8007928 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002f0e:	e013      	b.n	8002f38 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0d      	ldr	r2, [pc, #52]	; (8002f4c <HAL_I2C_MspDeInit+0x70>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10e      	bne.n	8002f38 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_I2C_MspDeInit+0x68>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_I2C_MspDeInit+0x68>)
 8002f20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	4809      	ldr	r0, [pc, #36]	; (8002f50 <HAL_I2C_MspDeInit+0x74>)
 8002f2a:	f004 fcfd 	bl	8007928 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f32:	4807      	ldr	r0, [pc, #28]	; (8002f50 <HAL_I2C_MspDeInit+0x74>)
 8002f34:	f004 fcf8 	bl	8007928 <HAL_GPIO_DeInit>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40005400 	.word	0x40005400
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40005c00 	.word	0x40005c00
 8002f50:	40021c00 	.word	0x40021c00

08002f54 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08e      	sub	sp, #56	; 0x38
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_LTDC_MspInit+0x164>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f040 809b 	bne.w	80030ae <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	4a4f      	ldr	r2, [pc, #316]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002f7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f82:	6453      	str	r3, [r2, #68]	; 0x44
 8002f84:	4b4d      	ldr	r3, [pc, #308]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f90:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4a49      	ldr	r2, [pc, #292]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002f96:	f043 0310 	orr.w	r3, r3, #16
 8002f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9c:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002fa8:	4b44      	ldr	r3, [pc, #272]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	4a43      	ldr	r2, [pc, #268]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb4:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002fc0:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	4a3d      	ldr	r2, [pc, #244]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fca:	6313      	str	r3, [r2, #48]	; 0x30
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fd8:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4a37      	ldr	r2, [pc, #220]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	4a31      	ldr	r2, [pc, #196]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_LTDC_MspInit+0x168>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003008:	2310      	movs	r3, #16
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	2302      	movs	r3, #2
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	2300      	movs	r3, #0
 8003016:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003018:	230e      	movs	r3, #14
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800301c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003020:	4619      	mov	r1, r3
 8003022:	4827      	ldr	r0, [pc, #156]	; (80030c0 <HAL_LTDC_MspInit+0x16c>)
 8003024:	f004 fad4 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003028:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800303a:	230e      	movs	r3, #14
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800303e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003042:	4619      	mov	r1, r3
 8003044:	481f      	ldr	r0, [pc, #124]	; (80030c4 <HAL_LTDC_MspInit+0x170>)
 8003046:	f004 fac3 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800304a:	23f7      	movs	r3, #247	; 0xf7
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304e:	2302      	movs	r3, #2
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800305a:	230e      	movs	r3, #14
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800305e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003062:	4619      	mov	r1, r3
 8003064:	4818      	ldr	r0, [pc, #96]	; (80030c8 <HAL_LTDC_MspInit+0x174>)
 8003066:	f004 fab3 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800306a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	2300      	movs	r3, #0
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800307c:	2309      	movs	r3, #9
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003084:	4619      	mov	r1, r3
 8003086:	4811      	ldr	r0, [pc, #68]	; (80030cc <HAL_LTDC_MspInit+0x178>)
 8003088:	f004 faa2 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800308c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800309e:	230e      	movs	r3, #14
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80030a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a6:	4619      	mov	r1, r3
 80030a8:	4809      	ldr	r0, [pc, #36]	; (80030d0 <HAL_LTDC_MspInit+0x17c>)
 80030aa:	f004 fa91 	bl	80075d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80030ae:	bf00      	nop
 80030b0:	3738      	adds	r7, #56	; 0x38
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40016800 	.word	0x40016800
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40022400 	.word	0x40022400
 80030c8:	40022800 	.word	0x40022800
 80030cc:	40021800 	.word	0x40021800
 80030d0:	40022000 	.word	0x40022000

080030d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08c      	sub	sp, #48	; 0x30
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 031c 	add.w	r3, r7, #28
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a3f      	ldr	r2, [pc, #252]	; (80031f0 <HAL_QSPI_MspInit+0x11c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d178      	bne.n	80031e8 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80030f6:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	4a3e      	ldr	r2, [pc, #248]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 80030fc:	f043 0302 	orr.w	r3, r3, #2
 8003100:	6393      	str	r3, [r2, #56]	; 0x38
 8003102:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800310e:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a38      	ldr	r2, [pc, #224]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 8003114:	f043 0310 	orr.w	r3, r3, #16
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a32      	ldr	r2, [pc, #200]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800313e:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 8003144:	f043 0308 	orr.w	r3, r3, #8
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <HAL_QSPI_MspInit+0x120>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003156:	2304      	movs	r3, #4
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003162:	2303      	movs	r3, #3
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003166:	2309      	movs	r3, #9
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	4619      	mov	r1, r3
 8003170:	4821      	ldr	r0, [pc, #132]	; (80031f8 <HAL_QSPI_MspInit+0x124>)
 8003172:	f004 fa2d 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003176:	2340      	movs	r3, #64	; 0x40
 8003178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003182:	2303      	movs	r3, #3
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003186:	230a      	movs	r3, #10
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 031c 	add.w	r3, r7, #28
 800318e:	4619      	mov	r1, r3
 8003190:	481a      	ldr	r0, [pc, #104]	; (80031fc <HAL_QSPI_MspInit+0x128>)
 8003192:	f004 fa1d 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003196:	2304      	movs	r3, #4
 8003198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80031a6:	2309      	movs	r3, #9
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	f107 031c 	add.w	r3, r7, #28
 80031ae:	4619      	mov	r1, r3
 80031b0:	4812      	ldr	r0, [pc, #72]	; (80031fc <HAL_QSPI_MspInit+0x128>)
 80031b2:	f004 fa0d 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80031b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80031ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c4:	2303      	movs	r3, #3
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80031c8:	2309      	movs	r3, #9
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031cc:	f107 031c 	add.w	r3, r7, #28
 80031d0:	4619      	mov	r1, r3
 80031d2:	480b      	ldr	r0, [pc, #44]	; (8003200 <HAL_QSPI_MspInit+0x12c>)
 80031d4:	f004 f9fc 	bl	80075d0 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80031d8:	2200      	movs	r2, #0
 80031da:	2105      	movs	r1, #5
 80031dc:	205c      	movs	r0, #92	; 0x5c
 80031de:	f002 ffd9 	bl	8006194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80031e2:	205c      	movs	r0, #92	; 0x5c
 80031e4:	f002 fff2 	bl	80061cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80031e8:	bf00      	nop
 80031ea:	3730      	adds	r7, #48	; 0x30
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	a0001000 	.word	0xa0001000
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40020400 	.word	0x40020400
 8003200:	40020c00 	.word	0x40020c00

08003204 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a07      	ldr	r2, [pc, #28]	; (8003230 <HAL_RTC_MspInit+0x2c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d105      	bne.n	8003222 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_RTC_MspInit+0x30>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_RTC_MspInit+0x30>)
 800321c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40002800 	.word	0x40002800
 8003234:	40023800 	.word	0x40023800

08003238 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a25      	ldr	r2, [pc, #148]	; (80032ec <HAL_SD_MspInit+0xb4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d144      	bne.n	80032e4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800325a:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_SD_MspInit+0xb8>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	4a24      	ldr	r2, [pc, #144]	; (80032f0 <HAL_SD_MspInit+0xb8>)
 8003260:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003264:	6453      	str	r3, [r2, #68]	; 0x44
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_SD_MspInit+0xb8>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <HAL_SD_MspInit+0xb8>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_SD_MspInit+0xb8>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_SD_MspInit+0xb8>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_SD_MspInit+0xb8>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_SD_MspInit+0xb8>)
 8003290:	f043 0308 	orr.w	r3, r3, #8
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_SD_MspInit+0xb8>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80032a2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80032a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a8:	2302      	movs	r3, #2
 80032aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b0:	2303      	movs	r3, #3
 80032b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80032b4:	230c      	movs	r3, #12
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	4619      	mov	r1, r3
 80032be:	480d      	ldr	r0, [pc, #52]	; (80032f4 <HAL_SD_MspInit+0xbc>)
 80032c0:	f004 f986 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80032c4:	2304      	movs	r3, #4
 80032c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80032d4:	230c      	movs	r3, #12
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4619      	mov	r1, r3
 80032de:	4806      	ldr	r0, [pc, #24]	; (80032f8 <HAL_SD_MspInit+0xc0>)
 80032e0:	f004 f976 	bl	80075d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80032e4:	bf00      	nop
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40020800 	.word	0x40020800
 80032f8:	40020c00 	.word	0x40020c00

080032fc <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800331c:	d127      	bne.n	800336e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800331e:	4b16      	ldr	r3, [pc, #88]	; (8003378 <HAL_SPDIFRX_MspInit+0x7c>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a15      	ldr	r2, [pc, #84]	; (8003378 <HAL_SPDIFRX_MspInit+0x7c>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_SPDIFRX_MspInit+0x7c>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <HAL_SPDIFRX_MspInit+0x7c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4a0f      	ldr	r2, [pc, #60]	; (8003378 <HAL_SPDIFRX_MspInit+0x7c>)
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	6313      	str	r3, [r2, #48]	; 0x30
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <HAL_SPDIFRX_MspInit+0x7c>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800335e:	2308      	movs	r3, #8
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	4804      	ldr	r0, [pc, #16]	; (800337c <HAL_SPDIFRX_MspInit+0x80>)
 800336a:	f004 f931 	bl	80075d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800336e:	bf00      	nop
 8003370:	3728      	adds	r7, #40	; 0x28
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40020c00 	.word	0x40020c00

08003380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10c      	bne.n	80033ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6453      	str	r3, [r2, #68]	; 0x44
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80033aa:	e046      	b.n	800343a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b4:	d10c      	bne.n	80033d0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a24      	ldr	r2, [pc, #144]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b22      	ldr	r3, [pc, #136]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	69bb      	ldr	r3, [r7, #24]
}
 80033ce:	e034      	b.n	800343a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <HAL_TIM_Base_MspInit+0xd0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10c      	bne.n	80033f4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033da:	4b1c      	ldr	r3, [pc, #112]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	697b      	ldr	r3, [r7, #20]
}
 80033f2:	e022      	b.n	800343a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a16      	ldr	r2, [pc, #88]	; (8003454 <HAL_TIM_Base_MspInit+0xd4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10c      	bne.n	8003418 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033fe:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]
}
 8003416:	e010      	b.n	800343a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <HAL_TIM_Base_MspInit+0xd8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10b      	bne.n	800343a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6453      	str	r3, [r2, #68]	; 0x44
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
}
 800343a:	bf00      	nop
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40023800 	.word	0x40023800
 8003450:	40000400 	.word	0x40000400
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40010400 	.word	0x40010400

0800345c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <HAL_TIM_PWM_MspInit+0x38>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10b      	bne.n	8003486 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_TIM_PWM_MspInit+0x3c>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <HAL_TIM_PWM_MspInit+0x3c>)
 8003474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
 800347a:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_TIM_PWM_MspInit+0x3c>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40001800 	.word	0x40001800
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 031c 	add.w	r3, r7, #28
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a56      	ldr	r2, [pc, #344]	; (8003614 <HAL_TIM_MspPostInit+0x178>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d11d      	bne.n	80034fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	4b56      	ldr	r3, [pc, #344]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4a55      	ldr	r2, [pc, #340]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ca:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80034d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034e8:	2301      	movs	r3, #1
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80034ec:	f107 031c 	add.w	r3, r7, #28
 80034f0:	4619      	mov	r1, r3
 80034f2:	484a      	ldr	r0, [pc, #296]	; (800361c <HAL_TIM_MspPostInit+0x180>)
 80034f4:	f004 f86c 	bl	80075d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80034f8:	e087      	b.n	800360a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d11d      	bne.n	8003540 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003504:	4b44      	ldr	r3, [pc, #272]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	4a43      	ldr	r2, [pc, #268]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6313      	str	r3, [r2, #48]	; 0x30
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800351c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800352e:	2301      	movs	r3, #1
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003532:	f107 031c 	add.w	r3, r7, #28
 8003536:	4619      	mov	r1, r3
 8003538:	4838      	ldr	r0, [pc, #224]	; (800361c <HAL_TIM_MspPostInit+0x180>)
 800353a:	f004 f849 	bl	80075d0 <HAL_GPIO_Init>
}
 800353e:	e064      	b.n	800360a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a36      	ldr	r2, [pc, #216]	; (8003620 <HAL_TIM_MspPostInit+0x184>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d11c      	bne.n	8003584 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354a:	4b33      	ldr	r3, [pc, #204]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4a32      	ldr	r2, [pc, #200]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	6313      	str	r3, [r2, #48]	; 0x30
 8003556:	4b30      	ldr	r3, [pc, #192]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003562:	2310      	movs	r3, #16
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003566:	2302      	movs	r3, #2
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	2300      	movs	r3, #0
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003572:	2302      	movs	r3, #2
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003576:	f107 031c 	add.w	r3, r7, #28
 800357a:	4619      	mov	r1, r3
 800357c:	4829      	ldr	r0, [pc, #164]	; (8003624 <HAL_TIM_MspPostInit+0x188>)
 800357e:	f004 f827 	bl	80075d0 <HAL_GPIO_Init>
}
 8003582:	e042      	b.n	800360a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <HAL_TIM_MspPostInit+0x18c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d11c      	bne.n	80035c8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a21      	ldr	r2, [pc, #132]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035b6:	2302      	movs	r3, #2
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80035ba:	f107 031c 	add.w	r3, r7, #28
 80035be:	4619      	mov	r1, r3
 80035c0:	481a      	ldr	r0, [pc, #104]	; (800362c <HAL_TIM_MspPostInit+0x190>)
 80035c2:	f004 f805 	bl	80075d0 <HAL_GPIO_Init>
}
 80035c6:	e020      	b.n	800360a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a18      	ldr	r2, [pc, #96]	; (8003630 <HAL_TIM_MspPostInit+0x194>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d11b      	bne.n	800360a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 80035d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_TIM_MspPostInit+0x17c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80035ea:	2340      	movs	r3, #64	; 0x40
 80035ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80035fa:	2309      	movs	r3, #9
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f107 031c 	add.w	r3, r7, #28
 8003602:	4619      	mov	r1, r3
 8003604:	480b      	ldr	r0, [pc, #44]	; (8003634 <HAL_TIM_MspPostInit+0x198>)
 8003606:	f003 ffe3 	bl	80075d0 <HAL_GPIO_Init>
}
 800360a:	bf00      	nop
 800360c:	3730      	adds	r7, #48	; 0x30
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	40023800 	.word	0x40023800
 800361c:	40020000 	.word	0x40020000
 8003620:	40000400 	.word	0x40000400
 8003624:	40020400 	.word	0x40020400
 8003628:	40000c00 	.word	0x40000c00
 800362c:	40022000 	.word	0x40022000
 8003630:	40001800 	.word	0x40001800
 8003634:	40021c00 	.word	0x40021c00

08003638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08c      	sub	sp, #48	; 0x30
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003640:	f107 031c 	add.w	r3, r7, #28
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	60da      	str	r2, [r3, #12]
 800364e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a3c      	ldr	r2, [pc, #240]	; (8003748 <HAL_UART_MspInit+0x110>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d145      	bne.n	80036e6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800365a:	4b3c      	ldr	r3, [pc, #240]	; (800374c <HAL_UART_MspInit+0x114>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	4a3b      	ldr	r2, [pc, #236]	; (800374c <HAL_UART_MspInit+0x114>)
 8003660:	f043 0310 	orr.w	r3, r3, #16
 8003664:	6453      	str	r3, [r2, #68]	; 0x44
 8003666:	4b39      	ldr	r3, [pc, #228]	; (800374c <HAL_UART_MspInit+0x114>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003672:	4b36      	ldr	r3, [pc, #216]	; (800374c <HAL_UART_MspInit+0x114>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a35      	ldr	r2, [pc, #212]	; (800374c <HAL_UART_MspInit+0x114>)
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b33      	ldr	r3, [pc, #204]	; (800374c <HAL_UART_MspInit+0x114>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	4b30      	ldr	r3, [pc, #192]	; (800374c <HAL_UART_MspInit+0x114>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	4a2f      	ldr	r2, [pc, #188]	; (800374c <HAL_UART_MspInit+0x114>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6313      	str	r3, [r2, #48]	; 0x30
 8003696:	4b2d      	ldr	r3, [pc, #180]	; (800374c <HAL_UART_MspInit+0x114>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036b2:	2307      	movs	r3, #7
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80036b6:	f107 031c 	add.w	r3, r7, #28
 80036ba:	4619      	mov	r1, r3
 80036bc:	4824      	ldr	r0, [pc, #144]	; (8003750 <HAL_UART_MspInit+0x118>)
 80036be:	f003 ff87 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80036c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036d4:	2307      	movs	r3, #7
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	4619      	mov	r1, r3
 80036de:	481d      	ldr	r0, [pc, #116]	; (8003754 <HAL_UART_MspInit+0x11c>)
 80036e0:	f003 ff76 	bl	80075d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80036e4:	e02c      	b.n	8003740 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_UART_MspInit+0x120>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d127      	bne.n	8003740 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80036f0:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_UART_MspInit+0x114>)
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_UART_MspInit+0x114>)
 80036f6:	f043 0320 	orr.w	r3, r3, #32
 80036fa:	6453      	str	r3, [r2, #68]	; 0x44
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_UART_MspInit+0x114>)
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_UART_MspInit+0x114>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	4a0f      	ldr	r2, [pc, #60]	; (800374c <HAL_UART_MspInit+0x114>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	6313      	str	r3, [r2, #48]	; 0x30
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <HAL_UART_MspInit+0x114>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003720:	23c0      	movs	r3, #192	; 0xc0
 8003722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003730:	2308      	movs	r3, #8
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	4619      	mov	r1, r3
 800373a:	4808      	ldr	r0, [pc, #32]	; (800375c <HAL_UART_MspInit+0x124>)
 800373c:	f003 ff48 	bl	80075d0 <HAL_GPIO_Init>
}
 8003740:	bf00      	nop
 8003742:	3730      	adds	r7, #48	; 0x30
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40011000 	.word	0x40011000
 800374c:	40023800 	.word	0x40023800
 8003750:	40020400 	.word	0x40020400
 8003754:	40020000 	.word	0x40020000
 8003758:	40011400 	.word	0x40011400
 800375c:	40020800 	.word	0x40020800

08003760 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003774:	4b3d      	ldr	r3, [pc, #244]	; (800386c <HAL_FMC_MspInit+0x10c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d173      	bne.n	8003864 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 800377c:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_FMC_MspInit+0x10c>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_FMC_MspInit+0x110>)
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	4a3a      	ldr	r2, [pc, #232]	; (8003870 <HAL_FMC_MspInit+0x110>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6393      	str	r3, [r2, #56]	; 0x38
 800378e:	4b38      	ldr	r3, [pc, #224]	; (8003870 <HAL_FMC_MspInit+0x110>)
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800379a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800379e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037ac:	230c      	movs	r3, #12
 80037ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037b0:	1d3b      	adds	r3, r7, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	482f      	ldr	r0, [pc, #188]	; (8003874 <HAL_FMC_MspInit+0x114>)
 80037b6:	f003 ff0b 	bl	80075d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80037ba:	f248 1333 	movw	r3, #33075	; 0x8133
 80037be:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c8:	2303      	movs	r3, #3
 80037ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037cc:	230c      	movs	r3, #12
 80037ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4828      	ldr	r0, [pc, #160]	; (8003878 <HAL_FMC_MspInit+0x118>)
 80037d6:	f003 fefb 	bl	80075d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80037da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80037de:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	2302      	movs	r3, #2
 80037e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e8:	2303      	movs	r3, #3
 80037ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037ec:	230c      	movs	r3, #12
 80037ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	4619      	mov	r1, r3
 80037f4:	4821      	ldr	r0, [pc, #132]	; (800387c <HAL_FMC_MspInit+0x11c>)
 80037f6:	f003 feeb 	bl	80075d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80037fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80037fe:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003808:	2303      	movs	r3, #3
 800380a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800380c:	230c      	movs	r3, #12
 800380e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	4619      	mov	r1, r3
 8003814:	481a      	ldr	r0, [pc, #104]	; (8003880 <HAL_FMC_MspInit+0x120>)
 8003816:	f003 fedb 	bl	80075d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800381a:	2328      	movs	r3, #40	; 0x28
 800381c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003826:	2303      	movs	r3, #3
 8003828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800382a:	230c      	movs	r3, #12
 800382c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	4619      	mov	r1, r3
 8003832:	4814      	ldr	r0, [pc, #80]	; (8003884 <HAL_FMC_MspInit+0x124>)
 8003834:	f003 fecc 	bl	80075d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003838:	2308      	movs	r3, #8
 800383a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	2302      	movs	r3, #2
 800383e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003844:	2303      	movs	r3, #3
 8003846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003848:	230c      	movs	r3, #12
 800384a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	4619      	mov	r1, r3
 8003850:	480d      	ldr	r0, [pc, #52]	; (8003888 <HAL_FMC_MspInit+0x128>)
 8003852:	f003 febd 	bl	80075d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_FMC_MspInit+0x12c>)
 8003858:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <HAL_FMC_MspInit+0x130>)
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_FMC_MspInit+0x130>)
 800385e:	4a0b      	ldr	r2, [pc, #44]	; (800388c <HAL_FMC_MspInit+0x12c>)
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
 8003862:	e000      	b.n	8003866 <HAL_FMC_MspInit+0x106>
    return;
 8003864:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20001c54 	.word	0x20001c54
 8003870:	40023800 	.word	0x40023800
 8003874:	40021000 	.word	0x40021000
 8003878:	40021800 	.word	0x40021800
 800387c:	40020c00 	.word	0x40020c00
 8003880:	40021400 	.word	0x40021400
 8003884:	40021c00 	.word	0x40021c00
 8003888:	40020800 	.word	0x40020800
 800388c:	20001c18 	.word	0x20001c18
 8003890:	20001bb8 	.word	0x20001bb8

08003894 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800389c:	f7ff ff60 	bl	8003760 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6f      	ldr	r2, [pc, #444]	; (8003a74 <HAL_SAI_MspInit+0x1cc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d175      	bne.n	80039a6 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80038ba:	4b6f      	ldr	r3, [pc, #444]	; (8003a78 <HAL_SAI_MspInit+0x1d0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80038c2:	4b6e      	ldr	r3, [pc, #440]	; (8003a7c <HAL_SAI_MspInit+0x1d4>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	4a6d      	ldr	r2, [pc, #436]	; (8003a7c <HAL_SAI_MspInit+0x1d4>)
 80038c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038cc:	6453      	str	r3, [r2, #68]	; 0x44
 80038ce:	4b6b      	ldr	r3, [pc, #428]	; (8003a7c <HAL_SAI_MspInit+0x1d4>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80038da:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <HAL_SAI_MspInit+0x1d0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	4a65      	ldr	r2, [pc, #404]	; (8003a78 <HAL_SAI_MspInit+0x1d0>)
 80038e2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 80038e4:	2310      	movs	r3, #16
 80038e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f0:	2303      	movs	r3, #3
 80038f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80038f4:	230a      	movs	r3, #10
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	4619      	mov	r1, r3
 80038fe:	4860      	ldr	r0, [pc, #384]	; (8003a80 <HAL_SAI_MspInit+0x1d8>)
 8003900:	f003 fe66 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003904:	23e0      	movs	r3, #224	; 0xe0
 8003906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003910:	2302      	movs	r3, #2
 8003912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003914:	230a      	movs	r3, #10
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	4619      	mov	r1, r3
 800391e:	4858      	ldr	r0, [pc, #352]	; (8003a80 <HAL_SAI_MspInit+0x1d8>)
 8003920:	f003 fe56 	bl	80075d0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003924:	4b57      	ldr	r3, [pc, #348]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003926:	4a58      	ldr	r2, [pc, #352]	; (8003a88 <HAL_SAI_MspInit+0x1e0>)
 8003928:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800392a:	4b56      	ldr	r3, [pc, #344]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 800392c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003930:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003932:	4b54      	ldr	r3, [pc, #336]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003938:	4b52      	ldr	r3, [pc, #328]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800393e:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003944:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003946:	4b4f      	ldr	r3, [pc, #316]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800394c:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800394e:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003954:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003956:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800395c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 800395e:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003964:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003968:	2204      	movs	r2, #4
 800396a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800396c:	4b45      	ldr	r3, [pc, #276]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 800396e:	2203      	movs	r2, #3
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003972:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003974:	2200      	movs	r2, #0
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003978:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800397e:	4841      	ldr	r0, [pc, #260]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003980:	f002 fe74 	bl	800666c <HAL_DMA_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 800398a:	f7ff f865 	bl	8002a58 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a3c      	ldr	r2, [pc, #240]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003992:	671a      	str	r2, [r3, #112]	; 0x70
 8003994:	4a3b      	ldr	r2, [pc, #236]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a39      	ldr	r2, [pc, #228]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 800399e:	66da      	str	r2, [r3, #108]	; 0x6c
 80039a0:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <HAL_SAI_MspInit+0x1dc>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <HAL_SAI_MspInit+0x1e4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d15c      	bne.n	8003a6a <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80039b0:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <HAL_SAI_MspInit+0x1d0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80039b8:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <HAL_SAI_MspInit+0x1d4>)
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <HAL_SAI_MspInit+0x1d4>)
 80039be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039c2:	6453      	str	r3, [r2, #68]	; 0x44
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_SAI_MspInit+0x1d4>)
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80039d0:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <HAL_SAI_MspInit+0x1d0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	4a28      	ldr	r2, [pc, #160]	; (8003a78 <HAL_SAI_MspInit+0x1d0>)
 80039d8:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80039da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039e8:	2302      	movs	r3, #2
 80039ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80039ec:	230a      	movs	r3, #10
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4619      	mov	r1, r3
 80039f6:	4826      	ldr	r0, [pc, #152]	; (8003a90 <HAL_SAI_MspInit+0x1e8>)
 80039f8:	f003 fdea 	bl	80075d0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 80039fe:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <HAL_SAI_MspInit+0x1f0>)
 8003a00:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003a02:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a08:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a0e:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003a14:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a1a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a22:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a2a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a32:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003a34:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a3a:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a3c:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003a42:	4814      	ldr	r0, [pc, #80]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a44:	f002 fe12 	bl	800666c <HAL_DMA_Init>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003a4e:	f7ff f803 	bl	8002a58 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a0f      	ldr	r2, [pc, #60]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a56:	671a      	str	r2, [r3, #112]	; 0x70
 8003a58:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a62:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a64:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <HAL_SAI_MspInit+0x1ec>)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003a6a:	bf00      	nop
 8003a6c:	3728      	adds	r7, #40	; 0x28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40015c04 	.word	0x40015c04
 8003a78:	20001c58 	.word	0x20001c58
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40022000 	.word	0x40022000
 8003a84:	20001758 	.word	0x20001758
 8003a88:	40026470 	.word	0x40026470
 8003a8c:	40015c24 	.word	0x40015c24
 8003a90:	40021800 	.word	0x40021800
 8003a94:	200017b8 	.word	0x200017b8
 8003a98:	400264b8 	.word	0x400264b8

08003a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	; 0x30
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003aac:	2200      	movs	r2, #0
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	2036      	movs	r0, #54	; 0x36
 8003ab2:	f002 fb6f 	bl	8006194 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ab6:	2036      	movs	r0, #54	; 0x36
 8003ab8:	f002 fb88 	bl	80061cc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003abc:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <HAL_InitTick+0xa0>)
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <HAL_InitTick+0xa0>)
 8003ac2:	f043 0310 	orr.w	r3, r3, #16
 8003ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac8:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <HAL_InitTick+0xa0>)
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ad4:	f107 0210 	add.w	r2, r7, #16
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f008 fb30 	bl	800c144 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003ae4:	f008 fb06 	bl	800c0f4 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_InitTick+0xa4>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0c9b      	lsrs	r3, r3, #18
 8003af8:	3b01      	subs	r3, #1
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <HAL_InitTick+0xa8>)
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <HAL_InitTick+0xac>)
 8003b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_InitTick+0xa8>)
 8003b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b0a:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <HAL_InitTick+0xa8>)
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <HAL_InitTick+0xa8>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_InitTick+0xa8>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b1c:	4809      	ldr	r0, [pc, #36]	; (8003b44 <HAL_InitTick+0xa8>)
 8003b1e:	f00b f9a3 	bl	800ee68 <HAL_TIM_Base_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b28:	4806      	ldr	r0, [pc, #24]	; (8003b44 <HAL_InitTick+0xa8>)
 8003b2a:	f00b f9f5 	bl	800ef18 <HAL_TIM_Base_Start_IT>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	e000      	b.n	8003b34 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3730      	adds	r7, #48	; 0x30
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	431bde83 	.word	0x431bde83
 8003b44:	20001c5c 	.word	0x20001c5c
 8003b48:	40001000 	.word	0x40001000

08003b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b50:	e7fe      	b.n	8003b50 <NMI_Handler+0x4>

08003b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b56:	e7fe      	b.n	8003b56 <HardFault_Handler+0x4>

08003b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b5c:	e7fe      	b.n	8003b5c <MemManage_Handler+0x4>

08003b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b62:	e7fe      	b.n	8003b62 <BusFault_Handler+0x4>

08003b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b68:	e7fe      	b.n	8003b68 <UsageFault_Handler+0x4>

08003b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003b7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b80:	f004 f82a 	bl	8007bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b8c:	4802      	ldr	r0, [pc, #8]	; (8003b98 <TIM6_DAC_IRQHandler+0x10>)
 8003b8e:	f00b fa92 	bl	800f0b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20001c5c 	.word	0x20001c5c

08003b9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003ba0:	4802      	ldr	r0, [pc, #8]	; (8003bac <DMA2_Stream0_IRQHandler+0x10>)
 8003ba2:	f002 ff03 	bl	80069ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20001bb8 	.word	0x20001bb8

08003bb0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <DMA2_Stream1_IRQHandler+0x10>)
 8003bb6:	f002 fef9 	bl	80069ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20001404 	.word	0x20001404

08003bc4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <DMA2_Stream4_IRQHandler+0x10>)
 8003bca:	f002 feef 	bl	80069ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20001758 	.word	0x20001758

08003bd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003bdc:	4802      	ldr	r0, [pc, #8]	; (8003be8 <OTG_FS_IRQHandler+0x10>)
 8003bde:	f004 fa89 	bl	80080f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20049e30 	.word	0x20049e30

08003bec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003bf0:	4802      	ldr	r0, [pc, #8]	; (8003bfc <DMA2_Stream7_IRQHandler+0x10>)
 8003bf2:	f002 fedb 	bl	80069ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200017b8 	.word	0x200017b8

08003c00 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003c04:	4802      	ldr	r0, [pc, #8]	; (8003c10 <DCMI_IRQHandler+0x10>)
 8003c06:	f002 fc61 	bl	80064cc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200013b4 	.word	0x200013b4

08003c14 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <DMA2D_IRQHandler+0x10>)
 8003c1a:	f003 fa9b 	bl	8007154 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20001464 	.word	0x20001464

08003c28 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <QUADSPI_IRQHandler+0x10>)
 8003c2e:	f006 feb7 	bl	800a9a0 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200015e4 	.word	0x200015e4

08003c3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e00a      	b.n	8003c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c4e:	f3af 8000 	nop.w
 8003c52:	4601      	mov	r1, r0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	60ba      	str	r2, [r7, #8]
 8003c5a:	b2ca      	uxtb	r2, r1
 8003c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dbf0      	blt.n	8003c4e <_read+0x12>
	}

return len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e009      	b.n	8003c9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	60ba      	str	r2, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f97d 	bl	8003f90 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	dbf1      	blt.n	8003c88 <_write+0x12>
	}
	return len;
 8003ca4:	687b      	ldr	r3, [r7, #4]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_close>:

int _close(int file)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
	return -1;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_isatty>:

int _isatty(int file)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
	return 1;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
	return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <_sbrk+0x5c>)
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <_sbrk+0x60>)
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <_sbrk+0x64>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <_sbrk+0x64>)
 8003d36:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <_sbrk+0x68>)
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <_sbrk+0x64>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d207      	bcs.n	8003d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d48:	f014 f8a4 	bl	8017e94 <__errno>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	220c      	movs	r2, #12
 8003d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	e009      	b.n	8003d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <_sbrk+0x64>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d5e:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <_sbrk+0x64>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <_sbrk+0x64>)
 8003d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20050000 	.word	0x20050000
 8003d78:	00000400 	.word	0x00000400
 8003d7c:	20001ca8 	.word	0x20001ca8
 8003d80:	2004a148 	.word	0x2004a148

08003d84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <SystemInit+0x20>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <SystemInit+0x20>)
 8003d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <uiDisplayBasic>:
#include <stdio.h>

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8003dae:	f04f 30ff 	mov.w	r0, #4294967295
 8003db2:	f000 fad5 	bl	8004360 <LCD_Clear>

	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_FillRect(0, 0, LCD_GetXSize(), 90);

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003db6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003dba:	f000 fa57 	bl	800426c <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	f000 fa83 	bl	80042cc <LCD_SetBackColor>
	LCD_SetFont(&Font24);
 8003dc6:	4810      	ldr	r0, [pc, #64]	; (8003e08 <uiDisplayBasic+0x60>)
 8003dc8:	f000 fa98 	bl	80042fc <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 8003dcc:	2301      	movs	r3, #1
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <uiDisplayBasic+0x64>)
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f000 fb0a 	bl	80043f0 <LCD_DrawString>

	LCD_SetFont(&Font12);
 8003ddc:	480c      	ldr	r0, [pc, #48]	; (8003e10 <uiDisplayBasic+0x68>)
 8003dde:	f000 fa8d 	bl	80042fc <LCD_SetFont>
	LCD_DrawString(10, 30, (uint8_t*) "Input L =", LEFT_MODE, true);
 8003de2:	2301      	movs	r3, #1
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2303      	movs	r3, #3
 8003de8:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <uiDisplayBasic+0x6c>)
 8003dea:	211e      	movs	r1, #30
 8003dec:	200a      	movs	r0, #10
 8003dee:	f000 faff 	bl	80043f0 <LCD_DrawString>
	LCD_DrawString(10, 50, (uint8_t*) "Input R =", LEFT_MODE, true);
 8003df2:	2301      	movs	r3, #1
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2303      	movs	r3, #3
 8003df8:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <uiDisplayBasic+0x70>)
 8003dfa:	2132      	movs	r1, #50	; 0x32
 8003dfc:	200a      	movs	r0, #10
 8003dfe:	f000 faf7 	bl	80043f0 <LCD_DrawString>

	/* Set the LCD Text Color */
	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_DrawRect(10, 100, LCD_GetXSize() - 20, LCD_GetYSize() - 110);
	//LCD_DrawRect(11, 101, LCD_GetXSize() - 22, LCD_GetYSize() - 112);
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	2000001c 	.word	0x2000001c
 8003e0c:	08019990 	.word	0x08019990
 8003e10:	20000014 	.word	0x20000014
 8003e14:	080199a8 	.word	0x080199a8
 8003e18:	080199b4 	.word	0x080199b4

08003e1c <uiDisplayInputLevel>:


/**
 * Displays line or microphones input level on the LCD.
 */
void uiDisplayInputLevel(double inputLevelL, double inputLevelR) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b096      	sub	sp, #88	; 0x58
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	ed87 0b02 	vstr	d0, [r7, #8]
 8003e26:	ed87 1b00 	vstr	d1, [r7]

	uint8_t buf[50];

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003e2a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003e2e:	f000 fa1d 	bl	800426c <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003e32:	f04f 30ff 	mov.w	r0, #4294967295
 8003e36:	f000 fa49 	bl	80042cc <LCD_SetBackColor>
	LCD_SetFont(&Font12);
 8003e3a:	483a      	ldr	r0, [pc, #232]	; (8003f24 <uiDisplayInputLevel+0x108>)
 8003e3c:	f000 fa5e 	bl	80042fc <LCD_SetFont>
	 LCD_DisplayStringAt(90, 30, (uint8_t *)buf, LEFT_MODE);

	 sprintf((char *)buf, "%d     ", (int)(inputLevelR));
	 LCD_DisplayStringAt(90, 50, (uint8_t *)buf, LEFT_MODE);*/

	if (inputLevelL > 0) {
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e4c:	f7fc fe7c 	bl	8000b48 <__aeabi_dcmpgt>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d023      	beq.n	8003e9e <uiDisplayInputLevel+0x82>
		int lvl_db = (int) (20. * log10(inputLevelL));
 8003e56:	ed97 0b02 	vldr	d0, [r7, #8]
 8003e5a:	f015 fa9d 	bl	8019398 <log10>
 8003e5e:	ec51 0b10 	vmov	r0, r1, d0
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	4b30      	ldr	r3, [pc, #192]	; (8003f28 <uiDisplayInputLevel+0x10c>)
 8003e68:	f7fc fbde 	bl	8000628 <__aeabi_dmul>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	f7fc fe88 	bl	8000b88 <__aeabi_d2iz>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		sprintf((char*) buf, "%d dB   ", lvl_db);
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e82:	492a      	ldr	r1, [pc, #168]	; (8003f2c <uiDisplayInputLevel+0x110>)
 8003e84:	4618      	mov	r0, r3
 8003e86:	f014 f9e9 	bl	801825c <siprintf>
		LCD_DrawString(90, 30, (uint8_t*) buf, LEFT_MODE, true);
 8003e8a:	f107 0214 	add.w	r2, r7, #20
 8003e8e:	2301      	movs	r3, #1
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	2303      	movs	r3, #3
 8003e94:	211e      	movs	r1, #30
 8003e96:	205a      	movs	r0, #90	; 0x5a
 8003e98:	f000 faaa 	bl	80043f0 <LCD_DrawString>
 8003e9c:	e007      	b.n	8003eae <uiDisplayInputLevel+0x92>
	} else
		LCD_DrawString(90, 30, (uint8_t*) "-inf dB", LEFT_MODE, true);
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <uiDisplayInputLevel+0x114>)
 8003ea6:	211e      	movs	r1, #30
 8003ea8:	205a      	movs	r0, #90	; 0x5a
 8003eaa:	f000 faa1 	bl	80043f0 <LCD_DrawString>

	if (inputLevelR > 0) {
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eba:	f7fc fe45 	bl	8000b48 <__aeabi_dcmpgt>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d023      	beq.n	8003f0c <uiDisplayInputLevel+0xf0>
		int lvl_db = (int) (20. * log10(inputLevelR));
 8003ec4:	ed97 0b00 	vldr	d0, [r7]
 8003ec8:	f015 fa66 	bl	8019398 <log10>
 8003ecc:	ec51 0b10 	vmov	r0, r1, d0
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <uiDisplayInputLevel+0x10c>)
 8003ed6:	f7fc fba7 	bl	8000628 <__aeabi_dmul>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f7fc fe51 	bl	8000b88 <__aeabi_d2iz>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	64bb      	str	r3, [r7, #72]	; 0x48
		sprintf((char*) buf, "%d dB   ", lvl_db);
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef0:	490e      	ldr	r1, [pc, #56]	; (8003f2c <uiDisplayInputLevel+0x110>)
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f014 f9b2 	bl	801825c <siprintf>
		LCD_DrawString(90, 50, (uint8_t*) buf, LEFT_MODE, true);
 8003ef8:	f107 0214 	add.w	r2, r7, #20
 8003efc:	2301      	movs	r3, #1
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	2303      	movs	r3, #3
 8003f02:	2132      	movs	r1, #50	; 0x32
 8003f04:	205a      	movs	r0, #90	; 0x5a
 8003f06:	f000 fa73 	bl	80043f0 <LCD_DrawString>
	} else
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);

}
 8003f0a:	e007      	b.n	8003f1c <uiDisplayInputLevel+0x100>
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2303      	movs	r3, #3
 8003f12:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <uiDisplayInputLevel+0x114>)
 8003f14:	2132      	movs	r1, #50	; 0x32
 8003f16:	205a      	movs	r0, #90	; 0x5a
 8003f18:	f000 fa6a 	bl	80043f0 <LCD_DrawString>
}
 8003f1c:	bf00      	nop
 8003f1e:	3750      	adds	r7, #80	; 0x50
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000014 	.word	0x20000014
 8003f28:	40340000 	.word	0x40340000
 8003f2c:	080199c0 	.word	0x080199c0
 8003f30:	080199cc 	.word	0x080199cc

08003f34 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8003f38:	2201      	movs	r2, #1
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4802      	ldr	r0, [pc, #8]	; (8003f48 <LED_On+0x14>)
 8003f3e:	f003 fe17 	bl	8007b70 <HAL_GPIO_WritePin>
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40022000 	.word	0x40022000

08003f4c <LED_Off>:

void LED_Off(){
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 8003f50:	2200      	movs	r2, #0
 8003f52:	2102      	movs	r1, #2
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <LED_Off+0x14>)
 8003f56:	f003 fe0b 	bl	8007b70 <HAL_GPIO_WritePin>
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40022000 	.word	0x40022000

08003f64 <LED_Toggle>:

void LED_Toggle(){
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4802      	ldr	r0, [pc, #8]	; (8003f74 <LED_Toggle+0x10>)
 8003f6c:	f003 fe19 	bl	8007ba2 <HAL_GPIO_TogglePin>

}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40022000 	.word	0x40022000

08003f78 <PB_GetState>:
// --------------------------------- onboard blue button ------------------------------

/**
 * @return GPIO_PIN_SET or GPIO_PIN_RESET depending on the state of the onboard blue (push) button
 */
uint32_t PB_GetState(){
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0

  return HAL_GPIO_ReadPin(BLUE_BTN_GPIO_Port, BLUE_BTN_Pin);
 8003f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f80:	4802      	ldr	r0, [pc, #8]	; (8003f8c <PB_GetState+0x14>)
 8003f82:	f003 fddd 	bl	8007b40 <HAL_GPIO_ReadPin>
 8003f86:	4603      	mov	r3, r0

}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40022000 	.word	0x40022000

08003f90 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8003f98:	1d39      	adds	r1, r7, #4
 8003f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4803      	ldr	r0, [pc, #12]	; (8003fb0 <__io_putchar+0x20>)
 8003fa2:	f00c f8b5 	bl	8010110 <HAL_UART_Transmit>
	return ch;
 8003fa6:	687b      	ldr	r3, [r7, #4]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20001ab0 	.word	0x20001ab0

08003fb4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af04      	add	r7, sp, #16
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	72fb      	strb	r3, [r7, #11]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	813b      	strh	r3, [r7, #8]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003fd2:	7afb      	ldrb	r3, [r7, #11]
 8003fd4:	b299      	uxth	r1, r3
 8003fd6:	88f8      	ldrh	r0, [r7, #6]
 8003fd8:	893a      	ldrh	r2, [r7, #8]
 8003fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fde:	9302      	str	r3, [sp, #8]
 8003fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	4603      	mov	r3, r0
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f005 fd50 	bl	8009a90 <HAL_I2C_Mem_Read>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f832 	bl	8004068 <I2Cx_Error>
  }
  return status;
 8004004:	7dfb      	ldrb	r3, [r7, #23]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b08a      	sub	sp, #40	; 0x28
 8004012:	af04      	add	r7, sp, #16
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	4608      	mov	r0, r1
 8004018:	4611      	mov	r1, r2
 800401a:	461a      	mov	r2, r3
 800401c:	4603      	mov	r3, r0
 800401e:	72fb      	strb	r3, [r7, #11]
 8004020:	460b      	mov	r3, r1
 8004022:	813b      	strh	r3, [r7, #8]
 8004024:	4613      	mov	r3, r2
 8004026:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800402c:	7afb      	ldrb	r3, [r7, #11]
 800402e:	b299      	uxth	r1, r3
 8004030:	88f8      	ldrh	r0, [r7, #6]
 8004032:	893a      	ldrh	r2, [r7, #8]
 8004034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004038:	9302      	str	r3, [sp, #8]
 800403a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	4603      	mov	r3, r0
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f005 fc0f 	bl	8009868 <HAL_I2C_Mem_Write>
 800404a:	4603      	mov	r3, r0
 800404c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004054:	7afb      	ldrb	r3, [r7, #11]
 8004056:	4619      	mov	r1, r3
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f805 	bl	8004068 <I2Cx_Error>
  }
  return status;
 800405e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f005 fbc7 	bl	8009808 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f005 fb34 	bl	80096e8 <HAL_I2C_Init>
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <AUDIO_I2C_Write>:
  * Writes a single CONTROL data to the audio codec over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint16_t Reg, uint16_t Value){
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af02      	add	r7, sp, #8
 800408e:	4603      	mov	r3, r0
 8004090:	460a      	mov	r2, r1
 8004092:	80fb      	strh	r3, [r7, #6]
 8004094:	4613      	mov	r3, r2
 8004096:	80bb      	strh	r3, [r7, #4]

  uint16_t tmp = Value;
 8004098:	88bb      	ldrh	r3, [r7, #4]
 800409a:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800409c:	89fb      	ldrh	r3, [r7, #14]
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	80bb      	strh	r3, [r7, #4]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80040a4:	89fb      	ldrh	r3, [r7, #14]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	b21a      	sxth	r2, r3
 80040ac:	88bb      	ldrh	r3, [r7, #4]
 80040ae:	b21b      	sxth	r3, r3
 80040b0:	4313      	orrs	r3, r2
 80040b2:	b21b      	sxth	r3, r3
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	80bb      	strh	r3, [r7, #4]

  I2Cx_WriteMultiple(&hi2c3, AUDIO_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	2302      	movs	r3, #2
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	2302      	movs	r3, #2
 80040c4:	2134      	movs	r1, #52	; 0x34
 80040c6:	4803      	ldr	r0, [pc, #12]	; (80040d4 <AUDIO_I2C_Write+0x4c>)
 80040c8:	f7ff ffa1 	bl	800400e <I2Cx_WriteMultiple>
  //I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200014f0 	.word	0x200014f0

080040d8 <AUDIO_I2C_Read>:
/**
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint16_t Reg){
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af02      	add	r7, sp, #8
 80040de:	4603      	mov	r3, r0
 80040e0:	80fb      	strh	r3, [r7, #6]

  uint16_t read_value = 0, tmp = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	81bb      	strh	r3, [r7, #12]
 80040e6:	2300      	movs	r3, #0
 80040e8:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, AUDIO_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	2302      	movs	r3, #2
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	f107 030c 	add.w	r3, r7, #12
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2302      	movs	r3, #2
 80040f8:	2134      	movs	r1, #52	; 0x34
 80040fa:	480b      	ldr	r0, [pc, #44]	; (8004128 <AUDIO_I2C_Read+0x50>)
 80040fc:	f7ff ff5a 	bl	8003fb4 <I2Cx_ReadMultiple>
  //I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004100:	89bb      	ldrh	r3, [r7, #12]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004106:	89bb      	ldrh	r3, [r7, #12]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	b29b      	uxth	r3, r3
 800410c:	b21a      	sxth	r2, r3
 800410e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004112:	4313      	orrs	r3, r2
 8004114:	b21b      	sxth	r3, r3
 8004116:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 8004118:	89fb      	ldrh	r3, [r7, #14]
 800411a:	81bb      	strh	r3, [r7, #12]

  return read_value;
 800411c:	89bb      	ldrh	r3, [r7, #12]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200014f0 	.word	0x200014f0

0800412c <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af02      	add	r7, sp, #8
 8004132:	4603      	mov	r3, r0
 8004134:	460a      	mov	r2, r1
 8004136:	71fb      	strb	r3, [r7, #7]
 8004138:	4613      	mov	r3, r2
 800413a:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	b29a      	uxth	r2, r3
 8004140:	2301      	movs	r3, #1
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	1dbb      	adds	r3, r7, #6
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2301      	movs	r3, #1
 800414a:	2170      	movs	r1, #112	; 0x70
 800414c:	4803      	ldr	r0, [pc, #12]	; (800415c <TS_I2C_Write+0x30>)
 800414e:	f7ff ff5e 	bl	800400e <I2Cx_WriteMultiple>

}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	200014f0 	.word	0x200014f0

08004160 <SCB_CleanDCache>:
/**
  \brief   Clean D-Cache
  \details Cleans D-Cache
  */
__STATIC_INLINE void SCB_CleanDCache (void)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004166:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <SCB_CleanDCache+0x74>)
 8004168:	2200      	movs	r2, #0
 800416a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800416e:	f3bf 8f4f 	dsb	sy
}
 8004172:	bf00      	nop
   __DSB();

    ccsidr = SCB->CCSIDR;
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <SCB_CleanDCache+0x74>)
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	607b      	str	r3, [r7, #4]

                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0b5b      	lsrs	r3, r3, #13
 8004180:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004184:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	08db      	lsrs	r3, r3, #3
 800418a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004198:	4013      	ands	r3, r2
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	0792      	lsls	r2, r2, #30
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 800419e:	490d      	ldr	r1, [pc, #52]	; (80041d4 <SCB_CleanDCache+0x74>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 326c 	str.w	r3, [r1, #620]	; 0x26c
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1e5a      	subs	r2, r3, #1
 80041aa:	60ba      	str	r2, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ef      	bne.n	8004190 <SCB_CleanDCache+0x30>
    } while(sets-- != 0U);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1e5a      	subs	r2, r3, #1
 80041b4:	60fa      	str	r2, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <SCB_CleanDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80041ba:	f3bf 8f4f 	dsb	sy
}
 80041be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041c0:	f3bf 8f6f 	isb	sy
}
 80041c4:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <LCD_Init+0x44>)
 80041de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d002      	beq.n	80041ea <LCD_Init+0x12>
 80041e4:	480e      	ldr	r0, [pc, #56]	; (8004220 <LCD_Init+0x48>)
 80041e6:	f7fe fbd1 	bl	800298c <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <LCD_Init+0x4c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	4619      	mov	r1, r3
 80041f2:	480a      	ldr	r0, [pc, #40]	; (800421c <LCD_Init+0x44>)
 80041f4:	f006 f928 	bl	800a448 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 80041f8:	f000 f81a 	bl	8004230 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 80041fc:	480a      	ldr	r0, [pc, #40]	; (8004228 <LCD_Init+0x50>)
 80041fe:	f000 f87d 	bl	80042fc <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004202:	f04f 30ff 	mov.w	r0, #4294967295
 8004206:	f000 f861 	bl	80042cc <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800420a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800420e:	f000 f82d 	bl	800426c <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004212:	4806      	ldr	r0, [pc, #24]	; (800422c <LCD_Init+0x54>)
 8004214:	f000 f842 	bl	800429c <LCD_SetFillColor>


}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}
 800421c:	2000153c 	.word	0x2000153c
 8004220:	080199d4 	.word	0x080199d4
 8004224:	2000000c 	.word	0x2000000c
 8004228:	2000001c 	.word	0x2000001c
 800422c:	ffff0000 	.word	0xffff0000

08004230 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8004234:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <LCD_DisplayOn+0x30>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	4b09      	ldr	r3, [pc, #36]	; (8004260 <LCD_DisplayOn+0x30>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004244:	2201      	movs	r2, #1
 8004246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800424a:	4806      	ldr	r0, [pc, #24]	; (8004264 <LCD_DisplayOn+0x34>)
 800424c:	f003 fc90 	bl	8007b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004250:	2201      	movs	r2, #1
 8004252:	2108      	movs	r1, #8
 8004254:	4804      	ldr	r0, [pc, #16]	; (8004268 <LCD_DisplayOn+0x38>)
 8004256:	f003 fc8b 	bl	8007b70 <HAL_GPIO_WritePin>
}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	2000153c 	.word	0x2000153c
 8004264:	40022000 	.word	0x40022000
 8004268:	40022800 	.word	0x40022800

0800426c <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <LCD_SetStrokeColor+0x28>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <LCD_SetStrokeColor+0x28>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fa2c 	bl	80046dc <ARGB888ToRGB565>
 8004284:	4603      	mov	r3, r0
 8004286:	461a      	mov	r2, r3
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <LCD_SetStrokeColor+0x2c>)
 800428a:	601a      	str	r2, [r3, #0]
#endif
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	200418ac 	.word	0x200418ac
 8004298:	200418b8 	.word	0x200418b8

0800429c <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 80042a4:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <LCD_SetFillColor+0x28>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <LCD_SetFillColor+0x28>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fa14 	bl	80046dc <ARGB888ToRGB565>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <LCD_SetFillColor+0x2c>)
 80042ba:	601a      	str	r2, [r3, #0]
#endif
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	200418b0 	.word	0x200418b0
 80042c8:	200418bc 	.word	0x200418bc

080042cc <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 80042d4:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <LCD_SetBackColor+0x28>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <LCD_SetBackColor+0x28>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f9fc 	bl	80046dc <ARGB888ToRGB565>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <LCD_SetBackColor+0x2c>)
 80042ea:	601a      	str	r2, [r3, #0]
#endif
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	200418b4 	.word	0x200418b4
 80042f8:	200418c0 	.word	0x200418c0

080042fc <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <LCD_SetFont+0x1c>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6013      	str	r3, [r2, #0]
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	200418c4 	.word	0x200418c4

0800431c <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	460a      	mov	r2, r1
 8004326:	80fb      	strh	r3, [r7, #6]
 8004328:	4613      	mov	r3, r2
 800432a:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <LCD_ErasePixel+0x3c>)
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <LCD_ErasePixel+0x40>)
 8004332:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004334:	88ba      	ldrh	r2, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	015b      	lsls	r3, r3, #5
 800433e:	461a      	mov	r2, r3
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	4413      	add	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	440b      	add	r3, r1
 8004348:	b282      	uxth	r2, r0
 800434a:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
 800434c:	f7ff ff08 	bl	8004160 <SCB_CleanDCache>
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	200418c0 	.word	0x200418c0
 800435c:	2000153c 	.word	0x2000153c

08004360 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <LCD_Clear+0x28>)
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	4618      	mov	r0, r3
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <LCD_Clear+0x2c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004378:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800437c:	f000 f976 	bl	800466c <LL_FillBuffer>
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	2000153c 	.word	0x2000153c
 800438c:	200418b4 	.word	0x200418b4

08004390 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	80fb      	strh	r3, [r7, #6]
 80043a2:	4603      	mov	r3, r0
 80043a4:	80bb      	strh	r3, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	70fb      	strb	r3, [r7, #3]
 80043aa:	4613      	mov	r3, r2
 80043ac:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <LCD_DrawChar+0x5c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	3b20      	subs	r3, #32
 80043b8:	490c      	ldr	r1, [pc, #48]	; (80043ec <LCD_DrawChar+0x5c>)
 80043ba:	6809      	ldr	r1, [r1, #0]
 80043bc:	88c9      	ldrh	r1, [r1, #6]
 80043be:	fb03 f101 	mul.w	r1, r3, r1
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <LCD_DrawChar+0x5c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	889b      	ldrh	r3, [r3, #4]
 80043c8:	3307      	adds	r3, #7
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	da00      	bge.n	80043d0 <LCD_DrawChar+0x40>
 80043ce:	3307      	adds	r3, #7
 80043d0:	10db      	asrs	r3, r3, #3
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	441a      	add	r2, r3
 80043d8:	78bb      	ldrb	r3, [r7, #2]
 80043da:	88b9      	ldrh	r1, [r7, #4]
 80043dc:	88f8      	ldrh	r0, [r7, #6]
 80043de:	f000 f89d 	bl	800451c <DrawChar>

}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd90      	pop	{r4, r7, pc}
 80043ea:	bf00      	nop
 80043ec:	200418c4 	.word	0x200418c4

080043f0 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60ba      	str	r2, [r7, #8]
 80043f8:	461a      	mov	r2, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	81fb      	strh	r3, [r7, #14]
 80043fe:	460b      	mov	r3, r1
 8004400:	81bb      	strh	r3, [r7, #12]
 8004402:	4613      	mov	r3, r2
 8004404:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8004406:	2301      	movs	r3, #1
 8004408:	83fb      	strh	r3, [r7, #30]
 800440a:	2300      	movs	r3, #0
 800440c:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 800441a:	e002      	b.n	8004422 <LCD_DrawString+0x32>
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	3301      	adds	r3, #1
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	617a      	str	r2, [r7, #20]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f6      	bne.n	800441c <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 800442e:	4b3a      	ldr	r3, [pc, #232]	; (8004518 <LCD_DrawString+0x128>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	889b      	ldrh	r3, [r3, #4]
 8004434:	461a      	mov	r2, r3
 8004436:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800443a:	fb93 f3f2 	sdiv	r3, r3, r2
 800443e:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	2b03      	cmp	r3, #3
 8004444:	d014      	beq.n	8004470 <LCD_DrawString+0x80>
 8004446:	2b03      	cmp	r3, #3
 8004448:	dc23      	bgt.n	8004492 <LCD_DrawString+0xa2>
 800444a:	2b01      	cmp	r3, #1
 800444c:	d002      	beq.n	8004454 <LCD_DrawString+0x64>
 800444e:	2b02      	cmp	r3, #2
 8004450:	d011      	beq.n	8004476 <LCD_DrawString+0x86>
 8004452:	e01e      	b.n	8004492 <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <LCD_DrawString+0x128>)
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	8892      	ldrh	r2, [r2, #4]
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	89fb      	ldrh	r3, [r7, #14]
 800446a:	4413      	add	r3, r2
 800446c:	83fb      	strh	r3, [r7, #30]
		break;
 800446e:	e013      	b.n	8004498 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8004470:	89fb      	ldrh	r3, [r7, #14]
 8004472:	83fb      	strh	r3, [r7, #30]
		break;
 8004474:	e010      	b.n	8004498 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	b29a      	uxth	r2, r3
 800447e:	4b26      	ldr	r3, [pc, #152]	; (8004518 <LCD_DrawString+0x128>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	889b      	ldrh	r3, [r3, #4]
 8004484:	fb12 f303 	smulbb	r3, r2, r3
 8004488:	b29a      	uxth	r2, r3
 800448a:	89fb      	ldrh	r3, [r7, #14]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	83fb      	strh	r3, [r7, #30]
		break;
 8004490:	e002      	b.n	8004498 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8004492:	89fb      	ldrh	r3, [r7, #14]
 8004494:	83fb      	strh	r3, [r7, #30]
		break;
 8004496:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8004498:	8bfb      	ldrh	r3, [r7, #30]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <LCD_DrawString+0xb6>
 800449e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	da16      	bge.n	80044d4 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80044aa:	e013      	b.n	80044d4 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781a      	ldrb	r2, [r3, #0]
 80044b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044b4:	89b9      	ldrh	r1, [r7, #12]
 80044b6:	8bf8      	ldrh	r0, [r7, #30]
 80044b8:	f7ff ff6a 	bl	8004390 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <LCD_DrawString+0x128>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	889a      	ldrh	r2, [r3, #4]
 80044c2:	8bfb      	ldrh	r3, [r7, #30]
 80044c4:	4413      	add	r3, r2
 80044c6:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	3301      	adds	r3, #1
 80044cc:	60bb      	str	r3, [r7, #8]
		i++;
 80044ce:	8bbb      	ldrh	r3, [r7, #28]
 80044d0:	3301      	adds	r3, #1
 80044d2:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	8bbb      	ldrh	r3, [r7, #28]
 80044e4:	490c      	ldr	r1, [pc, #48]	; (8004518 <LCD_DrawString+0x128>)
 80044e6:	6809      	ldr	r1, [r1, #0]
 80044e8:	8889      	ldrh	r1, [r1, #4]
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	4908      	ldr	r1, [pc, #32]	; (8004518 <LCD_DrawString+0x128>)
 80044f6:	6809      	ldr	r1, [r1, #0]
 80044f8:	8889      	ldrh	r1, [r1, #4]
 80044fa:	428b      	cmp	r3, r1
 80044fc:	bfac      	ite	ge
 80044fe:	2301      	movge	r3, #1
 8004500:	2300      	movlt	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4013      	ands	r3, r2
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1cf      	bne.n	80044ac <LCD_DrawString+0xbc>
	}
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200418c4 	.word	0x200418c4

0800451c <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b08b      	sub	sp, #44	; 0x2c
 8004520:	af00      	add	r7, sp, #0
 8004522:	60ba      	str	r2, [r7, #8]
 8004524:	461a      	mov	r2, r3
 8004526:	4603      	mov	r3, r0
 8004528:	81fb      	strh	r3, [r7, #14]
 800452a:	460b      	mov	r3, r1
 800452c:	81bb      	strh	r3, [r7, #12]
 800452e:	4613      	mov	r3, r2
 8004530:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	2300      	movs	r3, #0
 8004538:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 800453a:	4b49      	ldr	r3, [pc, #292]	; (8004660 <DrawChar+0x144>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	88db      	ldrh	r3, [r3, #6]
 8004540:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 8004542:	4b47      	ldr	r3, [pc, #284]	; (8004660 <DrawChar+0x144>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	889b      	ldrh	r3, [r3, #4]
 8004548:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 800454a:	8b3b      	ldrh	r3, [r7, #24]
 800454c:	3307      	adds	r3, #7
 800454e:	2b00      	cmp	r3, #0
 8004550:	da00      	bge.n	8004554 <DrawChar+0x38>
 8004552:	3307      	adds	r3, #7
 8004554:	10db      	asrs	r3, r3, #3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	b2da      	uxtb	r2, r3
 800455c:	8b3b      	ldrh	r3, [r7, #24]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
 8004568:	e070      	b.n	800464c <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800456a:	8b3b      	ldrh	r3, [r7, #24]
 800456c:	3307      	adds	r3, #7
 800456e:	2b00      	cmp	r3, #0
 8004570:	da00      	bge.n	8004574 <DrawChar+0x58>
 8004572:	3307      	adds	r3, #7
 8004574:	10db      	asrs	r3, r3, #3
 8004576:	461a      	mov	r2, r3
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	4413      	add	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8004584:	8b3b      	ldrh	r3, [r7, #24]
 8004586:	3307      	adds	r3, #7
 8004588:	2b00      	cmp	r3, #0
 800458a:	da00      	bge.n	800458e <DrawChar+0x72>
 800458c:	3307      	adds	r3, #7
 800458e:	10db      	asrs	r3, r3, #3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d002      	beq.n	800459a <DrawChar+0x7e>
 8004594:	2b02      	cmp	r3, #2
 8004596:	d004      	beq.n	80045a2 <DrawChar+0x86>
 8004598:	e00c      	b.n	80045b4 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	61fb      	str	r3, [r7, #28]
			break;
 80045a0:	e016      	b.n	80045d0 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	3201      	adds	r2, #1
 80045ac:	7812      	ldrb	r2, [r2, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61fb      	str	r3, [r7, #28]
			break;
 80045b2:	e00d      	b.n	80045d0 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	041a      	lsls	r2, r3, #16
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	3301      	adds	r3, #1
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	4313      	orrs	r3, r2
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	3202      	adds	r2, #2
 80045c8:	7812      	ldrb	r2, [r2, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61fb      	str	r3, [r7, #28]
			break;
 80045ce:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	e030      	b.n	8004638 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 80045d6:	8b3a      	ldrh	r2, [r7, #24]
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
 80045de:	4413      	add	r3, r2
 80045e0:	3b01      	subs	r3, #1
 80045e2:	2201      	movs	r2, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d012      	beq.n	8004618 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 80045f2:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <DrawChar+0x148>)
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <DrawChar+0x14c>)
 80045f8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80045fa:	89ba      	ldrh	r2, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	015b      	lsls	r3, r3, #5
 8004604:	461c      	mov	r4, r3
 8004606:	89fa      	ldrh	r2, [r7, #14]
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	4413      	add	r3, r2
 800460c:	4423      	add	r3, r4
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	440b      	add	r3, r1
 8004612:	b282      	uxth	r2, r0
 8004614:	801a      	strh	r2, [r3, #0]
 8004616:	e00c      	b.n	8004632 <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d109      	bne.n	8004632 <DrawChar+0x116>
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	b29a      	uxth	r2, r3
 8004622:	89fb      	ldrh	r3, [r7, #14]
 8004624:	4413      	add	r3, r2
 8004626:	b29b      	uxth	r3, r3
 8004628:	89ba      	ldrh	r2, [r7, #12]
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fe75 	bl	800431c <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	3301      	adds	r3, #1
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	8b3b      	ldrh	r3, [r7, #24]
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	429a      	cmp	r2, r3
 800463e:	d3ca      	bcc.n	80045d6 <DrawChar+0xba>
			}
		}
		Ypos++;
 8004640:	89bb      	ldrh	r3, [r7, #12]
 8004642:	3301      	adds	r3, #1
 8004644:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	3301      	adds	r3, #1
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	8b7b      	ldrh	r3, [r7, #26]
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	429a      	cmp	r2, r3
 8004652:	d38a      	bcc.n	800456a <DrawChar+0x4e>
	}

	__CleanDCache();
 8004654:	f7ff fd84 	bl	8004160 <SCB_CleanDCache>
}
 8004658:	bf00      	nop
 800465a:	372c      	adds	r7, #44	; 0x2c
 800465c:	46bd      	mov	sp, r7
 800465e:	bd90      	pop	{r4, r7, pc}
 8004660:	200418c4 	.word	0x200418c4
 8004664:	200418b8 	.word	0x200418b8
 8004668:	2000153c 	.word	0x2000153c

0800466c <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 800467a:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <LL_FillBuffer+0x68>)
 800467c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004680:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <LL_FillBuffer+0x68>)
 8004684:	2202      	movs	r2, #2
 8004686:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 8004688:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <LL_FillBuffer+0x68>)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <LL_FillBuffer+0x68>)
 8004690:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <LL_FillBuffer+0x6c>)
 8004692:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004694:	480f      	ldr	r0, [pc, #60]	; (80046d4 <LL_FillBuffer+0x68>)
 8004696:	f002 fbff 	bl	8006e98 <HAL_DMA2D_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d115      	bne.n	80046cc <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 80046a0:	2100      	movs	r1, #0
 80046a2:	480c      	ldr	r0, [pc, #48]	; (80046d4 <LL_FillBuffer+0x68>)
 80046a4:	f002 fe66 	bl	8007374 <HAL_DMA2D_ConfigLayer>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10e      	bne.n	80046cc <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	69b9      	ldr	r1, [r7, #24]
 80046b8:	4806      	ldr	r0, [pc, #24]	; (80046d4 <LL_FillBuffer+0x68>)
 80046ba:	f002 fc37 	bl	8006f2c <HAL_DMA2D_Start>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 80046c4:	210a      	movs	r1, #10
 80046c6:	4803      	ldr	r0, [pc, #12]	; (80046d4 <LL_FillBuffer+0x68>)
 80046c8:	f002 fc5b 	bl	8006f82 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20001464 	.word	0x20001464
 80046d8:	4002b000 	.word	0x4002b000

080046dc <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	0c1b      	lsrs	r3, r3, #16
 80046e8:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 80046f4:	7d7b      	ldrb	r3, [r7, #21]
 80046f6:	08db      	lsrs	r3, r3, #3
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8004702:	7dbb      	ldrb	r3, [r7, #22]
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	015b      	lsls	r3, r3, #5
 800470a:	b29b      	uxth	r3, r3
 800470c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004710:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	08db      	lsrs	r3, r3, #3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	02db      	lsls	r3, r3, #11
 800471a:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 800471c:	89fa      	ldrh	r2, [r7, #14]
 800471e:	8a3b      	ldrh	r3, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	b29a      	uxth	r2, r3
 8004724:	8a7b      	ldrh	r3, [r7, #18]
 8004726:	4313      	orrs	r3, r2
 8004728:	b29b      	uxth	r3, r3
}
 800472a:	4618      	mov	r0, r3
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b090      	sub	sp, #64	; 0x40
 800473c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800473e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004742:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004744:	23eb      	movs	r3, #235	; 0xeb
 8004746:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004748:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800474e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004752:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004754:	2300      	movs	r3, #0
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004758:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800475e:	230a      	movs	r3, #10
 8004760:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004762:	2300      	movs	r3, #0
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004766:	2300      	movs	r3, #0
 8004768:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800476a:	2300      	movs	r3, #0
 800476c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004776:	463a      	mov	r2, r7
 8004778:	f107 0308 	add.w	r3, r7, #8
 800477c:	4619      	mov	r1, r3
 800477e:	4806      	ldr	r0, [pc, #24]	; (8004798 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8004780:	f006 fcdc 	bl	800b13c <HAL_QSPI_MemoryMapped>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3740      	adds	r7, #64	; 0x40
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	200015e4 	.word	0x200015e4

0800479c <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b090      	sub	sp, #64	; 0x40
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80047a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047a8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 80047aa:	2366      	movs	r3, #102	; 0x66
 80047ac:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80047be:	2300      	movs	r3, #0
 80047c0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047c2:	2300      	movs	r3, #0
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80047c6:	2300      	movs	r3, #0
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047ca:	f107 0308 	add.w	r3, r7, #8
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f006 faa3 	bl	800ad20 <HAL_QSPI_Command>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e019      	b.n	8004818 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80047e4:	2399      	movs	r3, #153	; 0x99
 80047e6:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f006 fa94 	bl	800ad20 <HAL_QSPI_Command>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e00a      	b.n	8004818 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004802:	f241 3188 	movw	r1, #5000	; 0x1388
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8c7 	bl	800499a <QSPI_AutoPollingMemReady>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3740      	adds	r7, #64	; 0x40
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b094      	sub	sp, #80	; 0x50
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800482e:	2385      	movs	r3, #133	; 0x85
 8004830:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004832:	2300      	movs	r3, #0
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004836:	2300      	movs	r3, #0
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800483a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800483e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8004844:	2301      	movs	r3, #1
 8004846:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004848:	2300      	movs	r3, #0
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800484c:	2300      	movs	r3, #0
 800484e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004850:	2300      	movs	r3, #0
 8004852:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004854:	f107 0310 	add.w	r3, r7, #16
 8004858:	f241 3288 	movw	r2, #5000	; 0x1388
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f006 fa5e 	bl	800ad20 <HAL_QSPI_Command>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e048      	b.n	8004900 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800486e:	f107 030f 	add.w	r3, r7, #15
 8004872:	f241 3288 	movw	r2, #5000	; 0x1388
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f006 fb46 	bl	800af0a <HAL_QSPI_Receive>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e03b      	b.n	8004900 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f83d 	bl	8004908 <QSPI_WriteEnable>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e033      	b.n	8004900 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004898:	2381      	movs	r3, #129	; 0x81
 800489a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	b25b      	sxtb	r3, r3
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	b25a      	sxtb	r2, r3
 80048a6:	23f0      	movs	r3, #240	; 0xf0
 80048a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b4:	fab3 f383 	clz	r3, r3
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	4619      	mov	r1, r3
 80048bc:	230a      	movs	r3, #10
 80048be:	408b      	lsls	r3, r1
 80048c0:	b25b      	sxtb	r3, r3
 80048c2:	4313      	orrs	r3, r2
 80048c4:	b25b      	sxtb	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048ca:	f107 0310 	add.w	r3, r7, #16
 80048ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f006 fa23 	bl	800ad20 <HAL_QSPI_Command>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e00d      	b.n	8004900 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048e4:	f107 030f 	add.w	r3, r7, #15
 80048e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f006 fa74 	bl	800addc <HAL_QSPI_Transmit>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3750      	adds	r7, #80	; 0x50
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b096      	sub	sp, #88	; 0x58
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004914:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004916:	2306      	movs	r3, #6
 8004918:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800491a:	2300      	movs	r3, #0
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800491e:	2300      	movs	r3, #0
 8004920:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8004922:	2300      	movs	r3, #0
 8004924:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800492a:	2300      	movs	r3, #0
 800492c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800492e:	2300      	movs	r3, #0
 8004930:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004932:	2300      	movs	r3, #0
 8004934:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004936:	f107 0320 	add.w	r3, r7, #32
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f006 f9ed 	bl	800ad20 <HAL_QSPI_Command>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e020      	b.n	8004992 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8004950:	2302      	movs	r3, #2
 8004952:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8004954:	2302      	movs	r3, #2
 8004956:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004960:	2310      	movs	r3, #16
 8004962:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004964:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004968:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 800496a:	2305      	movs	r3, #5
 800496c:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800496e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004972:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004974:	f107 0208 	add.w	r2, r7, #8
 8004978:	f107 0120 	add.w	r1, r7, #32
 800497c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f006 fb64 	bl	800b04e <HAL_QSPI_AutoPolling>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3758      	adds	r7, #88	; 0x58
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b096      	sub	sp, #88	; 0x58
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80049a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049a8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80049aa:	2305      	movs	r3, #5
 80049ac:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80049b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049ba:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049c4:	2300      	movs	r3, #0
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049c8:	2300      	movs	r3, #0
 80049ca:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 80049d0:	2301      	movs	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80049dc:	2310      	movs	r3, #16
 80049de:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80049e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049e4:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80049e6:	f107 0208 	add.w	r2, r7, #8
 80049ea:	f107 0120 	add.w	r1, r7, #32
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f006 fb2c 	bl	800b04e <HAL_QSPI_AutoPolling>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3758      	adds	r7, #88	; 0x58
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <startAudioDMA>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void startAudioDMA(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]

	__HAL_RCC_SAI2_CLK_ENABLE(); // bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8004a18:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <startAudioDMA+0xac>)
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <startAudioDMA+0xac>)
 8004a1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a22:	6453      	str	r3, [r2, #68]	; 0x44
 8004a24:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <startAudioDMA+0xac>)
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC
	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8004a30:	2034      	movs	r0, #52	; 0x34
 8004a32:	f000 fe5b 	bl	80056ec <wm8994_ReadID>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f648 1294 	movw	r2, #35220	; 0x8994
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d001      	beq.n	8004a44 <startAudioDMA+0x38>
 8004a40:	f7fe f80a 	bl	8002a58 <Error_Handler>

	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8004a44:	2034      	movs	r0, #52	; 0x34
 8004a46:	f000 ff99 	bl	800597c <wm8994_Reset>

	switch (hsai_BlockB2.SlotInit.SlotActive) {
 8004a4a:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <startAudioDMA+0xb0>)
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	d002      	beq.n	8004a58 <startAudioDMA+0x4c>
 8004a52:	2b0a      	cmp	r3, #10
 8004a54:	d009      	beq.n	8004a6a <startAudioDMA+0x5e>
 8004a56:	e011      	b.n	8004a7c <startAudioDMA+0x70>

	// line in (slot 0 L/R, violet jack):
	case 0x5:
		wm8994_Init(INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE,
 8004a58:	4b19      	ldr	r3, [pc, #100]	; (8004ac0 <startAudioDMA+0xb4>)
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	214b      	movs	r1, #75	; 0x4b
 8004a60:	f240 3002 	movw	r0, #770	; 0x302
 8004a64:	f000 f8e0 	bl	8004c28 <wm8994_Init>
				DEFAULT_LINEIN_VOLUME, hsai_BlockA2.Init.AudioFrequency);
		break;
 8004a68:	e00d      	b.n	8004a86 <startAudioDMA+0x7a>

		// microphones (slot 1 L/R):
	case 0xA:
		wm8994_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE,
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <startAudioDMA+0xb4>)
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	21c8      	movs	r1, #200	; 0xc8
 8004a72:	f240 2002 	movw	r0, #514	; 0x202
 8004a76:	f000 f8d7 	bl	8004c28 <wm8994_Init>
				DEFAULT_MICIN_VOLUME, hsai_BlockA2.Init.AudioFrequency);
		break;
 8004a7a:	e004      	b.n	8004a86 <startAudioDMA+0x7a>

	default:
		printf("Unsupported audio input in hsai_BlockB2.SlotInit.SlotActive\n");
 8004a7c:	4811      	ldr	r0, [pc, #68]	; (8004ac4 <startAudioDMA+0xb8>)
 8004a7e:	f013 fbd5 	bl	801822c <puts>
		Error_Handler();
 8004a82:	f7fd ffe9 	bl	8002a58 <Error_Handler>
	}

	// unmute CODEC output
	wm8994_SetMute(AUDIO_MUTE_OFF);
 8004a86:	2000      	movs	r0, #0
 8004a88:	f000 ff38 	bl	80058fc <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	4809      	ldr	r0, [pc, #36]	; (8004abc <startAudioDMA+0xb0>)
 8004a96:	f008 fec1 	bl	800d81c <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	4807      	ldr	r0, [pc, #28]	; (8004ac0 <startAudioDMA+0xb4>)
 8004aa4:	f008 fe0a 	bl	800d6bc <HAL_SAI_Transmit_DMA>

	printf("SAI (audio) DMA started: OK\n");
 8004aa8:	4807      	ldr	r0, [pc, #28]	; (8004ac8 <startAudioDMA+0xbc>)
 8004aaa:	f013 fbbf 	bl	801822c <puts>


}
 8004aae:	bf00      	nop
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	200016d4 	.word	0x200016d4
 8004ac0:	20001650 	.word	0x20001650
 8004ac4:	08019a24 	.word	0x08019a24
 8004ac8:	08019a60 	.word	0x08019a60

08004acc <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <HAL_SAI_ErrorCallback+0x30>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d103      	bne.n	8004b0c <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8004b04:	4808      	ldr	r0, [pc, #32]	; (8004b28 <HAL_SAI_ErrorCallback+0x34>)
 8004b06:	f013 fb91 	bl	801822c <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8004b0a:	e006      	b.n	8004b1a <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a07      	ldr	r2, [pc, #28]	; (8004b2c <HAL_SAI_ErrorCallback+0x38>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d102      	bne.n	8004b1a <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8004b14:	4806      	ldr	r0, [pc, #24]	; (8004b30 <HAL_SAI_ErrorCallback+0x3c>)
 8004b16:	f013 fb89 	bl	801822c <puts>
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20001650 	.word	0x20001650
 8004b28:	08019a7c 	.word	0x08019a7c
 8004b2c:	200016d4 	.word	0x200016d4
 8004b30:	08019a8c 	.word	0x08019a8c

08004b34 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004b40:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b46:	4b29      	ldr	r3, [pc, #164]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b48:	2210      	movs	r2, #16
 8004b4a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b4c:	4b27      	ldr	r3, [pc, #156]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b52:	4b26      	ldr	r3, [pc, #152]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b5c:	4923      	ldr	r1, [pc, #140]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b5e:	4824      	ldr	r0, [pc, #144]	; (8004bf0 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004b60:	f00a f8db 	bl	800ed1a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004b64:	2001      	movs	r0, #1
 8004b66:	f000 ff8d 	bl	8005a84 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b70:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b72:	2210      	movs	r2, #16
 8004b74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b76:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b86:	4919      	ldr	r1, [pc, #100]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b88:	4819      	ldr	r0, [pc, #100]	; (8004bf0 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004b8a:	f00a f8c6 	bl	800ed1a <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b90:	2203      	movs	r2, #3
 8004b92:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b94:	4b15      	ldr	r3, [pc, #84]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b96:	2210      	movs	r2, #16
 8004b98:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004b9a:	4b14      	ldr	r3, [pc, #80]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004baa:	4910      	ldr	r1, [pc, #64]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bac:	4810      	ldr	r0, [pc, #64]	; (8004bf0 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004bae:	f00a f8b4 	bl	800ed1a <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004bb2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004bb6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bba:	2204      	movs	r2, #4
 8004bbc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4a07      	ldr	r2, [pc, #28]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bce:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd4:	4905      	ldr	r1, [pc, #20]	; (8004bec <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bd6:	4806      	ldr	r0, [pc, #24]	; (8004bf0 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004bd8:	f00a f89f 	bl	800ed1a <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4804      	ldr	r0, [pc, #16]	; (8004bf0 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004be0:	f00a f8c6 	bl	800ed70 <HAL_SDRAM_ProgramRefreshRate>
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	200418c8 	.word	0x200418c8
 8004bf0:	20001c18 	.word	0x20001c18

08004bf4 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8004bf8:	20c8      	movs	r0, #200	; 0xc8
 8004bfa:	f000 ff43 	bl	8005a84 <HAL_Delay>

	TS_DisableIT();
 8004bfe:	f000 f802 	bl	8004c06 <TS_DisableIT>

}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004c10:	2300      	movs	r3, #0
 8004c12:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	4619      	mov	r1, r3
 8004c18:	20a4      	movs	r0, #164	; 0xa4
 8004c1a:	f7ff fa87 	bl	800412c <TS_I2C_Write>
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	603a      	str	r2, [r7, #0]
 8004c32:	80fb      	strh	r3, [r7, #6]
 8004c34:	460b      	mov	r3, r1
 8004c36:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004c3c:	88fb      	ldrh	r3, [r7, #6]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	823b      	strh	r3, [r7, #16]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c48:	81fb      	strh	r3, [r7, #14]
  uint16_t power_mgnt_reg_1 = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	827b      	strh	r3, [r7, #18]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(0x102, 0x0003);
 8004c4e:	2103      	movs	r1, #3
 8004c50:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004c54:	f000 feac 	bl	80059b0 <CODEC_IO_Write>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	4413      	add	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(0x817, 0x0000);
 8004c62:	2100      	movs	r1, #0
 8004c64:	f640 0017 	movw	r0, #2071	; 0x817
 8004c68:	f000 fea2 	bl	80059b0 <CODEC_IO_Write>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(0x102, 0x0000);
 8004c76:	2100      	movs	r1, #0
 8004c78:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004c7c:	f000 fe98 	bl	80059b0 <CODEC_IO_Write>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461a      	mov	r2, r3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	4413      	add	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(0x39, 0x006C);
 8004c8a:	216c      	movs	r1, #108	; 0x6c
 8004c8c:	2039      	movs	r0, #57	; 0x39
 8004c8e:	f000 fe8f 	bl	80059b0 <CODEC_IO_Write>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4413      	add	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004c9c:	89fb      	ldrh	r3, [r7, #14]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <wm8994_Init+0x8e>
  {
    counter += CODEC_IO_Write(0x01, 0x0013);
 8004ca2:	2113      	movs	r1, #19
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f000 fe83 	bl	80059b0 <CODEC_IO_Write>
 8004caa:	4603      	mov	r3, r0
 8004cac:	461a      	mov	r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e008      	b.n	8004cc8 <wm8994_Init+0xa0>
  }
  else
  {
    counter += CODEC_IO_Write(0x01, 0x0003);
 8004cb6:	2103      	movs	r1, #3
 8004cb8:	2001      	movs	r0, #1
 8004cba:	f000 fe79 	bl	80059b0 <CODEC_IO_Write>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
  }

  /* Add Delay */
  HAL_Delay(50);
 8004cc8:	2032      	movs	r0, #50	; 0x32
 8004cca:	f000 fedb 	bl	8005a84 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8004cce:	8a3b      	ldrh	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8111 	beq.w	8004ef8 <wm8994_Init+0x2d0>
  {
    outputEnabled = 1;
 8004cd6:	4bb8      	ldr	r3, [pc, #736]	; (8004fb8 <wm8994_Init+0x390>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8004cdc:	8a3b      	ldrh	r3, [r7, #16]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d06d      	beq.n	8004dbe <wm8994_Init+0x196>
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	f300 80d5 	bgt.w	8004e92 <wm8994_Init+0x26a>
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d002      	beq.n	8004cf2 <wm8994_Init+0xca>
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d033      	beq.n	8004d58 <wm8994_Init+0x130>
 8004cf0:	e0cf      	b.n	8004e92 <wm8994_Init+0x26a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0C0C);
 8004cf2:	f640 410c 	movw	r1, #3084	; 0xc0c
 8004cf6:	2005      	movs	r0, #5
 8004cf8:	f000 fe5a 	bl	80059b0 <CODEC_IO_Write>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	461a      	mov	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	4413      	add	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0000);
 8004d06:	2100      	movs	r1, #0
 8004d08:	f240 6001 	movw	r0, #1537	; 0x601
 8004d0c:	f000 fe50 	bl	80059b0 <CODEC_IO_Write>
 8004d10:	4603      	mov	r3, r0
 8004d12:	461a      	mov	r2, r3
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	4413      	add	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0000);
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	f240 6002 	movw	r0, #1538	; 0x602
 8004d20:	f000 fe46 	bl	80059b0 <CODEC_IO_Write>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0002);
 8004d2e:	2102      	movs	r1, #2
 8004d30:	f240 6004 	movw	r0, #1540	; 0x604
 8004d34:	f000 fe3c 	bl	80059b0 <CODEC_IO_Write>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	4413      	add	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0002);
 8004d42:	2102      	movs	r1, #2
 8004d44:	f240 6005 	movw	r0, #1541	; 0x605
 8004d48:	f000 fe32 	bl	80059b0 <CODEC_IO_Write>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4413      	add	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
      break;
 8004d56:	e0d2      	b.n	8004efe <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0303);
 8004d58:	f240 3103 	movw	r1, #771	; 0x303
 8004d5c:	2005      	movs	r0, #5
 8004d5e:	f000 fe27 	bl	80059b0 <CODEC_IO_Write>
 8004d62:	4603      	mov	r3, r0
 8004d64:	461a      	mov	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0001);
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	f240 6001 	movw	r0, #1537	; 0x601
 8004d72:	f000 fe1d 	bl	80059b0 <CODEC_IO_Write>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0001);
 8004d80:	2101      	movs	r1, #1
 8004d82:	f240 6002 	movw	r0, #1538	; 0x602
 8004d86:	f000 fe13 	bl	80059b0 <CODEC_IO_Write>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4413      	add	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0000);
 8004d94:	2100      	movs	r1, #0
 8004d96:	f240 6004 	movw	r0, #1540	; 0x604
 8004d9a:	f000 fe09 	bl	80059b0 <CODEC_IO_Write>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4413      	add	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0000);
 8004da8:	2100      	movs	r1, #0
 8004daa:	f240 6005 	movw	r0, #1541	; 0x605
 8004dae:	f000 fdff 	bl	80059b0 <CODEC_IO_Write>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
      break;
 8004dbc:	e09f      	b.n	8004efe <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004dbe:	89fb      	ldrh	r3, [r7, #14]
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc4:	d132      	bne.n	8004e2c <wm8994_Init+0x204>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(0x05, 0x0303 | 0x0C0C);
 8004dc6:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004dca:	2005      	movs	r0, #5
 8004dcc:	f000 fdf0 	bl	80059b0 <CODEC_IO_Write>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(0x601, 0x0003);
 8004dda:	2103      	movs	r1, #3
 8004ddc:	f240 6001 	movw	r0, #1537	; 0x601
 8004de0:	f000 fde6 	bl	80059b0 <CODEC_IO_Write>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	4413      	add	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(0x602, 0x0003);
 8004dee:	2103      	movs	r1, #3
 8004df0:	f240 6002 	movw	r0, #1538	; 0x602
 8004df4:	f000 fddc 	bl	80059b0 <CODEC_IO_Write>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	4413      	add	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(0x604, 0x0003);
 8004e02:	2103      	movs	r1, #3
 8004e04:	f240 6004 	movw	r0, #1540	; 0x604
 8004e08:	f000 fdd2 	bl	80059b0 <CODEC_IO_Write>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(0x605, 0x0003);
 8004e16:	2103      	movs	r1, #3
 8004e18:	f240 6005 	movw	r0, #1541	; 0x605
 8004e1c:	f000 fdc8 	bl	80059b0 <CODEC_IO_Write>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	4413      	add	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(0x605, 0x0002);
      }
      break;
 8004e2a:	e068      	b.n	8004efe <wm8994_Init+0x2d6>
        counter += CODEC_IO_Write(0x05, 0x0303 | 0x0C0C);
 8004e2c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004e30:	2005      	movs	r0, #5
 8004e32:	f000 fdbd 	bl	80059b0 <CODEC_IO_Write>
 8004e36:	4603      	mov	r3, r0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x601, 0x0001);
 8004e40:	2101      	movs	r1, #1
 8004e42:	f240 6001 	movw	r0, #1537	; 0x601
 8004e46:	f000 fdb3 	bl	80059b0 <CODEC_IO_Write>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	4413      	add	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x602, 0x0001);
 8004e54:	2101      	movs	r1, #1
 8004e56:	f240 6002 	movw	r0, #1538	; 0x602
 8004e5a:	f000 fda9 	bl	80059b0 <CODEC_IO_Write>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	461a      	mov	r2, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x604, 0x0002);
 8004e68:	2102      	movs	r1, #2
 8004e6a:	f240 6004 	movw	r0, #1540	; 0x604
 8004e6e:	f000 fd9f 	bl	80059b0 <CODEC_IO_Write>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461a      	mov	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4413      	add	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x605, 0x0002);
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	f240 6005 	movw	r0, #1541	; 0x605
 8004e82:	f000 fd95 	bl	80059b0 <CODEC_IO_Write>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
      break;
 8004e90:	e035      	b.n	8004efe <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0303);
 8004e92:	f240 3103 	movw	r1, #771	; 0x303
 8004e96:	2005      	movs	r0, #5
 8004e98:	f000 fd8a 	bl	80059b0 <CODEC_IO_Write>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0001);
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	f240 6001 	movw	r0, #1537	; 0x601
 8004eac:	f000 fd80 	bl	80059b0 <CODEC_IO_Write>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0001);
 8004eba:	2101      	movs	r1, #1
 8004ebc:	f240 6002 	movw	r0, #1538	; 0x602
 8004ec0:	f000 fd76 	bl	80059b0 <CODEC_IO_Write>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0000);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	f240 6004 	movw	r0, #1540	; 0x604
 8004ed4:	f000 fd6c 	bl	80059b0 <CODEC_IO_Write>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4413      	add	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0000);
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	f240 6005 	movw	r0, #1541	; 0x605
 8004ee8:	f000 fd62 	bl	80059b0 <CODEC_IO_Write>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
      break;
 8004ef6:	e002      	b.n	8004efe <wm8994_Init+0x2d6>
    }
  }
  else
  {
    outputEnabled = 0;
 8004ef8:	4b2f      	ldr	r3, [pc, #188]	; (8004fb8 <wm8994_Init+0x390>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8004efe:	89fb      	ldrh	r3, [r7, #14]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8151 	beq.w	80051a8 <wm8994_Init+0x580>
  {
    inputEnabled = 1;
 8004f06:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <wm8994_Init+0x394>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f12:	f000 80ea 	beq.w	80050ea <wm8994_Init+0x4c2>
 8004f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1a:	f300 8141 	bgt.w	80051a0 <wm8994_Init+0x578>
 8004f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f22:	d04d      	beq.n	8004fc0 <wm8994_Init+0x398>
 8004f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f28:	f300 813a 	bgt.w	80051a0 <wm8994_Init+0x578>
 8004f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f30:	f000 809e 	beq.w	8005070 <wm8994_Init+0x448>
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f38:	f040 8132 	bne.w	80051a0 <wm8994_Init+0x578>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0C30);
 8004f3c:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 8004f40:	2004      	movs	r0, #4
 8004f42:	f000 fd35 	bl	80059b0 <CODEC_IO_Write>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(0x450, 0x00DB);
 8004f50:	21db      	movs	r1, #219	; 0xdb
 8004f52:	f44f 608a 	mov.w	r0, #1104	; 0x450
 8004f56:	f000 fd2b 	bl	80059b0 <CODEC_IO_Write>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4413      	add	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6000);
 8004f64:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004f68:	2002      	movs	r0, #2
 8004f6a:	f000 fd21 	bl	80059b0 <CODEC_IO_Write>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	461a      	mov	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	4413      	add	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x608, 0x0002);
 8004f78:	2102      	movs	r1, #2
 8004f7a:	f44f 60c1 	mov.w	r0, #1544	; 0x608
 8004f7e:	f000 fd17 	bl	80059b0 <CODEC_IO_Write>
 8004f82:	4603      	mov	r3, r0
 8004f84:	461a      	mov	r2, r3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x609, 0x0002);
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	f240 6009 	movw	r0, #1545	; 0x609
 8004f92:	f000 fd0d 	bl	80059b0 <CODEC_IO_Write>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000E);
 8004fa0:	210e      	movs	r1, #14
 8004fa2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8004fa6:	f000 fd03 	bl	80059b0 <CODEC_IO_Write>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
      break;
 8004fb4:	e0fb      	b.n	80051ae <wm8994_Init+0x586>
 8004fb6:	bf00      	nop
 8004fb8:	200418d8 	.word	0x200418d8
 8004fbc:	200418dc 	.word	0x200418dc

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(0x28, 0x0011);
 8004fc0:	2111      	movs	r1, #17
 8004fc2:	2028      	movs	r0, #40	; 0x28
 8004fc4:	f000 fcf4 	bl	80059b0 <CODEC_IO_Write>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	4413      	add	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(0x29, 0x0020);
 8004fd2:	2120      	movs	r1, #32
 8004fd4:	2029      	movs	r0, #41	; 0x29
 8004fd6:	f000 fceb 	bl	80059b0 <CODEC_IO_Write>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(0x2A, 0x0020);
 8004fe4:	2120      	movs	r1, #32
 8004fe6:	202a      	movs	r0, #42	; 0x2a
 8004fe8:	f000 fce2 	bl	80059b0 <CODEC_IO_Write>
 8004fec:	4603      	mov	r3, r0
 8004fee:	461a      	mov	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0303);
 8004ff6:	f240 3103 	movw	r1, #771	; 0x303
 8004ffa:	2004      	movs	r0, #4
 8004ffc:	f000 fcd8 	bl	80059b0 <CODEC_IO_Write>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	4413      	add	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 800500a:	21db      	movs	r1, #219	; 0xdb
 800500c:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8005010:	f000 fcce 	bl	80059b0 <CODEC_IO_Write>
 8005014:	4603      	mov	r3, r0
 8005016:	461a      	mov	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6350);
 800501e:	f246 3150 	movw	r1, #25424	; 0x6350
 8005022:	2002      	movs	r0, #2
 8005024:	f000 fcc4 	bl	80059b0 <CODEC_IO_Write>
 8005028:	4603      	mov	r3, r0
 800502a:	461a      	mov	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 8005032:	2102      	movs	r1, #2
 8005034:	f240 6006 	movw	r0, #1542	; 0x606
 8005038:	f000 fcba 	bl	80059b0 <CODEC_IO_Write>
 800503c:	4603      	mov	r3, r0
 800503e:	461a      	mov	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 8005046:	2102      	movs	r1, #2
 8005048:	f240 6007 	movw	r0, #1543	; 0x607
 800504c:	f000 fcb0 	bl	80059b0 <CODEC_IO_Write>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4413      	add	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 800505a:	210d      	movs	r1, #13
 800505c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8005060:	f000 fca6 	bl	80059b0 <CODEC_IO_Write>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
      break;
 800506e:	e09e      	b.n	80051ae <wm8994_Init+0x586>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x030C);
 8005070:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8005074:	2004      	movs	r0, #4
 8005076:	f000 fc9b 	bl	80059b0 <CODEC_IO_Write>
 800507a:	4603      	mov	r3, r0
 800507c:	461a      	mov	r2, r3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	4413      	add	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 8005084:	21db      	movs	r1, #219	; 0xdb
 8005086:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800508a:	f000 fc91 	bl	80059b0 <CODEC_IO_Write>
 800508e:	4603      	mov	r3, r0
 8005090:	461a      	mov	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	4413      	add	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6350);
 8005098:	f246 3150 	movw	r1, #25424	; 0x6350
 800509c:	2002      	movs	r0, #2
 800509e:	f000 fc87 	bl	80059b0 <CODEC_IO_Write>
 80050a2:	4603      	mov	r3, r0
 80050a4:	461a      	mov	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 80050ac:	2102      	movs	r1, #2
 80050ae:	f240 6006 	movw	r0, #1542	; 0x606
 80050b2:	f000 fc7d 	bl	80059b0 <CODEC_IO_Write>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	4413      	add	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 80050c0:	2102      	movs	r1, #2
 80050c2:	f240 6007 	movw	r0, #1543	; 0x607
 80050c6:	f000 fc73 	bl	80059b0 <CODEC_IO_Write>
 80050ca:	4603      	mov	r3, r0
 80050cc:	461a      	mov	r2, r3
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4413      	add	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 80050d4:	210d      	movs	r1, #13
 80050d6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80050da:	f000 fc69 	bl	80059b0 <CODEC_IO_Write>
 80050de:	4603      	mov	r3, r0
 80050e0:	461a      	mov	r2, r3
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	4413      	add	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
      break;
 80050e8:	e061      	b.n	80051ae <wm8994_Init+0x586>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0F3C);
 80050ea:	f640 713c 	movw	r1, #3900	; 0xf3c
 80050ee:	2004      	movs	r0, #4
 80050f0:	f000 fc5e 	bl	80059b0 <CODEC_IO_Write>
 80050f4:	4603      	mov	r3, r0
 80050f6:	461a      	mov	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(0x450, 0x00DB);
 80050fe:	21db      	movs	r1, #219	; 0xdb
 8005100:	f44f 608a 	mov.w	r0, #1104	; 0x450
 8005104:	f000 fc54 	bl	80059b0 <CODEC_IO_Write>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 8005112:	21db      	movs	r1, #219	; 0xdb
 8005114:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8005118:	f000 fc4a 	bl	80059b0 <CODEC_IO_Write>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x63A0);
 8005126:	f246 31a0 	movw	r1, #25504	; 0x63a0
 800512a:	2002      	movs	r0, #2
 800512c:	f000 fc40 	bl	80059b0 <CODEC_IO_Write>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	4413      	add	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 800513a:	2102      	movs	r1, #2
 800513c:	f240 6006 	movw	r0, #1542	; 0x606
 8005140:	f000 fc36 	bl	80059b0 <CODEC_IO_Write>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4413      	add	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 800514e:	2102      	movs	r1, #2
 8005150:	f240 6007 	movw	r0, #1543	; 0x607
 8005154:	f000 fc2c 	bl	80059b0 <CODEC_IO_Write>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	4413      	add	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x608, 0x0002);
 8005162:	2102      	movs	r1, #2
 8005164:	f44f 60c1 	mov.w	r0, #1544	; 0x608
 8005168:	f000 fc22 	bl	80059b0 <CODEC_IO_Write>
 800516c:	4603      	mov	r3, r0
 800516e:	461a      	mov	r2, r3
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	4413      	add	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x609, 0x0002);
 8005176:	2102      	movs	r1, #2
 8005178:	f240 6009 	movw	r0, #1545	; 0x609
 800517c:	f000 fc18 	bl	80059b0 <CODEC_IO_Write>
 8005180:	4603      	mov	r3, r0
 8005182:	461a      	mov	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 800518a:	210d      	movs	r1, #13
 800518c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8005190:	f000 fc0e 	bl	80059b0 <CODEC_IO_Write>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	4413      	add	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
      break;
 800519e:	e006      	b.n	80051ae <wm8994_Init+0x586>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	3301      	adds	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
      break;
 80051a6:	e002      	b.n	80051ae <wm8994_Init+0x586>
    }
  }
  else
  {
    inputEnabled = 0;
 80051a8:	4bb4      	ldr	r3, [pc, #720]	; (800547c <wm8994_Init+0x854>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	4ab3      	ldr	r2, [pc, #716]	; (8005480 <wm8994_Init+0x858>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d069      	beq.n	800528a <wm8994_Init+0x662>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	4ab1      	ldr	r2, [pc, #708]	; (8005480 <wm8994_Init+0x858>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	f200 8091 	bhi.w	80052e2 <wm8994_Init+0x6ba>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d054      	beq.n	8005274 <wm8994_Init+0x64c>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80051d0:	4293      	cmp	r3, r2
 80051d2:	f200 8086 	bhi.w	80052e2 <wm8994_Init+0x6ba>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80051dc:	4293      	cmp	r3, r2
 80051de:	d075      	beq.n	80052cc <wm8994_Init+0x6a4>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d87b      	bhi.n	80052e2 <wm8994_Init+0x6ba>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80051f0:	d035      	beq.n	800525e <wm8994_Init+0x636>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80051f8:	d873      	bhi.n	80052e2 <wm8994_Init+0x6ba>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f245 6222 	movw	r2, #22050	; 0x5622
 8005200:	4293      	cmp	r3, r2
 8005202:	d058      	beq.n	80052b6 <wm8994_Init+0x68e>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	f245 6222 	movw	r2, #22050	; 0x5622
 800520a:	4293      	cmp	r3, r2
 800520c:	d869      	bhi.n	80052e2 <wm8994_Init+0x6ba>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005214:	d018      	beq.n	8005248 <wm8994_Init+0x620>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800521c:	d861      	bhi.n	80052e2 <wm8994_Init+0x6ba>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005224:	d005      	beq.n	8005232 <wm8994_Init+0x60a>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f642 3211 	movw	r2, #11025	; 0x2b11
 800522c:	4293      	cmp	r3, r2
 800522e:	d037      	beq.n	80052a0 <wm8994_Init+0x678>
 8005230:	e057      	b.n	80052e2 <wm8994_Init+0x6ba>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0003);
 8005232:	2103      	movs	r1, #3
 8005234:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005238:	f000 fbba 	bl	80059b0 <CODEC_IO_Write>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    break;
 8005246:	e057      	b.n	80052f8 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0033);
 8005248:	2133      	movs	r1, #51	; 0x33
 800524a:	f44f 7004 	mov.w	r0, #528	; 0x210
 800524e:	f000 fbaf 	bl	80059b0 <CODEC_IO_Write>
 8005252:	4603      	mov	r3, r0
 8005254:	461a      	mov	r2, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	4413      	add	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
    break;
 800525c:	e04c      	b.n	80052f8 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0063);
 800525e:	2163      	movs	r1, #99	; 0x63
 8005260:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005264:	f000 fba4 	bl	80059b0 <CODEC_IO_Write>
 8005268:	4603      	mov	r3, r0
 800526a:	461a      	mov	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	617b      	str	r3, [r7, #20]
    break;
 8005272:	e041      	b.n	80052f8 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0083);
 8005274:	2183      	movs	r1, #131	; 0x83
 8005276:	f44f 7004 	mov.w	r0, #528	; 0x210
 800527a:	f000 fb99 	bl	80059b0 <CODEC_IO_Write>
 800527e:	4603      	mov	r3, r0
 8005280:	461a      	mov	r2, r3
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	4413      	add	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
    break;
 8005288:	e036      	b.n	80052f8 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x00A3);
 800528a:	21a3      	movs	r1, #163	; 0xa3
 800528c:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005290:	f000 fb8e 	bl	80059b0 <CODEC_IO_Write>
 8005294:	4603      	mov	r3, r0
 8005296:	461a      	mov	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
    break;
 800529e:	e02b      	b.n	80052f8 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0013);
 80052a0:	2113      	movs	r1, #19
 80052a2:	f44f 7004 	mov.w	r0, #528	; 0x210
 80052a6:	f000 fb83 	bl	80059b0 <CODEC_IO_Write>
 80052aa:	4603      	mov	r3, r0
 80052ac:	461a      	mov	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
    break;
 80052b4:	e020      	b.n	80052f8 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0043);
 80052b6:	2143      	movs	r1, #67	; 0x43
 80052b8:	f44f 7004 	mov.w	r0, #528	; 0x210
 80052bc:	f000 fb78 	bl	80059b0 <CODEC_IO_Write>
 80052c0:	4603      	mov	r3, r0
 80052c2:	461a      	mov	r2, r3
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4413      	add	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
    break;
 80052ca:	e015      	b.n	80052f8 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0073);
 80052cc:	2173      	movs	r1, #115	; 0x73
 80052ce:	f44f 7004 	mov.w	r0, #528	; 0x210
 80052d2:	f000 fb6d 	bl	80059b0 <CODEC_IO_Write>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	4413      	add	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
    break;
 80052e0:	e00a      	b.n	80052f8 <wm8994_Init+0x6d0>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0083);
 80052e2:	2183      	movs	r1, #131	; 0x83
 80052e4:	f44f 7004 	mov.w	r0, #528	; 0x210
 80052e8:	f000 fb62 	bl	80059b0 <CODEC_IO_Write>
 80052ec:	4603      	mov	r3, r0
 80052ee:	461a      	mov	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4413      	add	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    break;
 80052f6:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fe:	d10b      	bne.n	8005318 <wm8994_Init+0x6f0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(0x300, 0x4018);
 8005300:	f244 0118 	movw	r1, #16408	; 0x4018
 8005304:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005308:	f000 fb52 	bl	80059b0 <CODEC_IO_Write>
 800530c:	4603      	mov	r3, r0
 800530e:	461a      	mov	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e00a      	b.n	800532e <wm8994_Init+0x706>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(0x300, 0x4010);
 8005318:	f244 0110 	movw	r1, #16400	; 0x4010
 800531c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005320:	f000 fb46 	bl	80059b0 <CODEC_IO_Write>
 8005324:	4603      	mov	r3, r0
 8005326:	461a      	mov	r2, r3
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
  }

  /* slave mode */
  counter += CODEC_IO_Write(0x302, 0x0000);
 800532e:	2100      	movs	r1, #0
 8005330:	f240 3002 	movw	r0, #770	; 0x302
 8005334:	f000 fb3c 	bl	80059b0 <CODEC_IO_Write>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(0x208, 0x000A);
 8005342:	210a      	movs	r1, #10
 8005344:	f44f 7002 	mov.w	r0, #520	; 0x208
 8005348:	f000 fb32 	bl	80059b0 <CODEC_IO_Write>
 800534c:	4603      	mov	r3, r0
 800534e:	461a      	mov	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	4413      	add	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(0x200, 0x0001);
 8005356:	2101      	movs	r1, #1
 8005358:	f44f 7000 	mov.w	r0, #512	; 0x200
 800535c:	f000 fb28 	bl	80059b0 <CODEC_IO_Write>
 8005360:	4603      	mov	r3, r0
 8005362:	461a      	mov	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4413      	add	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  if (output_device > 0)  /* Audio output selected */
 800536a:	8a3b      	ldrh	r3, [r7, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 812c 	beq.w	80055ca <wm8994_Init+0x9a2>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8005372:	8a3b      	ldrh	r3, [r7, #16]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d142      	bne.n	80053fe <wm8994_Init+0x7d6>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(0x2D, 0x0100);
 8005378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800537c:	202d      	movs	r0, #45	; 0x2d
 800537e:	f000 fb17 	bl	80059b0 <CODEC_IO_Write>
 8005382:	4603      	mov	r3, r0
 8005384:	461a      	mov	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(0x2E, 0x0100);
 800538c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005390:	202e      	movs	r0, #46	; 0x2e
 8005392:	f000 fb0d 	bl	80059b0 <CODEC_IO_Write>
 8005396:	4603      	mov	r3, r0
 8005398:	461a      	mov	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 80053a0:	4b38      	ldr	r3, [pc, #224]	; (8005484 <wm8994_Init+0x85c>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d012      	beq.n	80053ce <wm8994_Init+0x7a6>
      {
        counter += CODEC_IO_Write(0x110,0x8100);
 80053a8:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80053ac:	f44f 7088 	mov.w	r0, #272	; 0x110
 80053b0:	f000 fafe 	bl	80059b0 <CODEC_IO_Write>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4413      	add	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

        ColdStartup=0;
 80053be:	4b31      	ldr	r3, [pc, #196]	; (8005484 <wm8994_Init+0x85c>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 80053c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80053c8:	f000 fb5c 	bl	8005a84 <HAL_Delay>
 80053cc:	e00d      	b.n	80053ea <wm8994_Init+0x7c2>
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(0x110,0x8108);
 80053ce:	f248 1108 	movw	r1, #33032	; 0x8108
 80053d2:	f44f 7088 	mov.w	r0, #272	; 0x110
 80053d6:	f000 faeb 	bl	80059b0 <CODEC_IO_Write>
 80053da:	4603      	mov	r3, r0
 80053dc:	461a      	mov	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	4413      	add	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
        /* Add Delay */
        HAL_Delay(50);
 80053e4:	2032      	movs	r0, #50	; 0x32
 80053e6:	f000 fb4d 	bl	8005a84 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0000);
 80053ea:	2100      	movs	r1, #0
 80053ec:	f44f 6084 	mov.w	r0, #1056	; 0x420
 80053f0:	f000 fade 	bl	80059b0 <CODEC_IO_Write>
 80053f4:	4603      	mov	r3, r0
 80053f6:	461a      	mov	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4413      	add	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(0x03, 0x0300);
 80053fe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005402:	2003      	movs	r0, #3
 8005404:	f000 fad4 	bl	80059b0 <CODEC_IO_Write>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(0x22, 0x0000);
 8005412:	2100      	movs	r1, #0
 8005414:	2022      	movs	r0, #34	; 0x22
 8005416:	f000 facb 	bl	80059b0 <CODEC_IO_Write>
 800541a:	4603      	mov	r3, r0
 800541c:	461a      	mov	r2, r3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	4413      	add	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(0x23, 0x0000);
 8005424:	2100      	movs	r1, #0
 8005426:	2023      	movs	r0, #35	; 0x23
 8005428:	f000 fac2 	bl	80059b0 <CODEC_IO_Write>
 800542c:	4603      	mov	r3, r0
 800542e:	461a      	mov	r2, r3
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(0x36, 0x0300);
 8005436:	f44f 7140 	mov.w	r1, #768	; 0x300
 800543a:	2036      	movs	r0, #54	; 0x36
 800543c:	f000 fab8 	bl	80059b0 <CODEC_IO_Write>
 8005440:	4603      	mov	r3, r0
 8005442:	461a      	mov	r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	4413      	add	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(0x01, 0x3003);
 800544a:	f243 0103 	movw	r1, #12291	; 0x3003
 800544e:	2001      	movs	r0, #1
 8005450:	f000 faae 	bl	80059b0 <CODEC_IO_Write>
 8005454:	4603      	mov	r3, r0
 8005456:	461a      	mov	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800545e:	89fb      	ldrh	r3, [r7, #14]
 8005460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005464:	d110      	bne.n	8005488 <wm8994_Init+0x860>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(0x51, 0x0205);
 8005466:	f240 2105 	movw	r1, #517	; 0x205
 800546a:	2051      	movs	r0, #81	; 0x51
 800546c:	f000 faa0 	bl	80059b0 <CODEC_IO_Write>
 8005470:	4603      	mov	r3, r0
 8005472:	461a      	mov	r2, r3
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4413      	add	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e00e      	b.n	800549a <wm8994_Init+0x872>
 800547c:	200418dc 	.word	0x200418dc
 8005480:	00017700 	.word	0x00017700
 8005484:	20000010 	.word	0x20000010
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(0x51, 0x0005);
 8005488:	2105      	movs	r1, #5
 800548a:	2051      	movs	r0, #81	; 0x51
 800548c:	f000 fa90 	bl	80059b0 <CODEC_IO_Write>
 8005490:	4603      	mov	r3, r0
 8005492:	461a      	mov	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4413      	add	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800549a:	8a7b      	ldrh	r3, [r7, #18]
 800549c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80054a0:	f043 0303 	orr.w	r3, r3, #3
 80054a4:	827b      	strh	r3, [r7, #18]
    counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 80054a6:	8a7b      	ldrh	r3, [r7, #18]
 80054a8:	4619      	mov	r1, r3
 80054aa:	2001      	movs	r0, #1
 80054ac:	f000 fa80 	bl	80059b0 <CODEC_IO_Write>
 80054b0:	4603      	mov	r3, r0
 80054b2:	461a      	mov	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4413      	add	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(0x60, 0x0022);
 80054ba:	2122      	movs	r1, #34	; 0x22
 80054bc:	2060      	movs	r0, #96	; 0x60
 80054be:	f000 fa77 	bl	80059b0 <CODEC_IO_Write>
 80054c2:	4603      	mov	r3, r0
 80054c4:	461a      	mov	r2, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(0x4C, 0x9F25);
 80054cc:	f649 7125 	movw	r1, #40741	; 0x9f25
 80054d0:	204c      	movs	r0, #76	; 0x4c
 80054d2:	f000 fa6d 	bl	80059b0 <CODEC_IO_Write>
 80054d6:	4603      	mov	r3, r0
 80054d8:	461a      	mov	r2, r3
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	4413      	add	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

    /* Add Delay */
    HAL_Delay(15);
 80054e0:	200f      	movs	r0, #15
 80054e2:	f000 facf 	bl	8005a84 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(0x2D, 0x0001);
 80054e6:	2101      	movs	r1, #1
 80054e8:	202d      	movs	r0, #45	; 0x2d
 80054ea:	f000 fa61 	bl	80059b0 <CODEC_IO_Write>
 80054ee:	4603      	mov	r3, r0
 80054f0:	461a      	mov	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4413      	add	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(0x2E, 0x0001);
 80054f8:	2101      	movs	r1, #1
 80054fa:	202e      	movs	r0, #46	; 0x2e
 80054fc:	f000 fa58 	bl	80059b0 <CODEC_IO_Write>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(0x03, 0x0030 | 0x0300);
 800550a:	f44f 714c 	mov.w	r1, #816	; 0x330
 800550e:	2003      	movs	r0, #3
 8005510:	f000 fa4e 	bl	80059b0 <CODEC_IO_Write>
 8005514:	4603      	mov	r3, r0
 8005516:	461a      	mov	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4413      	add	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(0x54, 0x0033);
 800551e:	2133      	movs	r1, #51	; 0x33
 8005520:	2054      	movs	r0, #84	; 0x54
 8005522:	f000 fa45 	bl	80059b0 <CODEC_IO_Write>
 8005526:	4603      	mov	r3, r0
 8005528:	461a      	mov	r2, r3
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	4413      	add	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

    /* Add Delay */
    HAL_Delay(257);
 8005530:	f240 1001 	movw	r0, #257	; 0x101
 8005534:	f000 faa6 	bl	8005a84 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(0x60, 0x00EE);
 8005538:	21ee      	movs	r1, #238	; 0xee
 800553a:	2060      	movs	r0, #96	; 0x60
 800553c:	f000 fa38 	bl	80059b0 <CODEC_IO_Write>
 8005540:	4603      	mov	r3, r0
 8005542:	461a      	mov	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4413      	add	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(0x610, 0x00C0);
 800554a:	21c0      	movs	r1, #192	; 0xc0
 800554c:	f44f 60c2 	mov.w	r0, #1552	; 0x610
 8005550:	f000 fa2e 	bl	80059b0 <CODEC_IO_Write>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4413      	add	r3, r2
 800555c:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(0x611, 0x00C0);
 800555e:	21c0      	movs	r1, #192	; 0xc0
 8005560:	f240 6011 	movw	r0, #1553	; 0x611
 8005564:	f000 fa24 	bl	80059b0 <CODEC_IO_Write>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4413      	add	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(0x420, 0x0010);
 8005572:	2110      	movs	r1, #16
 8005574:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8005578:	f000 fa1a 	bl	80059b0 <CODEC_IO_Write>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(0x612, 0x00C0);
 8005586:	21c0      	movs	r1, #192	; 0xc0
 8005588:	f240 6012 	movw	r0, #1554	; 0x612
 800558c:	f000 fa10 	bl	80059b0 <CODEC_IO_Write>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(0x613, 0x00C0);
 800559a:	21c0      	movs	r1, #192	; 0xc0
 800559c:	f240 6013 	movw	r0, #1555	; 0x613
 80055a0:	f000 fa06 	bl	80059b0 <CODEC_IO_Write>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	4413      	add	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(0x422, 0x0010);
 80055ae:	2110      	movs	r1, #16
 80055b0:	f240 4022 	movw	r0, #1058	; 0x422
 80055b4:	f000 f9fc 	bl	80059b0 <CODEC_IO_Write>
 80055b8:	4603      	mov	r3, r0
 80055ba:	461a      	mov	r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4413      	add	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

    /* Volume Control */
    wm8994_SetVolume(Volume);
 80055c2:	797b      	ldrb	r3, [r7, #5]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f899 	bl	80056fc <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80055ca:	89fb      	ldrh	r3, [r7, #14]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8088 	beq.w	80056e2 <wm8994_Init+0xaba>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80055d2:	89fb      	ldrh	r3, [r7, #14]
 80055d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d8:	d003      	beq.n	80055e2 <wm8994_Init+0x9ba>
 80055da:	89fb      	ldrh	r3, [r7, #14]
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e0:	d123      	bne.n	800562a <wm8994_Init+0xa02>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80055e2:	8a7b      	ldrh	r3, [r7, #18]
 80055e4:	f043 0313 	orr.w	r3, r3, #19
 80055e8:	827b      	strh	r3, [r7, #18]
      counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 80055ea:	8a7b      	ldrh	r3, [r7, #18]
 80055ec:	4619      	mov	r1, r3
 80055ee:	2001      	movs	r0, #1
 80055f0:	f000 f9de 	bl	80059b0 <CODEC_IO_Write>
 80055f4:	4603      	mov	r3, r0
 80055f6:	461a      	mov	r2, r3
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4413      	add	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(0x620, 0x0002);
 80055fe:	2102      	movs	r1, #2
 8005600:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8005604:	f000 f9d4 	bl	80059b0 <CODEC_IO_Write>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	4413      	add	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x411, 0x3800);
 8005612:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8005616:	f240 4011 	movw	r0, #1041	; 0x411
 800561a:	f000 f9c9 	bl	80059b0 <CODEC_IO_Write>
 800561e:	4603      	mov	r3, r0
 8005620:	461a      	mov	r2, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	4413      	add	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e057      	b.n	80056da <wm8994_Init+0xab2>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800562a:	89fb      	ldrh	r3, [r7, #14]
 800562c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005630:	d12e      	bne.n	8005690 <wm8994_Init+0xa68>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005632:	8a7b      	ldrh	r3, [r7, #18]
 8005634:	f043 0313 	orr.w	r3, r3, #19
 8005638:	827b      	strh	r3, [r7, #18]
      counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 800563a:	8a7b      	ldrh	r3, [r7, #18]
 800563c:	4619      	mov	r1, r3
 800563e:	2001      	movs	r0, #1
 8005640:	f000 f9b6 	bl	80059b0 <CODEC_IO_Write>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	4413      	add	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(0x620, 0x0002);
 800564e:	2102      	movs	r1, #2
 8005650:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8005654:	f000 f9ac 	bl	80059b0 <CODEC_IO_Write>
 8005658:	4603      	mov	r3, r0
 800565a:	461a      	mov	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4413      	add	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x410, 0x1800);
 8005662:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005666:	f44f 6082 	mov.w	r0, #1040	; 0x410
 800566a:	f000 f9a1 	bl	80059b0 <CODEC_IO_Write>
 800566e:	4603      	mov	r3, r0
 8005670:	461a      	mov	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x411, 0x1800);
 8005678:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800567c:	f240 4011 	movw	r0, #1041	; 0x411
 8005680:	f000 f996 	bl	80059b0 <CODEC_IO_Write>
 8005684:	4603      	mov	r3, r0
 8005686:	461a      	mov	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	e024      	b.n	80056da <wm8994_Init+0xab2>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8005690:	89fb      	ldrh	r3, [r7, #14]
 8005692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005696:	d003      	beq.n	80056a0 <wm8994_Init+0xa78>
 8005698:	89fb      	ldrh	r3, [r7, #14]
 800569a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569e:	d11c      	bne.n	80056da <wm8994_Init+0xab2>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(0x18, 0x000B);
 80056a0:	210b      	movs	r1, #11
 80056a2:	2018      	movs	r0, #24
 80056a4:	f000 f984 	bl	80059b0 <CODEC_IO_Write>
 80056a8:	4603      	mov	r3, r0
 80056aa:	461a      	mov	r2, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4413      	add	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(0x1A, 0x000B);
 80056b2:	210b      	movs	r1, #11
 80056b4:	201a      	movs	r0, #26
 80056b6:	f000 f97b 	bl	80059b0 <CODEC_IO_Write>
 80056ba:	4603      	mov	r3, r0
 80056bc:	461a      	mov	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	4413      	add	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(0x410, 0x1800);
 80056c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80056c8:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80056cc:	f000 f970 	bl	80059b0 <CODEC_IO_Write>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461a      	mov	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
    }
    /* Volume Control */
    wm8994_SetVolume(Volume);
 80056da:	797b      	ldrb	r3, [r7, #5]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 f80d 	bl	80056fc <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 80056e2:	697b      	ldr	r3, [r7, #20]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <wm8994_ReadID>:
/**
  * @brief  Get the WM8994 ID.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID()
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(WM8994_CHIPID_ADDR));
 80056f0:	2000      	movs	r0, #0
 80056f2:	f7fe fcf1 	bl	80040d8 <AUDIO_I2C_Read>
 80056f6:	4603      	mov	r3, r0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}

080056fc <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint8_t Volume)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	2b64      	cmp	r3, #100	; 0x64
 800570e:	d80b      	bhi.n	8005728 <wm8994_SetVolume+0x2c>
 8005710:	79fa      	ldrb	r2, [r7, #7]
 8005712:	4613      	mov	r3, r2
 8005714:	019b      	lsls	r3, r3, #6
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	4a75      	ldr	r2, [pc, #468]	; (80058f0 <wm8994_SetVolume+0x1f4>)
 800571a:	fb82 1203 	smull	r1, r2, r2, r3
 800571e:	1152      	asrs	r2, r2, #5
 8005720:	17db      	asrs	r3, r3, #31
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e000      	b.n	800572a <wm8994_SetVolume+0x2e>
 8005728:	233f      	movs	r3, #63	; 0x3f
 800572a:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800572c:	4b71      	ldr	r3, [pc, #452]	; (80058f4 <wm8994_SetVolume+0x1f8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8081 	beq.w	8005838 <wm8994_SetVolume+0x13c>
  {
    if(convertedvol > 0x3E)
 8005736:	7afb      	ldrb	r3, [r7, #11]
 8005738:	2b3e      	cmp	r3, #62	; 0x3e
 800573a:	d92f      	bls.n	800579c <wm8994_SetVolume+0xa0>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_OFF);
 800573c:	2000      	movs	r0, #0
 800573e:	f000 f8dd 	bl	80058fc <wm8994_SetMute>
 8005742:	4602      	mov	r2, r0
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(0x1C, 0x3F | 0x140);
 800574a:	f240 117f 	movw	r1, #383	; 0x17f
 800574e:	201c      	movs	r0, #28
 8005750:	f000 f92e 	bl	80059b0 <CODEC_IO_Write>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(0x1D, 0x3F | 0x140);
 800575e:	f240 117f 	movw	r1, #383	; 0x17f
 8005762:	201d      	movs	r0, #29
 8005764:	f000 f924 	bl	80059b0 <CODEC_IO_Write>
 8005768:	4603      	mov	r3, r0
 800576a:	461a      	mov	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(0x26, 0x3F | 0x140);
 8005772:	f240 117f 	movw	r1, #383	; 0x17f
 8005776:	2026      	movs	r0, #38	; 0x26
 8005778:	f000 f91a 	bl	80059b0 <CODEC_IO_Write>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(0x27, 0x3F | 0x140);
 8005786:	f240 117f 	movw	r1, #383	; 0x17f
 800578a:	2027      	movs	r0, #39	; 0x27
 800578c:	f000 f910 	bl	80059b0 <CODEC_IO_Write>
 8005790:	4603      	mov	r3, r0
 8005792:	461a      	mov	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e04d      	b.n	8005838 <wm8994_SetVolume+0x13c>
    }
    else if (Volume == 0)
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d107      	bne.n	80057b2 <wm8994_SetVolume+0xb6>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_ON);
 80057a2:	2001      	movs	r0, #1
 80057a4:	f000 f8aa 	bl	80058fc <wm8994_SetMute>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e042      	b.n	8005838 <wm8994_SetVolume+0x13c>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_OFF);
 80057b2:	2000      	movs	r0, #0
 80057b4:	f000 f8a2 	bl	80058fc <wm8994_SetMute>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(0x1C, convertedvol | 0x140);
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	b21b      	sxth	r3, r3
 80057c4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4619      	mov	r1, r3
 80057ce:	201c      	movs	r0, #28
 80057d0:	f000 f8ee 	bl	80059b0 <CODEC_IO_Write>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(0x1D, convertedvol | 0x140);
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	b21b      	sxth	r3, r3
 80057e2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80057e6:	b21b      	sxth	r3, r3
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	4619      	mov	r1, r3
 80057ec:	201d      	movs	r0, #29
 80057ee:	f000 f8df 	bl	80059b0 <CODEC_IO_Write>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(0x26, convertedvol | 0x140);
 80057fc:	7afb      	ldrb	r3, [r7, #11]
 80057fe:	b21b      	sxth	r3, r3
 8005800:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005804:	b21b      	sxth	r3, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	2026      	movs	r0, #38	; 0x26
 800580c:	f000 f8d0 	bl	80059b0 <CODEC_IO_Write>
 8005810:	4603      	mov	r3, r0
 8005812:	461a      	mov	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(0x27, convertedvol | 0x140);
 800581a:	7afb      	ldrb	r3, [r7, #11]
 800581c:	b21b      	sxth	r3, r3
 800581e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005822:	b21b      	sxth	r3, r3
 8005824:	b29b      	uxth	r3, r3
 8005826:	4619      	mov	r1, r3
 8005828:	2027      	movs	r0, #39	; 0x27
 800582a:	f000 f8c1 	bl	80059b0 <CODEC_IO_Write>
 800582e:	4603      	mov	r3, r0
 8005830:	461a      	mov	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8005838:	4b2f      	ldr	r3, [pc, #188]	; (80058f8 <wm8994_SetVolume+0x1fc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d051      	beq.n	80058e4 <wm8994_SetVolume+0x1e8>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b63      	cmp	r3, #99	; 0x63
 8005844:	d80c      	bhi.n	8005860 <wm8994_SetVolume+0x164>
 8005846:	79fa      	ldrb	r2, [r7, #7]
 8005848:	4613      	mov	r3, r2
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <wm8994_SetVolume+0x1f4>)
 8005852:	fb82 1203 	smull	r1, r2, r2, r3
 8005856:	1152      	asrs	r2, r2, #5
 8005858:	17db      	asrs	r3, r3, #31
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e000      	b.n	8005862 <wm8994_SetVolume+0x166>
 8005860:	23ef      	movs	r3, #239	; 0xef
 8005862:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(0x400, convertedvol | 0x100);
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	b21b      	sxth	r3, r3
 8005868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586c:	b21b      	sxth	r3, r3
 800586e:	b29b      	uxth	r3, r3
 8005870:	4619      	mov	r1, r3
 8005872:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005876:	f000 f89b 	bl	80059b0 <CODEC_IO_Write>
 800587a:	4603      	mov	r3, r0
 800587c:	461a      	mov	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(0x401, convertedvol | 0x100);
 8005884:	7afb      	ldrb	r3, [r7, #11]
 8005886:	b21b      	sxth	r3, r3
 8005888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588c:	b21b      	sxth	r3, r3
 800588e:	b29b      	uxth	r3, r3
 8005890:	4619      	mov	r1, r3
 8005892:	f240 4001 	movw	r0, #1025	; 0x401
 8005896:	f000 f88b 	bl	80059b0 <CODEC_IO_Write>
 800589a:	4603      	mov	r3, r0
 800589c:	461a      	mov	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(0x404, convertedvol | 0x100);
 80058a4:	7afb      	ldrb	r3, [r7, #11]
 80058a6:	b21b      	sxth	r3, r3
 80058a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4619      	mov	r1, r3
 80058b2:	f240 4004 	movw	r0, #1028	; 0x404
 80058b6:	f000 f87b 	bl	80059b0 <CODEC_IO_Write>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(0x405, convertedvol | 0x100);
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	f240 4005 	movw	r0, #1029	; 0x405
 80058d6:	f000 f86b 	bl	80059b0 <CODEC_IO_Write>
 80058da:	4603      	mov	r3, r0
 80058dc:	461a      	mov	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80058e4:	68fb      	ldr	r3, [r7, #12]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	51eb851f 	.word	0x51eb851f
 80058f4:	200418d8 	.word	0x200418d8
 80058f8:	200418dc 	.word	0x200418dc

080058fc <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint32_t Cmd)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8005908:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <wm8994_SetMute+0x7c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02d      	beq.n	800596c <wm8994_SetMute+0x70>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d116      	bne.n	8005944 <wm8994_SetMute+0x48>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0200);
 8005916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800591a:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800591e:	f000 f847 	bl	80059b0 <CODEC_IO_Write>
 8005922:	4603      	mov	r3, r0
 8005924:	461a      	mov	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(0x422, 0x0200);
 800592c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005930:	f240 4022 	movw	r0, #1058	; 0x422
 8005934:	f000 f83c 	bl	80059b0 <CODEC_IO_Write>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e013      	b.n	800596c <wm8994_SetMute+0x70>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0010);
 8005944:	2110      	movs	r1, #16
 8005946:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800594a:	f000 f831 	bl	80059b0 <CODEC_IO_Write>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(0x422, 0x0010);
 8005958:	2110      	movs	r1, #16
 800595a:	f240 4022 	movw	r0, #1058	; 0x422
 800595e:	f000 f827 	bl	80059b0 <CODEC_IO_Write>
 8005962:	4603      	mov	r3, r0
 8005964:	461a      	mov	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800596c:	68fb      	ldr	r3, [r7, #12]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200418d8 	.word	0x200418d8

0800597c <wm8994_Reset>:
/**
  * @brief Resets wm8994 registers.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset()
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(0x0000, 0x0000);
 8005986:	2100      	movs	r1, #0
 8005988:	2000      	movs	r0, #0
 800598a:	f000 f811 	bl	80059b0 <CODEC_IO_Write>
 800598e:	4603      	mov	r3, r0
 8005990:	607b      	str	r3, [r7, #4]
  outputEnabled = 0;
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <wm8994_Reset+0x2c>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <wm8994_Reset+0x30>)
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]

  return counter;
 800599e:	687b      	ldr	r3, [r7, #4]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	200418d8 	.word	0x200418d8
 80059ac:	200418dc 	.word	0x200418dc

080059b0 <CODEC_IO_Write>:
  * @brief  Writes/Read a single data to the onboard WM8994 audio Codec
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint16_t Reg, uint16_t Value){
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	460a      	mov	r2, r1
 80059ba:	80fb      	strh	r3, [r7, #6]
 80059bc:	4613      	mov	r3, r2
 80059be:	80bb      	strh	r3, [r7, #4]

  AUDIO_I2C_Write(Reg, Value);
 80059c0:	88ba      	ldrh	r2, [r7, #4]
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fb5e 	bl	8004088 <AUDIO_I2C_Write>

#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  return (AUDIO_I2C_Read(Reg) == Value)? 0:1;
#else
  return 0;
 80059cc:	2300      	movs	r3, #0
#endif /* VERIFY_WRITTENDATA */
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80059d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059dc:	480d      	ldr	r0, [pc, #52]	; (8005a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80059de:	490e      	ldr	r1, [pc, #56]	; (8005a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80059e0:	4a0e      	ldr	r2, [pc, #56]	; (8005a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80059e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059e4:	e002      	b.n	80059ec <LoopCopyDataInit>

080059e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059ea:	3304      	adds	r3, #4

080059ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059f0:	d3f9      	bcc.n	80059e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059f2:	4a0b      	ldr	r2, [pc, #44]	; (8005a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80059f4:	4c0b      	ldr	r4, [pc, #44]	; (8005a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80059f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059f8:	e001      	b.n	80059fe <LoopFillZerobss>

080059fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059fc:	3204      	adds	r2, #4

080059fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a00:	d3fb      	bcc.n	80059fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a02:	f7fe f9bf 	bl	8003d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a06:	f012 fa4b 	bl	8017ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a0a:	f7fb fcbf 	bl	800138c <main>
  bx  lr    
 8005a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a18:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005a1c:	0801baf8 	.word	0x0801baf8
  ldr r2, =_sbss
 8005a20:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8005a24:	2004a144 	.word	0x2004a144

08005a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a28:	e7fe      	b.n	8005a28 <ADC_IRQHandler>

08005a2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a2e:	2003      	movs	r0, #3
 8005a30:	f000 fba5 	bl	800617e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a34:	2000      	movs	r0, #0
 8005a36:	f7fe f831 	bl	8003a9c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005a3a:	f7fd f815 	bl	8002a68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_IncTick+0x20>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <HAL_IncTick+0x24>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4413      	add	r3, r2
 8005a54:	4a04      	ldr	r2, [pc, #16]	; (8005a68 <HAL_IncTick+0x24>)
 8005a56:	6013      	str	r3, [r2, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000028 	.word	0x20000028
 8005a68:	200418e0 	.word	0x200418e0

08005a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <HAL_GetTick+0x14>)
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	200418e0 	.word	0x200418e0

08005a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a8c:	f7ff ffee 	bl	8005a6c <HAL_GetTick>
 8005a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d005      	beq.n	8005aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <HAL_Delay+0x44>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005aaa:	bf00      	nop
 8005aac:	f7ff ffde 	bl	8005a6c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d8f7      	bhi.n	8005aac <HAL_Delay+0x28>
  {
  }
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000028 	.word	0x20000028

08005acc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e031      	b.n	8005b46 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fc ffe4 	bl	8002ab8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d116      	bne.n	8005b38 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b0e:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <HAL_ADC_Init+0x84>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	f043 0202 	orr.w	r2, r3, #2
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f964 	bl	8005de8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	f043 0201 	orr.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
 8005b36:	e001      	b.n	8005b3c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	ffffeefd 	.word	0xffffeefd

08005b54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_ADC_ConfigChannel+0x1c>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e12a      	b.n	8005dc6 <HAL_ADC_ConfigChannel+0x272>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b09      	cmp	r3, #9
 8005b7e:	d93a      	bls.n	8005bf6 <HAL_ADC_ConfigChannel+0xa2>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b88:	d035      	beq.n	8005bf6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68d9      	ldr	r1, [r3, #12]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	4613      	mov	r3, r2
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3b1e      	subs	r3, #30
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43da      	mvns	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	400a      	ands	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a87      	ldr	r2, [pc, #540]	; (8005dd4 <HAL_ADC_ConfigChannel+0x280>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10a      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68d9      	ldr	r1, [r3, #12]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	061a      	lsls	r2, r3, #24
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bce:	e035      	b.n	8005c3c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68d9      	ldr	r1, [r3, #12]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	4618      	mov	r0, r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4403      	add	r3, r0
 8005be8:	3b1e      	subs	r3, #30
 8005bea:	409a      	lsls	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bf4:	e022      	b.n	8005c3c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6919      	ldr	r1, [r3, #16]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	2207      	movs	r2, #7
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	43da      	mvns	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	400a      	ands	r2, r1
 8005c18:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6919      	ldr	r1, [r3, #16]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4403      	add	r3, r0
 8005c32:	409a      	lsls	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b06      	cmp	r3, #6
 8005c42:	d824      	bhi.n	8005c8e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	3b05      	subs	r3, #5
 8005c56:	221f      	movs	r2, #31
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43da      	mvns	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	400a      	ands	r2, r1
 8005c64:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4618      	mov	r0, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	3b05      	subs	r3, #5
 8005c80:	fa00 f203 	lsl.w	r2, r0, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8005c8c:	e04c      	b.n	8005d28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d824      	bhi.n	8005ce0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3b23      	subs	r3, #35	; 0x23
 8005ca8:	221f      	movs	r2, #31
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43da      	mvns	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	400a      	ands	r2, r1
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	3b23      	subs	r3, #35	; 0x23
 8005cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8005cde:	e023      	b.n	8005d28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	3b41      	subs	r3, #65	; 0x41
 8005cf2:	221f      	movs	r2, #31
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43da      	mvns	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	400a      	ands	r2, r1
 8005d00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	4618      	mov	r0, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	3b41      	subs	r3, #65	; 0x41
 8005d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <HAL_ADC_ConfigChannel+0x284>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10a      	bne.n	8005d48 <HAL_ADC_ConfigChannel+0x1f4>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3a:	d105      	bne.n	8005d48 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005d3c:	4b27      	ldr	r3, [pc, #156]	; (8005ddc <HAL_ADC_ConfigChannel+0x288>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4a26      	ldr	r2, [pc, #152]	; (8005ddc <HAL_ADC_ConfigChannel+0x288>)
 8005d42:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005d46:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <HAL_ADC_ConfigChannel+0x284>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d109      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x212>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b12      	cmp	r3, #18
 8005d58:	d105      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005d5a:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <HAL_ADC_ConfigChannel+0x288>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4a1f      	ldr	r2, [pc, #124]	; (8005ddc <HAL_ADC_ConfigChannel+0x288>)
 8005d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d64:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <HAL_ADC_ConfigChannel+0x284>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d125      	bne.n	8005dbc <HAL_ADC_ConfigChannel+0x268>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_ADC_ConfigChannel+0x280>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d003      	beq.n	8005d82 <HAL_ADC_ConfigChannel+0x22e>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b11      	cmp	r3, #17
 8005d80:	d11c      	bne.n	8005dbc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005d82:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <HAL_ADC_ConfigChannel+0x288>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <HAL_ADC_ConfigChannel+0x288>)
 8005d88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d8c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <HAL_ADC_ConfigChannel+0x280>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d111      	bne.n	8005dbc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005d98:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <HAL_ADC_ConfigChannel+0x28c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a11      	ldr	r2, [pc, #68]	; (8005de4 <HAL_ADC_ConfigChannel+0x290>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	0c9a      	lsrs	r2, r3, #18
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005dae:	e002      	b.n	8005db6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f9      	bne.n	8005db0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	10000012 	.word	0x10000012
 8005dd8:	40012000 	.word	0x40012000
 8005ddc:	40012300 	.word	0x40012300
 8005de0:	20000008 	.word	0x20000008
 8005de4:	431bde83 	.word	0x431bde83

08005de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005df0:	4b78      	ldr	r3, [pc, #480]	; (8005fd4 <ADC_Init+0x1ec>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a77      	ldr	r2, [pc, #476]	; (8005fd4 <ADC_Init+0x1ec>)
 8005df6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005dfa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005dfc:	4b75      	ldr	r3, [pc, #468]	; (8005fd4 <ADC_Init+0x1ec>)
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4973      	ldr	r1, [pc, #460]	; (8005fd4 <ADC_Init+0x1ec>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6859      	ldr	r1, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	021a      	lsls	r2, r3, #8
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005e3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6859      	ldr	r1, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6899      	ldr	r1, [r3, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	4a58      	ldr	r2, [pc, #352]	; (8005fd8 <ADC_Init+0x1f0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6899      	ldr	r1, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005eac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6899      	ldr	r1, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	e00f      	b.n	8005ee2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ed0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ee0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0202 	bic.w	r2, r2, #2
 8005ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6899      	ldr	r1, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	005a      	lsls	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005f2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	035a      	lsls	r2, r3, #13
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
 8005f46:	e007      	b.n	8005f58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	051a      	lsls	r2, r3, #20
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6899      	ldr	r1, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f9a:	025a      	lsls	r2, r3, #9
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6899      	ldr	r1, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	029a      	lsls	r2, r3, #10
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40012300 	.word	0x40012300
 8005fd8:	0f000001 	.word	0x0f000001

08005fdc <__NVIC_SetPriorityGrouping>:
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fec:	4b0b      	ldr	r3, [pc, #44]	; (800601c <__NVIC_SetPriorityGrouping+0x40>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <__NVIC_SetPriorityGrouping+0x44>)
 8006006:	4313      	orrs	r3, r2
 8006008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800600a:	4a04      	ldr	r2, [pc, #16]	; (800601c <__NVIC_SetPriorityGrouping+0x40>)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	60d3      	str	r3, [r2, #12]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	e000ed00 	.word	0xe000ed00
 8006020:	05fa0000 	.word	0x05fa0000

08006024 <__NVIC_GetPriorityGrouping>:
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006028:	4b04      	ldr	r3, [pc, #16]	; (800603c <__NVIC_GetPriorityGrouping+0x18>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	0a1b      	lsrs	r3, r3, #8
 800602e:	f003 0307 	and.w	r3, r3, #7
}
 8006032:	4618      	mov	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	e000ed00 	.word	0xe000ed00

08006040 <__NVIC_EnableIRQ>:
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800604a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604e:	2b00      	cmp	r3, #0
 8006050:	db0b      	blt.n	800606a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	f003 021f 	and.w	r2, r3, #31
 8006058:	4907      	ldr	r1, [pc, #28]	; (8006078 <__NVIC_EnableIRQ+0x38>)
 800605a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2001      	movs	r0, #1
 8006062:	fa00 f202 	lsl.w	r2, r0, r2
 8006066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	e000e100 	.word	0xe000e100

0800607c <__NVIC_DisableIRQ>:
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800608a:	2b00      	cmp	r3, #0
 800608c:	db12      	blt.n	80060b4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	f003 021f 	and.w	r2, r3, #31
 8006094:	490a      	ldr	r1, [pc, #40]	; (80060c0 <__NVIC_DisableIRQ+0x44>)
 8006096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	2001      	movs	r0, #1
 800609e:	fa00 f202 	lsl.w	r2, r0, r2
 80060a2:	3320      	adds	r3, #32
 80060a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80060a8:	f3bf 8f4f 	dsb	sy
}
 80060ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060ae:	f3bf 8f6f 	isb	sy
}
 80060b2:	bf00      	nop
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	e000e100 	.word	0xe000e100

080060c4 <__NVIC_SetPriority>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	4603      	mov	r3, r0
 80060cc:	6039      	str	r1, [r7, #0]
 80060ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	db0a      	blt.n	80060ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	490c      	ldr	r1, [pc, #48]	; (8006110 <__NVIC_SetPriority+0x4c>)
 80060de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e2:	0112      	lsls	r2, r2, #4
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	440b      	add	r3, r1
 80060e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80060ec:	e00a      	b.n	8006104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	4908      	ldr	r1, [pc, #32]	; (8006114 <__NVIC_SetPriority+0x50>)
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	3b04      	subs	r3, #4
 80060fc:	0112      	lsls	r2, r2, #4
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	440b      	add	r3, r1
 8006102:	761a      	strb	r2, [r3, #24]
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	e000e100 	.word	0xe000e100
 8006114:	e000ed00 	.word	0xe000ed00

08006118 <NVIC_EncodePriority>:
{
 8006118:	b480      	push	{r7}
 800611a:	b089      	sub	sp, #36	; 0x24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f1c3 0307 	rsb	r3, r3, #7
 8006132:	2b04      	cmp	r3, #4
 8006134:	bf28      	it	cs
 8006136:	2304      	movcs	r3, #4
 8006138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	3304      	adds	r3, #4
 800613e:	2b06      	cmp	r3, #6
 8006140:	d902      	bls.n	8006148 <NVIC_EncodePriority+0x30>
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	3b03      	subs	r3, #3
 8006146:	e000      	b.n	800614a <NVIC_EncodePriority+0x32>
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800614c:	f04f 32ff 	mov.w	r2, #4294967295
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	43da      	mvns	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	401a      	ands	r2, r3
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006160:	f04f 31ff 	mov.w	r1, #4294967295
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	fa01 f303 	lsl.w	r3, r1, r3
 800616a:	43d9      	mvns	r1, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006170:	4313      	orrs	r3, r2
}
 8006172:	4618      	mov	r0, r3
 8006174:	3724      	adds	r7, #36	; 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff ff28 	bl	8005fdc <__NVIC_SetPriorityGrouping>
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061a6:	f7ff ff3d 	bl	8006024 <__NVIC_GetPriorityGrouping>
 80061aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	6978      	ldr	r0, [r7, #20]
 80061b2:	f7ff ffb1 	bl	8006118 <NVIC_EncodePriority>
 80061b6:	4602      	mov	r2, r0
 80061b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff ff80 	bl	80060c4 <__NVIC_SetPriority>
}
 80061c4:	bf00      	nop
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff ff30 	bl	8006040 <__NVIC_EnableIRQ>
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80061f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff ff40 	bl	800607c <__NVIC_DisableIRQ>
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e054      	b.n	80062c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	7f5b      	ldrb	r3, [r3, #29]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d105      	bne.n	800622c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fc fca0 	bl	8002b6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	791b      	ldrb	r3, [r3, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10c      	bne.n	8006254 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <HAL_CRC_Init+0xc4>)
 8006240:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0218 	bic.w	r2, r2, #24
 8006250:	609a      	str	r2, [r3, #8]
 8006252:	e00c      	b.n	800626e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6899      	ldr	r1, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	461a      	mov	r2, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f834 	bl	80062cc <HAL_CRCEx_Polynomial_Set>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e028      	b.n	80062c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	795b      	ldrb	r3, [r3, #5]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d105      	bne.n	8006282 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f04f 32ff 	mov.w	r2, #4294967295
 800627e:	611a      	str	r2, [r3, #16]
 8006280:	e004      	b.n	800628c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6912      	ldr	r2, [r2, #16]
 800628a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	04c11db7 	.word	0x04c11db7

080062cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80062dc:	231f      	movs	r3, #31
 80062de:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80062e0:	bf00      	nop
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1e5a      	subs	r2, r3, #1
 80062e6:	613a      	str	r2, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d009      	beq.n	8006300 <HAL_CRCEx_Polynomial_Set+0x34>
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b18      	cmp	r3, #24
 8006304:	d846      	bhi.n	8006394 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	0800639b 	.word	0x0800639b
 8006310:	08006395 	.word	0x08006395
 8006314:	08006395 	.word	0x08006395
 8006318:	08006395 	.word	0x08006395
 800631c:	08006395 	.word	0x08006395
 8006320:	08006395 	.word	0x08006395
 8006324:	08006395 	.word	0x08006395
 8006328:	08006395 	.word	0x08006395
 800632c:	08006389 	.word	0x08006389
 8006330:	08006395 	.word	0x08006395
 8006334:	08006395 	.word	0x08006395
 8006338:	08006395 	.word	0x08006395
 800633c:	08006395 	.word	0x08006395
 8006340:	08006395 	.word	0x08006395
 8006344:	08006395 	.word	0x08006395
 8006348:	08006395 	.word	0x08006395
 800634c:	0800637d 	.word	0x0800637d
 8006350:	08006395 	.word	0x08006395
 8006354:	08006395 	.word	0x08006395
 8006358:	08006395 	.word	0x08006395
 800635c:	08006395 	.word	0x08006395
 8006360:	08006395 	.word	0x08006395
 8006364:	08006395 	.word	0x08006395
 8006368:	08006395 	.word	0x08006395
 800636c:	08006371 	.word	0x08006371
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b06      	cmp	r3, #6
 8006374:	d913      	bls.n	800639e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800637a:	e010      	b.n	800639e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b07      	cmp	r3, #7
 8006380:	d90f      	bls.n	80063a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006386:	e00c      	b.n	80063a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2b0f      	cmp	r3, #15
 800638c:	d90b      	bls.n	80063a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006392:	e008      	b.n	80063a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
      break;
 8006398:	e006      	b.n	80063a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800639a:	bf00      	nop
 800639c:	e004      	b.n	80063a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80063a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10d      	bne.n	80063ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f023 0118 	bic.w	r1, r3, #24
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e069      	b.n	80064be <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fc fbd8 	bl	8002bac <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6819      	ldr	r1, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b2a      	ldr	r3, [pc, #168]	; (80064c8 <HAL_DCMI_Init+0xf0>)
 800641e:	400b      	ands	r3, r1
 8006420:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6819      	ldr	r1, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006436:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006442:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800644e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800645a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006466:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b10      	cmp	r3, #16
 8006476:	d112      	bne.n	800649e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	7f1b      	ldrb	r3, [r3, #28]
 800647c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	7f5b      	ldrb	r3, [r3, #29]
 8006482:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006484:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	7f9b      	ldrb	r3, [r3, #30]
 800648a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800648c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	7fdb      	ldrb	r3, [r3, #31]
 8006494:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800649a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800649c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 021e 	orr.w	r2, r2, #30
 80064ac:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	ffe0f007 	.word	0xffe0f007

080064cc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d016      	beq.n	8006514 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2204      	movs	r2, #4
 80064ec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f2:	f043 0202 	orr.w	r2, r3, #2
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2204      	movs	r2, #4
 80064fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006506:	4a35      	ldr	r2, [pc, #212]	; (80065dc <HAL_DCMI_IRQHandler+0x110>)
 8006508:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fa2a 	bl	8006968 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01e      	beq.n	800655c <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2202      	movs	r2, #2
 8006524:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652a:	f043 0201 	orr.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2204      	movs	r2, #4
 8006536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653e:	4a27      	ldr	r2, [pc, #156]	; (80065dc <HAL_DCMI_IRQHandler+0x110>)
 8006540:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fa0e 	bl	8006968 <HAL_DMA_Abort_IT>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f86a 	bl	8006630 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b00      	cmp	r3, #0
 8006564:	d006      	beq.n	8006574 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2210      	movs	r2, #16
 800656c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f840 	bl	80065f4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d006      	beq.n	800658c <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2208      	movs	r2, #8
 8006584:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f83e 	bl	8006608 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01d      	beq.n	80065d2 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d107      	bne.n	80065b4 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 021e 	bic.w	r2, r2, #30
 80065b2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2201      	movs	r2, #1
 80065ca:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f825 	bl	800661c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	08006631 	.word	0x08006631

080065e0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006644:	2b02      	cmp	r3, #2
 8006646:	d009      	beq.n	800665c <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7ff ffbf 	bl	80065e0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006678:	f7ff f9f8 	bl	8005a6c <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e099      	b.n	80067bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0201 	bic.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066a8:	e00f      	b.n	80066ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066aa:	f7ff f9df 	bl	8005a6c <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d908      	bls.n	80066ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2203      	movs	r2, #3
 80066c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e078      	b.n	80067bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e8      	bne.n	80066aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4b38      	ldr	r3, [pc, #224]	; (80067c4 <HAL_DMA_Init+0x158>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006702:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800670e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	2b04      	cmp	r3, #4
 8006722:	d107      	bne.n	8006734 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672c:	4313      	orrs	r3, r2
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	2b04      	cmp	r3, #4
 800675c:	d117      	bne.n	800678e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00e      	beq.n	800678e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fb15 	bl	8006da0 <DMA_CheckFifoParam>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2240      	movs	r2, #64	; 0x40
 8006780:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800678a:	2301      	movs	r3, #1
 800678c:	e016      	b.n	80067bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 facc 	bl	8006d34 <DMA_CalcBaseAndBitshift>
 800679c:	4603      	mov	r3, r0
 800679e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a4:	223f      	movs	r2, #63	; 0x3f
 80067a6:	409a      	lsls	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	f010803f 	.word	0xf010803f

080067c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <HAL_DMA_Start_IT+0x26>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e048      	b.n	8006880 <HAL_DMA_Start_IT+0xb8>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d137      	bne.n	8006872 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2202      	movs	r2, #2
 8006806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 fa5e 	bl	8006cd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006820:	223f      	movs	r2, #63	; 0x3f
 8006822:	409a      	lsls	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0216 	orr.w	r2, r2, #22
 8006836:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006846:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0208 	orr.w	r2, r2, #8
 800685e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	e005      	b.n	800687e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800687a:	2302      	movs	r3, #2
 800687c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006896:	f7ff f8e9 	bl	8005a6c <HAL_GetTick>
 800689a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d008      	beq.n	80068ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2280      	movs	r2, #128	; 0x80
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e052      	b.n	8006960 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0216 	bic.w	r2, r2, #22
 80068c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d103      	bne.n	80068ea <HAL_DMA_Abort+0x62>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0208 	bic.w	r2, r2, #8
 80068f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0201 	bic.w	r2, r2, #1
 8006908:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800690a:	e013      	b.n	8006934 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800690c:	f7ff f8ae 	bl	8005a6c <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b05      	cmp	r3, #5
 8006918:	d90c      	bls.n	8006934 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2203      	movs	r2, #3
 800692c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e015      	b.n	8006960 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e4      	bne.n	800690c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006946:	223f      	movs	r2, #63	; 0x3f
 8006948:	409a      	lsls	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d004      	beq.n	8006986 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2280      	movs	r2, #128	; 0x80
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e00c      	b.n	80069a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2205      	movs	r2, #5
 800698a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80069b8:	4b8e      	ldr	r3, [pc, #568]	; (8006bf4 <HAL_DMA_IRQHandler+0x248>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a8e      	ldr	r2, [pc, #568]	; (8006bf8 <HAL_DMA_IRQHandler+0x24c>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	0a9b      	lsrs	r3, r3, #10
 80069c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d6:	2208      	movs	r2, #8
 80069d8:	409a      	lsls	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4013      	ands	r3, r2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01a      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d013      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0204 	bic.w	r2, r2, #4
 80069fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	2208      	movs	r2, #8
 8006a06:	409a      	lsls	r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a10:	f043 0201 	orr.w	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	409a      	lsls	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d012      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00b      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	f043 0202 	orr.w	r2, r3, #2
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a52:	2204      	movs	r2, #4
 8006a54:	409a      	lsls	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d012      	beq.n	8006a84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a70:	2204      	movs	r2, #4
 8006a72:	409a      	lsls	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	f043 0204 	orr.w	r2, r3, #4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a88:	2210      	movs	r2, #16
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d043      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d03c      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	409a      	lsls	r2, r3
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d018      	beq.n	8006aee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d108      	bne.n	8006adc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d024      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
 8006ada:	e01f      	b.n	8006b1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01b      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
 8006aec:	e016      	b.n	8006b1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d107      	bne.n	8006b0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0208 	bic.w	r2, r2, #8
 8006b0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b20:	2220      	movs	r2, #32
 8006b22:	409a      	lsls	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4013      	ands	r3, r2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 808f 	beq.w	8006c4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8087 	beq.w	8006c4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b42:	2220      	movs	r2, #32
 8006b44:	409a      	lsls	r2, r3
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b05      	cmp	r3, #5
 8006b54:	d136      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0216 	bic.w	r2, r2, #22
 8006b64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695a      	ldr	r2, [r3, #20]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <HAL_DMA_IRQHandler+0x1da>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0208 	bic.w	r2, r2, #8
 8006b94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9a:	223f      	movs	r2, #63	; 0x3f
 8006b9c:	409a      	lsls	r2, r3
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d07e      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
        }
        return;
 8006bc2:	e079      	b.n	8006cb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01d      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10d      	bne.n	8006bfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d031      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	4798      	blx	r3
 8006bf0:	e02c      	b.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
 8006bf2:	bf00      	nop
 8006bf4:	20000008 	.word	0x20000008
 8006bf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d023      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
 8006c0c:	e01e      	b.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10f      	bne.n	8006c3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0210 	bic.w	r2, r2, #16
 8006c2a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d032      	beq.n	8006cba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d022      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2205      	movs	r2, #5
 8006c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0201 	bic.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d307      	bcc.n	8006c94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f2      	bne.n	8006c78 <HAL_DMA_IRQHandler+0x2cc>
 8006c92:	e000      	b.n	8006c96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c94:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
 8006cb6:	e000      	b.n	8006cba <HAL_DMA_IRQHandler+0x30e>
        return;
 8006cb8:	bf00      	nop
    }
  }
}
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d108      	bne.n	8006d18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d16:	e007      	b.n	8006d28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	60da      	str	r2, [r3, #12]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	3b10      	subs	r3, #16
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <DMA_CalcBaseAndBitshift+0x60>)
 8006d46:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4a:	091b      	lsrs	r3, r3, #4
 8006d4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d4e:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <DMA_CalcBaseAndBitshift+0x64>)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d908      	bls.n	8006d74 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <DMA_CalcBaseAndBitshift+0x68>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	1d1a      	adds	r2, r3, #4
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	659a      	str	r2, [r3, #88]	; 0x58
 8006d72:	e006      	b.n	8006d82 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <DMA_CalcBaseAndBitshift+0x68>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	aaaaaaab 	.word	0xaaaaaaab
 8006d98:	0801ba34 	.word	0x0801ba34
 8006d9c:	fffffc00 	.word	0xfffffc00

08006da0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d11f      	bne.n	8006dfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d856      	bhi.n	8006e6e <DMA_CheckFifoParam+0xce>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <DMA_CheckFifoParam+0x28>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006deb 	.word	0x08006deb
 8006dd0:	08006dd9 	.word	0x08006dd9
 8006dd4:	08006e6f 	.word	0x08006e6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d046      	beq.n	8006e72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006de8:	e043      	b.n	8006e72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006df2:	d140      	bne.n	8006e76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006df8:	e03d      	b.n	8006e76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e02:	d121      	bne.n	8006e48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d837      	bhi.n	8006e7a <DMA_CheckFifoParam+0xda>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <DMA_CheckFifoParam+0x70>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e21 	.word	0x08006e21
 8006e14:	08006e27 	.word	0x08006e27
 8006e18:	08006e21 	.word	0x08006e21
 8006e1c:	08006e39 	.word	0x08006e39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
      break;
 8006e24:	e030      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d025      	beq.n	8006e7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e36:	e022      	b.n	8006e7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e40:	d11f      	bne.n	8006e82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e46:	e01c      	b.n	8006e82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d903      	bls.n	8006e56 <DMA_CheckFifoParam+0xb6>
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d003      	beq.n	8006e5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e54:	e018      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5a:	e015      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00e      	beq.n	8006e86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6c:	e00b      	b.n	8006e86 <DMA_CheckFifoParam+0xe6>
      break;
 8006e6e:	bf00      	nop
 8006e70:	e00a      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e72:	bf00      	nop
 8006e74:	e008      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e76:	bf00      	nop
 8006e78:	e006      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e7a:	bf00      	nop
 8006e7c:	e004      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e7e:	bf00      	nop
 8006e80:	e002      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;   
 8006e82:	bf00      	nop
 8006e84:	e000      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e86:	bf00      	nop
    }
  } 
  
  return status; 
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop

08006e98 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e039      	b.n	8006f1e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fb ff6e 	bl	8002da0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee8:	f023 0107 	bic.w	r1, r3, #7
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006efe:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <HAL_DMA2D_Init+0x90>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	68d1      	ldr	r1, [r2, #12]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6812      	ldr	r2, [r2, #0]
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	ffffc000 	.word	0xffffc000

08006f2c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_DMA2D_Start+0x1c>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e018      	b.n	8006f7a <HAL_DMA2D_Start+0x4e>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 fa98 	bl	8007498 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b086      	sub	sp, #24
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d056      	beq.n	800704c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f9e:	f7fe fd65 	bl	8005a6c <HAL_GetTick>
 8006fa2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006fa4:	e04b      	b.n	800703e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d023      	beq.n	8007000 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc6:	f043 0202 	orr.w	r2, r3, #2
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	f043 0201 	orr.w	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2221      	movs	r2, #33	; 0x21
 8006fea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2204      	movs	r2, #4
 8006ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0a5      	b.n	800714c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007006:	d01a      	beq.n	800703e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007008:	f7fe fd30 	bl	8005a6c <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d302      	bcc.n	800701e <HAL_DMA2D_PollForTransfer+0x9c>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10f      	bne.n	800703e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007022:	f043 0220 	orr.w	r2, r3, #32
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2203      	movs	r2, #3
 800702e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e086      	b.n	800714c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0ac      	beq.n	8006fa6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d061      	beq.n	8007132 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800706e:	f7fe fcfd 	bl	8005a6c <HAL_GetTick>
 8007072:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007074:	e056      	b.n	8007124 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007084:	2b00      	cmp	r3, #0
 8007086:	d02e      	beq.n	80070e6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	f043 0204 	orr.w	r2, r3, #4
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ac:	f043 0202 	orr.w	r2, r3, #2
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c2:	f043 0201 	orr.w	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2229      	movs	r2, #41	; 0x29
 80070d0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2204      	movs	r2, #4
 80070d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e032      	b.n	800714c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d01a      	beq.n	8007124 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070ee:	f7fe fcbd 	bl	8005a6c <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <HAL_DMA2D_PollForTransfer+0x182>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10f      	bne.n	8007124 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007108:	f043 0220 	orr.w	r2, r3, #32
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2203      	movs	r2, #3
 8007114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e013      	b.n	800714c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0a1      	beq.n	8007076 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2212      	movs	r2, #18
 8007138:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d026      	beq.n	80071c4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717c:	2b00      	cmp	r3, #0
 800717e:	d021      	beq.n	80071c4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800718e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007194:	f043 0201 	orr.w	r2, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2201      	movs	r2, #1
 80071a2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2204      	movs	r2, #4
 80071a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d026      	beq.n	800721c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d021      	beq.n	800721c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071e6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2220      	movs	r2, #32
 80071ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f4:	f043 0202 	orr.w	r2, r3, #2
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2204      	movs	r2, #4
 8007200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d026      	beq.n	8007274 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800722c:	2b00      	cmp	r3, #0
 800722e:	d021      	beq.n	8007274 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800723e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2208      	movs	r2, #8
 8007246:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	f043 0204 	orr.w	r2, r3, #4
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2204      	movs	r2, #4
 8007258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	d013      	beq.n	80072a6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00e      	beq.n	80072a6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007296:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2204      	movs	r2, #4
 800729e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f853 	bl	800734c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d024      	beq.n	80072fa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d01f      	beq.n	80072fa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2202      	movs	r2, #2
 80072d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01f      	beq.n	8007344 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01a      	beq.n	8007344 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800731c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2210      	movs	r2, #16
 8007324:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f80e 	bl	8007360 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_DMA2D_ConfigLayer+0x20>
 8007390:	2302      	movs	r3, #2
 8007392:	e079      	b.n	8007488 <HAL_DMA2D_ConfigLayer+0x114>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	3318      	adds	r3, #24
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	041b      	lsls	r3, r3, #16
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80073be:	4b35      	ldr	r3, [pc, #212]	; (8007494 <HAL_DMA2D_ConfigLayer+0x120>)
 80073c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b0a      	cmp	r3, #10
 80073c8:	d003      	beq.n	80073d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d107      	bne.n	80073e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e005      	b.n	80073ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	061b      	lsls	r3, r3, #24
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d120      	bne.n	8007436 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	43db      	mvns	r3, r3
 80073fe:	ea02 0103 	and.w	r1, r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	430a      	orrs	r2, r1
 800740a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b0a      	cmp	r3, #10
 800741c:	d003      	beq.n	8007426 <HAL_DMA2D_ConfigLayer+0xb2>
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b09      	cmp	r3, #9
 8007424:	d127      	bne.n	8007476 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007432:	629a      	str	r2, [r3, #40]	; 0x28
 8007434:	e01f      	b.n	8007476 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	43db      	mvns	r3, r3
 8007440:	ea02 0103 	and.w	r1, r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	430a      	orrs	r2, r1
 800744c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	6812      	ldr	r2, [r2, #0]
 8007456:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2b0a      	cmp	r3, #10
 800745e:	d003      	beq.n	8007468 <HAL_DMA2D_ConfigLayer+0xf4>
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2b09      	cmp	r3, #9
 8007466:	d106      	bne.n	8007476 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007474:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	ff03000f 	.word	0xff03000f

08007498 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007498:	b480      	push	{r7}
 800749a:	b08b      	sub	sp, #44	; 0x2c
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	041a      	lsls	r2, r3, #16
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	431a      	orrs	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074d0:	d174      	bne.n	80075bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80074d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d108      	bne.n	800750a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	4313      	orrs	r3, r2
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
 8007508:	e053      	b.n	80075b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d106      	bne.n	8007520 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	4313      	orrs	r3, r2
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
 800751e:	e048      	b.n	80075b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b02      	cmp	r3, #2
 8007526:	d111      	bne.n	800754c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	0cdb      	lsrs	r3, r3, #19
 800752c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	0a9b      	lsrs	r3, r3, #10
 8007532:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	08db      	lsrs	r3, r3, #3
 8007538:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	02db      	lsls	r3, r3, #11
 8007542:	4313      	orrs	r3, r2
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
 800754a:	e032      	b.n	80075b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	2b03      	cmp	r3, #3
 8007552:	d117      	bne.n	8007584 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	0fdb      	lsrs	r3, r3, #31
 8007558:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	0cdb      	lsrs	r3, r3, #19
 800755e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	0adb      	lsrs	r3, r3, #11
 8007564:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	08db      	lsrs	r3, r3, #3
 800756a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	029b      	lsls	r3, r3, #10
 8007574:	431a      	orrs	r2, r3
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	03db      	lsls	r3, r3, #15
 800757a:	4313      	orrs	r3, r2
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
 8007582:	e016      	b.n	80075b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	0f1b      	lsrs	r3, r3, #28
 8007588:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	0d1b      	lsrs	r3, r3, #20
 800758e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	0b1b      	lsrs	r3, r3, #12
 8007594:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	011a      	lsls	r2, r3, #4
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	431a      	orrs	r2, r3
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	031b      	lsls	r3, r3, #12
 80075aa:	4313      	orrs	r3, r2
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80075ba:	e003      	b.n	80075c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	60da      	str	r2, [r3, #12]
}
 80075c4:	bf00      	nop
 80075c6:	372c      	adds	r7, #44	; 0x2c
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b089      	sub	sp, #36	; 0x24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80075da:	2300      	movs	r3, #0
 80075dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80075de:	2300      	movs	r3, #0
 80075e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80075e2:	2300      	movs	r3, #0
 80075e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	e175      	b.n	80078dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80075f0:	2201      	movs	r2, #1
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	fa02 f303 	lsl.w	r3, r2, r3
 80075f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4013      	ands	r3, r2
 8007602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	429a      	cmp	r2, r3
 800760a:	f040 8164 	bne.w	80078d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d00b      	beq.n	800762e <HAL_GPIO_Init+0x5e>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d007      	beq.n	800762e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007622:	2b11      	cmp	r3, #17
 8007624:	d003      	beq.n	800762e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b12      	cmp	r3, #18
 800762c:	d130      	bne.n	8007690 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	2203      	movs	r2, #3
 800763a:	fa02 f303 	lsl.w	r3, r2, r3
 800763e:	43db      	mvns	r3, r3
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	4013      	ands	r3, r2
 8007644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	4313      	orrs	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007664:	2201      	movs	r2, #1
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	fa02 f303 	lsl.w	r3, r2, r3
 800766c:	43db      	mvns	r3, r3
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	4013      	ands	r3, r2
 8007672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	091b      	lsrs	r3, r3, #4
 800767a:	f003 0201 	and.w	r2, r3, #1
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	4313      	orrs	r3, r2
 8007688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	2203      	movs	r2, #3
 800769c:	fa02 f303 	lsl.w	r3, r2, r3
 80076a0:	43db      	mvns	r3, r3
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	4013      	ands	r3, r2
 80076a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d003      	beq.n	80076d0 <HAL_GPIO_Init+0x100>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b12      	cmp	r3, #18
 80076ce:	d123      	bne.n	8007718 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	08da      	lsrs	r2, r3, #3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3208      	adds	r2, #8
 80076d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	220f      	movs	r2, #15
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	43db      	mvns	r3, r3
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	4013      	ands	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	4313      	orrs	r3, r2
 8007708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	08da      	lsrs	r2, r3, #3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3208      	adds	r2, #8
 8007712:	69b9      	ldr	r1, [r7, #24]
 8007714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	2203      	movs	r2, #3
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	43db      	mvns	r3, r3
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	4013      	ands	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f003 0203 	and.w	r2, r3, #3
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	fa02 f303 	lsl.w	r3, r2, r3
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	4313      	orrs	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80be 	beq.w	80078d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800775a:	4b66      	ldr	r3, [pc, #408]	; (80078f4 <HAL_GPIO_Init+0x324>)
 800775c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775e:	4a65      	ldr	r2, [pc, #404]	; (80078f4 <HAL_GPIO_Init+0x324>)
 8007760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007764:	6453      	str	r3, [r2, #68]	; 0x44
 8007766:	4b63      	ldr	r3, [pc, #396]	; (80078f4 <HAL_GPIO_Init+0x324>)
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007772:	4a61      	ldr	r2, [pc, #388]	; (80078f8 <HAL_GPIO_Init+0x328>)
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	089b      	lsrs	r3, r3, #2
 8007778:	3302      	adds	r3, #2
 800777a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	220f      	movs	r2, #15
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	43db      	mvns	r3, r3
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	4013      	ands	r3, r2
 8007794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a58      	ldr	r2, [pc, #352]	; (80078fc <HAL_GPIO_Init+0x32c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d037      	beq.n	800780e <HAL_GPIO_Init+0x23e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a57      	ldr	r2, [pc, #348]	; (8007900 <HAL_GPIO_Init+0x330>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d031      	beq.n	800780a <HAL_GPIO_Init+0x23a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a56      	ldr	r2, [pc, #344]	; (8007904 <HAL_GPIO_Init+0x334>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d02b      	beq.n	8007806 <HAL_GPIO_Init+0x236>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a55      	ldr	r2, [pc, #340]	; (8007908 <HAL_GPIO_Init+0x338>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d025      	beq.n	8007802 <HAL_GPIO_Init+0x232>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a54      	ldr	r2, [pc, #336]	; (800790c <HAL_GPIO_Init+0x33c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d01f      	beq.n	80077fe <HAL_GPIO_Init+0x22e>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a53      	ldr	r2, [pc, #332]	; (8007910 <HAL_GPIO_Init+0x340>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d019      	beq.n	80077fa <HAL_GPIO_Init+0x22a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a52      	ldr	r2, [pc, #328]	; (8007914 <HAL_GPIO_Init+0x344>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d013      	beq.n	80077f6 <HAL_GPIO_Init+0x226>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a51      	ldr	r2, [pc, #324]	; (8007918 <HAL_GPIO_Init+0x348>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d00d      	beq.n	80077f2 <HAL_GPIO_Init+0x222>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a50      	ldr	r2, [pc, #320]	; (800791c <HAL_GPIO_Init+0x34c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d007      	beq.n	80077ee <HAL_GPIO_Init+0x21e>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a4f      	ldr	r2, [pc, #316]	; (8007920 <HAL_GPIO_Init+0x350>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d101      	bne.n	80077ea <HAL_GPIO_Init+0x21a>
 80077e6:	2309      	movs	r3, #9
 80077e8:	e012      	b.n	8007810 <HAL_GPIO_Init+0x240>
 80077ea:	230a      	movs	r3, #10
 80077ec:	e010      	b.n	8007810 <HAL_GPIO_Init+0x240>
 80077ee:	2308      	movs	r3, #8
 80077f0:	e00e      	b.n	8007810 <HAL_GPIO_Init+0x240>
 80077f2:	2307      	movs	r3, #7
 80077f4:	e00c      	b.n	8007810 <HAL_GPIO_Init+0x240>
 80077f6:	2306      	movs	r3, #6
 80077f8:	e00a      	b.n	8007810 <HAL_GPIO_Init+0x240>
 80077fa:	2305      	movs	r3, #5
 80077fc:	e008      	b.n	8007810 <HAL_GPIO_Init+0x240>
 80077fe:	2304      	movs	r3, #4
 8007800:	e006      	b.n	8007810 <HAL_GPIO_Init+0x240>
 8007802:	2303      	movs	r3, #3
 8007804:	e004      	b.n	8007810 <HAL_GPIO_Init+0x240>
 8007806:	2302      	movs	r3, #2
 8007808:	e002      	b.n	8007810 <HAL_GPIO_Init+0x240>
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <HAL_GPIO_Init+0x240>
 800780e:	2300      	movs	r3, #0
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	f002 0203 	and.w	r2, r2, #3
 8007816:	0092      	lsls	r2, r2, #2
 8007818:	4093      	lsls	r3, r2
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	4313      	orrs	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007820:	4935      	ldr	r1, [pc, #212]	; (80078f8 <HAL_GPIO_Init+0x328>)
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	089b      	lsrs	r3, r3, #2
 8007826:	3302      	adds	r3, #2
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800782e:	4b3d      	ldr	r3, [pc, #244]	; (8007924 <HAL_GPIO_Init+0x354>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	43db      	mvns	r3, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4013      	ands	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007852:	4a34      	ldr	r2, [pc, #208]	; (8007924 <HAL_GPIO_Init+0x354>)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007858:	4b32      	ldr	r3, [pc, #200]	; (8007924 <HAL_GPIO_Init+0x354>)
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	43db      	mvns	r3, r3
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	4013      	ands	r3, r2
 8007866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	4313      	orrs	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800787c:	4a29      	ldr	r2, [pc, #164]	; (8007924 <HAL_GPIO_Init+0x354>)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007882:	4b28      	ldr	r3, [pc, #160]	; (8007924 <HAL_GPIO_Init+0x354>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	43db      	mvns	r3, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4013      	ands	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80078a6:	4a1f      	ldr	r2, [pc, #124]	; (8007924 <HAL_GPIO_Init+0x354>)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80078ac:	4b1d      	ldr	r3, [pc, #116]	; (8007924 <HAL_GPIO_Init+0x354>)
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	43db      	mvns	r3, r3
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	4013      	ands	r3, r2
 80078ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80078d0:	4a14      	ldr	r2, [pc, #80]	; (8007924 <HAL_GPIO_Init+0x354>)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	3301      	adds	r3, #1
 80078da:	61fb      	str	r3, [r7, #28]
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2b0f      	cmp	r3, #15
 80078e0:	f67f ae86 	bls.w	80075f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	3724      	adds	r7, #36	; 0x24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40013800 	.word	0x40013800
 80078fc:	40020000 	.word	0x40020000
 8007900:	40020400 	.word	0x40020400
 8007904:	40020800 	.word	0x40020800
 8007908:	40020c00 	.word	0x40020c00
 800790c:	40021000 	.word	0x40021000
 8007910:	40021400 	.word	0x40021400
 8007914:	40021800 	.word	0x40021800
 8007918:	40021c00 	.word	0x40021c00
 800791c:	40022000 	.word	0x40022000
 8007920:	40022400 	.word	0x40022400
 8007924:	40013c00 	.word	0x40013c00

08007928 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007932:	2300      	movs	r3, #0
 8007934:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800793a:	2300      	movs	r3, #0
 800793c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800793e:	2300      	movs	r3, #0
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	e0d9      	b.n	8007af8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007944:	2201      	movs	r2, #1
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	fa02 f303 	lsl.w	r3, r2, r3
 800794c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4013      	ands	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	429a      	cmp	r2, r3
 800795c:	f040 80c9 	bne.w	8007af2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007960:	4a6b      	ldr	r2, [pc, #428]	; (8007b10 <HAL_GPIO_DeInit+0x1e8>)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	089b      	lsrs	r3, r3, #2
 8007966:	3302      	adds	r3, #2
 8007968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	220f      	movs	r2, #15
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	4013      	ands	r3, r2
 8007980:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a63      	ldr	r2, [pc, #396]	; (8007b14 <HAL_GPIO_DeInit+0x1ec>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d037      	beq.n	80079fa <HAL_GPIO_DeInit+0xd2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a62      	ldr	r2, [pc, #392]	; (8007b18 <HAL_GPIO_DeInit+0x1f0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d031      	beq.n	80079f6 <HAL_GPIO_DeInit+0xce>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a61      	ldr	r2, [pc, #388]	; (8007b1c <HAL_GPIO_DeInit+0x1f4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d02b      	beq.n	80079f2 <HAL_GPIO_DeInit+0xca>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a60      	ldr	r2, [pc, #384]	; (8007b20 <HAL_GPIO_DeInit+0x1f8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d025      	beq.n	80079ee <HAL_GPIO_DeInit+0xc6>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a5f      	ldr	r2, [pc, #380]	; (8007b24 <HAL_GPIO_DeInit+0x1fc>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01f      	beq.n	80079ea <HAL_GPIO_DeInit+0xc2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a5e      	ldr	r2, [pc, #376]	; (8007b28 <HAL_GPIO_DeInit+0x200>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d019      	beq.n	80079e6 <HAL_GPIO_DeInit+0xbe>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a5d      	ldr	r2, [pc, #372]	; (8007b2c <HAL_GPIO_DeInit+0x204>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <HAL_GPIO_DeInit+0xba>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a5c      	ldr	r2, [pc, #368]	; (8007b30 <HAL_GPIO_DeInit+0x208>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00d      	beq.n	80079de <HAL_GPIO_DeInit+0xb6>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a5b      	ldr	r2, [pc, #364]	; (8007b34 <HAL_GPIO_DeInit+0x20c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d007      	beq.n	80079da <HAL_GPIO_DeInit+0xb2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a5a      	ldr	r2, [pc, #360]	; (8007b38 <HAL_GPIO_DeInit+0x210>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d101      	bne.n	80079d6 <HAL_GPIO_DeInit+0xae>
 80079d2:	2309      	movs	r3, #9
 80079d4:	e012      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079d6:	230a      	movs	r3, #10
 80079d8:	e010      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079da:	2308      	movs	r3, #8
 80079dc:	e00e      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079de:	2307      	movs	r3, #7
 80079e0:	e00c      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079e2:	2306      	movs	r3, #6
 80079e4:	e00a      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079e6:	2305      	movs	r3, #5
 80079e8:	e008      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079ea:	2304      	movs	r3, #4
 80079ec:	e006      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079ee:	2303      	movs	r3, #3
 80079f0:	e004      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e002      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <HAL_GPIO_DeInit+0xd4>
 80079fa:	2300      	movs	r3, #0
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	f002 0203 	and.w	r2, r2, #3
 8007a02:	0092      	lsls	r2, r2, #2
 8007a04:	4093      	lsls	r3, r2
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d132      	bne.n	8007a72 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007a0c:	4b4b      	ldr	r3, [pc, #300]	; (8007b3c <HAL_GPIO_DeInit+0x214>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	43db      	mvns	r3, r3
 8007a14:	4949      	ldr	r1, [pc, #292]	; (8007b3c <HAL_GPIO_DeInit+0x214>)
 8007a16:	4013      	ands	r3, r2
 8007a18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007a1a:	4b48      	ldr	r3, [pc, #288]	; (8007b3c <HAL_GPIO_DeInit+0x214>)
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	4946      	ldr	r1, [pc, #280]	; (8007b3c <HAL_GPIO_DeInit+0x214>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007a28:	4b44      	ldr	r3, [pc, #272]	; (8007b3c <HAL_GPIO_DeInit+0x214>)
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	43db      	mvns	r3, r3
 8007a30:	4942      	ldr	r1, [pc, #264]	; (8007b3c <HAL_GPIO_DeInit+0x214>)
 8007a32:	4013      	ands	r3, r2
 8007a34:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007a36:	4b41      	ldr	r3, [pc, #260]	; (8007b3c <HAL_GPIO_DeInit+0x214>)
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	43db      	mvns	r3, r3
 8007a3e:	493f      	ldr	r1, [pc, #252]	; (8007b3c <HAL_GPIO_DeInit+0x214>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	220f      	movs	r2, #15
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007a54:	4a2e      	ldr	r2, [pc, #184]	; (8007b10 <HAL_GPIO_DeInit+0x1e8>)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	3302      	adds	r3, #2
 8007a5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	43da      	mvns	r2, r3
 8007a64:	482a      	ldr	r0, [pc, #168]	; (8007b10 <HAL_GPIO_DeInit+0x1e8>)
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	089b      	lsrs	r3, r3, #2
 8007a6a:	400a      	ands	r2, r1
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	2103      	movs	r1, #3
 8007a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a80:	43db      	mvns	r3, r3
 8007a82:	401a      	ands	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	08da      	lsrs	r2, r3, #3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3208      	adds	r2, #8
 8007a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	220f      	movs	r2, #15
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	08d2      	lsrs	r2, r2, #3
 8007aa8:	4019      	ands	r1, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3208      	adds	r2, #8
 8007aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	2103      	movs	r1, #3
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	2101      	movs	r1, #1
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	401a      	ands	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	2103      	movs	r1, #3
 8007ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aea:	43db      	mvns	r3, r3
 8007aec:	401a      	ands	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	3301      	adds	r3, #1
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	f67f af22 	bls.w	8007944 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	40013800 	.word	0x40013800
 8007b14:	40020000 	.word	0x40020000
 8007b18:	40020400 	.word	0x40020400
 8007b1c:	40020800 	.word	0x40020800
 8007b20:	40020c00 	.word	0x40020c00
 8007b24:	40021000 	.word	0x40021000
 8007b28:	40021400 	.word	0x40021400
 8007b2c:	40021800 	.word	0x40021800
 8007b30:	40021c00 	.word	0x40021c00
 8007b34:	40022000 	.word	0x40022000
 8007b38:	40022400 	.word	0x40022400
 8007b3c:	40013c00 	.word	0x40013c00

08007b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	887b      	ldrh	r3, [r7, #2]
 8007b52:	4013      	ands	r3, r2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
 8007b5c:	e001      	b.n	8007b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	807b      	strh	r3, [r7, #2]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b80:	787b      	ldrb	r3, [r7, #1]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b86:	887a      	ldrh	r2, [r7, #2]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007b8c:	e003      	b.n	8007b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007b8e:	887b      	ldrh	r3, [r7, #2]
 8007b90:	041a      	lsls	r2, r3, #16
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	619a      	str	r2, [r3, #24]
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007bb4:	887a      	ldrh	r2, [r7, #2]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4013      	ands	r3, r2
 8007bba:	041a      	lsls	r2, r3, #16
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	43d9      	mvns	r1, r3
 8007bc0:	887b      	ldrh	r3, [r7, #2]
 8007bc2:	400b      	ands	r3, r1
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	619a      	str	r2, [r3, #24]
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007be2:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007be4:	695a      	ldr	r2, [r3, #20]
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	4013      	ands	r3, r2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d006      	beq.n	8007bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007bee:	4a05      	ldr	r2, [pc, #20]	; (8007c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bf0:	88fb      	ldrh	r3, [r7, #6]
 8007bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f806 	bl	8007c08 <HAL_GPIO_EXTI_Callback>
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40013c00 	.word	0x40013c00

08007c08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c20:	b08f      	sub	sp, #60	; 0x3c
 8007c22:	af0a      	add	r7, sp, #40	; 0x28
 8007c24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e054      	b.n	8007cda <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f00f fe80 	bl	8017950 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2203      	movs	r2, #3
 8007c54:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f009 fd91 	bl	8011796 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	687e      	ldr	r6, [r7, #4]
 8007c7c:	466d      	mov	r5, sp
 8007c7e:	f106 0410 	add.w	r4, r6, #16
 8007c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c92:	1d33      	adds	r3, r6, #4
 8007c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c96:	6838      	ldr	r0, [r7, #0]
 8007c98:	f009 fd14 	bl	80116c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f009 fd88 	bl	80117b8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	603b      	str	r3, [r7, #0]
 8007cae:	687e      	ldr	r6, [r7, #4]
 8007cb0:	466d      	mov	r5, sp
 8007cb2:	f106 0410 	add.w	r4, r6, #16
 8007cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007cc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8007cc6:	1d33      	adds	r3, r6, #4
 8007cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cca:	6838      	ldr	r0, [r7, #0]
 8007ccc:	f009 fe9a 	bl	8011a04 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ce2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8007ce2:	b590      	push	{r4, r7, lr}
 8007ce4:	b089      	sub	sp, #36	; 0x24
 8007ce6:	af04      	add	r7, sp, #16
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	70fb      	strb	r3, [r7, #3]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70bb      	strb	r3, [r7, #2]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_HCD_HC_Init+0x28>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e076      	b.n	8007df8 <HAL_HCD_HC_Init+0x116>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	212c      	movs	r1, #44	; 0x2c
 8007d18:	fb01 f303 	mul.w	r3, r1, r3
 8007d1c:	4413      	add	r3, r2
 8007d1e:	333d      	adds	r3, #61	; 0x3d
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	212c      	movs	r1, #44	; 0x2c
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	4413      	add	r3, r2
 8007d30:	3338      	adds	r3, #56	; 0x38
 8007d32:	787a      	ldrb	r2, [r7, #1]
 8007d34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8007d36:	78fb      	ldrb	r3, [r7, #3]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	212c      	movs	r1, #44	; 0x2c
 8007d3c:	fb01 f303 	mul.w	r3, r1, r3
 8007d40:	4413      	add	r3, r2
 8007d42:	3340      	adds	r3, #64	; 0x40
 8007d44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007d46:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	212c      	movs	r1, #44	; 0x2c
 8007d4e:	fb01 f303 	mul.w	r3, r1, r3
 8007d52:	4413      	add	r3, r2
 8007d54:	3339      	adds	r3, #57	; 0x39
 8007d56:	78fa      	ldrb	r2, [r7, #3]
 8007d58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	212c      	movs	r1, #44	; 0x2c
 8007d60:	fb01 f303 	mul.w	r3, r1, r3
 8007d64:	4413      	add	r3, r2
 8007d66:	333f      	adds	r3, #63	; 0x3f
 8007d68:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007d6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	78ba      	ldrb	r2, [r7, #2]
 8007d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d76:	b2d0      	uxtb	r0, r2
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	212c      	movs	r1, #44	; 0x2c
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	4413      	add	r3, r2
 8007d82:	333a      	adds	r3, #58	; 0x3a
 8007d84:	4602      	mov	r2, r0
 8007d86:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8007d88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da09      	bge.n	8007da4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	212c      	movs	r1, #44	; 0x2c
 8007d96:	fb01 f303 	mul.w	r3, r1, r3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	333b      	adds	r3, #59	; 0x3b
 8007d9e:	2201      	movs	r2, #1
 8007da0:	701a      	strb	r2, [r3, #0]
 8007da2:	e008      	b.n	8007db6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007da4:	78fb      	ldrb	r3, [r7, #3]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	212c      	movs	r1, #44	; 0x2c
 8007daa:	fb01 f303 	mul.w	r3, r1, r3
 8007dae:	4413      	add	r3, r2
 8007db0:	333b      	adds	r3, #59	; 0x3b
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	212c      	movs	r1, #44	; 0x2c
 8007dbc:	fb01 f303 	mul.w	r3, r1, r3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	333c      	adds	r3, #60	; 0x3c
 8007dc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007dc8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	787c      	ldrb	r4, [r7, #1]
 8007dd0:	78ba      	ldrb	r2, [r7, #2]
 8007dd2:	78f9      	ldrb	r1, [r7, #3]
 8007dd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dd6:	9302      	str	r3, [sp, #8]
 8007dd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	4623      	mov	r3, r4
 8007de6:	f009 ff83 	bl	8011cf0 <USB_HC_Init>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd90      	pop	{r4, r7, pc}

08007e00 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_HCD_HC_Halt+0x1e>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e00f      	b.n	8007e3e <HAL_HCD_HC_Halt+0x3e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f00a f9bf 	bl	80121b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	4608      	mov	r0, r1
 8007e52:	4611      	mov	r1, r2
 8007e54:	461a      	mov	r2, r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	70fb      	strb	r3, [r7, #3]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70bb      	strb	r3, [r7, #2]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	212c      	movs	r1, #44	; 0x2c
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	4413      	add	r3, r2
 8007e6e:	333b      	adds	r3, #59	; 0x3b
 8007e70:	78ba      	ldrb	r2, [r7, #2]
 8007e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	212c      	movs	r1, #44	; 0x2c
 8007e7a:	fb01 f303 	mul.w	r3, r1, r3
 8007e7e:	4413      	add	r3, r2
 8007e80:	333f      	adds	r3, #63	; 0x3f
 8007e82:	787a      	ldrb	r2, [r7, #1]
 8007e84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007e86:	7c3b      	ldrb	r3, [r7, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d112      	bne.n	8007eb2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	212c      	movs	r1, #44	; 0x2c
 8007e92:	fb01 f303 	mul.w	r3, r1, r3
 8007e96:	4413      	add	r3, r2
 8007e98:	3342      	adds	r3, #66	; 0x42
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007e9e:	78fb      	ldrb	r3, [r7, #3]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	212c      	movs	r1, #44	; 0x2c
 8007ea4:	fb01 f303 	mul.w	r3, r1, r3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	333d      	adds	r3, #61	; 0x3d
 8007eac:	7f3a      	ldrb	r2, [r7, #28]
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	e008      	b.n	8007ec4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	212c      	movs	r1, #44	; 0x2c
 8007eb8:	fb01 f303 	mul.w	r3, r1, r3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	3342      	adds	r3, #66	; 0x42
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007ec4:	787b      	ldrb	r3, [r7, #1]
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	f200 80c6 	bhi.w	8008058 <HAL_HCD_HC_SubmitRequest+0x210>
 8007ecc:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8007ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed2:	bf00      	nop
 8007ed4:	08007ee5 	.word	0x08007ee5
 8007ed8:	08008045 	.word	0x08008045
 8007edc:	08007f49 	.word	0x08007f49
 8007ee0:	08007fc7 	.word	0x08007fc7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8007ee4:	7c3b      	ldrb	r3, [r7, #16]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	f040 80b8 	bne.w	800805c <HAL_HCD_HC_SubmitRequest+0x214>
 8007eec:	78bb      	ldrb	r3, [r7, #2]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 80b4 	bne.w	800805c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8007ef4:	8b3b      	ldrh	r3, [r7, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d108      	bne.n	8007f0c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	212c      	movs	r1, #44	; 0x2c
 8007f00:	fb01 f303 	mul.w	r3, r1, r3
 8007f04:	4413      	add	r3, r2
 8007f06:	3355      	adds	r3, #85	; 0x55
 8007f08:	2201      	movs	r2, #1
 8007f0a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	212c      	movs	r1, #44	; 0x2c
 8007f12:	fb01 f303 	mul.w	r3, r1, r3
 8007f16:	4413      	add	r3, r2
 8007f18:	3355      	adds	r3, #85	; 0x55
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d109      	bne.n	8007f34 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	212c      	movs	r1, #44	; 0x2c
 8007f26:	fb01 f303 	mul.w	r3, r1, r3
 8007f2a:	4413      	add	r3, r2
 8007f2c:	3342      	adds	r3, #66	; 0x42
 8007f2e:	2200      	movs	r2, #0
 8007f30:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007f32:	e093      	b.n	800805c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	212c      	movs	r1, #44	; 0x2c
 8007f3a:	fb01 f303 	mul.w	r3, r1, r3
 8007f3e:	4413      	add	r3, r2
 8007f40:	3342      	adds	r3, #66	; 0x42
 8007f42:	2202      	movs	r2, #2
 8007f44:	701a      	strb	r2, [r3, #0]
      break;
 8007f46:	e089      	b.n	800805c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007f48:	78bb      	ldrb	r3, [r7, #2]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d11d      	bne.n	8007f8a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007f4e:	78fb      	ldrb	r3, [r7, #3]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	212c      	movs	r1, #44	; 0x2c
 8007f54:	fb01 f303 	mul.w	r3, r1, r3
 8007f58:	4413      	add	r3, r2
 8007f5a:	3355      	adds	r3, #85	; 0x55
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	212c      	movs	r1, #44	; 0x2c
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	3342      	adds	r3, #66	; 0x42
 8007f70:	2200      	movs	r2, #0
 8007f72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007f74:	e073      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	212c      	movs	r1, #44	; 0x2c
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	4413      	add	r3, r2
 8007f82:	3342      	adds	r3, #66	; 0x42
 8007f84:	2202      	movs	r2, #2
 8007f86:	701a      	strb	r2, [r3, #0]
      break;
 8007f88:	e069      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	212c      	movs	r1, #44	; 0x2c
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	4413      	add	r3, r2
 8007f96:	3354      	adds	r3, #84	; 0x54
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d109      	bne.n	8007fb2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	212c      	movs	r1, #44	; 0x2c
 8007fa4:	fb01 f303 	mul.w	r3, r1, r3
 8007fa8:	4413      	add	r3, r2
 8007faa:	3342      	adds	r3, #66	; 0x42
 8007fac:	2200      	movs	r2, #0
 8007fae:	701a      	strb	r2, [r3, #0]
      break;
 8007fb0:	e055      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007fb2:	78fb      	ldrb	r3, [r7, #3]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	212c      	movs	r1, #44	; 0x2c
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3342      	adds	r3, #66	; 0x42
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	701a      	strb	r2, [r3, #0]
      break;
 8007fc4:	e04b      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007fc6:	78bb      	ldrb	r3, [r7, #2]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d11d      	bne.n	8008008 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	212c      	movs	r1, #44	; 0x2c
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3355      	adds	r3, #85	; 0x55
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d109      	bne.n	8007ff4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	212c      	movs	r1, #44	; 0x2c
 8007fe6:	fb01 f303 	mul.w	r3, r1, r3
 8007fea:	4413      	add	r3, r2
 8007fec:	3342      	adds	r3, #66	; 0x42
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007ff2:	e034      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	212c      	movs	r1, #44	; 0x2c
 8007ffa:	fb01 f303 	mul.w	r3, r1, r3
 8007ffe:	4413      	add	r3, r2
 8008000:	3342      	adds	r3, #66	; 0x42
 8008002:	2202      	movs	r2, #2
 8008004:	701a      	strb	r2, [r3, #0]
      break;
 8008006:	e02a      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	212c      	movs	r1, #44	; 0x2c
 800800e:	fb01 f303 	mul.w	r3, r1, r3
 8008012:	4413      	add	r3, r2
 8008014:	3354      	adds	r3, #84	; 0x54
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d109      	bne.n	8008030 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	212c      	movs	r1, #44	; 0x2c
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	4413      	add	r3, r2
 8008028:	3342      	adds	r3, #66	; 0x42
 800802a:	2200      	movs	r2, #0
 800802c:	701a      	strb	r2, [r3, #0]
      break;
 800802e:	e016      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	212c      	movs	r1, #44	; 0x2c
 8008036:	fb01 f303 	mul.w	r3, r1, r3
 800803a:	4413      	add	r3, r2
 800803c:	3342      	adds	r3, #66	; 0x42
 800803e:	2202      	movs	r2, #2
 8008040:	701a      	strb	r2, [r3, #0]
      break;
 8008042:	e00c      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	212c      	movs	r1, #44	; 0x2c
 800804a:	fb01 f303 	mul.w	r3, r1, r3
 800804e:	4413      	add	r3, r2
 8008050:	3342      	adds	r3, #66	; 0x42
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]
      break;
 8008056:	e002      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8008058:	bf00      	nop
 800805a:	e000      	b.n	800805e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800805c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	212c      	movs	r1, #44	; 0x2c
 8008064:	fb01 f303 	mul.w	r3, r1, r3
 8008068:	4413      	add	r3, r2
 800806a:	3344      	adds	r3, #68	; 0x44
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	8b3a      	ldrh	r2, [r7, #24]
 8008074:	6879      	ldr	r1, [r7, #4]
 8008076:	202c      	movs	r0, #44	; 0x2c
 8008078:	fb00 f303 	mul.w	r3, r0, r3
 800807c:	440b      	add	r3, r1
 800807e:	334c      	adds	r3, #76	; 0x4c
 8008080:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	212c      	movs	r1, #44	; 0x2c
 8008088:	fb01 f303 	mul.w	r3, r1, r3
 800808c:	4413      	add	r3, r2
 800808e:	3360      	adds	r3, #96	; 0x60
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	212c      	movs	r1, #44	; 0x2c
 800809a:	fb01 f303 	mul.w	r3, r1, r3
 800809e:	4413      	add	r3, r2
 80080a0:	3350      	adds	r3, #80	; 0x50
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	212c      	movs	r1, #44	; 0x2c
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	4413      	add	r3, r2
 80080b2:	3339      	adds	r3, #57	; 0x39
 80080b4:	78fa      	ldrb	r2, [r7, #3]
 80080b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80080b8:	78fb      	ldrb	r3, [r7, #3]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	212c      	movs	r1, #44	; 0x2c
 80080be:	fb01 f303 	mul.w	r3, r1, r3
 80080c2:	4413      	add	r3, r2
 80080c4:	3361      	adds	r3, #97	; 0x61
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	222c      	movs	r2, #44	; 0x2c
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	3338      	adds	r3, #56	; 0x38
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	18d1      	adds	r1, r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	f009 ff12 	bl	8011f0c <USB_HC_StartXfer>
 80080e8:	4603      	mov	r3, r0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop

080080f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4618      	mov	r0, r3
 800810c:	f009 fc37 	bl	801197e <USB_GetMode>
 8008110:	4603      	mov	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	f040 80ef 	bne.w	80082f6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f009 fc1b 	bl	8011958 <USB_ReadInterrupts>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80e5 	beq.w	80082f4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f009 fc12 	bl	8011958 <USB_ReadInterrupts>
 8008134:	4603      	mov	r3, r0
 8008136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800813a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800813e:	d104      	bne.n	800814a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008148:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4618      	mov	r0, r3
 8008150:	f009 fc02 	bl	8011958 <USB_ReadInterrupts>
 8008154:	4603      	mov	r3, r0
 8008156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800815a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800815e:	d104      	bne.n	800816a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008168:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f009 fbf2 	bl	8011958 <USB_ReadInterrupts>
 8008174:	4603      	mov	r3, r0
 8008176:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800817a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800817e:	d104      	bne.n	800818a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008188:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f009 fbe2 	bl	8011958 <USB_ReadInterrupts>
 8008194:	4603      	mov	r3, r0
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b02      	cmp	r3, #2
 800819c:	d103      	bne.n	80081a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2202      	movs	r2, #2
 80081a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f009 fbd4 	bl	8011958 <USB_ReadInterrupts>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ba:	d115      	bne.n	80081e8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80081c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d108      	bne.n	80081e8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f00f fc2c 	bl	8017a34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2101      	movs	r1, #1
 80081e2:	4618      	mov	r0, r3
 80081e4:	f009 fcbe 	bl	8011b64 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f009 fbb3 	bl	8011958 <USB_ReadInterrupts>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081fc:	d102      	bne.n	8008204 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f001 f9ff 	bl	8009602 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4618      	mov	r0, r3
 800820a:	f009 fba5 	bl	8011958 <USB_ReadInterrupts>
 800820e:	4603      	mov	r3, r0
 8008210:	f003 0308 	and.w	r3, r3, #8
 8008214:	2b08      	cmp	r3, #8
 8008216:	d106      	bne.n	8008226 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f00f fbef 	bl	80179fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2208      	movs	r2, #8
 8008224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f009 fb94 	bl	8011958 <USB_ReadInterrupts>
 8008230:	4603      	mov	r3, r0
 8008232:	f003 0310 	and.w	r3, r3, #16
 8008236:	2b10      	cmp	r3, #16
 8008238:	d101      	bne.n	800823e <HAL_HCD_IRQHandler+0x14a>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <HAL_HCD_IRQHandler+0x14c>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d012      	beq.n	800826a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	699a      	ldr	r2, [r3, #24]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0210 	bic.w	r2, r2, #16
 8008252:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f902 	bl	800945e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0210 	orr.w	r2, r2, #16
 8008268:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f009 fb72 	bl	8011958 <USB_ReadInterrupts>
 8008274:	4603      	mov	r3, r0
 8008276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800827a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800827e:	d13a      	bne.n	80082f6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f009 ff83 	bl	8012190 <USB_HC_ReadInterrupt>
 800828a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	e025      	b.n	80082de <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	fa22 f303 	lsr.w	r3, r2, r3
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d018      	beq.n	80082d8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082bc:	d106      	bne.n	80082cc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f8ab 	bl	8008420 <HCD_HC_IN_IRQHandler>
 80082ca:	e005      	b.n	80082d8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fcc6 	bl	8008c64 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3301      	adds	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d3d4      	bcc.n	8008292 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082f0:	615a      	str	r2, [r3, #20]
 80082f2:	e000      	b.n	80082f6 <HAL_HCD_IRQHandler+0x202>
      return;
 80082f4:	bf00      	nop
    }
  }
}
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800830a:	2b01      	cmp	r3, #1
 800830c:	d101      	bne.n	8008312 <HAL_HCD_Start+0x16>
 800830e:	2302      	movs	r3, #2
 8008310:	e013      	b.n	800833a <HAL_HCD_Start+0x3e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f009 fa28 	bl	8011774 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2101      	movs	r1, #1
 800832a:	4618      	mov	r0, r3
 800832c:	f009 fc7e 	bl	8011c2c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b082      	sub	sp, #8
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008350:	2b01      	cmp	r3, #1
 8008352:	d101      	bne.n	8008358 <HAL_HCD_Stop+0x16>
 8008354:	2302      	movs	r3, #2
 8008356:	e00d      	b.n	8008374 <HAL_HCD_Stop+0x32>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f00a f87d 	bl	8012464 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4618      	mov	r0, r3
 800838a:	f009 fc25 	bl	8011bd8 <USB_ResetPort>
 800838e:	4603      	mov	r3, r0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	212c      	movs	r1, #44	; 0x2c
 80083aa:	fb01 f303 	mul.w	r3, r1, r3
 80083ae:	4413      	add	r3, r2
 80083b0:	3360      	adds	r3, #96	; 0x60
 80083b2:	781b      	ldrb	r3, [r3, #0]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	212c      	movs	r1, #44	; 0x2c
 80083d2:	fb01 f303 	mul.w	r3, r1, r3
 80083d6:	4413      	add	r3, r2
 80083d8:	3350      	adds	r3, #80	; 0x50
 80083da:	681b      	ldr	r3, [r3, #0]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f009 fc69 	bl	8011ccc <USB_GetCurrentFrame>
 80083fa:	4603      	mov	r3, r0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f009 fc44 	bl	8011c9e <USB_GetHostSpeed>
 8008416:	4603      	mov	r3, r0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	4413      	add	r3, r2
 8008442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b04      	cmp	r3, #4
 800844e:	d119      	bne.n	8008484 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	4413      	add	r3, r2
 8008458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800845c:	461a      	mov	r2, r3
 800845e:	2304      	movs	r3, #4
 8008460:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	4413      	add	r3, r2
 800846a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	440a      	add	r2, r1
 8008478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800847c:	f043 0302 	orr.w	r3, r3, #2
 8008480:	60d3      	str	r3, [r2, #12]
 8008482:	e101      	b.n	8008688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4413      	add	r3, r2
 800848c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849a:	d12b      	bne.n	80084f4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a8:	461a      	mov	r2, r3
 80084aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	212c      	movs	r1, #44	; 0x2c
 80084b6:	fb01 f303 	mul.w	r3, r1, r3
 80084ba:	4413      	add	r3, r2
 80084bc:	3361      	adds	r3, #97	; 0x61
 80084be:	2207      	movs	r2, #7
 80084c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	0151      	lsls	r1, r2, #5
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	440a      	add	r2, r1
 80084d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084dc:	f043 0302 	orr.w	r3, r3, #2
 80084e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f009 fe60 	bl	80121b2 <USB_HC_Halt>
 80084f2:	e0c9      	b.n	8008688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 0320 	and.w	r3, r3, #32
 8008506:	2b20      	cmp	r3, #32
 8008508:	d109      	bne.n	800851e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	4413      	add	r3, r2
 8008512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008516:	461a      	mov	r2, r3
 8008518:	2320      	movs	r3, #32
 800851a:	6093      	str	r3, [r2, #8]
 800851c:	e0b4      	b.n	8008688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	4413      	add	r3, r2
 8008526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b08      	cmp	r3, #8
 8008532:	d133      	bne.n	800859c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	440a      	add	r2, r1
 800854a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800854e:	f043 0302 	orr.w	r3, r3, #2
 8008552:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	212c      	movs	r1, #44	; 0x2c
 800855a:	fb01 f303 	mul.w	r3, r1, r3
 800855e:	4413      	add	r3, r2
 8008560:	3361      	adds	r3, #97	; 0x61
 8008562:	2205      	movs	r2, #5
 8008564:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	4413      	add	r3, r2
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	461a      	mov	r2, r3
 8008574:	2310      	movs	r3, #16
 8008576:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	4413      	add	r3, r2
 8008580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008584:	461a      	mov	r2, r3
 8008586:	2308      	movs	r3, #8
 8008588:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	b2d2      	uxtb	r2, r2
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f009 fe0c 	bl	80121b2 <USB_HC_Halt>
 800859a:	e075      	b.n	8008688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b2:	d134      	bne.n	800861e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ce:	f043 0302 	orr.w	r3, r3, #2
 80085d2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	212c      	movs	r1, #44	; 0x2c
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	4413      	add	r3, r2
 80085e0:	3361      	adds	r3, #97	; 0x61
 80085e2:	2208      	movs	r2, #8
 80085e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f2:	461a      	mov	r2, r3
 80085f4:	2310      	movs	r3, #16
 80085f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008604:	461a      	mov	r2, r3
 8008606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f009 fdcb 	bl	80121b2 <USB_HC_Halt>
 800861c:	e034      	b.n	8008688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	4413      	add	r3, r2
 8008626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d129      	bne.n	8008688 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	4413      	add	r3, r2
 800863c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	440a      	add	r2, r1
 800864a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800864e:	f043 0302 	orr.w	r3, r3, #2
 8008652:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	212c      	movs	r1, #44	; 0x2c
 800865a:	fb01 f303 	mul.w	r3, r1, r3
 800865e:	4413      	add	r3, r2
 8008660:	3361      	adds	r3, #97	; 0x61
 8008662:	2206      	movs	r2, #6
 8008664:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	4611      	mov	r1, r2
 8008670:	4618      	mov	r0, r3
 8008672:	f009 fd9e 	bl	80121b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	4413      	add	r3, r2
 800867e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008682:	461a      	mov	r2, r3
 8008684:	2380      	movs	r3, #128	; 0x80
 8008686:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	4413      	add	r3, r2
 8008690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800869a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800869e:	d122      	bne.n	80086e6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	0151      	lsls	r1, r2, #5
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	440a      	add	r2, r1
 80086b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ba:	f043 0302 	orr.w	r3, r3, #2
 80086be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	b2d2      	uxtb	r2, r2
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f009 fd71 	bl	80121b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086dc:	461a      	mov	r2, r3
 80086de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80086e4:	e2ba      	b.n	8008c5c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	f040 811b 	bne.w	8008934 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d019      	beq.n	800873a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	212c      	movs	r1, #44	; 0x2c
 800870c:	fb01 f303 	mul.w	r3, r1, r3
 8008710:	4413      	add	r3, r2
 8008712:	3348      	adds	r3, #72	; 0x48
 8008714:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	0159      	lsls	r1, r3, #5
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	440b      	add	r3, r1
 800871e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008728:	1ad2      	subs	r2, r2, r3
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	202c      	movs	r0, #44	; 0x2c
 8008730:	fb00 f303 	mul.w	r3, r0, r3
 8008734:	440b      	add	r3, r1
 8008736:	3350      	adds	r3, #80	; 0x50
 8008738:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	212c      	movs	r1, #44	; 0x2c
 8008740:	fb01 f303 	mul.w	r3, r1, r3
 8008744:	4413      	add	r3, r2
 8008746:	3361      	adds	r3, #97	; 0x61
 8008748:	2201      	movs	r2, #1
 800874a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	212c      	movs	r1, #44	; 0x2c
 8008752:	fb01 f303 	mul.w	r3, r1, r3
 8008756:	4413      	add	r3, r2
 8008758:	335c      	adds	r3, #92	; 0x5c
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	4413      	add	r3, r2
 8008766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876a:	461a      	mov	r2, r3
 800876c:	2301      	movs	r3, #1
 800876e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	212c      	movs	r1, #44	; 0x2c
 8008776:	fb01 f303 	mul.w	r3, r1, r3
 800877a:	4413      	add	r3, r2
 800877c:	333f      	adds	r3, #63	; 0x3f
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d009      	beq.n	8008798 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	212c      	movs	r1, #44	; 0x2c
 800878a:	fb01 f303 	mul.w	r3, r1, r3
 800878e:	4413      	add	r3, r2
 8008790:	333f      	adds	r3, #63	; 0x3f
 8008792:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008794:	2b02      	cmp	r3, #2
 8008796:	d121      	bne.n	80087dc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087b2:	f043 0302 	orr.w	r3, r3, #2
 80087b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	4611      	mov	r1, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f009 fcf5 	bl	80121b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d4:	461a      	mov	r2, r3
 80087d6:	2310      	movs	r3, #16
 80087d8:	6093      	str	r3, [r2, #8]
 80087da:	e066      	b.n	80088aa <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	212c      	movs	r1, #44	; 0x2c
 80087e2:	fb01 f303 	mul.w	r3, r1, r3
 80087e6:	4413      	add	r3, r2
 80087e8:	333f      	adds	r3, #63	; 0x3f
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d127      	bne.n	8008840 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	440a      	add	r2, r1
 8008806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800880a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800880e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	212c      	movs	r1, #44	; 0x2c
 8008816:	fb01 f303 	mul.w	r3, r1, r3
 800881a:	4413      	add	r3, r2
 800881c:	3360      	adds	r3, #96	; 0x60
 800881e:	2201      	movs	r2, #1
 8008820:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	b2d9      	uxtb	r1, r3
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	202c      	movs	r0, #44	; 0x2c
 800882c:	fb00 f303 	mul.w	r3, r0, r3
 8008830:	4413      	add	r3, r2
 8008832:	3360      	adds	r3, #96	; 0x60
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f00f f909 	bl	8017a50 <HAL_HCD_HC_NotifyURBChange_Callback>
 800883e:	e034      	b.n	80088aa <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	212c      	movs	r1, #44	; 0x2c
 8008846:	fb01 f303 	mul.w	r3, r1, r3
 800884a:	4413      	add	r3, r2
 800884c:	333f      	adds	r3, #63	; 0x3f
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d12a      	bne.n	80088aa <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	212c      	movs	r1, #44	; 0x2c
 800885a:	fb01 f303 	mul.w	r3, r1, r3
 800885e:	4413      	add	r3, r2
 8008860:	3360      	adds	r3, #96	; 0x60
 8008862:	2201      	movs	r2, #1
 8008864:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	212c      	movs	r1, #44	; 0x2c
 800886c:	fb01 f303 	mul.w	r3, r1, r3
 8008870:	4413      	add	r3, r2
 8008872:	3354      	adds	r3, #84	; 0x54
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f083 0301 	eor.w	r3, r3, #1
 800887a:	b2d8      	uxtb	r0, r3
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	212c      	movs	r1, #44	; 0x2c
 8008882:	fb01 f303 	mul.w	r3, r1, r3
 8008886:	4413      	add	r3, r2
 8008888:	3354      	adds	r3, #84	; 0x54
 800888a:	4602      	mov	r2, r0
 800888c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	b2d9      	uxtb	r1, r3
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	202c      	movs	r0, #44	; 0x2c
 8008898:	fb00 f303 	mul.w	r3, r0, r3
 800889c:	4413      	add	r3, r2
 800889e:	3360      	adds	r3, #96	; 0x60
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f00f f8d3 	bl	8017a50 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d12b      	bne.n	800890a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	212c      	movs	r1, #44	; 0x2c
 80088b8:	fb01 f303 	mul.w	r3, r1, r3
 80088bc:	4413      	add	r3, r2
 80088be:	3348      	adds	r3, #72	; 0x48
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	202c      	movs	r0, #44	; 0x2c
 80088c8:	fb00 f202 	mul.w	r2, r0, r2
 80088cc:	440a      	add	r2, r1
 80088ce:	3240      	adds	r2, #64	; 0x40
 80088d0:	8812      	ldrh	r2, [r2, #0]
 80088d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 81be 	beq.w	8008c5c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	212c      	movs	r1, #44	; 0x2c
 80088e6:	fb01 f303 	mul.w	r3, r1, r3
 80088ea:	4413      	add	r3, r2
 80088ec:	3354      	adds	r3, #84	; 0x54
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f083 0301 	eor.w	r3, r3, #1
 80088f4:	b2d8      	uxtb	r0, r3
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	212c      	movs	r1, #44	; 0x2c
 80088fc:	fb01 f303 	mul.w	r3, r1, r3
 8008900:	4413      	add	r3, r2
 8008902:	3354      	adds	r3, #84	; 0x54
 8008904:	4602      	mov	r2, r0
 8008906:	701a      	strb	r2, [r3, #0]
}
 8008908:	e1a8      	b.n	8008c5c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	212c      	movs	r1, #44	; 0x2c
 8008910:	fb01 f303 	mul.w	r3, r1, r3
 8008914:	4413      	add	r3, r2
 8008916:	3354      	adds	r3, #84	; 0x54
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	f083 0301 	eor.w	r3, r3, #1
 800891e:	b2d8      	uxtb	r0, r3
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	212c      	movs	r1, #44	; 0x2c
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	4413      	add	r3, r2
 800892c:	3354      	adds	r3, #84	; 0x54
 800892e:	4602      	mov	r2, r0
 8008930:	701a      	strb	r2, [r3, #0]
}
 8008932:	e193      	b.n	8008c5c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	4413      	add	r3, r2
 800893c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b02      	cmp	r3, #2
 8008948:	f040 8106 	bne.w	8008b58 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	4413      	add	r3, r2
 8008954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	440a      	add	r2, r1
 8008962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008966:	f023 0302 	bic.w	r3, r3, #2
 800896a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	212c      	movs	r1, #44	; 0x2c
 8008972:	fb01 f303 	mul.w	r3, r1, r3
 8008976:	4413      	add	r3, r2
 8008978:	3361      	adds	r3, #97	; 0x61
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d109      	bne.n	8008994 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	212c      	movs	r1, #44	; 0x2c
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	3360      	adds	r3, #96	; 0x60
 800898e:	2201      	movs	r2, #1
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	e0c9      	b.n	8008b28 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	212c      	movs	r1, #44	; 0x2c
 800899a:	fb01 f303 	mul.w	r3, r1, r3
 800899e:	4413      	add	r3, r2
 80089a0:	3361      	adds	r3, #97	; 0x61
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d109      	bne.n	80089bc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	212c      	movs	r1, #44	; 0x2c
 80089ae:	fb01 f303 	mul.w	r3, r1, r3
 80089b2:	4413      	add	r3, r2
 80089b4:	3360      	adds	r3, #96	; 0x60
 80089b6:	2205      	movs	r2, #5
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	e0b5      	b.n	8008b28 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	212c      	movs	r1, #44	; 0x2c
 80089c2:	fb01 f303 	mul.w	r3, r1, r3
 80089c6:	4413      	add	r3, r2
 80089c8:	3361      	adds	r3, #97	; 0x61
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b06      	cmp	r3, #6
 80089ce:	d009      	beq.n	80089e4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	212c      	movs	r1, #44	; 0x2c
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	4413      	add	r3, r2
 80089dc:	3361      	adds	r3, #97	; 0x61
 80089de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d150      	bne.n	8008a86 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	212c      	movs	r1, #44	; 0x2c
 80089ea:	fb01 f303 	mul.w	r3, r1, r3
 80089ee:	4413      	add	r3, r2
 80089f0:	335c      	adds	r3, #92	; 0x5c
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	202c      	movs	r0, #44	; 0x2c
 80089fc:	fb00 f303 	mul.w	r3, r0, r3
 8008a00:	440b      	add	r3, r1
 8008a02:	335c      	adds	r3, #92	; 0x5c
 8008a04:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	212c      	movs	r1, #44	; 0x2c
 8008a0c:	fb01 f303 	mul.w	r3, r1, r3
 8008a10:	4413      	add	r3, r2
 8008a12:	335c      	adds	r3, #92	; 0x5c
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d912      	bls.n	8008a40 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	212c      	movs	r1, #44	; 0x2c
 8008a20:	fb01 f303 	mul.w	r3, r1, r3
 8008a24:	4413      	add	r3, r2
 8008a26:	335c      	adds	r3, #92	; 0x5c
 8008a28:	2200      	movs	r2, #0
 8008a2a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	212c      	movs	r1, #44	; 0x2c
 8008a32:	fb01 f303 	mul.w	r3, r1, r3
 8008a36:	4413      	add	r3, r2
 8008a38:	3360      	adds	r3, #96	; 0x60
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008a3e:	e073      	b.n	8008b28 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	212c      	movs	r1, #44	; 0x2c
 8008a46:	fb01 f303 	mul.w	r3, r1, r3
 8008a4a:	4413      	add	r3, r2
 8008a4c:	3360      	adds	r3, #96	; 0x60
 8008a4e:	2202      	movs	r2, #2
 8008a50:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a68:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a70:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a7e:	461a      	mov	r2, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008a84:	e050      	b.n	8008b28 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	212c      	movs	r1, #44	; 0x2c
 8008a8c:	fb01 f303 	mul.w	r3, r1, r3
 8008a90:	4413      	add	r3, r2
 8008a92:	3361      	adds	r3, #97	; 0x61
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d122      	bne.n	8008ae0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	212c      	movs	r1, #44	; 0x2c
 8008aa0:	fb01 f303 	mul.w	r3, r1, r3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	3360      	adds	r3, #96	; 0x60
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ac2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad8:	461a      	mov	r2, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	e023      	b.n	8008b28 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	212c      	movs	r1, #44	; 0x2c
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	3361      	adds	r3, #97	; 0x61
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b07      	cmp	r3, #7
 8008af2:	d119      	bne.n	8008b28 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	212c      	movs	r1, #44	; 0x2c
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	4413      	add	r3, r2
 8008b00:	335c      	adds	r3, #92	; 0x5c
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	202c      	movs	r0, #44	; 0x2c
 8008b0c:	fb00 f303 	mul.w	r3, r0, r3
 8008b10:	440b      	add	r3, r1
 8008b12:	335c      	adds	r3, #92	; 0x5c
 8008b14:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	212c      	movs	r1, #44	; 0x2c
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	4413      	add	r3, r2
 8008b22:	3360      	adds	r3, #96	; 0x60
 8008b24:	2204      	movs	r2, #4
 8008b26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b34:	461a      	mov	r2, r3
 8008b36:	2302      	movs	r3, #2
 8008b38:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	b2d9      	uxtb	r1, r3
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	202c      	movs	r0, #44	; 0x2c
 8008b44:	fb00 f303 	mul.w	r3, r0, r3
 8008b48:	4413      	add	r3, r2
 8008b4a:	3360      	adds	r3, #96	; 0x60
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f00e ff7d 	bl	8017a50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008b56:	e081      	b.n	8008c5c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f003 0310 	and.w	r3, r3, #16
 8008b6a:	2b10      	cmp	r3, #16
 8008b6c:	d176      	bne.n	8008c5c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	212c      	movs	r1, #44	; 0x2c
 8008b74:	fb01 f303 	mul.w	r3, r1, r3
 8008b78:	4413      	add	r3, r2
 8008b7a:	333f      	adds	r3, #63	; 0x3f
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d121      	bne.n	8008bc6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	212c      	movs	r1, #44	; 0x2c
 8008b88:	fb01 f303 	mul.w	r3, r1, r3
 8008b8c:	4413      	add	r3, r2
 8008b8e:	335c      	adds	r3, #92	; 0x5c
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bae:	f043 0302 	orr.w	r3, r3, #2
 8008bb2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f009 faf7 	bl	80121b2 <USB_HC_Halt>
 8008bc4:	e041      	b.n	8008c4a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	212c      	movs	r1, #44	; 0x2c
 8008bcc:	fb01 f303 	mul.w	r3, r1, r3
 8008bd0:	4413      	add	r3, r2
 8008bd2:	333f      	adds	r3, #63	; 0x3f
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	212c      	movs	r1, #44	; 0x2c
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
 8008be4:	4413      	add	r3, r2
 8008be6:	333f      	adds	r3, #63	; 0x3f
 8008be8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d12d      	bne.n	8008c4a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	212c      	movs	r1, #44	; 0x2c
 8008bf4:	fb01 f303 	mul.w	r3, r1, r3
 8008bf8:	4413      	add	r3, r2
 8008bfa:	335c      	adds	r3, #92	; 0x5c
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d120      	bne.n	8008c4a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	212c      	movs	r1, #44	; 0x2c
 8008c0e:	fb01 f303 	mul.w	r3, r1, r3
 8008c12:	4413      	add	r3, r2
 8008c14:	3361      	adds	r3, #97	; 0x61
 8008c16:	2203      	movs	r2, #3
 8008c18:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	0151      	lsls	r1, r2, #5
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	440a      	add	r2, r1
 8008c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c34:	f043 0302 	orr.w	r3, r3, #2
 8008c38:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f009 fab4 	bl	80121b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c56:	461a      	mov	r2, r3
 8008c58:	2310      	movs	r3, #16
 8008c5a:	6093      	str	r3, [r2, #8]
}
 8008c5c:	bf00      	nop
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d119      	bne.n	8008cc8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	2304      	movs	r3, #4
 8008ca4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	0151      	lsls	r1, r2, #5
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	440a      	add	r2, r1
 8008cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc0:	f043 0302 	orr.w	r3, r3, #2
 8008cc4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008cc6:	e3c6      	b.n	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	d13e      	bne.n	8008d5c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cea:	461a      	mov	r2, r3
 8008cec:	2320      	movs	r3, #32
 8008cee:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	212c      	movs	r1, #44	; 0x2c
 8008cf6:	fb01 f303 	mul.w	r3, r1, r3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	333d      	adds	r3, #61	; 0x3d
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	f040 83a8 	bne.w	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	212c      	movs	r1, #44	; 0x2c
 8008d0c:	fb01 f303 	mul.w	r3, r1, r3
 8008d10:	4413      	add	r3, r2
 8008d12:	333d      	adds	r3, #61	; 0x3d
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	212c      	movs	r1, #44	; 0x2c
 8008d1e:	fb01 f303 	mul.w	r3, r1, r3
 8008d22:	4413      	add	r3, r2
 8008d24:	3360      	adds	r3, #96	; 0x60
 8008d26:	2202      	movs	r2, #2
 8008d28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	0151      	lsls	r1, r2, #5
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	440a      	add	r2, r1
 8008d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d44:	f043 0302 	orr.w	r3, r3, #2
 8008d48:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	4611      	mov	r1, r2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f009 fa2c 	bl	80121b2 <USB_HC_Halt>
}
 8008d5a:	e37c      	b.n	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d72:	d122      	bne.n	8008dba <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	0151      	lsls	r1, r2, #5
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	440a      	add	r2, r1
 8008d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d8e:	f043 0302 	orr.w	r3, r3, #2
 8008d92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f009 fa07 	bl	80121b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db0:	461a      	mov	r2, r3
 8008db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008db6:	6093      	str	r3, [r2, #8]
}
 8008db8:	e34d      	b.n	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d150      	bne.n	8008e72 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	212c      	movs	r1, #44	; 0x2c
 8008dd6:	fb01 f303 	mul.w	r3, r1, r3
 8008dda:	4413      	add	r3, r2
 8008ddc:	335c      	adds	r3, #92	; 0x5c
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df4:	2b40      	cmp	r3, #64	; 0x40
 8008df6:	d111      	bne.n	8008e1c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	212c      	movs	r1, #44	; 0x2c
 8008dfe:	fb01 f303 	mul.w	r3, r1, r3
 8008e02:	4413      	add	r3, r2
 8008e04:	333d      	adds	r3, #61	; 0x3d
 8008e06:	2201      	movs	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e16:	461a      	mov	r2, r3
 8008e18:	2340      	movs	r3, #64	; 0x40
 8008e1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	0151      	lsls	r1, r2, #5
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	440a      	add	r2, r1
 8008e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e36:	f043 0302 	orr.w	r3, r3, #2
 8008e3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f009 f9b3 	bl	80121b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e58:	461a      	mov	r2, r3
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	212c      	movs	r1, #44	; 0x2c
 8008e64:	fb01 f303 	mul.w	r3, r1, r3
 8008e68:	4413      	add	r3, r2
 8008e6a:	3361      	adds	r3, #97	; 0x61
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	701a      	strb	r2, [r3, #0]
}
 8008e70:	e2f1      	b.n	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e84:	2b40      	cmp	r3, #64	; 0x40
 8008e86:	d13c      	bne.n	8008f02 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	212c      	movs	r1, #44	; 0x2c
 8008e8e:	fb01 f303 	mul.w	r3, r1, r3
 8008e92:	4413      	add	r3, r2
 8008e94:	3361      	adds	r3, #97	; 0x61
 8008e96:	2204      	movs	r2, #4
 8008e98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	212c      	movs	r1, #44	; 0x2c
 8008ea0:	fb01 f303 	mul.w	r3, r1, r3
 8008ea4:	4413      	add	r3, r2
 8008ea6:	333d      	adds	r3, #61	; 0x3d
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	212c      	movs	r1, #44	; 0x2c
 8008eb2:	fb01 f303 	mul.w	r3, r1, r3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	335c      	adds	r3, #92	; 0x5c
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	0151      	lsls	r1, r2, #5
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	440a      	add	r2, r1
 8008ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ed8:	f043 0302 	orr.w	r3, r3, #2
 8008edc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	b2d2      	uxtb	r2, r2
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f009 f962 	bl	80121b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efa:	461a      	mov	r2, r3
 8008efc:	2340      	movs	r3, #64	; 0x40
 8008efe:	6093      	str	r3, [r2, #8]
}
 8008f00:	e2a9      	b.n	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d12a      	bne.n	8008f6e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f24:	461a      	mov	r2, r3
 8008f26:	2308      	movs	r3, #8
 8008f28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	015a      	lsls	r2, r3, #5
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	4413      	add	r3, r2
 8008f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	0151      	lsls	r1, r2, #5
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	440a      	add	r2, r1
 8008f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f44:	f043 0302 	orr.w	r3, r3, #2
 8008f48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	b2d2      	uxtb	r2, r2
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f009 f92c 	bl	80121b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	212c      	movs	r1, #44	; 0x2c
 8008f60:	fb01 f303 	mul.w	r3, r1, r3
 8008f64:	4413      	add	r3, r2
 8008f66:	3361      	adds	r3, #97	; 0x61
 8008f68:	2205      	movs	r2, #5
 8008f6a:	701a      	strb	r2, [r3, #0]
}
 8008f6c:	e273      	b.n	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f003 0310 	and.w	r3, r3, #16
 8008f80:	2b10      	cmp	r3, #16
 8008f82:	d150      	bne.n	8009026 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	212c      	movs	r1, #44	; 0x2c
 8008f8a:	fb01 f303 	mul.w	r3, r1, r3
 8008f8e:	4413      	add	r3, r2
 8008f90:	335c      	adds	r3, #92	; 0x5c
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	212c      	movs	r1, #44	; 0x2c
 8008f9c:	fb01 f303 	mul.w	r3, r1, r3
 8008fa0:	4413      	add	r3, r2
 8008fa2:	3361      	adds	r3, #97	; 0x61
 8008fa4:	2203      	movs	r2, #3
 8008fa6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	212c      	movs	r1, #44	; 0x2c
 8008fae:	fb01 f303 	mul.w	r3, r1, r3
 8008fb2:	4413      	add	r3, r2
 8008fb4:	333d      	adds	r3, #61	; 0x3d
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d112      	bne.n	8008fe2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	212c      	movs	r1, #44	; 0x2c
 8008fc2:	fb01 f303 	mul.w	r3, r1, r3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	333c      	adds	r3, #60	; 0x3c
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d108      	bne.n	8008fe2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	212c      	movs	r1, #44	; 0x2c
 8008fd6:	fb01 f303 	mul.w	r3, r1, r3
 8008fda:	4413      	add	r3, r2
 8008fdc:	333d      	adds	r3, #61	; 0x3d
 8008fde:	2201      	movs	r2, #1
 8008fe0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ffc:	f043 0302 	orr.w	r3, r3, #2
 8009000:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	b2d2      	uxtb	r2, r2
 800900a:	4611      	mov	r1, r2
 800900c:	4618      	mov	r0, r3
 800900e:	f009 f8d0 	bl	80121b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	4413      	add	r3, r2
 800901a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901e:	461a      	mov	r2, r3
 8009020:	2310      	movs	r3, #16
 8009022:	6093      	str	r3, [r2, #8]
}
 8009024:	e217      	b.n	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	4413      	add	r3, r2
 800902e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009038:	2b80      	cmp	r3, #128	; 0x80
 800903a:	d174      	bne.n	8009126 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d121      	bne.n	8009088 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	212c      	movs	r1, #44	; 0x2c
 800904a:	fb01 f303 	mul.w	r3, r1, r3
 800904e:	4413      	add	r3, r2
 8009050:	3361      	adds	r3, #97	; 0x61
 8009052:	2206      	movs	r2, #6
 8009054:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	4413      	add	r3, r2
 800905e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	0151      	lsls	r1, r2, #5
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	440a      	add	r2, r1
 800906c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009070:	f043 0302 	orr.w	r3, r3, #2
 8009074:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	4611      	mov	r1, r2
 8009080:	4618      	mov	r0, r3
 8009082:	f009 f896 	bl	80121b2 <USB_HC_Halt>
 8009086:	e044      	b.n	8009112 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	212c      	movs	r1, #44	; 0x2c
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	335c      	adds	r3, #92	; 0x5c
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	202c      	movs	r0, #44	; 0x2c
 80090a0:	fb00 f303 	mul.w	r3, r0, r3
 80090a4:	440b      	add	r3, r1
 80090a6:	335c      	adds	r3, #92	; 0x5c
 80090a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	212c      	movs	r1, #44	; 0x2c
 80090b0:	fb01 f303 	mul.w	r3, r1, r3
 80090b4:	4413      	add	r3, r2
 80090b6:	335c      	adds	r3, #92	; 0x5c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d920      	bls.n	8009100 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	212c      	movs	r1, #44	; 0x2c
 80090c4:	fb01 f303 	mul.w	r3, r1, r3
 80090c8:	4413      	add	r3, r2
 80090ca:	335c      	adds	r3, #92	; 0x5c
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	212c      	movs	r1, #44	; 0x2c
 80090d6:	fb01 f303 	mul.w	r3, r1, r3
 80090da:	4413      	add	r3, r2
 80090dc:	3360      	adds	r3, #96	; 0x60
 80090de:	2204      	movs	r2, #4
 80090e0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	b2d9      	uxtb	r1, r3
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	202c      	movs	r0, #44	; 0x2c
 80090ec:	fb00 f303 	mul.w	r3, r0, r3
 80090f0:	4413      	add	r3, r2
 80090f2:	3360      	adds	r3, #96	; 0x60
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f00e fca9 	bl	8017a50 <HAL_HCD_HC_NotifyURBChange_Callback>
 80090fe:	e008      	b.n	8009112 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	212c      	movs	r1, #44	; 0x2c
 8009106:	fb01 f303 	mul.w	r3, r1, r3
 800910a:	4413      	add	r3, r2
 800910c:	3360      	adds	r3, #96	; 0x60
 800910e:	2202      	movs	r2, #2
 8009110:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	4413      	add	r3, r2
 800911a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911e:	461a      	mov	r2, r3
 8009120:	2380      	movs	r3, #128	; 0x80
 8009122:	6093      	str	r3, [r2, #8]
}
 8009124:	e197      	b.n	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	4413      	add	r3, r2
 800912e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800913c:	d134      	bne.n	80091a8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	4413      	add	r3, r2
 8009146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	0151      	lsls	r1, r2, #5
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	440a      	add	r2, r1
 8009154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009158:	f043 0302 	orr.w	r3, r3, #2
 800915c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	b2d2      	uxtb	r2, r2
 8009166:	4611      	mov	r1, r2
 8009168:	4618      	mov	r0, r3
 800916a:	f009 f822 	bl	80121b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	4413      	add	r3, r2
 8009176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800917a:	461a      	mov	r2, r3
 800917c:	2310      	movs	r3, #16
 800917e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	4413      	add	r3, r2
 8009188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918c:	461a      	mov	r2, r3
 800918e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009192:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	212c      	movs	r1, #44	; 0x2c
 800919a:	fb01 f303 	mul.w	r3, r1, r3
 800919e:	4413      	add	r3, r2
 80091a0:	3361      	adds	r3, #97	; 0x61
 80091a2:	2208      	movs	r2, #8
 80091a4:	701a      	strb	r2, [r3, #0]
}
 80091a6:	e156      	b.n	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	f040 814b 	bne.w	8009456 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	0151      	lsls	r1, r2, #5
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	440a      	add	r2, r1
 80091d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091da:	f023 0302 	bic.w	r3, r3, #2
 80091de:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	212c      	movs	r1, #44	; 0x2c
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	4413      	add	r3, r2
 80091ec:	3361      	adds	r3, #97	; 0x61
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d179      	bne.n	80092e8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	212c      	movs	r1, #44	; 0x2c
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	4413      	add	r3, r2
 8009200:	3360      	adds	r3, #96	; 0x60
 8009202:	2201      	movs	r2, #1
 8009204:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	212c      	movs	r1, #44	; 0x2c
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	4413      	add	r3, r2
 8009212:	333f      	adds	r3, #63	; 0x3f
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b02      	cmp	r3, #2
 8009218:	d00a      	beq.n	8009230 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	212c      	movs	r1, #44	; 0x2c
 8009220:	fb01 f303 	mul.w	r3, r1, r3
 8009224:	4413      	add	r3, r2
 8009226:	333f      	adds	r3, #63	; 0x3f
 8009228:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800922a:	2b03      	cmp	r3, #3
 800922c:	f040 80fc 	bne.w	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d142      	bne.n	80092be <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	212c      	movs	r1, #44	; 0x2c
 800923e:	fb01 f303 	mul.w	r3, r1, r3
 8009242:	4413      	add	r3, r2
 8009244:	334c      	adds	r3, #76	; 0x4c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 80ed 	beq.w	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	212c      	movs	r1, #44	; 0x2c
 8009254:	fb01 f303 	mul.w	r3, r1, r3
 8009258:	4413      	add	r3, r2
 800925a:	334c      	adds	r3, #76	; 0x4c
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	202c      	movs	r0, #44	; 0x2c
 8009264:	fb00 f202 	mul.w	r2, r0, r2
 8009268:	440a      	add	r2, r1
 800926a:	3240      	adds	r2, #64	; 0x40
 800926c:	8812      	ldrh	r2, [r2, #0]
 800926e:	4413      	add	r3, r2
 8009270:	3b01      	subs	r3, #1
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	202c      	movs	r0, #44	; 0x2c
 8009278:	fb00 f202 	mul.w	r2, r0, r2
 800927c:	440a      	add	r2, r1
 800927e:	3240      	adds	r2, #64	; 0x40
 8009280:	8812      	ldrh	r2, [r2, #0]
 8009282:	fbb3 f3f2 	udiv	r3, r3, r2
 8009286:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80ca 	beq.w	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	212c      	movs	r1, #44	; 0x2c
 800929a:	fb01 f303 	mul.w	r3, r1, r3
 800929e:	4413      	add	r3, r2
 80092a0:	3355      	adds	r3, #85	; 0x55
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f083 0301 	eor.w	r3, r3, #1
 80092a8:	b2d8      	uxtb	r0, r3
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	212c      	movs	r1, #44	; 0x2c
 80092b0:	fb01 f303 	mul.w	r3, r1, r3
 80092b4:	4413      	add	r3, r2
 80092b6:	3355      	adds	r3, #85	; 0x55
 80092b8:	4602      	mov	r2, r0
 80092ba:	701a      	strb	r2, [r3, #0]
 80092bc:	e0b4      	b.n	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	212c      	movs	r1, #44	; 0x2c
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	4413      	add	r3, r2
 80092ca:	3355      	adds	r3, #85	; 0x55
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f083 0301 	eor.w	r3, r3, #1
 80092d2:	b2d8      	uxtb	r0, r3
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	212c      	movs	r1, #44	; 0x2c
 80092da:	fb01 f303 	mul.w	r3, r1, r3
 80092de:	4413      	add	r3, r2
 80092e0:	3355      	adds	r3, #85	; 0x55
 80092e2:	4602      	mov	r2, r0
 80092e4:	701a      	strb	r2, [r3, #0]
 80092e6:	e09f      	b.n	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	212c      	movs	r1, #44	; 0x2c
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	3361      	adds	r3, #97	; 0x61
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d109      	bne.n	8009310 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	212c      	movs	r1, #44	; 0x2c
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	4413      	add	r3, r2
 8009308:	3360      	adds	r3, #96	; 0x60
 800930a:	2202      	movs	r2, #2
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	e08b      	b.n	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	212c      	movs	r1, #44	; 0x2c
 8009316:	fb01 f303 	mul.w	r3, r1, r3
 800931a:	4413      	add	r3, r2
 800931c:	3361      	adds	r3, #97	; 0x61
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b04      	cmp	r3, #4
 8009322:	d109      	bne.n	8009338 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	212c      	movs	r1, #44	; 0x2c
 800932a:	fb01 f303 	mul.w	r3, r1, r3
 800932e:	4413      	add	r3, r2
 8009330:	3360      	adds	r3, #96	; 0x60
 8009332:	2202      	movs	r2, #2
 8009334:	701a      	strb	r2, [r3, #0]
 8009336:	e077      	b.n	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	212c      	movs	r1, #44	; 0x2c
 800933e:	fb01 f303 	mul.w	r3, r1, r3
 8009342:	4413      	add	r3, r2
 8009344:	3361      	adds	r3, #97	; 0x61
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b05      	cmp	r3, #5
 800934a:	d109      	bne.n	8009360 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	212c      	movs	r1, #44	; 0x2c
 8009352:	fb01 f303 	mul.w	r3, r1, r3
 8009356:	4413      	add	r3, r2
 8009358:	3360      	adds	r3, #96	; 0x60
 800935a:	2205      	movs	r2, #5
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e063      	b.n	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	212c      	movs	r1, #44	; 0x2c
 8009366:	fb01 f303 	mul.w	r3, r1, r3
 800936a:	4413      	add	r3, r2
 800936c:	3361      	adds	r3, #97	; 0x61
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b06      	cmp	r3, #6
 8009372:	d009      	beq.n	8009388 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	212c      	movs	r1, #44	; 0x2c
 800937a:	fb01 f303 	mul.w	r3, r1, r3
 800937e:	4413      	add	r3, r2
 8009380:	3361      	adds	r3, #97	; 0x61
 8009382:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009384:	2b08      	cmp	r3, #8
 8009386:	d14f      	bne.n	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	212c      	movs	r1, #44	; 0x2c
 800938e:	fb01 f303 	mul.w	r3, r1, r3
 8009392:	4413      	add	r3, r2
 8009394:	335c      	adds	r3, #92	; 0x5c
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	202c      	movs	r0, #44	; 0x2c
 80093a0:	fb00 f303 	mul.w	r3, r0, r3
 80093a4:	440b      	add	r3, r1
 80093a6:	335c      	adds	r3, #92	; 0x5c
 80093a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	212c      	movs	r1, #44	; 0x2c
 80093b0:	fb01 f303 	mul.w	r3, r1, r3
 80093b4:	4413      	add	r3, r2
 80093b6:	335c      	adds	r3, #92	; 0x5c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d912      	bls.n	80093e4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	212c      	movs	r1, #44	; 0x2c
 80093c4:	fb01 f303 	mul.w	r3, r1, r3
 80093c8:	4413      	add	r3, r2
 80093ca:	335c      	adds	r3, #92	; 0x5c
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	212c      	movs	r1, #44	; 0x2c
 80093d6:	fb01 f303 	mul.w	r3, r1, r3
 80093da:	4413      	add	r3, r2
 80093dc:	3360      	adds	r3, #96	; 0x60
 80093de:	2204      	movs	r2, #4
 80093e0:	701a      	strb	r2, [r3, #0]
 80093e2:	e021      	b.n	8009428 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	212c      	movs	r1, #44	; 0x2c
 80093ea:	fb01 f303 	mul.w	r3, r1, r3
 80093ee:	4413      	add	r3, r2
 80093f0:	3360      	adds	r3, #96	; 0x60
 80093f2:	2202      	movs	r2, #2
 80093f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800940c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009414:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	4413      	add	r3, r2
 800941e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009422:	461a      	mov	r2, r3
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	4413      	add	r3, r2
 8009430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009434:	461a      	mov	r2, r3
 8009436:	2302      	movs	r3, #2
 8009438:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	b2d9      	uxtb	r1, r3
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	202c      	movs	r0, #44	; 0x2c
 8009444:	fb00 f303 	mul.w	r3, r0, r3
 8009448:	4413      	add	r3, r2
 800944a:	3360      	adds	r3, #96	; 0x60
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f00e fafd 	bl	8017a50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009456:	bf00      	nop
 8009458:	3720      	adds	r7, #32
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b08a      	sub	sp, #40	; 0x28
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	0c5b      	lsrs	r3, r3, #17
 8009484:	f003 030f 	and.w	r3, r3, #15
 8009488:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	091b      	lsrs	r3, r3, #4
 800948e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009492:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d004      	beq.n	80094a4 <HCD_RXQLVL_IRQHandler+0x46>
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2b05      	cmp	r3, #5
 800949e:	f000 80a9 	beq.w	80095f4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80094a2:	e0aa      	b.n	80095fa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80a6 	beq.w	80095f8 <HCD_RXQLVL_IRQHandler+0x19a>
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	212c      	movs	r1, #44	; 0x2c
 80094b2:	fb01 f303 	mul.w	r3, r1, r3
 80094b6:	4413      	add	r3, r2
 80094b8:	3344      	adds	r3, #68	; 0x44
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 809b 	beq.w	80095f8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	212c      	movs	r1, #44	; 0x2c
 80094c8:	fb01 f303 	mul.w	r3, r1, r3
 80094cc:	4413      	add	r3, r2
 80094ce:	3350      	adds	r3, #80	; 0x50
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	441a      	add	r2, r3
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	202c      	movs	r0, #44	; 0x2c
 80094dc:	fb00 f303 	mul.w	r3, r0, r3
 80094e0:	440b      	add	r3, r1
 80094e2:	334c      	adds	r3, #76	; 0x4c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d87a      	bhi.n	80095e0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6818      	ldr	r0, [r3, #0]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	212c      	movs	r1, #44	; 0x2c
 80094f4:	fb01 f303 	mul.w	r3, r1, r3
 80094f8:	4413      	add	r3, r2
 80094fa:	3344      	adds	r3, #68	; 0x44
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	b292      	uxth	r2, r2
 8009502:	4619      	mov	r1, r3
 8009504:	f008 f9ff 	bl	8011906 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	212c      	movs	r1, #44	; 0x2c
 800950e:	fb01 f303 	mul.w	r3, r1, r3
 8009512:	4413      	add	r3, r2
 8009514:	3344      	adds	r3, #68	; 0x44
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	441a      	add	r2, r3
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	202c      	movs	r0, #44	; 0x2c
 8009522:	fb00 f303 	mul.w	r3, r0, r3
 8009526:	440b      	add	r3, r1
 8009528:	3344      	adds	r3, #68	; 0x44
 800952a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	212c      	movs	r1, #44	; 0x2c
 8009532:	fb01 f303 	mul.w	r3, r1, r3
 8009536:	4413      	add	r3, r2
 8009538:	3350      	adds	r3, #80	; 0x50
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	441a      	add	r2, r3
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	202c      	movs	r0, #44	; 0x2c
 8009546:	fb00 f303 	mul.w	r3, r0, r3
 800954a:	440b      	add	r3, r1
 800954c:	3350      	adds	r3, #80	; 0x50
 800954e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	4413      	add	r3, r2
 8009558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	0cdb      	lsrs	r3, r3, #19
 8009560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009564:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	212c      	movs	r1, #44	; 0x2c
 800956c:	fb01 f303 	mul.w	r3, r1, r3
 8009570:	4413      	add	r3, r2
 8009572:	3340      	adds	r3, #64	; 0x40
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	4293      	cmp	r3, r2
 800957c:	d13c      	bne.n	80095f8 <HCD_RXQLVL_IRQHandler+0x19a>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d039      	beq.n	80095f8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	4413      	add	r3, r2
 800958c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800959a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b0:	461a      	mov	r2, r3
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	212c      	movs	r1, #44	; 0x2c
 80095bc:	fb01 f303 	mul.w	r3, r1, r3
 80095c0:	4413      	add	r3, r2
 80095c2:	3354      	adds	r3, #84	; 0x54
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f083 0301 	eor.w	r3, r3, #1
 80095ca:	b2d8      	uxtb	r0, r3
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	212c      	movs	r1, #44	; 0x2c
 80095d2:	fb01 f303 	mul.w	r3, r1, r3
 80095d6:	4413      	add	r3, r2
 80095d8:	3354      	adds	r3, #84	; 0x54
 80095da:	4602      	mov	r2, r0
 80095dc:	701a      	strb	r2, [r3, #0]
      break;
 80095de:	e00b      	b.n	80095f8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	212c      	movs	r1, #44	; 0x2c
 80095e6:	fb01 f303 	mul.w	r3, r1, r3
 80095ea:	4413      	add	r3, r2
 80095ec:	3360      	adds	r3, #96	; 0x60
 80095ee:	2204      	movs	r2, #4
 80095f0:	701a      	strb	r2, [r3, #0]
      break;
 80095f2:	e001      	b.n	80095f8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80095f4:	bf00      	nop
 80095f6:	e000      	b.n	80095fa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80095f8:	bf00      	nop
  }
}
 80095fa:	bf00      	nop
 80095fc:	3728      	adds	r7, #40	; 0x28
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b086      	sub	sp, #24
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800962e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b02      	cmp	r3, #2
 8009638:	d10b      	bne.n	8009652 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b01      	cmp	r3, #1
 8009642:	d102      	bne.n	800964a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f00e f9e7 	bl	8017a18 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f043 0302 	orr.w	r3, r3, #2
 8009650:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b08      	cmp	r3, #8
 800965a:	d132      	bne.n	80096c2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f043 0308 	orr.w	r3, r3, #8
 8009662:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f003 0304 	and.w	r3, r3, #4
 800966a:	2b04      	cmp	r3, #4
 800966c:	d126      	bne.n	80096bc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	2b02      	cmp	r3, #2
 8009674:	d113      	bne.n	800969e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800967c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009680:	d106      	bne.n	8009690 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2102      	movs	r1, #2
 8009688:	4618      	mov	r0, r3
 800968a:	f008 fa6b 	bl	8011b64 <USB_InitFSLSPClkSel>
 800968e:	e011      	b.n	80096b4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2101      	movs	r1, #1
 8009696:	4618      	mov	r0, r3
 8009698:	f008 fa64 	bl	8011b64 <USB_InitFSLSPClkSel>
 800969c:	e00a      	b.n	80096b4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d106      	bne.n	80096b4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ac:	461a      	mov	r2, r3
 80096ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80096b2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f00e f9dd 	bl	8017a74 <HAL_HCD_PortEnabled_Callback>
 80096ba:	e002      	b.n	80096c2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f00e f9e7 	bl	8017a90 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b20      	cmp	r3, #32
 80096ca:	d103      	bne.n	80096d4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f043 0320 	orr.w	r3, r3, #32
 80096d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80096da:	461a      	mov	r2, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6013      	str	r3, [r2, #0]
}
 80096e0:	bf00      	nop
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e07f      	b.n	80097fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7f9 fb6c 	bl	8002dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2224      	movs	r2, #36	; 0x24
 8009718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 0201 	bic.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009738:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009748:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d107      	bne.n	8009762 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800975e:	609a      	str	r2, [r3, #8]
 8009760:	e006      	b.n	8009770 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	689a      	ldr	r2, [r3, #8]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800976e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d104      	bne.n	8009782 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009780:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6859      	ldr	r1, [r3, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	4b1d      	ldr	r3, [pc, #116]	; (8009804 <HAL_I2C_Init+0x11c>)
 800978e:	430b      	orrs	r3, r1
 8009790:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68da      	ldr	r2, [r3, #12]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691a      	ldr	r2, [r3, #16]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	ea42 0103 	orr.w	r1, r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	021a      	lsls	r2, r3, #8
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	430a      	orrs	r2, r1
 80097ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	69d9      	ldr	r1, [r3, #28]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a1a      	ldr	r2, [r3, #32]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f042 0201 	orr.w	r2, r2, #1
 80097da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2220      	movs	r2, #32
 80097e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	02008000 	.word	0x02008000

08009808 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e021      	b.n	800985e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2224      	movs	r2, #36	; 0x24
 800981e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0201 	bic.w	r2, r2, #1
 8009830:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7f9 fb52 	bl	8002edc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	461a      	mov	r2, r3
 8009876:	4603      	mov	r3, r0
 8009878:	817b      	strh	r3, [r7, #10]
 800987a:	460b      	mov	r3, r1
 800987c:	813b      	strh	r3, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b20      	cmp	r3, #32
 800988c:	f040 80f9 	bne.w	8009a82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <HAL_I2C_Mem_Write+0x34>
 8009896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009898:	2b00      	cmp	r3, #0
 800989a:	d105      	bne.n	80098a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e0ed      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <HAL_I2C_Mem_Write+0x4e>
 80098b2:	2302      	movs	r3, #2
 80098b4:	e0e6      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80098be:	f7fc f8d5 	bl	8005a6c <HAL_GetTick>
 80098c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	2319      	movs	r3, #25
 80098ca:	2201      	movs	r2, #1
 80098cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 fac3 	bl	8009e5c <I2C_WaitOnFlagUntilTimeout>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e0d1      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2221      	movs	r2, #33	; 0x21
 80098e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2240      	movs	r2, #64	; 0x40
 80098ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a3a      	ldr	r2, [r7, #32]
 80098fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009908:	88f8      	ldrh	r0, [r7, #6]
 800990a:	893a      	ldrh	r2, [r7, #8]
 800990c:	8979      	ldrh	r1, [r7, #10]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	4603      	mov	r3, r0
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f9d3 	bl	8009cc4 <I2C_RequestMemoryWrite>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e0a9      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009934:	b29b      	uxth	r3, r3
 8009936:	2bff      	cmp	r3, #255	; 0xff
 8009938:	d90e      	bls.n	8009958 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	22ff      	movs	r2, #255	; 0xff
 800993e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009944:	b2da      	uxtb	r2, r3
 8009946:	8979      	ldrh	r1, [r7, #10]
 8009948:	2300      	movs	r3, #0
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fba5 	bl	800a0a0 <I2C_TransferConfig>
 8009956:	e00f      	b.n	8009978 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009966:	b2da      	uxtb	r2, r3
 8009968:	8979      	ldrh	r1, [r7, #10]
 800996a:	2300      	movs	r3, #0
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fb94 	bl	800a0a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 faad 	bl	8009edc <I2C_WaitOnTXISFlagUntilTimeout>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e07b      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	781a      	ldrb	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b4:	3b01      	subs	r3, #1
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d034      	beq.n	8009a30 <HAL_I2C_Mem_Write+0x1c8>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d130      	bne.n	8009a30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	2200      	movs	r2, #0
 80099d6:	2180      	movs	r1, #128	; 0x80
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 fa3f 	bl	8009e5c <I2C_WaitOnFlagUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e04d      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2bff      	cmp	r3, #255	; 0xff
 80099f0:	d90e      	bls.n	8009a10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	22ff      	movs	r2, #255	; 0xff
 80099f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	8979      	ldrh	r1, [r7, #10]
 8009a00:	2300      	movs	r3, #0
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fb49 	bl	800a0a0 <I2C_TransferConfig>
 8009a0e:	e00f      	b.n	8009a30 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	8979      	ldrh	r1, [r7, #10]
 8009a22:	2300      	movs	r3, #0
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fb38 	bl	800a0a0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d19e      	bne.n	8009978 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fa8c 	bl	8009f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e01a      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2220      	movs	r2, #32
 8009a54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6859      	ldr	r1, [r3, #4]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <HAL_I2C_Mem_Write+0x224>)
 8009a62:	400b      	ands	r3, r1
 8009a64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e000      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009a82:	2302      	movs	r3, #2
  }
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	fe00e800 	.word	0xfe00e800

08009a90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	4608      	mov	r0, r1
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	817b      	strh	r3, [r7, #10]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	813b      	strh	r3, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	f040 80fd 	bne.w	8009cb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <HAL_I2C_Mem_Read+0x34>
 8009abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d105      	bne.n	8009ad0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e0f1      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d101      	bne.n	8009ade <HAL_I2C_Mem_Read+0x4e>
 8009ada:	2302      	movs	r3, #2
 8009adc:	e0ea      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009ae6:	f7fb ffc1 	bl	8005a6c <HAL_GetTick>
 8009aea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	2319      	movs	r3, #25
 8009af2:	2201      	movs	r2, #1
 8009af4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f000 f9af 	bl	8009e5c <I2C_WaitOnFlagUntilTimeout>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e0d5      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2222      	movs	r2, #34	; 0x22
 8009b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2240      	movs	r2, #64	; 0x40
 8009b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6a3a      	ldr	r2, [r7, #32]
 8009b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b30:	88f8      	ldrh	r0, [r7, #6]
 8009b32:	893a      	ldrh	r2, [r7, #8]
 8009b34:	8979      	ldrh	r1, [r7, #10]
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	4603      	mov	r3, r0
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 f913 	bl	8009d6c <I2C_RequestMemoryRead>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e0ad      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2bff      	cmp	r3, #255	; 0xff
 8009b60:	d90e      	bls.n	8009b80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	22ff      	movs	r2, #255	; 0xff
 8009b66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	8979      	ldrh	r1, [r7, #10]
 8009b70:	4b52      	ldr	r3, [pc, #328]	; (8009cbc <HAL_I2C_Mem_Read+0x22c>)
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 fa91 	bl	800a0a0 <I2C_TransferConfig>
 8009b7e:	e00f      	b.n	8009ba0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	8979      	ldrh	r1, [r7, #10]
 8009b92:	4b4a      	ldr	r3, [pc, #296]	; (8009cbc <HAL_I2C_Mem_Read+0x22c>)
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 fa80 	bl	800a0a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2104      	movs	r1, #4
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 f956 	bl	8009e5c <I2C_WaitOnFlagUntilTimeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e07c      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc4:	b2d2      	uxtb	r2, r2
 8009bc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	3b01      	subs	r3, #1
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d034      	beq.n	8009c60 <HAL_I2C_Mem_Read+0x1d0>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d130      	bne.n	8009c60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	2200      	movs	r2, #0
 8009c06:	2180      	movs	r1, #128	; 0x80
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 f927 	bl	8009e5c <I2C_WaitOnFlagUntilTimeout>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e04d      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	2bff      	cmp	r3, #255	; 0xff
 8009c20:	d90e      	bls.n	8009c40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	22ff      	movs	r2, #255	; 0xff
 8009c26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	8979      	ldrh	r1, [r7, #10]
 8009c30:	2300      	movs	r3, #0
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fa31 	bl	800a0a0 <I2C_TransferConfig>
 8009c3e:	e00f      	b.n	8009c60 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	8979      	ldrh	r1, [r7, #10]
 8009c52:	2300      	movs	r3, #0
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 fa20 	bl	800a0a0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d19a      	bne.n	8009ba0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c6a:	697a      	ldr	r2, [r7, #20]
 8009c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 f974 	bl	8009f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e01a      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2220      	movs	r2, #32
 8009c84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6859      	ldr	r1, [r3, #4]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <HAL_I2C_Mem_Read+0x230>)
 8009c92:	400b      	ands	r3, r1
 8009c94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e000      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009cb2:	2302      	movs	r3, #2
  }
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	80002400 	.word	0x80002400
 8009cc0:	fe00e800 	.word	0xfe00e800

08009cc4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	4608      	mov	r0, r1
 8009cce:	4611      	mov	r1, r2
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	817b      	strh	r3, [r7, #10]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	813b      	strh	r3, [r7, #8]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	8979      	ldrh	r1, [r7, #10]
 8009ce4:	4b20      	ldr	r3, [pc, #128]	; (8009d68 <I2C_RequestMemoryWrite+0xa4>)
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f9d7 	bl	800a0a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	69b9      	ldr	r1, [r7, #24]
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 f8f0 	bl	8009edc <I2C_WaitOnTXISFlagUntilTimeout>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e02c      	b.n	8009d60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d06:	88fb      	ldrh	r3, [r7, #6]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d105      	bne.n	8009d18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d0c:	893b      	ldrh	r3, [r7, #8]
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	629a      	str	r2, [r3, #40]	; 0x28
 8009d16:	e015      	b.n	8009d44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d18:	893b      	ldrh	r3, [r7, #8]
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	69b9      	ldr	r1, [r7, #24]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 f8d6 	bl	8009edc <I2C_WaitOnTXISFlagUntilTimeout>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e012      	b.n	8009d60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d3a:	893b      	ldrh	r3, [r7, #8]
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2180      	movs	r1, #128	; 0x80
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 f884 	bl	8009e5c <I2C_WaitOnFlagUntilTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e000      	b.n	8009d60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	80002000 	.word	0x80002000

08009d6c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af02      	add	r7, sp, #8
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	4608      	mov	r0, r1
 8009d76:	4611      	mov	r1, r2
 8009d78:	461a      	mov	r2, r3
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	817b      	strh	r3, [r7, #10]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	813b      	strh	r3, [r7, #8]
 8009d82:	4613      	mov	r3, r2
 8009d84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d86:	88fb      	ldrh	r3, [r7, #6]
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	8979      	ldrh	r1, [r7, #10]
 8009d8c:	4b20      	ldr	r3, [pc, #128]	; (8009e10 <I2C_RequestMemoryRead+0xa4>)
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	2300      	movs	r3, #0
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 f984 	bl	800a0a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d98:	69fa      	ldr	r2, [r7, #28]
 8009d9a:	69b9      	ldr	r1, [r7, #24]
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f89d 	bl	8009edc <I2C_WaitOnTXISFlagUntilTimeout>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e02c      	b.n	8009e06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009dac:	88fb      	ldrh	r3, [r7, #6]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d105      	bne.n	8009dbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009db2:	893b      	ldrh	r3, [r7, #8]
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	629a      	str	r2, [r3, #40]	; 0x28
 8009dbc:	e015      	b.n	8009dea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009dbe:	893b      	ldrh	r3, [r7, #8]
 8009dc0:	0a1b      	lsrs	r3, r3, #8
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dcc:	69fa      	ldr	r2, [r7, #28]
 8009dce:	69b9      	ldr	r1, [r7, #24]
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f883 	bl	8009edc <I2C_WaitOnTXISFlagUntilTimeout>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e012      	b.n	8009e06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009de0:	893b      	ldrh	r3, [r7, #8]
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	2200      	movs	r2, #0
 8009df2:	2140      	movs	r1, #64	; 0x40
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 f831 	bl	8009e5c <I2C_WaitOnFlagUntilTimeout>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e000      	b.n	8009e06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	80002000 	.word	0x80002000

08009e14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d103      	bne.n	8009e32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d007      	beq.n	8009e50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	699a      	ldr	r2, [r3, #24]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f042 0201 	orr.w	r2, r2, #1
 8009e4e:	619a      	str	r2, [r3, #24]
  }
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e6c:	e022      	b.n	8009eb4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e74:	d01e      	beq.n	8009eb4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e76:	f7fb fdf9 	bl	8005a6c <HAL_GetTick>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d302      	bcc.n	8009e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d113      	bne.n	8009eb4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e90:	f043 0220 	orr.w	r2, r3, #32
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e00f      	b.n	8009ed4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	699a      	ldr	r2, [r3, #24]
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	bf0c      	ite	eq
 8009ec4:	2301      	moveq	r3, #1
 8009ec6:	2300      	movne	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	461a      	mov	r2, r3
 8009ecc:	79fb      	ldrb	r3, [r7, #7]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d0cd      	beq.n	8009e6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ee8:	e02c      	b.n	8009f44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	68b9      	ldr	r1, [r7, #8]
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 f870 	bl	8009fd4 <I2C_IsAcknowledgeFailed>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e02a      	b.n	8009f54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f04:	d01e      	beq.n	8009f44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f06:	f7fb fdb1 	bl	8005a6c <HAL_GetTick>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d302      	bcc.n	8009f1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d113      	bne.n	8009f44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f20:	f043 0220 	orr.w	r2, r3, #32
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e007      	b.n	8009f54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d1cb      	bne.n	8009eea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f68:	e028      	b.n	8009fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	68b9      	ldr	r1, [r7, #8]
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f830 	bl	8009fd4 <I2C_IsAcknowledgeFailed>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e026      	b.n	8009fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f7e:	f7fb fd75 	bl	8005a6c <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d302      	bcc.n	8009f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d113      	bne.n	8009fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f98:	f043 0220 	orr.w	r2, r3, #32
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e007      	b.n	8009fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	d1cf      	bne.n	8009f6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	f003 0310 	and.w	r3, r3, #16
 8009fea:	2b10      	cmp	r3, #16
 8009fec:	d151      	bne.n	800a092 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fee:	e022      	b.n	800a036 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff6:	d01e      	beq.n	800a036 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ff8:	f7fb fd38 	bl	8005a6c <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	429a      	cmp	r2, r3
 800a006:	d302      	bcc.n	800a00e <I2C_IsAcknowledgeFailed+0x3a>
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d113      	bne.n	800a036 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a012:	f043 0220 	orr.w	r2, r3, #32
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2220      	movs	r2, #32
 800a01e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e02e      	b.n	800a094 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	f003 0320 	and.w	r3, r3, #32
 800a040:	2b20      	cmp	r3, #32
 800a042:	d1d5      	bne.n	8009ff0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2210      	movs	r2, #16
 800a04a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2220      	movs	r2, #32
 800a052:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7ff fedd 	bl	8009e14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	6859      	ldr	r1, [r3, #4]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	4b0d      	ldr	r3, [pc, #52]	; (800a09c <I2C_IsAcknowledgeFailed+0xc8>)
 800a066:	400b      	ands	r3, r1
 800a068:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a06e:	f043 0204 	orr.w	r2, r3, #4
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2220      	movs	r2, #32
 800a07a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	fe00e800 	.word	0xfe00e800

0800a0a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	607b      	str	r3, [r7, #4]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	817b      	strh	r3, [r7, #10]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	0d5b      	lsrs	r3, r3, #21
 800a0bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a0c0:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <I2C_TransferConfig+0x58>)
 800a0c2:	430b      	orrs	r3, r1
 800a0c4:	43db      	mvns	r3, r3
 800a0c6:	ea02 0103 	and.w	r1, r2, r3
 800a0ca:	897b      	ldrh	r3, [r7, #10]
 800a0cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a0d0:	7a7b      	ldrb	r3, [r7, #9]
 800a0d2:	041b      	lsls	r3, r3, #16
 800a0d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0d8:	431a      	orrs	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	03ff63ff 	.word	0x03ff63ff

0800a0fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b20      	cmp	r3, #32
 800a110:	d138      	bne.n	800a184 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a11c:	2302      	movs	r3, #2
 800a11e:	e032      	b.n	800a186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2224      	movs	r2, #36	; 0x24
 800a12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0201 	bic.w	r2, r2, #1
 800a13e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a14e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6819      	ldr	r1, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f042 0201 	orr.w	r2, r2, #1
 800a16e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	e000      	b.n	800a186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a184:	2302      	movs	r3, #2
  }
}
 800a186:	4618      	mov	r0, r3
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b20      	cmp	r3, #32
 800a1a6:	d139      	bne.n	800a21c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d101      	bne.n	800a1b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e033      	b.n	800a21e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2224      	movs	r2, #36	; 0x24
 800a1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 0201 	bic.w	r2, r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a1e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	021b      	lsls	r3, r3, #8
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 0201 	orr.w	r2, r2, #1
 800a206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2220      	movs	r2, #32
 800a20c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	e000      	b.n	800a21e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a21c:	2302      	movs	r3, #2
  }
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
	...

0800a22c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e0bf      	b.n	800a3be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d106      	bne.n	800a258 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7f8 fe7e 	bl	8002f54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	699a      	ldr	r2, [r3, #24]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a26e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6999      	ldr	r1, [r3, #24]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a284:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6899      	ldr	r1, [r3, #8]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	4b4a      	ldr	r3, [pc, #296]	; (800a3c8 <HAL_LTDC_Init+0x19c>)
 800a2a0:	400b      	ands	r3, r1
 800a2a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	041b      	lsls	r3, r3, #16
 800a2aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6899      	ldr	r1, [r3, #8]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	699a      	ldr	r2, [r3, #24]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68d9      	ldr	r1, [r3, #12]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4b3e      	ldr	r3, [pc, #248]	; (800a3c8 <HAL_LTDC_Init+0x19c>)
 800a2ce:	400b      	ands	r3, r1
 800a2d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	041b      	lsls	r3, r3, #16
 800a2d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68d9      	ldr	r1, [r3, #12]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a1a      	ldr	r2, [r3, #32]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6919      	ldr	r1, [r3, #16]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	4b33      	ldr	r3, [pc, #204]	; (800a3c8 <HAL_LTDC_Init+0x19c>)
 800a2fc:	400b      	ands	r3, r1
 800a2fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a304:	041b      	lsls	r3, r3, #16
 800a306:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6919      	ldr	r1, [r3, #16]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	431a      	orrs	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6959      	ldr	r1, [r3, #20]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	4b27      	ldr	r3, [pc, #156]	; (800a3c8 <HAL_LTDC_Init+0x19c>)
 800a32a:	400b      	ands	r3, r1
 800a32c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	041b      	lsls	r3, r3, #16
 800a334:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	6959      	ldr	r1, [r3, #20]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a352:	021b      	lsls	r3, r3, #8
 800a354:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a35c:	041b      	lsls	r3, r3, #16
 800a35e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a36e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a382:	431a      	orrs	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f042 0206 	orr.w	r2, r2, #6
 800a39a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	699a      	ldr	r2, [r3, #24]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f042 0201 	orr.w	r2, r2, #1
 800a3aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	f000f800 	.word	0xf000f800

0800a3cc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a3cc:	b5b0      	push	{r4, r5, r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d101      	bne.n	800a3e6 <HAL_LTDC_ConfigLayer+0x1a>
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e02c      	b.n	800a440 <HAL_LTDC_ConfigLayer+0x74>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2202      	movs	r2, #2
 800a3f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2134      	movs	r1, #52	; 0x34
 800a3fc:	fb01 f303 	mul.w	r3, r1, r3
 800a400:	4413      	add	r3, r2
 800a402:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4614      	mov	r4, r2
 800a40a:	461d      	mov	r5, r3
 800a40c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a40e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	68b9      	ldr	r1, [r7, #8]
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 f847 	bl	800a4b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2201      	movs	r2, #1
 800a42c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bdb0      	pop	{r4, r5, r7, pc}

0800a448 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d101      	bne.n	800a462 <HAL_LTDC_SetAddress+0x1a>
 800a45e:	2302      	movs	r3, #2
 800a460:	e024      	b.n	800a4ac <HAL_LTDC_SetAddress+0x64>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2202      	movs	r2, #2
 800a46e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2234      	movs	r2, #52	; 0x34
 800a476:	fb02 f303 	mul.w	r3, r2, r3
 800a47a:	3338      	adds	r3, #56	; 0x38
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	4413      	add	r3, r2
 800a480:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6979      	ldr	r1, [r7, #20]
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 f811 	bl	800a4b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2201      	movs	r2, #1
 800a498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b089      	sub	sp, #36	; 0x24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	0c1b      	lsrs	r3, r3, #16
 800a4cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4d0:	4413      	add	r3, r2
 800a4d2:	041b      	lsls	r3, r3, #16
 800a4d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	01db      	lsls	r3, r3, #7
 800a4e0:	4413      	add	r3, r2
 800a4e2:	3384      	adds	r3, #132	; 0x84
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	6812      	ldr	r2, [r2, #0]
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	01d2      	lsls	r2, r2, #7
 800a4f0:	440a      	add	r2, r1
 800a4f2:	3284      	adds	r2, #132	; 0x84
 800a4f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a4f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	0c1b      	lsrs	r3, r3, #16
 800a506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a50a:	4413      	add	r3, r2
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4619      	mov	r1, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	01db      	lsls	r3, r3, #7
 800a518:	440b      	add	r3, r1
 800a51a:	3384      	adds	r3, #132	; 0x84
 800a51c:	4619      	mov	r1, r3
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	4313      	orrs	r3, r2
 800a522:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	68da      	ldr	r2, [r3, #12]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a532:	4413      	add	r3, r2
 800a534:	041b      	lsls	r3, r3, #16
 800a536:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	461a      	mov	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	01db      	lsls	r3, r3, #7
 800a542:	4413      	add	r3, r2
 800a544:	3384      	adds	r3, #132	; 0x84
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	6812      	ldr	r2, [r2, #0]
 800a54c:	4611      	mov	r1, r2
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	01d2      	lsls	r2, r2, #7
 800a552:	440a      	add	r2, r1
 800a554:	3284      	adds	r2, #132	; 0x84
 800a556:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a55a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a56a:	4413      	add	r3, r2
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4619      	mov	r1, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	01db      	lsls	r3, r3, #7
 800a578:	440b      	add	r3, r1
 800a57a:	3384      	adds	r3, #132	; 0x84
 800a57c:	4619      	mov	r1, r3
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	4313      	orrs	r3, r2
 800a582:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	01db      	lsls	r3, r3, #7
 800a58e:	4413      	add	r3, r2
 800a590:	3384      	adds	r3, #132	; 0x84
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	4611      	mov	r1, r2
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	01d2      	lsls	r2, r2, #7
 800a59e:	440a      	add	r2, r1
 800a5a0:	3284      	adds	r2, #132	; 0x84
 800a5a2:	f023 0307 	bic.w	r3, r3, #7
 800a5a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	01db      	lsls	r3, r3, #7
 800a5b2:	4413      	add	r3, r2
 800a5b4:	3384      	adds	r3, #132	; 0x84
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a5c4:	021b      	lsls	r3, r3, #8
 800a5c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a5ce:	041b      	lsls	r3, r3, #16
 800a5d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	061b      	lsls	r3, r3, #24
 800a5d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	01db      	lsls	r3, r3, #7
 800a5e4:	4413      	add	r3, r2
 800a5e6:	3384      	adds	r3, #132	; 0x84
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	01db      	lsls	r3, r3, #7
 800a5f4:	4413      	add	r3, r2
 800a5f6:	3384      	adds	r3, #132	; 0x84
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a604:	461a      	mov	r2, r3
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	431a      	orrs	r2, r3
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	431a      	orrs	r2, r3
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4619      	mov	r1, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	01db      	lsls	r3, r3, #7
 800a618:	440b      	add	r3, r1
 800a61a:	3384      	adds	r3, #132	; 0x84
 800a61c:	4619      	mov	r1, r3
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	4313      	orrs	r3, r2
 800a622:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	461a      	mov	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	01db      	lsls	r3, r3, #7
 800a62e:	4413      	add	r3, r2
 800a630:	3384      	adds	r3, #132	; 0x84
 800a632:	695b      	ldr	r3, [r3, #20]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	6812      	ldr	r2, [r2, #0]
 800a638:	4611      	mov	r1, r2
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	01d2      	lsls	r2, r2, #7
 800a63e:	440a      	add	r2, r1
 800a640:	3284      	adds	r2, #132	; 0x84
 800a642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a646:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	461a      	mov	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	01db      	lsls	r3, r3, #7
 800a652:	4413      	add	r3, r2
 800a654:	3384      	adds	r3, #132	; 0x84
 800a656:	461a      	mov	r2, r3
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	01db      	lsls	r3, r3, #7
 800a668:	4413      	add	r3, r2
 800a66a:	3384      	adds	r3, #132	; 0x84
 800a66c:	69da      	ldr	r2, [r3, #28]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4619      	mov	r1, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	01db      	lsls	r3, r3, #7
 800a678:	440b      	add	r3, r1
 800a67a:	3384      	adds	r3, #132	; 0x84
 800a67c:	4619      	mov	r1, r3
 800a67e:	4b58      	ldr	r3, [pc, #352]	; (800a7e0 <LTDC_SetConfig+0x32c>)
 800a680:	4013      	ands	r3, r2
 800a682:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	69da      	ldr	r2, [r3, #28]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	68f9      	ldr	r1, [r7, #12]
 800a68e:	6809      	ldr	r1, [r1, #0]
 800a690:	4608      	mov	r0, r1
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	01c9      	lsls	r1, r1, #7
 800a696:	4401      	add	r1, r0
 800a698:	3184      	adds	r1, #132	; 0x84
 800a69a:	4313      	orrs	r3, r2
 800a69c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	01db      	lsls	r3, r3, #7
 800a6a8:	4413      	add	r3, r2
 800a6aa:	3384      	adds	r3, #132	; 0x84
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	01db      	lsls	r3, r3, #7
 800a6b8:	4413      	add	r3, r2
 800a6ba:	3384      	adds	r3, #132	; 0x84
 800a6bc:	461a      	mov	r2, r3
 800a6be:	2300      	movs	r3, #0
 800a6c0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	01db      	lsls	r3, r3, #7
 800a6cc:	4413      	add	r3, r2
 800a6ce:	3384      	adds	r3, #132	; 0x84
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a6e0:	2304      	movs	r3, #4
 800a6e2:	61fb      	str	r3, [r7, #28]
 800a6e4:	e01b      	b.n	800a71e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d102      	bne.n	800a6f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	61fb      	str	r3, [r7, #28]
 800a6f2:	e014      	b.n	800a71e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d00b      	beq.n	800a714 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a700:	2b02      	cmp	r3, #2
 800a702:	d007      	beq.n	800a714 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a708:	2b03      	cmp	r3, #3
 800a70a:	d003      	beq.n	800a714 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a710:	2b07      	cmp	r3, #7
 800a712:	d102      	bne.n	800a71a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a714:	2302      	movs	r3, #2
 800a716:	61fb      	str	r3, [r7, #28]
 800a718:	e001      	b.n	800a71e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a71a:	2301      	movs	r3, #1
 800a71c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	01db      	lsls	r3, r3, #7
 800a728:	4413      	add	r3, r2
 800a72a:	3384      	adds	r3, #132	; 0x84
 800a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	6812      	ldr	r2, [r2, #0]
 800a732:	4611      	mov	r1, r2
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	01d2      	lsls	r2, r2, #7
 800a738:	440a      	add	r2, r1
 800a73a:	3284      	adds	r2, #132	; 0x84
 800a73c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a740:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a746:	69fa      	ldr	r2, [r7, #28]
 800a748:	fb02 f303 	mul.w	r3, r2, r3
 800a74c:	041a      	lsls	r2, r3, #16
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	6859      	ldr	r1, [r3, #4]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	1acb      	subs	r3, r1, r3
 800a758:	69f9      	ldr	r1, [r7, #28]
 800a75a:	fb01 f303 	mul.w	r3, r1, r3
 800a75e:	3303      	adds	r3, #3
 800a760:	68f9      	ldr	r1, [r7, #12]
 800a762:	6809      	ldr	r1, [r1, #0]
 800a764:	4608      	mov	r0, r1
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	01c9      	lsls	r1, r1, #7
 800a76a:	4401      	add	r1, r0
 800a76c:	3184      	adds	r1, #132	; 0x84
 800a76e:	4313      	orrs	r3, r2
 800a770:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	01db      	lsls	r3, r3, #7
 800a77c:	4413      	add	r3, r2
 800a77e:	3384      	adds	r3, #132	; 0x84
 800a780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4619      	mov	r1, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	01db      	lsls	r3, r3, #7
 800a78c:	440b      	add	r3, r1
 800a78e:	3384      	adds	r3, #132	; 0x84
 800a790:	4619      	mov	r1, r3
 800a792:	4b14      	ldr	r3, [pc, #80]	; (800a7e4 <LTDC_SetConfig+0x330>)
 800a794:	4013      	ands	r3, r2
 800a796:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	461a      	mov	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	01db      	lsls	r3, r3, #7
 800a7a2:	4413      	add	r3, r2
 800a7a4:	3384      	adds	r3, #132	; 0x84
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	01db      	lsls	r3, r3, #7
 800a7b8:	4413      	add	r3, r2
 800a7ba:	3384      	adds	r3, #132	; 0x84
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	6812      	ldr	r2, [r2, #0]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	01d2      	lsls	r2, r2, #7
 800a7c8:	440a      	add	r2, r1
 800a7ca:	3284      	adds	r2, #132	; 0x84
 800a7cc:	f043 0301 	orr.w	r3, r3, #1
 800a7d0:	6013      	str	r3, [r2, #0]
}
 800a7d2:	bf00      	nop
 800a7d4:	3724      	adds	r7, #36	; 0x24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	fffff8f8 	.word	0xfffff8f8
 800a7e4:	fffff800 	.word	0xfffff800

0800a7e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7ec:	4b05      	ldr	r3, [pc, #20]	; (800a804 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a04      	ldr	r2, [pc, #16]	; (800a804 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a7f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7f6:	6013      	str	r3, [r2, #0]
}
 800a7f8:	bf00      	nop
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	40007000 	.word	0x40007000

0800a808 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a812:	4b23      	ldr	r3, [pc, #140]	; (800a8a0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a816:	4a22      	ldr	r2, [pc, #136]	; (800a8a0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a81c:	6413      	str	r3, [r2, #64]	; 0x40
 800a81e:	4b20      	ldr	r3, [pc, #128]	; (800a8a0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a826:	603b      	str	r3, [r7, #0]
 800a828:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a82a:	4b1e      	ldr	r3, [pc, #120]	; (800a8a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a1d      	ldr	r2, [pc, #116]	; (800a8a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a834:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a836:	f7fb f919 	bl	8005a6c <HAL_GetTick>
 800a83a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a83c:	e009      	b.n	800a852 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a83e:	f7fb f915 	bl	8005a6c <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a84c:	d901      	bls.n	800a852 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e022      	b.n	800a898 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a852:	4b14      	ldr	r3, [pc, #80]	; (800a8a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a85a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a85e:	d1ee      	bne.n	800a83e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a860:	4b10      	ldr	r3, [pc, #64]	; (800a8a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a0f      	ldr	r2, [pc, #60]	; (800a8a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a86a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a86c:	f7fb f8fe 	bl	8005a6c <HAL_GetTick>
 800a870:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a872:	e009      	b.n	800a888 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a874:	f7fb f8fa 	bl	8005a6c <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a882:	d901      	bls.n	800a888 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e007      	b.n	800a898 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a888:	4b06      	ldr	r3, [pc, #24]	; (800a8a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a894:	d1ee      	bne.n	800a874 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	40023800 	.word	0x40023800
 800a8a4:	40007000 	.word	0x40007000

0800a8a8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a8b0:	f7fb f8dc 	bl	8005a6c <HAL_GetTick>
 800a8b4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e067      	b.n	800a990 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10b      	bne.n	800a8e4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7f8 fbfd 	bl	80030d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a8da:	f241 3188 	movw	r1, #5000	; 0x1388
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fda8 	bl	800b434 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	021a      	lsls	r2, r3, #8
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	2120      	movs	r1, #32
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fdd3 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800a910:	4603      	mov	r3, r0
 800a912:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d135      	bne.n	800a986 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	4b1d      	ldr	r3, [pc, #116]	; (800a998 <HAL_QSPI_Init+0xf0>)
 800a922:	4013      	ands	r3, r2
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	6852      	ldr	r2, [r2, #4]
 800a928:	0611      	lsls	r1, r2, #24
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	68d2      	ldr	r2, [r2, #12]
 800a92e:	4311      	orrs	r1, r2
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	69d2      	ldr	r2, [r2, #28]
 800a934:	4311      	orrs	r1, r2
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	6a12      	ldr	r2, [r2, #32]
 800a93a:	4311      	orrs	r1, r2
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	6812      	ldr	r2, [r2, #0]
 800a940:	430b      	orrs	r3, r1
 800a942:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	685a      	ldr	r2, [r3, #4]
 800a94a:	4b14      	ldr	r3, [pc, #80]	; (800a99c <HAL_QSPI_Init+0xf4>)
 800a94c:	4013      	ands	r3, r2
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	6912      	ldr	r2, [r2, #16]
 800a952:	0411      	lsls	r1, r2, #16
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	6952      	ldr	r2, [r2, #20]
 800a958:	4311      	orrs	r1, r2
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	6992      	ldr	r2, [r2, #24]
 800a95e:	4311      	orrs	r1, r2
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	430b      	orrs	r3, r1
 800a966:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f042 0201 	orr.w	r2, r2, #1
 800a976:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a98e:	7afb      	ldrb	r3, [r7, #11]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	00ffff2f 	.word	0x00ffff2f
 800a99c:	ffe0f8fe 	.word	0xffe0f8fe

0800a9a0 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d064      	beq.n	800aa8c <HAL_QSPI_IRQHandler+0xec>
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d05f      	beq.n	800aa8c <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3320      	adds	r3, #32
 800a9d2:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b12      	cmp	r3, #18
 800a9de:	d125      	bne.n	800aa2c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a9e0:	e01c      	b.n	800aa1c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00f      	beq.n	800aa0a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	781a      	ldrb	r2, [r3, #0]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	1c5a      	adds	r2, r3, #1
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa02:	1e5a      	subs	r2, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa08:	e008      	b.n	800aa1c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa18:	601a      	str	r2, [r3, #0]
          break;
 800aa1a:	e033      	b.n	800aa84 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1db      	bne.n	800a9e2 <HAL_QSPI_IRQHandler+0x42>
 800aa2a:	e02b      	b.n	800aa84 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b22      	cmp	r3, #34	; 0x22
 800aa36:	d125      	bne.n	800aa84 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa38:	e01d      	b.n	800aa76 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d010      	beq.n	800aa64 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	7812      	ldrb	r2, [r2, #0]
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5c:	1e5a      	subs	r2, r3, #1
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	639a      	str	r2, [r3, #56]	; 0x38
 800aa62:	e008      	b.n	800aa76 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa72:	601a      	str	r2, [r3, #0]
          break;
 800aa74:	e006      	b.n	800aa84 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1da      	bne.n	800aa3a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fbed 	bl	800b264 <HAL_QSPI_FifoThresholdCallback>
 800aa8a:	e142      	b.n	800ad12 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	f003 0302 	and.w	r3, r3, #2
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 80b6 	beq.w	800ac04 <HAL_QSPI_IRQHandler+0x264>
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f000 80b0 	beq.w	800ac04 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800aaba:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b12      	cmp	r3, #18
 800aac6:	d123      	bne.n	800ab10 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0304 	and.w	r3, r3, #4
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d011      	beq.n	800aafa <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f022 0204 	bic.w	r2, r2, #4
 800aae4:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f022 0201 	bic.w	r2, r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fc3e 	bl	800b37c <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fba1 	bl	800b250 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ab0e:	e0fd      	b.n	800ad0c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b22      	cmp	r3, #34	; 0x22
 800ab1a:	d146      	bne.n	800abaa <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 0304 	and.w	r3, r3, #4
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d012      	beq.n	800ab50 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 0204 	bic.w	r2, r2, #4
 800ab38:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f022 0201 	bic.w	r2, r2, #1
 800ab4c:	601a      	str	r2, [r3, #0]
 800ab4e:	e021      	b.n	800ab94 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3320      	adds	r3, #32
 800ab56:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ab58:	e013      	b.n	800ab82 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d017      	beq.n	800ab92 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	7812      	ldrb	r2, [r2, #0]
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	1e5a      	subs	r2, r3, #1
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e4      	bne.n	800ab5a <HAL_QSPI_IRQHandler+0x1ba>
 800ab90:	e000      	b.n	800ab94 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800ab92:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fbf1 	bl	800b37c <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fb4a 	bl	800b23c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800aba8:	e0b0      	b.n	800ad0c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d107      	bne.n	800abc6 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fb32 	bl	800b228 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800abc4:	e0a2      	b.n	800ad0c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b08      	cmp	r3, #8
 800abd0:	f040 809c 	bne.w	800ad0c <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	695a      	ldr	r2, [r3, #20]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800abe2:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d103      	bne.n	800abfc <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fb0d 	bl	800b214 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800abfa:	e087      	b.n	800ad0c <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 faff 	bl	800b200 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ac02:	e083      	b.n	800ad0c <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f003 0308 	and.w	r3, r3, #8
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d01f      	beq.n	800ac4e <HAL_QSPI_IRQHandler+0x2ae>
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d01a      	beq.n	800ac4e <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2208      	movs	r2, #8
 800ac1e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00b      	beq.n	800ac46 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800ac3c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fb16 	bl	800b278 <HAL_QSPI_StatusMatchCallback>
 800ac4c:	e061      	b.n	800ad12 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f003 0301 	and.w	r3, r3, #1
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d047      	beq.n	800ace8 <HAL_QSPI_IRQHandler+0x348>
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d042      	beq.n	800ace8 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2201      	movs	r2, #1
 800ac68:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800ac78:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac7e:	f043 0202 	orr.w	r2, r3, #2
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d021      	beq.n	800acd8 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f022 0204 	bic.w	r2, r2, #4
 800aca2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca8:	4a1c      	ldr	r2, [pc, #112]	; (800ad1c <HAL_QSPI_IRQHandler+0x37c>)
 800acaa:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fb fe59 	bl	8006968 <HAL_DMA_Abort_IT>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d029      	beq.n	800ad10 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc0:	f043 0204 	orr.w	r2, r3, #4
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 fa95 	bl	800b200 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800acd6:	e01b      	b.n	800ad10 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fa8d 	bl	800b200 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ace6:	e013      	b.n	800ad10 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f003 0310 	and.w	r3, r3, #16
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00f      	beq.n	800ad12 <HAL_QSPI_IRQHandler+0x372>
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00a      	beq.n	800ad12 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2210      	movs	r2, #16
 800ad02:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fac1 	bl	800b28c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800ad0a:	e002      	b.n	800ad12 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ad0c:	bf00      	nop
 800ad0e:	e000      	b.n	800ad12 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ad10:	bf00      	nop
}
 800ad12:	bf00      	nop
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	0800b451 	.word	0x0800b451

0800ad20 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af02      	add	r7, sp, #8
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ad2c:	f7fa fe9e 	bl	8005a6c <HAL_GetTick>
 800ad30:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d101      	bne.n	800ad42 <HAL_QSPI_Command+0x22>
 800ad3e:	2302      	movs	r3, #2
 800ad40:	e048      	b.n	800add4 <HAL_QSPI_Command+0xb4>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d137      	bne.n	800adc6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2202      	movs	r2, #2
 800ad60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2120      	movs	r1, #32
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f000 fba1 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800ad74:	4603      	mov	r3, r0
 800ad76:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d125      	bne.n	800adca <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ad7e:	2200      	movs	r2, #0
 800ad80:	68b9      	ldr	r1, [r7, #8]
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f000 fbce 	bl	800b524 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d115      	bne.n	800adbc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2201      	movs	r2, #1
 800ad98:	2102      	movs	r1, #2
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f000 fb8b 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800ada0:	4603      	mov	r3, r0
 800ada2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10f      	bne.n	800adca <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2202      	movs	r2, #2
 800adb0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adba:	e006      	b.n	800adca <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adc4:	e001      	b.n	800adca <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800adc6:	2302      	movs	r3, #2
 800adc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800add2:	7dfb      	ldrb	r3, [r7, #23]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08a      	sub	sp, #40	; 0x28
 800ade0:	af02      	add	r7, sp, #8
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800adec:	f7fa fe3e 	bl	8005a6c <HAL_GetTick>
 800adf0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3320      	adds	r3, #32
 800adf8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d101      	bne.n	800ae0a <HAL_QSPI_Transmit+0x2e>
 800ae06:	2302      	movs	r3, #2
 800ae08:	e07b      	b.n	800af02 <HAL_QSPI_Transmit+0x126>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d16a      	bne.n	800aef4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d05b      	beq.n	800aee2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2212      	movs	r2, #18
 800ae2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	1c5a      	adds	r2, r3, #1
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	695a      	ldr	r2, [r3, #20]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ae5e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800ae60:	e01b      	b.n	800ae9a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	2104      	movs	r1, #4
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 fb22 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800ae72:	4603      	mov	r3, r0
 800ae74:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800ae76:	7ffb      	ldrb	r3, [r7, #31]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d113      	bne.n	800aea4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	781a      	ldrb	r2, [r3, #0]
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	1e5a      	subs	r2, r3, #1
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1df      	bne.n	800ae62 <HAL_QSPI_Transmit+0x86>
 800aea2:	e000      	b.n	800aea6 <HAL_QSPI_Transmit+0xca>
          break;
 800aea4:	bf00      	nop
      }

      if (status == HAL_OK)
 800aea6:	7ffb      	ldrb	r3, [r7, #31]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d115      	bne.n	800aed8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	2102      	movs	r1, #2
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f000 fafd 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800aebc:	4603      	mov	r3, r0
 800aebe:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800aec0:	7ffb      	ldrb	r3, [r7, #31]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d108      	bne.n	800aed8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2202      	movs	r2, #2
 800aecc:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 f9e6 	bl	800b2a0 <HAL_QSPI_Abort>
 800aed4:	4603      	mov	r3, r0
 800aed6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aee0:	e00a      	b.n	800aef8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee6:	f043 0208 	orr.w	r2, r3, #8
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	77fb      	strb	r3, [r7, #31]
 800aef2:	e001      	b.n	800aef8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800aef4:	2302      	movs	r3, #2
 800aef6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800af00:	7ffb      	ldrb	r3, [r7, #31]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3720      	adds	r7, #32
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b08a      	sub	sp, #40	; 0x28
 800af0e:	af02      	add	r7, sp, #8
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800af1a:	f7fa fda7 	bl	8005a6c <HAL_GetTick>
 800af1e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3320      	adds	r3, #32
 800af2e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d101      	bne.n	800af40 <HAL_QSPI_Receive+0x36>
 800af3c:	2302      	movs	r3, #2
 800af3e:	e082      	b.n	800b046 <HAL_QSPI_Receive+0x13c>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b01      	cmp	r3, #1
 800af52:	d171      	bne.n	800b038 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d062      	beq.n	800b026 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2222      	movs	r2, #34	; 0x22
 800af64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800af98:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	697a      	ldr	r2, [r7, #20]
 800afa0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800afa2:	e01c      	b.n	800afde <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	2201      	movs	r2, #1
 800afac:	2106      	movs	r1, #6
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f000 fa81 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800afb4:	4603      	mov	r3, r0
 800afb6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800afb8:	7ffb      	ldrb	r3, [r7, #31]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d114      	bne.n	800afe8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	7812      	ldrb	r2, [r2, #0]
 800afc6:	b2d2      	uxtb	r2, r2
 800afc8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afce:	1c5a      	adds	r2, r3, #1
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	1e5a      	subs	r2, r3, #1
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1de      	bne.n	800afa4 <HAL_QSPI_Receive+0x9a>
 800afe6:	e000      	b.n	800afea <HAL_QSPI_Receive+0xe0>
          break;
 800afe8:	bf00      	nop
      }

      if (status == HAL_OK)
 800afea:	7ffb      	ldrb	r3, [r7, #31]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d115      	bne.n	800b01c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	2201      	movs	r2, #1
 800aff8:	2102      	movs	r1, #2
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 fa5b 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800b000:	4603      	mov	r3, r0
 800b002:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b004:	7ffb      	ldrb	r3, [r7, #31]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d108      	bne.n	800b01c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2202      	movs	r2, #2
 800b010:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 f944 	bl	800b2a0 <HAL_QSPI_Abort>
 800b018:	4603      	mov	r3, r0
 800b01a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b024:	e00a      	b.n	800b03c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b02a:	f043 0208 	orr.w	r2, r3, #8
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	77fb      	strb	r3, [r7, #31]
 800b036:	e001      	b.n	800b03c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b038:	2302      	movs	r3, #2
 800b03a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b044:	7ffb      	ldrb	r3, [r7, #31]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3720      	adds	r7, #32
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b088      	sub	sp, #32
 800b052:	af02      	add	r7, sp, #8
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	607a      	str	r2, [r7, #4]
 800b05a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b05c:	f7fa fd06 	bl	8005a6c <HAL_GetTick>
 800b060:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d101      	bne.n	800b072 <HAL_QSPI_AutoPolling+0x24>
 800b06e:	2302      	movs	r3, #2
 800b070:	e060      	b.n	800b134 <HAL_QSPI_AutoPolling+0xe6>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b01      	cmp	r3, #1
 800b084:	d14f      	bne.n	800b126 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2242      	movs	r2, #66	; 0x42
 800b090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	2200      	movs	r2, #0
 800b09c:	2120      	movs	r1, #32
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f000 fa09 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d13d      	bne.n	800b12a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	6812      	ldr	r2, [r2, #0]
 800b0b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	6852      	ldr	r2, [r2, #4]
 800b0c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	6892      	ldr	r2, [r2, #8]
 800b0ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b0e4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68da      	ldr	r2, [r3, #12]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b0ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b0f2:	68b9      	ldr	r1, [r7, #8]
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 fa15 	bl	800b524 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2201      	movs	r2, #1
 800b102:	2108      	movs	r1, #8
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 f9d6 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800b10a:	4603      	mov	r3, r0
 800b10c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b10e:	7dfb      	ldrb	r3, [r7, #23]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10a      	bne.n	800b12a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2208      	movs	r2, #8
 800b11a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b124:	e001      	b.n	800b12a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b126:	2302      	movs	r3, #2
 800b128:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b132:	7dfb      	ldrb	r3, [r7, #23]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3718      	adds	r7, #24
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b088      	sub	sp, #32
 800b140:	af02      	add	r7, sp, #8
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b148:	f7fa fc90 	bl	8005a6c <HAL_GetTick>
 800b14c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <HAL_QSPI_MemoryMapped+0x22>
 800b15a:	2302      	movs	r3, #2
 800b15c:	e04c      	b.n	800b1f8 <HAL_QSPI_MemoryMapped+0xbc>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d13b      	bne.n	800b1ea <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2282      	movs	r2, #130	; 0x82
 800b17c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	2200      	movs	r2, #0
 800b18a:	2120      	movs	r1, #32
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f000 f992 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d128      	bne.n	800b1ee <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f023 0108 	bic.w	r1, r3, #8
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685a      	ldr	r2, [r3, #4]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b08      	cmp	r3, #8
 800b1b8:	d110      	bne.n	800b1dc <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	6812      	ldr	r2, [r2, #0]
 800b1c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2210      	movs	r2, #16
 800b1ca:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b1da:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b1dc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b1e0:	68b9      	ldr	r1, [r7, #8]
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 f99e 	bl	800b524 <QSPI_Config>
 800b1e8:	e001      	b.n	800b1ee <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b1f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800b258:	bf00      	nop
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800b26c:	bf00      	nop
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af02      	add	r7, sp, #8
 800b2a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800b2ac:	f7fa fbde 	bl	8005a6c <HAL_GetTick>
 800b2b0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	f003 0302 	and.w	r3, r3, #2
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d056      	beq.n	800b370 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d017      	beq.n	800b308 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f022 0204 	bic.w	r2, r2, #4
 800b2e6:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fb facb 	bl	8006888 <HAL_DMA_Abort>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d005      	beq.n	800b308 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b300:	f043 0204 	orr.w	r2, r3, #4
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f042 0202 	orr.w	r2, r2, #2
 800b316:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2201      	movs	r2, #1
 800b322:	2102      	movs	r1, #2
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f8c6 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800b32a:	4603      	mov	r3, r0
 800b32c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10e      	bne.n	800b352 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2202      	movs	r2, #2
 800b33a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2200      	movs	r2, #0
 800b346:	2120      	movs	r1, #32
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f8b4 	bl	800b4b6 <QSPI_WaitFlagStateUntilTimeout>
 800b34e:	4603      	mov	r3, r0
 800b350:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b352:	7bfb      	ldrb	r3, [r7, #15]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10b      	bne.n	800b370 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	695a      	ldr	r2, [r3, #20]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b366:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800b370:	7bfb      	ldrb	r3, [r7, #15]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	f003 0302 	and.w	r3, r3, #2
 800b394:	2b00      	cmp	r3, #0
 800b396:	d046      	beq.n	800b426 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2208      	movs	r2, #8
 800b3a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b3b6:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0304 	and.w	r3, r3, #4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d01b      	beq.n	800b3fe <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 0204 	bic.w	r2, r2, #4
 800b3d4:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3da:	4a15      	ldr	r2, [pc, #84]	; (800b430 <HAL_QSPI_Abort_IT+0xb4>)
 800b3dc:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fb fac0 	bl	8006968 <HAL_DMA_Abort_IT>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d01b      	beq.n	800b426 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7ff ff0c 	bl	800b214 <HAL_QSPI_AbortCpltCallback>
 800b3fc:	e013      	b.n	800b426 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2202      	movs	r2, #2
 800b404:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b414:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f042 0202 	orr.w	r2, r2, #2
 800b424:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800b426:	7bfb      	ldrb	r3, [r7, #15]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	0800b451 	.word	0x0800b451

0800b434 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b08      	cmp	r3, #8
 800b474:	d114      	bne.n	800b4a0 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2202      	movs	r2, #2
 800b47c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b48c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f042 0202 	orr.w	r2, r2, #2
 800b49c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800b49e:	e006      	b.n	800b4ae <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f7ff fea9 	bl	800b200 <HAL_QSPI_ErrorCallback>
}
 800b4ae:	bf00      	nop
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b084      	sub	sp, #16
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	60f8      	str	r0, [r7, #12]
 800b4be:	60b9      	str	r1, [r7, #8]
 800b4c0:	603b      	str	r3, [r7, #0]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b4c6:	e01a      	b.n	800b4fe <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ce:	d016      	beq.n	800b4fe <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4d0:	f7fa facc 	bl	8005a6c <HAL_GetTick>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d302      	bcc.n	800b4e6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2204      	movs	r2, #4
 800b4ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f2:	f043 0201 	orr.w	r2, r3, #1
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e00e      	b.n	800b51c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	689a      	ldr	r2, [r3, #8]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4013      	ands	r3, r2
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bf14      	ite	ne
 800b50c:	2301      	movne	r3, #1
 800b50e:	2300      	moveq	r3, #0
 800b510:	b2db      	uxtb	r3, r3
 800b512:	461a      	mov	r2, r3
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	429a      	cmp	r2, r3
 800b518:	d1d6      	bne.n	800b4c8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	2b00      	cmp	r3, #0
 800b536:	d009      	beq.n	800b54c <QSPI_Config+0x28>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b53e:	d005      	beq.n	800b54c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3a01      	subs	r2, #1
 800b54a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 80b9 	beq.w	800b6c8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	6a1b      	ldr	r3, [r3, #32]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d05f      	beq.n	800b61e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	6892      	ldr	r2, [r2, #8]
 800b566:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	69db      	ldr	r3, [r3, #28]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d031      	beq.n	800b5d4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b578:	431a      	orrs	r2, r3
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	431a      	orrs	r2, r3
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	431a      	orrs	r2, r3
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	049b      	lsls	r3, r3, #18
 800b58c:	431a      	orrs	r2, r3
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	431a      	orrs	r2, r3
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	6a1b      	ldr	r3, [r3, #32]
 800b598:	431a      	orrs	r2, r3
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	431a      	orrs	r2, r3
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	ea42 0103 	orr.w	r1, r2, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b5c4:	f000 812e 	beq.w	800b824 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	6852      	ldr	r2, [r2, #4]
 800b5d0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b5d2:	e127      	b.n	800b824 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5dc:	431a      	orrs	r2, r3
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e2:	431a      	orrs	r2, r3
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	431a      	orrs	r2, r3
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	695b      	ldr	r3, [r3, #20]
 800b5ee:	049b      	lsls	r3, r3, #18
 800b5f0:	431a      	orrs	r2, r3
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	431a      	orrs	r2, r3
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	431a      	orrs	r2, r3
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	699b      	ldr	r3, [r3, #24]
 800b608:	431a      	orrs	r2, r3
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	ea42 0103 	orr.w	r1, r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	430a      	orrs	r2, r1
 800b61a:	615a      	str	r2, [r3, #20]
}
 800b61c:	e102      	b.n	800b824 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d02e      	beq.n	800b684 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62e:	431a      	orrs	r2, r3
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b634:	431a      	orrs	r2, r3
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63a:	431a      	orrs	r2, r3
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	049b      	lsls	r3, r3, #18
 800b642:	431a      	orrs	r2, r3
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	6a1b      	ldr	r3, [r3, #32]
 800b648:	431a      	orrs	r2, r3
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	431a      	orrs	r2, r3
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	431a      	orrs	r2, r3
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	431a      	orrs	r2, r3
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	ea42 0103 	orr.w	r1, r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	430a      	orrs	r2, r1
 800b66c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b674:	f000 80d6 	beq.w	800b824 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	6852      	ldr	r2, [r2, #4]
 800b680:	619a      	str	r2, [r3, #24]
}
 800b682:	e0cf      	b.n	800b824 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68c:	431a      	orrs	r2, r3
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	431a      	orrs	r2, r3
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	431a      	orrs	r2, r3
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	049b      	lsls	r3, r3, #18
 800b6a0:	431a      	orrs	r2, r3
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	431a      	orrs	r2, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	431a      	orrs	r2, r3
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	431a      	orrs	r2, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	ea42 0103 	orr.w	r1, r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	615a      	str	r2, [r3, #20]
}
 800b6c6:	e0ad      	b.n	800b824 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d058      	beq.n	800b782 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	6892      	ldr	r2, [r2, #8]
 800b6d8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	69db      	ldr	r3, [r3, #28]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d02d      	beq.n	800b73e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	431a      	orrs	r2, r3
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	049b      	lsls	r3, r3, #18
 800b6fe:	431a      	orrs	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	431a      	orrs	r2, r3
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	431a      	orrs	r2, r3
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	431a      	orrs	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	431a      	orrs	r2, r3
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	ea42 0103 	orr.w	r1, r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	430a      	orrs	r2, r1
 800b728:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b730:	d078      	beq.n	800b824 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	6852      	ldr	r2, [r2, #4]
 800b73a:	619a      	str	r2, [r3, #24]
}
 800b73c:	e072      	b.n	800b824 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b746:	431a      	orrs	r2, r3
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74c:	431a      	orrs	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b752:	431a      	orrs	r2, r3
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	049b      	lsls	r3, r3, #18
 800b75a:	431a      	orrs	r2, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	431a      	orrs	r2, r3
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	431a      	orrs	r2, r3
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	69db      	ldr	r3, [r3, #28]
 800b76c:	431a      	orrs	r2, r3
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	ea42 0103 	orr.w	r1, r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	430a      	orrs	r2, r1
 800b77e:	615a      	str	r2, [r3, #20]
}
 800b780:	e050      	b.n	800b824 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	69db      	ldr	r3, [r3, #28]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d02a      	beq.n	800b7e0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b792:	431a      	orrs	r2, r3
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b798:	431a      	orrs	r2, r3
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	695b      	ldr	r3, [r3, #20]
 800b7a4:	049b      	lsls	r3, r3, #18
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	6a1b      	ldr	r3, [r3, #32]
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	69db      	ldr	r3, [r3, #28]
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	ea42 0103 	orr.w	r1, r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	430a      	orrs	r2, r1
 800b7ca:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b7d2:	d027      	beq.n	800b824 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	6852      	ldr	r2, [r2, #4]
 800b7dc:	619a      	str	r2, [r3, #24]
}
 800b7de:	e021      	b.n	800b824 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d01d      	beq.n	800b824 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f0:	431a      	orrs	r2, r3
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	049b      	lsls	r3, r3, #18
 800b804:	431a      	orrs	r2, r3
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	431a      	orrs	r2, r3
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	69db      	ldr	r3, [r3, #28]
 800b810:	431a      	orrs	r2, r3
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	ea42 0103 	orr.w	r1, r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	430a      	orrs	r2, r1
 800b822:	615a      	str	r2, [r3, #20]
}
 800b824:	bf00      	nop
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b838:	2300      	movs	r3, #0
 800b83a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d101      	bne.n	800b846 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e291      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 8087 	beq.w	800b962 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b854:	4b96      	ldr	r3, [pc, #600]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	f003 030c 	and.w	r3, r3, #12
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d00c      	beq.n	800b87a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b860:	4b93      	ldr	r3, [pc, #588]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	f003 030c 	and.w	r3, r3, #12
 800b868:	2b08      	cmp	r3, #8
 800b86a:	d112      	bne.n	800b892 <HAL_RCC_OscConfig+0x62>
 800b86c:	4b90      	ldr	r3, [pc, #576]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b878:	d10b      	bne.n	800b892 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b87a:	4b8d      	ldr	r3, [pc, #564]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d06c      	beq.n	800b960 <HAL_RCC_OscConfig+0x130>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d168      	bne.n	800b960 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	e26b      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b89a:	d106      	bne.n	800b8aa <HAL_RCC_OscConfig+0x7a>
 800b89c:	4b84      	ldr	r3, [pc, #528]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a83      	ldr	r2, [pc, #524]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	e02e      	b.n	800b908 <HAL_RCC_OscConfig+0xd8>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10c      	bne.n	800b8cc <HAL_RCC_OscConfig+0x9c>
 800b8b2:	4b7f      	ldr	r3, [pc, #508]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a7e      	ldr	r2, [pc, #504]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	4b7c      	ldr	r3, [pc, #496]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a7b      	ldr	r2, [pc, #492]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8c8:	6013      	str	r3, [r2, #0]
 800b8ca:	e01d      	b.n	800b908 <HAL_RCC_OscConfig+0xd8>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8d4:	d10c      	bne.n	800b8f0 <HAL_RCC_OscConfig+0xc0>
 800b8d6:	4b76      	ldr	r3, [pc, #472]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a75      	ldr	r2, [pc, #468]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8e0:	6013      	str	r3, [r2, #0]
 800b8e2:	4b73      	ldr	r3, [pc, #460]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a72      	ldr	r2, [pc, #456]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	e00b      	b.n	800b908 <HAL_RCC_OscConfig+0xd8>
 800b8f0:	4b6f      	ldr	r3, [pc, #444]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a6e      	ldr	r2, [pc, #440]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8fa:	6013      	str	r3, [r2, #0]
 800b8fc:	4b6c      	ldr	r3, [pc, #432]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a6b      	ldr	r2, [pc, #428]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d013      	beq.n	800b938 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b910:	f7fa f8ac 	bl	8005a6c <HAL_GetTick>
 800b914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b916:	e008      	b.n	800b92a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b918:	f7fa f8a8 	bl	8005a6c <HAL_GetTick>
 800b91c:	4602      	mov	r2, r0
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	2b64      	cmp	r3, #100	; 0x64
 800b924:	d901      	bls.n	800b92a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b926:	2303      	movs	r3, #3
 800b928:	e21f      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b92a:	4b61      	ldr	r3, [pc, #388]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b932:	2b00      	cmp	r3, #0
 800b934:	d0f0      	beq.n	800b918 <HAL_RCC_OscConfig+0xe8>
 800b936:	e014      	b.n	800b962 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b938:	f7fa f898 	bl	8005a6c <HAL_GetTick>
 800b93c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b93e:	e008      	b.n	800b952 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b940:	f7fa f894 	bl	8005a6c <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	2b64      	cmp	r3, #100	; 0x64
 800b94c:	d901      	bls.n	800b952 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e20b      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b952:	4b57      	ldr	r3, [pc, #348]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1f0      	bne.n	800b940 <HAL_RCC_OscConfig+0x110>
 800b95e:	e000      	b.n	800b962 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0302 	and.w	r3, r3, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d069      	beq.n	800ba42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b96e:	4b50      	ldr	r3, [pc, #320]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	f003 030c 	and.w	r3, r3, #12
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00b      	beq.n	800b992 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b97a:	4b4d      	ldr	r3, [pc, #308]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f003 030c 	and.w	r3, r3, #12
 800b982:	2b08      	cmp	r3, #8
 800b984:	d11c      	bne.n	800b9c0 <HAL_RCC_OscConfig+0x190>
 800b986:	4b4a      	ldr	r3, [pc, #296]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d116      	bne.n	800b9c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b992:	4b47      	ldr	r3, [pc, #284]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 0302 	and.w	r3, r3, #2
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d005      	beq.n	800b9aa <HAL_RCC_OscConfig+0x17a>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d001      	beq.n	800b9aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e1df      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9aa:	4b41      	ldr	r3, [pc, #260]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	493d      	ldr	r1, [pc, #244]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b9be:	e040      	b.n	800ba42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d023      	beq.n	800ba10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b9c8:	4b39      	ldr	r3, [pc, #228]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a38      	ldr	r2, [pc, #224]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b9ce:	f043 0301 	orr.w	r3, r3, #1
 800b9d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d4:	f7fa f84a 	bl	8005a6c <HAL_GetTick>
 800b9d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9da:	e008      	b.n	800b9ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9dc:	f7fa f846 	bl	8005a6c <HAL_GetTick>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d901      	bls.n	800b9ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	e1bd      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9ee:	4b30      	ldr	r3, [pc, #192]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0302 	and.w	r3, r3, #2
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0f0      	beq.n	800b9dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9fa:	4b2d      	ldr	r3, [pc, #180]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	4929      	ldr	r1, [pc, #164]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	600b      	str	r3, [r1, #0]
 800ba0e:	e018      	b.n	800ba42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ba10:	4b27      	ldr	r3, [pc, #156]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a26      	ldr	r2, [pc, #152]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800ba16:	f023 0301 	bic.w	r3, r3, #1
 800ba1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba1c:	f7fa f826 	bl	8005a6c <HAL_GetTick>
 800ba20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba22:	e008      	b.n	800ba36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba24:	f7fa f822 	bl	8005a6c <HAL_GetTick>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d901      	bls.n	800ba36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e199      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba36:	4b1e      	ldr	r3, [pc, #120]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f003 0302 	and.w	r3, r3, #2
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f0      	bne.n	800ba24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d038      	beq.n	800bac0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d019      	beq.n	800ba8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba56:	4b16      	ldr	r3, [pc, #88]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800ba58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba5a:	4a15      	ldr	r2, [pc, #84]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800ba5c:	f043 0301 	orr.w	r3, r3, #1
 800ba60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba62:	f7fa f803 	bl	8005a6c <HAL_GetTick>
 800ba66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba68:	e008      	b.n	800ba7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba6a:	f7f9 ffff 	bl	8005a6c <HAL_GetTick>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d901      	bls.n	800ba7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e176      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba7c:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800ba7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba80:	f003 0302 	and.w	r3, r3, #2
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d0f0      	beq.n	800ba6a <HAL_RCC_OscConfig+0x23a>
 800ba88:	e01a      	b.n	800bac0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba8a:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800ba8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba8e:	4a08      	ldr	r2, [pc, #32]	; (800bab0 <HAL_RCC_OscConfig+0x280>)
 800ba90:	f023 0301 	bic.w	r3, r3, #1
 800ba94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba96:	f7f9 ffe9 	bl	8005a6c <HAL_GetTick>
 800ba9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba9c:	e00a      	b.n	800bab4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba9e:	f7f9 ffe5 	bl	8005a6c <HAL_GetTick>
 800baa2:	4602      	mov	r2, r0
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d903      	bls.n	800bab4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e15c      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
 800bab0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bab4:	4b91      	ldr	r3, [pc, #580]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bab8:	f003 0302 	and.w	r3, r3, #2
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1ee      	bne.n	800ba9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 80a4 	beq.w	800bc16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bace:	4b8b      	ldr	r3, [pc, #556]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10d      	bne.n	800baf6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800bada:	4b88      	ldr	r3, [pc, #544]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800badc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bade:	4a87      	ldr	r2, [pc, #540]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bae4:	6413      	str	r3, [r2, #64]	; 0x40
 800bae6:	4b85      	ldr	r3, [pc, #532]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baee:	60bb      	str	r3, [r7, #8]
 800baf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800baf2:	2301      	movs	r3, #1
 800baf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800baf6:	4b82      	ldr	r3, [pc, #520]	; (800bd00 <HAL_RCC_OscConfig+0x4d0>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d118      	bne.n	800bb34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800bb02:	4b7f      	ldr	r3, [pc, #508]	; (800bd00 <HAL_RCC_OscConfig+0x4d0>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a7e      	ldr	r2, [pc, #504]	; (800bd00 <HAL_RCC_OscConfig+0x4d0>)
 800bb08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bb0e:	f7f9 ffad 	bl	8005a6c <HAL_GetTick>
 800bb12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb14:	e008      	b.n	800bb28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb16:	f7f9 ffa9 	bl	8005a6c <HAL_GetTick>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	2b64      	cmp	r3, #100	; 0x64
 800bb22:	d901      	bls.n	800bb28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bb24:	2303      	movs	r3, #3
 800bb26:	e120      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb28:	4b75      	ldr	r3, [pc, #468]	; (800bd00 <HAL_RCC_OscConfig+0x4d0>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0f0      	beq.n	800bb16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d106      	bne.n	800bb4a <HAL_RCC_OscConfig+0x31a>
 800bb3c:	4b6f      	ldr	r3, [pc, #444]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb40:	4a6e      	ldr	r2, [pc, #440]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb42:	f043 0301 	orr.w	r3, r3, #1
 800bb46:	6713      	str	r3, [r2, #112]	; 0x70
 800bb48:	e02d      	b.n	800bba6 <HAL_RCC_OscConfig+0x376>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10c      	bne.n	800bb6c <HAL_RCC_OscConfig+0x33c>
 800bb52:	4b6a      	ldr	r3, [pc, #424]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb56:	4a69      	ldr	r2, [pc, #420]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb58:	f023 0301 	bic.w	r3, r3, #1
 800bb5c:	6713      	str	r3, [r2, #112]	; 0x70
 800bb5e:	4b67      	ldr	r3, [pc, #412]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb62:	4a66      	ldr	r2, [pc, #408]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb64:	f023 0304 	bic.w	r3, r3, #4
 800bb68:	6713      	str	r3, [r2, #112]	; 0x70
 800bb6a:	e01c      	b.n	800bba6 <HAL_RCC_OscConfig+0x376>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	2b05      	cmp	r3, #5
 800bb72:	d10c      	bne.n	800bb8e <HAL_RCC_OscConfig+0x35e>
 800bb74:	4b61      	ldr	r3, [pc, #388]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb78:	4a60      	ldr	r2, [pc, #384]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb7a:	f043 0304 	orr.w	r3, r3, #4
 800bb7e:	6713      	str	r3, [r2, #112]	; 0x70
 800bb80:	4b5e      	ldr	r3, [pc, #376]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb84:	4a5d      	ldr	r2, [pc, #372]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb86:	f043 0301 	orr.w	r3, r3, #1
 800bb8a:	6713      	str	r3, [r2, #112]	; 0x70
 800bb8c:	e00b      	b.n	800bba6 <HAL_RCC_OscConfig+0x376>
 800bb8e:	4b5b      	ldr	r3, [pc, #364]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb92:	4a5a      	ldr	r2, [pc, #360]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb94:	f023 0301 	bic.w	r3, r3, #1
 800bb98:	6713      	str	r3, [r2, #112]	; 0x70
 800bb9a:	4b58      	ldr	r3, [pc, #352]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9e:	4a57      	ldr	r2, [pc, #348]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bba0:	f023 0304 	bic.w	r3, r3, #4
 800bba4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d015      	beq.n	800bbda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbae:	f7f9 ff5d 	bl	8005a6c <HAL_GetTick>
 800bbb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbb4:	e00a      	b.n	800bbcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbb6:	f7f9 ff59 	bl	8005a6c <HAL_GetTick>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d901      	bls.n	800bbcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e0ce      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbcc:	4b4b      	ldr	r3, [pc, #300]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd0:	f003 0302 	and.w	r3, r3, #2
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0ee      	beq.n	800bbb6 <HAL_RCC_OscConfig+0x386>
 800bbd8:	e014      	b.n	800bc04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbda:	f7f9 ff47 	bl	8005a6c <HAL_GetTick>
 800bbde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbe0:	e00a      	b.n	800bbf8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbe2:	f7f9 ff43 	bl	8005a6c <HAL_GetTick>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d901      	bls.n	800bbf8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	e0b8      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbf8:	4b40      	ldr	r3, [pc, #256]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bbfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbfc:	f003 0302 	and.w	r3, r3, #2
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1ee      	bne.n	800bbe2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bc04:	7dfb      	ldrb	r3, [r7, #23]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d105      	bne.n	800bc16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc0a:	4b3c      	ldr	r3, [pc, #240]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0e:	4a3b      	ldr	r2, [pc, #236]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bc10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 80a4 	beq.w	800bd68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc20:	4b36      	ldr	r3, [pc, #216]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	f003 030c 	and.w	r3, r3, #12
 800bc28:	2b08      	cmp	r3, #8
 800bc2a:	d06b      	beq.n	800bd04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d149      	bne.n	800bcc8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc34:	4b31      	ldr	r3, [pc, #196]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a30      	ldr	r2, [pc, #192]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bc3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc40:	f7f9 ff14 	bl	8005a6c <HAL_GetTick>
 800bc44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc46:	e008      	b.n	800bc5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc48:	f7f9 ff10 	bl	8005a6c <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d901      	bls.n	800bc5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e087      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc5a:	4b28      	ldr	r3, [pc, #160]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1f0      	bne.n	800bc48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	69da      	ldr	r2, [r3, #28]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	431a      	orrs	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	019b      	lsls	r3, r3, #6
 800bc76:	431a      	orrs	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc7c:	085b      	lsrs	r3, r3, #1
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	041b      	lsls	r3, r3, #16
 800bc82:	431a      	orrs	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	061b      	lsls	r3, r3, #24
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	4a1b      	ldr	r2, [pc, #108]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bc8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc94:	4b19      	ldr	r3, [pc, #100]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a18      	ldr	r2, [pc, #96]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bc9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bca0:	f7f9 fee4 	bl	8005a6c <HAL_GetTick>
 800bca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bca6:	e008      	b.n	800bcba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bca8:	f7f9 fee0 	bl	8005a6c <HAL_GetTick>
 800bcac:	4602      	mov	r2, r0
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d901      	bls.n	800bcba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e057      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bcba:	4b10      	ldr	r3, [pc, #64]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0f0      	beq.n	800bca8 <HAL_RCC_OscConfig+0x478>
 800bcc6:	e04f      	b.n	800bd68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcc8:	4b0c      	ldr	r3, [pc, #48]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a0b      	ldr	r2, [pc, #44]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bcce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcd4:	f7f9 feca 	bl	8005a6c <HAL_GetTick>
 800bcd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcda:	e008      	b.n	800bcee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcdc:	f7f9 fec6 	bl	8005a6c <HAL_GetTick>
 800bce0:	4602      	mov	r2, r0
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d901      	bls.n	800bcee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e03d      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcee:	4b03      	ldr	r3, [pc, #12]	; (800bcfc <HAL_RCC_OscConfig+0x4cc>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1f0      	bne.n	800bcdc <HAL_RCC_OscConfig+0x4ac>
 800bcfa:	e035      	b.n	800bd68 <HAL_RCC_OscConfig+0x538>
 800bcfc:	40023800 	.word	0x40023800
 800bd00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800bd04:	4b1b      	ldr	r3, [pc, #108]	; (800bd74 <HAL_RCC_OscConfig+0x544>)
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d028      	beq.n	800bd64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d121      	bne.n	800bd64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d11a      	bne.n	800bd64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bd34:	4013      	ands	r3, r2
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bd3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d111      	bne.n	800bd64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4a:	085b      	lsrs	r3, r3, #1
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d107      	bne.n	800bd64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d001      	beq.n	800bd68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e000      	b.n	800bd6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	40023800 	.word	0x40023800

0800bd78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bd82:	2300      	movs	r3, #0
 800bd84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d101      	bne.n	800bd90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e0d0      	b.n	800bf32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bd90:	4b6a      	ldr	r3, [pc, #424]	; (800bf3c <HAL_RCC_ClockConfig+0x1c4>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 030f 	and.w	r3, r3, #15
 800bd98:	683a      	ldr	r2, [r7, #0]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d910      	bls.n	800bdc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd9e:	4b67      	ldr	r3, [pc, #412]	; (800bf3c <HAL_RCC_ClockConfig+0x1c4>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f023 020f 	bic.w	r2, r3, #15
 800bda6:	4965      	ldr	r1, [pc, #404]	; (800bf3c <HAL_RCC_ClockConfig+0x1c4>)
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdae:	4b63      	ldr	r3, [pc, #396]	; (800bf3c <HAL_RCC_ClockConfig+0x1c4>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 030f 	and.w	r3, r3, #15
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d001      	beq.n	800bdc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e0b8      	b.n	800bf32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f003 0302 	and.w	r3, r3, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d020      	beq.n	800be0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 0304 	and.w	r3, r3, #4
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bdd8:	4b59      	ldr	r3, [pc, #356]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	4a58      	ldr	r2, [pc, #352]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800bdde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bde2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 0308 	and.w	r3, r3, #8
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d005      	beq.n	800bdfc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bdf0:	4b53      	ldr	r3, [pc, #332]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	4a52      	ldr	r2, [pc, #328]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800bdf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bdfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdfc:	4b50      	ldr	r3, [pc, #320]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	494d      	ldr	r1, [pc, #308]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800be0a:	4313      	orrs	r3, r2
 800be0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 0301 	and.w	r3, r3, #1
 800be16:	2b00      	cmp	r3, #0
 800be18:	d040      	beq.n	800be9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d107      	bne.n	800be32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be22:	4b47      	ldr	r3, [pc, #284]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d115      	bne.n	800be5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e07f      	b.n	800bf32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	2b02      	cmp	r3, #2
 800be38:	d107      	bne.n	800be4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be3a:	4b41      	ldr	r3, [pc, #260]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be42:	2b00      	cmp	r3, #0
 800be44:	d109      	bne.n	800be5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e073      	b.n	800bf32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be4a:	4b3d      	ldr	r3, [pc, #244]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 0302 	and.w	r3, r3, #2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d101      	bne.n	800be5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e06b      	b.n	800bf32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be5a:	4b39      	ldr	r3, [pc, #228]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	f023 0203 	bic.w	r2, r3, #3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	4936      	ldr	r1, [pc, #216]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be6c:	f7f9 fdfe 	bl	8005a6c <HAL_GetTick>
 800be70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be72:	e00a      	b.n	800be8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be74:	f7f9 fdfa 	bl	8005a6c <HAL_GetTick>
 800be78:	4602      	mov	r2, r0
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800be82:	4293      	cmp	r3, r2
 800be84:	d901      	bls.n	800be8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800be86:	2303      	movs	r3, #3
 800be88:	e053      	b.n	800bf32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be8a:	4b2d      	ldr	r3, [pc, #180]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f003 020c 	and.w	r2, r3, #12
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	429a      	cmp	r2, r3
 800be9a:	d1eb      	bne.n	800be74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800be9c:	4b27      	ldr	r3, [pc, #156]	; (800bf3c <HAL_RCC_ClockConfig+0x1c4>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 030f 	and.w	r3, r3, #15
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d210      	bcs.n	800becc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beaa:	4b24      	ldr	r3, [pc, #144]	; (800bf3c <HAL_RCC_ClockConfig+0x1c4>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f023 020f 	bic.w	r2, r3, #15
 800beb2:	4922      	ldr	r1, [pc, #136]	; (800bf3c <HAL_RCC_ClockConfig+0x1c4>)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800beba:	4b20      	ldr	r3, [pc, #128]	; (800bf3c <HAL_RCC_ClockConfig+0x1c4>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 030f 	and.w	r3, r3, #15
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d001      	beq.n	800becc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	e032      	b.n	800bf32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d008      	beq.n	800beea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bed8:	4b19      	ldr	r3, [pc, #100]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	4916      	ldr	r1, [pc, #88]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800bee6:	4313      	orrs	r3, r2
 800bee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0308 	and.w	r3, r3, #8
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d009      	beq.n	800bf0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bef6:	4b12      	ldr	r3, [pc, #72]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	00db      	lsls	r3, r3, #3
 800bf04:	490e      	ldr	r1, [pc, #56]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800bf06:	4313      	orrs	r3, r2
 800bf08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bf0a:	f000 f821 	bl	800bf50 <HAL_RCC_GetSysClockFreq>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	4b0b      	ldr	r3, [pc, #44]	; (800bf40 <HAL_RCC_ClockConfig+0x1c8>)
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	091b      	lsrs	r3, r3, #4
 800bf16:	f003 030f 	and.w	r3, r3, #15
 800bf1a:	490a      	ldr	r1, [pc, #40]	; (800bf44 <HAL_RCC_ClockConfig+0x1cc>)
 800bf1c:	5ccb      	ldrb	r3, [r1, r3]
 800bf1e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf22:	4a09      	ldr	r2, [pc, #36]	; (800bf48 <HAL_RCC_ClockConfig+0x1d0>)
 800bf24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bf26:	4b09      	ldr	r3, [pc, #36]	; (800bf4c <HAL_RCC_ClockConfig+0x1d4>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7f7 fdb6 	bl	8003a9c <HAL_InitTick>

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	40023c00 	.word	0x40023c00
 800bf40:	40023800 	.word	0x40023800
 800bf44:	08019af0 	.word	0x08019af0
 800bf48:	20000008 	.word	0x20000008
 800bf4c:	20000024 	.word	0x20000024

0800bf50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf54:	b090      	sub	sp, #64	; 0x40
 800bf56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf60:	2300      	movs	r3, #0
 800bf62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bf68:	4b59      	ldr	r3, [pc, #356]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f003 030c 	and.w	r3, r3, #12
 800bf70:	2b08      	cmp	r3, #8
 800bf72:	d00d      	beq.n	800bf90 <HAL_RCC_GetSysClockFreq+0x40>
 800bf74:	2b08      	cmp	r3, #8
 800bf76:	f200 80a1 	bhi.w	800c0bc <HAL_RCC_GetSysClockFreq+0x16c>
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d002      	beq.n	800bf84 <HAL_RCC_GetSysClockFreq+0x34>
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	d003      	beq.n	800bf8a <HAL_RCC_GetSysClockFreq+0x3a>
 800bf82:	e09b      	b.n	800c0bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bf84:	4b53      	ldr	r3, [pc, #332]	; (800c0d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800bf86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800bf88:	e09b      	b.n	800c0c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bf8a:	4b53      	ldr	r3, [pc, #332]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800bf8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800bf8e:	e098      	b.n	800c0c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bf90:	4b4f      	ldr	r3, [pc, #316]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bf9a:	4b4d      	ldr	r3, [pc, #308]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d028      	beq.n	800bff8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bfa6:	4b4a      	ldr	r3, [pc, #296]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	099b      	lsrs	r3, r3, #6
 800bfac:	2200      	movs	r2, #0
 800bfae:	623b      	str	r3, [r7, #32]
 800bfb0:	627a      	str	r2, [r7, #36]	; 0x24
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800bfb8:	2100      	movs	r1, #0
 800bfba:	4b47      	ldr	r3, [pc, #284]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800bfbc:	fb03 f201 	mul.w	r2, r3, r1
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	fb00 f303 	mul.w	r3, r0, r3
 800bfc6:	4413      	add	r3, r2
 800bfc8:	4a43      	ldr	r2, [pc, #268]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800bfca:	fba0 1202 	umull	r1, r2, r0, r2
 800bfce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfd0:	460a      	mov	r2, r1
 800bfd2:	62ba      	str	r2, [r7, #40]	; 0x28
 800bfd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfd6:	4413      	add	r3, r2
 800bfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfdc:	2200      	movs	r2, #0
 800bfde:	61bb      	str	r3, [r7, #24]
 800bfe0:	61fa      	str	r2, [r7, #28]
 800bfe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bfe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bfea:	f7f4 fdf5 	bl	8000bd8 <__aeabi_uldivmod>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4613      	mov	r3, r2
 800bff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff6:	e053      	b.n	800c0a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bff8:	4b35      	ldr	r3, [pc, #212]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	099b      	lsrs	r3, r3, #6
 800bffe:	2200      	movs	r2, #0
 800c000:	613b      	str	r3, [r7, #16]
 800c002:	617a      	str	r2, [r7, #20]
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c00a:	f04f 0b00 	mov.w	fp, #0
 800c00e:	4652      	mov	r2, sl
 800c010:	465b      	mov	r3, fp
 800c012:	f04f 0000 	mov.w	r0, #0
 800c016:	f04f 0100 	mov.w	r1, #0
 800c01a:	0159      	lsls	r1, r3, #5
 800c01c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c020:	0150      	lsls	r0, r2, #5
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	ebb2 080a 	subs.w	r8, r2, sl
 800c02a:	eb63 090b 	sbc.w	r9, r3, fp
 800c02e:	f04f 0200 	mov.w	r2, #0
 800c032:	f04f 0300 	mov.w	r3, #0
 800c036:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c03a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c03e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c042:	ebb2 0408 	subs.w	r4, r2, r8
 800c046:	eb63 0509 	sbc.w	r5, r3, r9
 800c04a:	f04f 0200 	mov.w	r2, #0
 800c04e:	f04f 0300 	mov.w	r3, #0
 800c052:	00eb      	lsls	r3, r5, #3
 800c054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c058:	00e2      	lsls	r2, r4, #3
 800c05a:	4614      	mov	r4, r2
 800c05c:	461d      	mov	r5, r3
 800c05e:	eb14 030a 	adds.w	r3, r4, sl
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	eb45 030b 	adc.w	r3, r5, fp
 800c068:	607b      	str	r3, [r7, #4]
 800c06a:	f04f 0200 	mov.w	r2, #0
 800c06e:	f04f 0300 	mov.w	r3, #0
 800c072:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c076:	4629      	mov	r1, r5
 800c078:	028b      	lsls	r3, r1, #10
 800c07a:	4621      	mov	r1, r4
 800c07c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c080:	4621      	mov	r1, r4
 800c082:	028a      	lsls	r2, r1, #10
 800c084:	4610      	mov	r0, r2
 800c086:	4619      	mov	r1, r3
 800c088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08a:	2200      	movs	r2, #0
 800c08c:	60bb      	str	r3, [r7, #8]
 800c08e:	60fa      	str	r2, [r7, #12]
 800c090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c094:	f7f4 fda0 	bl	8000bd8 <__aeabi_uldivmod>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4613      	mov	r3, r2
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c0a0:	4b0b      	ldr	r3, [pc, #44]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	0c1b      	lsrs	r3, r3, #16
 800c0a6:	f003 0303 	and.w	r3, r3, #3
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800c0b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c0ba:	e002      	b.n	800c0c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c0bc:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800c0be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c0c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3740      	adds	r7, #64	; 0x40
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0ce:	bf00      	nop
 800c0d0:	40023800 	.word	0x40023800
 800c0d4:	00f42400 	.word	0x00f42400
 800c0d8:	017d7840 	.word	0x017d7840

0800c0dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0e0:	4b03      	ldr	r3, [pc, #12]	; (800c0f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	20000008 	.word	0x20000008

0800c0f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c0f8:	f7ff fff0 	bl	800c0dc <HAL_RCC_GetHCLKFreq>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	4b05      	ldr	r3, [pc, #20]	; (800c114 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	0a9b      	lsrs	r3, r3, #10
 800c104:	f003 0307 	and.w	r3, r3, #7
 800c108:	4903      	ldr	r1, [pc, #12]	; (800c118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c10a:	5ccb      	ldrb	r3, [r1, r3]
 800c10c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c110:	4618      	mov	r0, r3
 800c112:	bd80      	pop	{r7, pc}
 800c114:	40023800 	.word	0x40023800
 800c118:	08019b00 	.word	0x08019b00

0800c11c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c120:	f7ff ffdc 	bl	800c0dc <HAL_RCC_GetHCLKFreq>
 800c124:	4602      	mov	r2, r0
 800c126:	4b05      	ldr	r3, [pc, #20]	; (800c13c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	0b5b      	lsrs	r3, r3, #13
 800c12c:	f003 0307 	and.w	r3, r3, #7
 800c130:	4903      	ldr	r1, [pc, #12]	; (800c140 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c132:	5ccb      	ldrb	r3, [r1, r3]
 800c134:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c138:	4618      	mov	r0, r3
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	40023800 	.word	0x40023800
 800c140:	08019b00 	.word	0x08019b00

0800c144 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	220f      	movs	r2, #15
 800c152:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c154:	4b12      	ldr	r3, [pc, #72]	; (800c1a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	f003 0203 	and.w	r2, r3, #3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c160:	4b0f      	ldr	r3, [pc, #60]	; (800c1a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c16c:	4b0c      	ldr	r3, [pc, #48]	; (800c1a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c178:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	08db      	lsrs	r3, r3, #3
 800c17e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c186:	4b07      	ldr	r3, [pc, #28]	; (800c1a4 <HAL_RCC_GetClockConfig+0x60>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f003 020f 	and.w	r2, r3, #15
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	601a      	str	r2, [r3, #0]
}
 800c192:	bf00      	nop
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	40023800 	.word	0x40023800
 800c1a4:	40023c00 	.word	0x40023c00

0800c1a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b088      	sub	sp, #32
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d012      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c1d0:	4b69      	ldr	r3, [pc, #420]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	4a68      	ldr	r2, [pc, #416]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c1da:	6093      	str	r3, [r2, #8]
 800c1dc:	4b66      	ldr	r3, [pc, #408]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1de:	689a      	ldr	r2, [r3, #8]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e4:	4964      	ldr	r1, [pc, #400]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d017      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c202:	4b5d      	ldr	r3, [pc, #372]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c210:	4959      	ldr	r1, [pc, #356]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c212:	4313      	orrs	r3, r2
 800c214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c21c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c220:	d101      	bne.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c222:	2301      	movs	r3, #1
 800c224:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c22e:	2301      	movs	r3, #1
 800c230:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d017      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c23e:	4b4e      	ldr	r3, [pc, #312]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c244:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24c:	494a      	ldr	r1, [pc, #296]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c25c:	d101      	bne.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c25e:	2301      	movs	r3, #1
 800c260:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c26a:	2301      	movs	r3, #1
 800c26c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c276:	2b00      	cmp	r3, #0
 800c278:	d001      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c27a:	2301      	movs	r3, #1
 800c27c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f003 0320 	and.w	r3, r3, #32
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 808b 	beq.w	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c28c:	4b3a      	ldr	r3, [pc, #232]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c290:	4a39      	ldr	r2, [pc, #228]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c296:	6413      	str	r3, [r2, #64]	; 0x40
 800c298:	4b37      	ldr	r3, [pc, #220]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2a0:	60bb      	str	r3, [r7, #8]
 800c2a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c2a4:	4b35      	ldr	r3, [pc, #212]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a34      	ldr	r2, [pc, #208]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c2aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2b0:	f7f9 fbdc 	bl	8005a6c <HAL_GetTick>
 800c2b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c2b6:	e008      	b.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2b8:	f7f9 fbd8 	bl	8005a6c <HAL_GetTick>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	2b64      	cmp	r3, #100	; 0x64
 800c2c4:	d901      	bls.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e357      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c2ca:	4b2c      	ldr	r3, [pc, #176]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d0f0      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c2d6:	4b28      	ldr	r3, [pc, #160]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d035      	beq.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2ee:	693a      	ldr	r2, [r7, #16]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d02e      	beq.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c2f4:	4b20      	ldr	r3, [pc, #128]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c2fe:	4b1e      	ldr	r3, [pc, #120]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c302:	4a1d      	ldr	r2, [pc, #116]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c308:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c30a:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c30e:	4a1a      	ldr	r2, [pc, #104]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c314:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c316:	4a18      	ldr	r2, [pc, #96]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c31c:	4b16      	ldr	r3, [pc, #88]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c320:	f003 0301 	and.w	r3, r3, #1
 800c324:	2b01      	cmp	r3, #1
 800c326:	d114      	bne.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c328:	f7f9 fba0 	bl	8005a6c <HAL_GetTick>
 800c32c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c32e:	e00a      	b.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c330:	f7f9 fb9c 	bl	8005a6c <HAL_GetTick>
 800c334:	4602      	mov	r2, r0
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c33e:	4293      	cmp	r3, r2
 800c340:	d901      	bls.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c342:	2303      	movs	r3, #3
 800c344:	e319      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c346:	4b0c      	ldr	r3, [pc, #48]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c34a:	f003 0302 	and.w	r3, r3, #2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d0ee      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c35a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c35e:	d111      	bne.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c360:	4b05      	ldr	r3, [pc, #20]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c36c:	4b04      	ldr	r3, [pc, #16]	; (800c380 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c36e:	400b      	ands	r3, r1
 800c370:	4901      	ldr	r1, [pc, #4]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c372:	4313      	orrs	r3, r2
 800c374:	608b      	str	r3, [r1, #8]
 800c376:	e00b      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c378:	40023800 	.word	0x40023800
 800c37c:	40007000 	.word	0x40007000
 800c380:	0ffffcff 	.word	0x0ffffcff
 800c384:	4baa      	ldr	r3, [pc, #680]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	4aa9      	ldr	r2, [pc, #676]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c38a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c38e:	6093      	str	r3, [r2, #8]
 800c390:	4ba7      	ldr	r3, [pc, #668]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c39c:	49a4      	ldr	r1, [pc, #656]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 0310 	and.w	r3, r3, #16
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d010      	beq.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c3ae:	4ba0      	ldr	r3, [pc, #640]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3b4:	4a9e      	ldr	r2, [pc, #632]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c3ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c3be:	4b9c      	ldr	r3, [pc, #624]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c8:	4999      	ldr	r1, [pc, #612]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00a      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c3dc:	4b94      	ldr	r3, [pc, #592]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3ea:	4991      	ldr	r1, [pc, #580]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c3fe:	4b8c      	ldr	r3, [pc, #560]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c40c:	4988      	ldr	r1, [pc, #544]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c40e:	4313      	orrs	r3, r2
 800c410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00a      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c420:	4b83      	ldr	r3, [pc, #524]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42e:	4980      	ldr	r1, [pc, #512]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c430:	4313      	orrs	r3, r2
 800c432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00a      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c442:	4b7b      	ldr	r3, [pc, #492]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c448:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c450:	4977      	ldr	r1, [pc, #476]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c452:	4313      	orrs	r3, r2
 800c454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00a      	beq.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c464:	4b72      	ldr	r3, [pc, #456]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c46a:	f023 0203 	bic.w	r2, r3, #3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c472:	496f      	ldr	r1, [pc, #444]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c474:	4313      	orrs	r3, r2
 800c476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00a      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c486:	4b6a      	ldr	r3, [pc, #424]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c48c:	f023 020c 	bic.w	r2, r3, #12
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c494:	4966      	ldr	r1, [pc, #408]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c496:	4313      	orrs	r3, r2
 800c498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00a      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c4a8:	4b61      	ldr	r3, [pc, #388]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4b6:	495e      	ldr	r1, [pc, #376]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00a      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c4ca:	4b59      	ldr	r3, [pc, #356]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4d8:	4955      	ldr	r1, [pc, #340]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00a      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c4ec:	4b50      	ldr	r3, [pc, #320]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fa:	494d      	ldr	r1, [pc, #308]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00a      	beq.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c50e:	4b48      	ldr	r3, [pc, #288]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c514:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c51c:	4944      	ldr	r1, [pc, #272]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c51e:	4313      	orrs	r3, r2
 800c520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00a      	beq.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c530:	4b3f      	ldr	r3, [pc, #252]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c536:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c53e:	493c      	ldr	r1, [pc, #240]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c540:	4313      	orrs	r3, r2
 800c542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00a      	beq.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c552:	4b37      	ldr	r3, [pc, #220]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c558:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c560:	4933      	ldr	r1, [pc, #204]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c562:	4313      	orrs	r3, r2
 800c564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00a      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c574:	4b2e      	ldr	r3, [pc, #184]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c57a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c582:	492b      	ldr	r1, [pc, #172]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c584:	4313      	orrs	r3, r2
 800c586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c592:	2b00      	cmp	r3, #0
 800c594:	d011      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c596:	4b26      	ldr	r3, [pc, #152]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c59c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5a4:	4922      	ldr	r1, [pc, #136]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5b4:	d101      	bne.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f003 0308 	and.w	r3, r3, #8
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c5d6:	4b16      	ldr	r3, [pc, #88]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e4:	4912      	ldr	r1, [pc, #72]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00b      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c5f8:	4b0d      	ldr	r3, [pc, #52]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c608:	4909      	ldr	r1, [pc, #36]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c60a:	4313      	orrs	r3, r2
 800c60c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d006      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 80d9 	beq.w	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a01      	ldr	r2, [pc, #4]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c62a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c62e:	e001      	b.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c630:	40023800 	.word	0x40023800
 800c634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c636:	f7f9 fa19 	bl	8005a6c <HAL_GetTick>
 800c63a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c63c:	e008      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c63e:	f7f9 fa15 	bl	8005a6c <HAL_GetTick>
 800c642:	4602      	mov	r2, r0
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	2b64      	cmp	r3, #100	; 0x64
 800c64a:	d901      	bls.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e194      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c650:	4b6c      	ldr	r3, [pc, #432]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1f0      	bne.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 0301 	and.w	r3, r3, #1
 800c664:	2b00      	cmp	r3, #0
 800c666:	d021      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d11d      	bne.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c670:	4b64      	ldr	r3, [pc, #400]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c676:	0c1b      	lsrs	r3, r3, #16
 800c678:	f003 0303 	and.w	r3, r3, #3
 800c67c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c67e:	4b61      	ldr	r3, [pc, #388]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c684:	0e1b      	lsrs	r3, r3, #24
 800c686:	f003 030f 	and.w	r3, r3, #15
 800c68a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	019a      	lsls	r2, r3, #6
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	041b      	lsls	r3, r3, #16
 800c696:	431a      	orrs	r2, r3
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	061b      	lsls	r3, r3, #24
 800c69c:	431a      	orrs	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	071b      	lsls	r3, r3, #28
 800c6a4:	4957      	ldr	r1, [pc, #348]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d004      	beq.n	800c6c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6c0:	d00a      	beq.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d02e      	beq.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6d6:	d129      	bne.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c6d8:	4b4a      	ldr	r3, [pc, #296]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c6da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6de:	0c1b      	lsrs	r3, r3, #16
 800c6e0:	f003 0303 	and.w	r3, r3, #3
 800c6e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c6e6:	4b47      	ldr	r3, [pc, #284]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6ec:	0f1b      	lsrs	r3, r3, #28
 800c6ee:	f003 0307 	and.w	r3, r3, #7
 800c6f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	019a      	lsls	r2, r3, #6
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	041b      	lsls	r3, r3, #16
 800c6fe:	431a      	orrs	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	061b      	lsls	r3, r3, #24
 800c706:	431a      	orrs	r2, r3
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	071b      	lsls	r3, r3, #28
 800c70c:	493d      	ldr	r1, [pc, #244]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c70e:	4313      	orrs	r3, r2
 800c710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c714:	4b3b      	ldr	r3, [pc, #236]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c71a:	f023 021f 	bic.w	r2, r3, #31
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c722:	3b01      	subs	r3, #1
 800c724:	4937      	ldr	r1, [pc, #220]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c726:	4313      	orrs	r3, r2
 800c728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c734:	2b00      	cmp	r3, #0
 800c736:	d01d      	beq.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c738:	4b32      	ldr	r3, [pc, #200]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c73e:	0e1b      	lsrs	r3, r3, #24
 800c740:	f003 030f 	and.w	r3, r3, #15
 800c744:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c746:	4b2f      	ldr	r3, [pc, #188]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c74c:	0f1b      	lsrs	r3, r3, #28
 800c74e:	f003 0307 	and.w	r3, r3, #7
 800c752:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	019a      	lsls	r2, r3, #6
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	041b      	lsls	r3, r3, #16
 800c760:	431a      	orrs	r2, r3
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	061b      	lsls	r3, r3, #24
 800c766:	431a      	orrs	r2, r3
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	071b      	lsls	r3, r3, #28
 800c76c:	4925      	ldr	r1, [pc, #148]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d011      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	019a      	lsls	r2, r3, #6
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	041b      	lsls	r3, r3, #16
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	061b      	lsls	r3, r3, #24
 800c794:	431a      	orrs	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	071b      	lsls	r3, r3, #28
 800c79c:	4919      	ldr	r1, [pc, #100]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c7a4:	4b17      	ldr	r3, [pc, #92]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a16      	ldr	r2, [pc, #88]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c7ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7b0:	f7f9 f95c 	bl	8005a6c <HAL_GetTick>
 800c7b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7b6:	e008      	b.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c7b8:	f7f9 f958 	bl	8005a6c <HAL_GetTick>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	2b64      	cmp	r3, #100	; 0x64
 800c7c4:	d901      	bls.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	e0d7      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7ca:	4b0e      	ldr	r3, [pc, #56]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d0f0      	beq.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	f040 80cd 	bne.w	800c978 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c7de:	4b09      	ldr	r3, [pc, #36]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a08      	ldr	r2, [pc, #32]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7ea:	f7f9 f93f 	bl	8005a6c <HAL_GetTick>
 800c7ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c7f0:	e00a      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c7f2:	f7f9 f93b 	bl	8005a6c <HAL_GetTick>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	2b64      	cmp	r3, #100	; 0x64
 800c7fe:	d903      	bls.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c800:	2303      	movs	r3, #3
 800c802:	e0ba      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c804:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c808:	4b5e      	ldr	r3, [pc, #376]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c814:	d0ed      	beq.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d003      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d009      	beq.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c832:	2b00      	cmp	r3, #0
 800c834:	d02e      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d12a      	bne.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c83e:	4b51      	ldr	r3, [pc, #324]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c844:	0c1b      	lsrs	r3, r3, #16
 800c846:	f003 0303 	and.w	r3, r3, #3
 800c84a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c84c:	4b4d      	ldr	r3, [pc, #308]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c84e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c852:	0f1b      	lsrs	r3, r3, #28
 800c854:	f003 0307 	and.w	r3, r3, #7
 800c858:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	019a      	lsls	r2, r3, #6
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	041b      	lsls	r3, r3, #16
 800c864:	431a      	orrs	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	061b      	lsls	r3, r3, #24
 800c86c:	431a      	orrs	r2, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	071b      	lsls	r3, r3, #28
 800c872:	4944      	ldr	r1, [pc, #272]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c874:	4313      	orrs	r3, r2
 800c876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c87a:	4b42      	ldr	r3, [pc, #264]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c880:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c888:	3b01      	subs	r3, #1
 800c88a:	021b      	lsls	r3, r3, #8
 800c88c:	493d      	ldr	r1, [pc, #244]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c88e:	4313      	orrs	r3, r2
 800c890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d022      	beq.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8a8:	d11d      	bne.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8aa:	4b36      	ldr	r3, [pc, #216]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8b0:	0e1b      	lsrs	r3, r3, #24
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c8b8:	4b32      	ldr	r3, [pc, #200]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8be:	0f1b      	lsrs	r3, r3, #28
 800c8c0:	f003 0307 	and.w	r3, r3, #7
 800c8c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	019a      	lsls	r2, r3, #6
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a1b      	ldr	r3, [r3, #32]
 800c8d0:	041b      	lsls	r3, r3, #16
 800c8d2:	431a      	orrs	r2, r3
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	061b      	lsls	r3, r3, #24
 800c8d8:	431a      	orrs	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	071b      	lsls	r3, r3, #28
 800c8de:	4929      	ldr	r1, [pc, #164]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f003 0308 	and.w	r3, r3, #8
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d028      	beq.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8f2:	4b24      	ldr	r3, [pc, #144]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8f8:	0e1b      	lsrs	r3, r3, #24
 800c8fa:	f003 030f 	and.w	r3, r3, #15
 800c8fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c900:	4b20      	ldr	r3, [pc, #128]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c906:	0c1b      	lsrs	r3, r3, #16
 800c908:	f003 0303 	and.w	r3, r3, #3
 800c90c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	019a      	lsls	r2, r3, #6
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	041b      	lsls	r3, r3, #16
 800c918:	431a      	orrs	r2, r3
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	061b      	lsls	r3, r3, #24
 800c91e:	431a      	orrs	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	69db      	ldr	r3, [r3, #28]
 800c924:	071b      	lsls	r3, r3, #28
 800c926:	4917      	ldr	r1, [pc, #92]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c928:	4313      	orrs	r3, r2
 800c92a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c92e:	4b15      	ldr	r3, [pc, #84]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93c:	4911      	ldr	r1, [pc, #68]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c93e:	4313      	orrs	r3, r2
 800c940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c944:	4b0f      	ldr	r3, [pc, #60]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a0e      	ldr	r2, [pc, #56]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c94a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c94e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c950:	f7f9 f88c 	bl	8005a6c <HAL_GetTick>
 800c954:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c956:	e008      	b.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c958:	f7f9 f888 	bl	8005a6c <HAL_GetTick>
 800c95c:	4602      	mov	r2, r0
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	1ad3      	subs	r3, r2, r3
 800c962:	2b64      	cmp	r3, #100	; 0x64
 800c964:	d901      	bls.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c966:	2303      	movs	r3, #3
 800c968:	e007      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c96a:	4b06      	ldr	r3, [pc, #24]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c976:	d1ef      	bne.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3720      	adds	r7, #32
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	40023800 	.word	0x40023800

0800c988 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c988:	b480      	push	{r7}
 800c98a:	b087      	sub	sp, #28
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c9a6:	f040 808c 	bne.w	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c9aa:	4b95      	ldr	r3, [pc, #596]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9b0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c9b8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9c0:	d07c      	beq.n	800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9c8:	d87d      	bhi.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d004      	beq.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9d6:	d039      	beq.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c9d8:	e075      	b.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c9da:	4b89      	ldr	r3, [pc, #548]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d108      	bne.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c9e6:	4b86      	ldr	r3, [pc, #536]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9ee:	4a85      	ldr	r2, [pc, #532]	; (800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f4:	613b      	str	r3, [r7, #16]
 800c9f6:	e007      	b.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c9f8:	4b81      	ldr	r3, [pc, #516]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca00:	4a81      	ldr	r2, [pc, #516]	; (800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ca02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca06:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ca08:	4b7d      	ldr	r3, [pc, #500]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca0e:	0e1b      	lsrs	r3, r3, #24
 800ca10:	f003 030f 	and.w	r3, r3, #15
 800ca14:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ca16:	4b7a      	ldr	r3, [pc, #488]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca1c:	099b      	lsrs	r3, r3, #6
 800ca1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	fb03 f202 	mul.w	r2, r3, r2
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca2e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ca30:	4b73      	ldr	r3, [pc, #460]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca36:	0a1b      	lsrs	r3, r3, #8
 800ca38:	f003 031f 	and.w	r3, r3, #31
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca48:	617b      	str	r3, [r7, #20]
        break;
 800ca4a:	e03d      	b.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ca4c:	4b6c      	ldr	r3, [pc, #432]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d108      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ca58:	4b69      	ldr	r3, [pc, #420]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca60:	4a68      	ldr	r2, [pc, #416]	; (800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ca62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca66:	613b      	str	r3, [r7, #16]
 800ca68:	e007      	b.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ca6a:	4b65      	ldr	r3, [pc, #404]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca72:	4a65      	ldr	r2, [pc, #404]	; (800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ca74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca78:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ca7a:	4b61      	ldr	r3, [pc, #388]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca80:	0e1b      	lsrs	r3, r3, #24
 800ca82:	f003 030f 	and.w	r3, r3, #15
 800ca86:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ca88:	4b5d      	ldr	r3, [pc, #372]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca8e:	099b      	lsrs	r3, r3, #6
 800ca90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca94:	693a      	ldr	r2, [r7, #16]
 800ca96:	fb03 f202 	mul.w	r2, r3, r2
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800caa2:	4b57      	ldr	r3, [pc, #348]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800caa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caa8:	f003 031f 	and.w	r3, r3, #31
 800caac:	3301      	adds	r3, #1
 800caae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cab8:	617b      	str	r3, [r7, #20]
        break;
 800caba:	e005      	b.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cabc:	4b53      	ldr	r3, [pc, #332]	; (800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cabe:	617b      	str	r3, [r7, #20]
        break;
 800cac0:	e002      	b.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800cac2:	bf00      	nop
 800cac4:	e000      	b.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800cac6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cace:	f040 808c 	bne.w	800cbea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800cad2:	4b4b      	ldr	r3, [pc, #300]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cad8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800cae0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cae8:	d07c      	beq.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800caf0:	d87d      	bhi.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cafe:	d039      	beq.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800cb00:	e075      	b.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cb02:	4b3f      	ldr	r3, [pc, #252]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d108      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800cb0e:	4b3c      	ldr	r3, [pc, #240]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb16:	4a3b      	ldr	r2, [pc, #236]	; (800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cb18:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	e007      	b.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cb20:	4b37      	ldr	r3, [pc, #220]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb28:	4a37      	ldr	r2, [pc, #220]	; (800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cb2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb2e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800cb30:	4b33      	ldr	r3, [pc, #204]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb36:	0e1b      	lsrs	r3, r3, #24
 800cb38:	f003 030f 	and.w	r3, r3, #15
 800cb3c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800cb3e:	4b30      	ldr	r3, [pc, #192]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb44:	099b      	lsrs	r3, r3, #6
 800cb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	fb03 f202 	mul.w	r2, r3, r2
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb56:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800cb58:	4b29      	ldr	r3, [pc, #164]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb5e:	0a1b      	lsrs	r3, r3, #8
 800cb60:	f003 031f 	and.w	r3, r3, #31
 800cb64:	3301      	adds	r3, #1
 800cb66:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb70:	617b      	str	r3, [r7, #20]
        break;
 800cb72:	e03d      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cb74:	4b22      	ldr	r3, [pc, #136]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d108      	bne.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800cb80:	4b1f      	ldr	r3, [pc, #124]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb88:	4a1e      	ldr	r2, [pc, #120]	; (800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cb8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb8e:	613b      	str	r3, [r7, #16]
 800cb90:	e007      	b.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cb92:	4b1b      	ldr	r3, [pc, #108]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb9a:	4a1b      	ldr	r2, [pc, #108]	; (800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cb9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cba0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800cba2:	4b17      	ldr	r3, [pc, #92]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cba8:	0e1b      	lsrs	r3, r3, #24
 800cbaa:	f003 030f 	and.w	r3, r3, #15
 800cbae:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800cbb0:	4b13      	ldr	r3, [pc, #76]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cbb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbb6:	099b      	lsrs	r3, r3, #6
 800cbb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbbc:	693a      	ldr	r2, [r7, #16]
 800cbbe:	fb03 f202 	mul.w	r2, r3, r2
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbc8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800cbca:	4b0d      	ldr	r3, [pc, #52]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cbcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbd0:	f003 031f 	and.w	r3, r3, #31
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cbd8:	697a      	ldr	r2, [r7, #20]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe0:	617b      	str	r3, [r7, #20]
        break;
 800cbe2:	e005      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbe4:	4b09      	ldr	r3, [pc, #36]	; (800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cbe6:	617b      	str	r3, [r7, #20]
        break;
 800cbe8:	e002      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800cbea:	bf00      	nop
 800cbec:	e000      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800cbee:	bf00      	nop

  return frequency;
 800cbf0:	697b      	ldr	r3, [r7, #20]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	371c      	adds	r7, #28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	40023800 	.word	0x40023800
 800cc04:	00f42400 	.word	0x00f42400
 800cc08:	017d7840 	.word	0x017d7840
 800cc0c:	00bb8000 	.word	0x00bb8000

0800cc10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d101      	bne.n	800cc22 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e081      	b.n	800cd26 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	7f5b      	ldrb	r3, [r3, #29]
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d105      	bne.n	800cc38 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7f6 fae6 	bl	8003204 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	22ca      	movs	r2, #202	; 0xca
 800cc44:	625a      	str	r2, [r3, #36]	; 0x24
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2253      	movs	r2, #83	; 0x53
 800cc4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fb16 	bl	800d280 <RTC_EnterInitMode>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d008      	beq.n	800cc6c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	22ff      	movs	r2, #255	; 0xff
 800cc60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2204      	movs	r2, #4
 800cc66:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e05c      	b.n	800cd26 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6899      	ldr	r1, [r3, #8]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	4b2e      	ldr	r3, [pc, #184]	; (800cd30 <HAL_RTC_Init+0x120>)
 800cc78:	400b      	ands	r3, r1
 800cc7a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6899      	ldr	r1, [r3, #8]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	431a      	orrs	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	430a      	orrs	r2, r1
 800cc98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	68d2      	ldr	r2, [r2, #12]
 800cca2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6919      	ldr	r1, [r3, #16]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	041a      	lsls	r2, r3, #16
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	430a      	orrs	r2, r1
 800ccb6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68da      	ldr	r2, [r3, #12]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ccc6:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10e      	bne.n	800ccf4 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 faaa 	bl	800d230 <HAL_RTC_WaitForSynchro>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d008      	beq.n	800ccf4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	22ff      	movs	r2, #255	; 0xff
 800cce8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2204      	movs	r2, #4
 800ccee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e018      	b.n	800cd26 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f022 0208 	bic.w	r2, r2, #8
 800cd02:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	699a      	ldr	r2, [r3, #24]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	430a      	orrs	r2, r1
 800cd14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	22ff      	movs	r2, #255	; 0xff
 800cd1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2201      	movs	r2, #1
 800cd22:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cd24:	2300      	movs	r3, #0
  }
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	ff8fffbf 	.word	0xff8fffbf

0800cd34 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cd34:	b590      	push	{r4, r7, lr}
 800cd36:	b087      	sub	sp, #28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	7f1b      	ldrb	r3, [r3, #28]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d101      	bne.n	800cd50 <HAL_RTC_SetTime+0x1c>
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	e0a8      	b.n	800cea2 <HAL_RTC_SetTime+0x16e>
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2201      	movs	r2, #1
 800cd54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2202      	movs	r2, #2
 800cd5a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d126      	bne.n	800cdb0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d102      	bne.n	800cd76 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2200      	movs	r2, #0
 800cd74:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f000 faac 	bl	800d2d8 <RTC_ByteToBcd2>
 800cd80:	4603      	mov	r3, r0
 800cd82:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	785b      	ldrb	r3, [r3, #1]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 faa5 	bl	800d2d8 <RTC_ByteToBcd2>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cd92:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	789b      	ldrb	r3, [r3, #2]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 fa9d 	bl	800d2d8 <RTC_ByteToBcd2>
 800cd9e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800cda0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	7b1b      	ldrb	r3, [r3, #12]
 800cda8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	e018      	b.n	800cde2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d102      	bne.n	800cdc4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	785b      	ldrb	r3, [r3, #1]
 800cdce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cdd0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800cdd6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	7b1b      	ldrb	r3, [r3, #12]
 800cddc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cdde:	4313      	orrs	r3, r2
 800cde0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	22ca      	movs	r2, #202	; 0xca
 800cde8:	625a      	str	r2, [r3, #36]	; 0x24
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2253      	movs	r2, #83	; 0x53
 800cdf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f000 fa44 	bl	800d280 <RTC_EnterInitMode>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00b      	beq.n	800ce16 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	22ff      	movs	r2, #255	; 0xff
 800ce04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2204      	movs	r2, #4
 800ce0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	e045      	b.n	800cea2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	6979      	ldr	r1, [r7, #20]
 800ce1c:	4b23      	ldr	r3, [pc, #140]	; (800ceac <HAL_RTC_SetTime+0x178>)
 800ce1e:	400b      	ands	r3, r1
 800ce20:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	689a      	ldr	r2, [r3, #8]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ce30:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6899      	ldr	r1, [r3, #8]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	691a      	ldr	r2, [r3, #16]
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	431a      	orrs	r2, r3
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	430a      	orrs	r2, r1
 800ce48:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	68da      	ldr	r2, [r3, #12]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce58:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	f003 0320 	and.w	r3, r3, #32
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d111      	bne.n	800ce8c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f000 f9e1 	bl	800d230 <HAL_RTC_WaitForSynchro>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00b      	beq.n	800ce8c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	22ff      	movs	r2, #255	; 0xff
 800ce7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2204      	movs	r2, #4
 800ce80:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e00a      	b.n	800cea2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	22ff      	movs	r2, #255	; 0xff
 800ce92:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2201      	movs	r2, #1
 800ce98:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800cea0:	2300      	movs	r3, #0
  }
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	371c      	adds	r7, #28
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd90      	pop	{r4, r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	007f7f7f 	.word	0x007f7f7f

0800ceb0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ceb0:	b590      	push	{r4, r7, lr}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	7f1b      	ldrb	r3, [r3, #28]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d101      	bne.n	800cecc <HAL_RTC_SetDate+0x1c>
 800cec8:	2302      	movs	r3, #2
 800ceca:	e092      	b.n	800cff2 <HAL_RTC_SetDate+0x142>
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2201      	movs	r2, #1
 800ced0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2202      	movs	r2, #2
 800ced6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d10e      	bne.n	800cefc <HAL_RTC_SetDate+0x4c>
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	785b      	ldrb	r3, [r3, #1]
 800cee2:	f003 0310 	and.w	r3, r3, #16
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d008      	beq.n	800cefc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	785b      	ldrb	r3, [r3, #1]
 800ceee:	f023 0310 	bic.w	r3, r3, #16
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	330a      	adds	r3, #10
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d11c      	bne.n	800cf3c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	78db      	ldrb	r3, [r3, #3]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f000 f9e6 	bl	800d2d8 <RTC_ByteToBcd2>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	785b      	ldrb	r3, [r3, #1]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 f9df 	bl	800d2d8 <RTC_ByteToBcd2>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cf1e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	789b      	ldrb	r3, [r3, #2]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 f9d7 	bl	800d2d8 <RTC_ByteToBcd2>
 800cf2a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800cf2c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cf36:	4313      	orrs	r3, r2
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	e00e      	b.n	800cf5a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	78db      	ldrb	r3, [r3, #3]
 800cf40:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	785b      	ldrb	r3, [r3, #1]
 800cf46:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cf48:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800cf4e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cf56:	4313      	orrs	r3, r2
 800cf58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	22ca      	movs	r2, #202	; 0xca
 800cf60:	625a      	str	r2, [r3, #36]	; 0x24
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2253      	movs	r2, #83	; 0x53
 800cf68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f000 f988 	bl	800d280 <RTC_EnterInitMode>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00b      	beq.n	800cf8e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	22ff      	movs	r2, #255	; 0xff
 800cf7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2204      	movs	r2, #4
 800cf82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e031      	b.n	800cff2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	6979      	ldr	r1, [r7, #20]
 800cf94:	4b19      	ldr	r3, [pc, #100]	; (800cffc <HAL_RTC_SetDate+0x14c>)
 800cf96:	400b      	ands	r3, r1
 800cf98:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68da      	ldr	r2, [r3, #12]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cfa8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	f003 0320 	and.w	r3, r3, #32
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d111      	bne.n	800cfdc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 f939 	bl	800d230 <HAL_RTC_WaitForSynchro>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00b      	beq.n	800cfdc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	22ff      	movs	r2, #255	; 0xff
 800cfca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2204      	movs	r2, #4
 800cfd0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e00a      	b.n	800cff2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	22ff      	movs	r2, #255	; 0xff
 800cfe2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800cff0:	2300      	movs	r3, #0
  }
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	371c      	adds	r7, #28
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd90      	pop	{r4, r7, pc}
 800cffa:	bf00      	nop
 800cffc:	00ffff3f 	.word	0x00ffff3f

0800d000 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d000:	b590      	push	{r4, r7, lr}
 800d002:	b089      	sub	sp, #36	; 0x24
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800d010:	2300      	movs	r3, #0
 800d012:	61fb      	str	r3, [r7, #28]
 800d014:	2300      	movs	r3, #0
 800d016:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	7f1b      	ldrb	r3, [r3, #28]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d101      	bne.n	800d024 <HAL_RTC_SetAlarm+0x24>
 800d020:	2302      	movs	r3, #2
 800d022:	e101      	b.n	800d228 <HAL_RTC_SetAlarm+0x228>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2201      	movs	r2, #1
 800d028:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2202      	movs	r2, #2
 800d02e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d137      	bne.n	800d0a6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2200      	movs	r2, #0
 800d048:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 f942 	bl	800d2d8 <RTC_ByteToBcd2>
 800d054:	4603      	mov	r3, r0
 800d056:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	785b      	ldrb	r3, [r3, #1]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 f93b 	bl	800d2d8 <RTC_ByteToBcd2>
 800d062:	4603      	mov	r3, r0
 800d064:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d066:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	789b      	ldrb	r3, [r3, #2]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 f933 	bl	800d2d8 <RTC_ByteToBcd2>
 800d072:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800d074:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	7b1b      	ldrb	r3, [r3, #12]
 800d07c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d07e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 f925 	bl	800d2d8 <RTC_ByteToBcd2>
 800d08e:	4603      	mov	r3, r0
 800d090:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d092:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800d09a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	61fb      	str	r3, [r7, #28]
 800d0a4:	e023      	b.n	800d0ee <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d102      	bne.n	800d0ba <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	785b      	ldrb	r3, [r3, #1]
 800d0c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d0c6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800d0cc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	7b1b      	ldrb	r3, [r3, #12]
 800d0d2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d0d4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d0dc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d0de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800d0e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	685a      	ldr	r2, [r3, #4]
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	69db      	ldr	r3, [r3, #28]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	22ca      	movs	r2, #202	; 0xca
 800d100:	625a      	str	r2, [r3, #36]	; 0x24
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2253      	movs	r2, #83	; 0x53
 800d108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d10e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d112:	d13f      	bne.n	800d194 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	689a      	ldr	r2, [r3, #8]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d122:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	689a      	ldr	r2, [r3, #8]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d132:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d134:	f7f8 fc9a 	bl	8005a6c <HAL_GetTick>
 800d138:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d13a:	e013      	b.n	800d164 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d13c:	f7f8 fc96 	bl	8005a6c <HAL_GetTick>
 800d140:	4602      	mov	r2, r0
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	1ad3      	subs	r3, r2, r3
 800d146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d14a:	d90b      	bls.n	800d164 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	22ff      	movs	r2, #255	; 0xff
 800d152:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2203      	movs	r2, #3
 800d158:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d160:	2303      	movs	r3, #3
 800d162:	e061      	b.n	800d228 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d0e4      	beq.n	800d13c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	69fa      	ldr	r2, [r7, #28]
 800d178:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689a      	ldr	r2, [r3, #8]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d190:	609a      	str	r2, [r3, #8]
 800d192:	e03e      	b.n	800d212 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	689a      	ldr	r2, [r3, #8]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d1a2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689a      	ldr	r2, [r3, #8]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d1b2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d1b4:	f7f8 fc5a 	bl	8005a6c <HAL_GetTick>
 800d1b8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d1ba:	e013      	b.n	800d1e4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d1bc:	f7f8 fc56 	bl	8005a6c <HAL_GetTick>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1ca:	d90b      	bls.n	800d1e4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	22ff      	movs	r2, #255	; 0xff
 800d1d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2203      	movs	r2, #3
 800d1d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	e021      	b.n	800d228 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	f003 0302 	and.w	r3, r3, #2
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d0e4      	beq.n	800d1bc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	69fa      	ldr	r2, [r7, #28]
 800d1f8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	689a      	ldr	r2, [r3, #8]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d210:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	22ff      	movs	r2, #255	; 0xff
 800d218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2201      	movs	r2, #1
 800d21e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3724      	adds	r7, #36	; 0x24
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd90      	pop	{r4, r7, pc}

0800d230 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68da      	ldr	r2, [r3, #12]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d24a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d24c:	f7f8 fc0e 	bl	8005a6c <HAL_GetTick>
 800d250:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d252:	e009      	b.n	800d268 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d254:	f7f8 fc0a 	bl	8005a6c <HAL_GetTick>
 800d258:	4602      	mov	r2, r0
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d262:	d901      	bls.n	800d268 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d264:	2303      	movs	r3, #3
 800d266:	e007      	b.n	800d278 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	f003 0320 	and.w	r3, r3, #32
 800d272:	2b00      	cmp	r3, #0
 800d274:	d0ee      	beq.n	800d254 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d288:	2300      	movs	r3, #0
 800d28a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d296:	2b00      	cmp	r3, #0
 800d298:	d119      	bne.n	800d2ce <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d2a4:	f7f8 fbe2 	bl	8005a6c <HAL_GetTick>
 800d2a8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d2aa:	e009      	b.n	800d2c0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d2ac:	f7f8 fbde 	bl	8005a6c <HAL_GetTick>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ba:	d901      	bls.n	800d2c0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	e007      	b.n	800d2d0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d0ee      	beq.n	800d2ac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	4603      	mov	r3, r0
 800d2e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800d2e6:	e005      	b.n	800d2f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800d2ee:	79fb      	ldrb	r3, [r7, #7]
 800d2f0:	3b0a      	subs	r3, #10
 800d2f2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800d2f4:	79fb      	ldrb	r3, [r7, #7]
 800d2f6:	2b09      	cmp	r3, #9
 800d2f8:	d8f6      	bhi.n	800d2e8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	011b      	lsls	r3, r3, #4
 800d300:	b2da      	uxtb	r2, r3
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	4313      	orrs	r3, r2
 800d306:	b2db      	uxtb	r3, r3
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3714      	adds	r7, #20
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800d314:	b480      	push	{r7}
 800d316:	b087      	sub	sp, #28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d320:	2300      	movs	r3, #0
 800d322:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	7f1b      	ldrb	r3, [r3, #28]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d101      	bne.n	800d330 <HAL_RTCEx_SetTimeStamp+0x1c>
 800d32c:	2302      	movs	r3, #2
 800d32e:	e03e      	b.n	800d3ae <HAL_RTCEx_SetTimeStamp+0x9a>
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2201      	movs	r2, #1
 800d334:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2202      	movs	r2, #2
 800d33a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	689a      	ldr	r2, [r3, #8]
 800d342:	4b1e      	ldr	r3, [pc, #120]	; (800d3bc <HAL_RTCEx_SetTimeStamp+0xa8>)
 800d344:	4013      	ands	r3, r2
 800d346:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800d348:	697a      	ldr	r2, [r7, #20]
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	22ca      	movs	r2, #202	; 0xca
 800d356:	625a      	str	r2, [r3, #36]	; 0x24
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2253      	movs	r2, #83	; 0x53
 800d35e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f022 0206 	bic.w	r2, r2, #6
 800d36e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	430a      	orrs	r2, r1
 800d37e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	697a      	ldr	r2, [r7, #20]
 800d386:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	689a      	ldr	r2, [r3, #8]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d396:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	22ff      	movs	r2, #255	; 0xff
 800d39e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	371c      	adds	r7, #28
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	fffff7f7 	.word	0xfffff7f7

0800d3c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b088      	sub	sp, #32
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e156      	b.n	800d68c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d106      	bne.n	800d3f8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7f6 fa58 	bl	80038a8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2202      	movs	r2, #2
 800d3fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 facf 	bl	800d9a4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d00c      	beq.n	800d428 <HAL_SAI_Init+0x68>
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d80d      	bhi.n	800d42e <HAL_SAI_Init+0x6e>
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <HAL_SAI_Init+0x5c>
 800d416:	2b01      	cmp	r3, #1
 800d418:	d003      	beq.n	800d422 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800d41a:	e008      	b.n	800d42e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	61fb      	str	r3, [r7, #28]
      break;
 800d420:	e006      	b.n	800d430 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d422:	2310      	movs	r3, #16
 800d424:	61fb      	str	r3, [r7, #28]
      break;
 800d426:	e003      	b.n	800d430 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d428:	2320      	movs	r3, #32
 800d42a:	61fb      	str	r3, [r7, #28]
      break;
 800d42c:	e000      	b.n	800d430 <HAL_SAI_Init+0x70>
      break;
 800d42e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	2b03      	cmp	r3, #3
 800d436:	d81e      	bhi.n	800d476 <HAL_SAI_Init+0xb6>
 800d438:	a201      	add	r2, pc, #4	; (adr r2, 800d440 <HAL_SAI_Init+0x80>)
 800d43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d43e:	bf00      	nop
 800d440:	0800d451 	.word	0x0800d451
 800d444:	0800d457 	.word	0x0800d457
 800d448:	0800d45f 	.word	0x0800d45f
 800d44c:	0800d467 	.word	0x0800d467
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	617b      	str	r3, [r7, #20]
    }
    break;
 800d454:	e010      	b.n	800d478 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d45a:	617b      	str	r3, [r7, #20]
    }
    break;
 800d45c:	e00c      	b.n	800d478 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d45e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d462:	617b      	str	r3, [r7, #20]
    }
    break;
 800d464:	e008      	b.n	800d478 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d46a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	f043 0301 	orr.w	r3, r3, #1
 800d472:	61fb      	str	r3, [r7, #28]
    }
    break;
 800d474:	e000      	b.n	800d478 <HAL_SAI_Init+0xb8>
    default:
      break;
 800d476:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a85      	ldr	r2, [pc, #532]	; (800d694 <HAL_SAI_Init+0x2d4>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d004      	beq.n	800d48c <HAL_SAI_Init+0xcc>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a84      	ldr	r2, [pc, #528]	; (800d698 <HAL_SAI_Init+0x2d8>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d103      	bne.n	800d494 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d48c:	4a83      	ldr	r2, [pc, #524]	; (800d69c <HAL_SAI_Init+0x2dc>)
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	e002      	b.n	800d49a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d494:	4a82      	ldr	r2, [pc, #520]	; (800d6a0 <HAL_SAI_Init+0x2e0>)
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	69db      	ldr	r3, [r3, #28]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d04c      	beq.n	800d53c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a7a      	ldr	r2, [pc, #488]	; (800d694 <HAL_SAI_Init+0x2d4>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d004      	beq.n	800d4ba <HAL_SAI_Init+0xfa>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a78      	ldr	r2, [pc, #480]	; (800d698 <HAL_SAI_Init+0x2d8>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d104      	bne.n	800d4c4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d4ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d4be:	f7ff fa63 	bl	800c988 <HAL_RCCEx_GetPeriphCLKFreq>
 800d4c2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a76      	ldr	r2, [pc, #472]	; (800d6a4 <HAL_SAI_Init+0x2e4>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d004      	beq.n	800d4d8 <HAL_SAI_Init+0x118>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	4a75      	ldr	r2, [pc, #468]	; (800d6a8 <HAL_SAI_Init+0x2e8>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d104      	bne.n	800d4e2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d4d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d4dc:	f7ff fa54 	bl	800c988 <HAL_RCCEx_GetPeriphCLKFreq>
 800d4e0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d4e2:	693a      	ldr	r2, [r7, #16]
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	4413      	add	r3, r2
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	69db      	ldr	r3, [r3, #28]
 800d4f2:	025b      	lsls	r3, r3, #9
 800d4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	4a6b      	ldr	r2, [pc, #428]	; (800d6ac <HAL_SAI_Init+0x2ec>)
 800d4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d502:	08da      	lsrs	r2, r3, #3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d508:	68f9      	ldr	r1, [r7, #12]
 800d50a:	4b68      	ldr	r3, [pc, #416]	; (800d6ac <HAL_SAI_Init+0x2ec>)
 800d50c:	fba3 2301 	umull	r2, r3, r3, r1
 800d510:	08da      	lsrs	r2, r3, #3
 800d512:	4613      	mov	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	1aca      	subs	r2, r1, r3
 800d51c:	2a08      	cmp	r2, #8
 800d51e:	d904      	bls.n	800d52a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6a1b      	ldr	r3, [r3, #32]
 800d524:	1c5a      	adds	r2, r3, #1
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d52e:	2b04      	cmp	r3, #4
 800d530:	d104      	bne.n	800d53c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6a1b      	ldr	r3, [r3, #32]
 800d536:	085a      	lsrs	r2, r3, #1
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d003      	beq.n	800d54c <HAL_SAI_Init+0x18c>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d109      	bne.n	800d560 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d550:	2b01      	cmp	r3, #1
 800d552:	d101      	bne.n	800d558 <HAL_SAI_Init+0x198>
 800d554:	2300      	movs	r3, #0
 800d556:	e001      	b.n	800d55c <HAL_SAI_Init+0x19c>
 800d558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d55c:	61bb      	str	r3, [r7, #24]
 800d55e:	e008      	b.n	800d572 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d564:	2b01      	cmp	r3, #1
 800d566:	d102      	bne.n	800d56e <HAL_SAI_Init+0x1ae>
 800d568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d56c:	e000      	b.n	800d570 <HAL_SAI_Init+0x1b0>
 800d56e:	2300      	movs	r3, #0
 800d570:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	6819      	ldr	r1, [r3, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	4b4c      	ldr	r3, [pc, #304]	; (800d6b0 <HAL_SAI_Init+0x2f0>)
 800d57e:	400b      	ands	r3, r1
 800d580:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6819      	ldr	r1, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d590:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d596:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59c:	431a      	orrs	r2, r3
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800d5aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	691b      	ldr	r3, [r3, #16]
 800d5b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d5b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a1b      	ldr	r3, [r3, #32]
 800d5bc:	051b      	lsls	r3, r3, #20
 800d5be:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	430a      	orrs	r2, r1
 800d5c6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6859      	ldr	r1, [r3, #4]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	4b38      	ldr	r3, [pc, #224]	; (800d6b4 <HAL_SAI_Init+0x2f4>)
 800d5d4:	400b      	ands	r3, r1
 800d5d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	6859      	ldr	r1, [r3, #4]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	699a      	ldr	r2, [r3, #24]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e6:	431a      	orrs	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ec:	431a      	orrs	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	430a      	orrs	r2, r1
 800d5f4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	6899      	ldr	r1, [r3, #8]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	4b2d      	ldr	r3, [pc, #180]	; (800d6b8 <HAL_SAI_Init+0x2f8>)
 800d602:	400b      	ands	r3, r1
 800d604:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6899      	ldr	r1, [r3, #8]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d610:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d616:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d61c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d622:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d628:	3b01      	subs	r3, #1
 800d62a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d62c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	430a      	orrs	r2, r1
 800d634:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	68d9      	ldr	r1, [r3, #12]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d644:	400b      	ands	r3, r1
 800d646:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	68d9      	ldr	r1, [r3, #12]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d656:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d65c:	041b      	lsls	r3, r3, #16
 800d65e:	431a      	orrs	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d664:	3b01      	subs	r3, #1
 800d666:	021b      	lsls	r3, r3, #8
 800d668:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	430a      	orrs	r2, r1
 800d670:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d68a:	2300      	movs	r3, #0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3720      	adds	r7, #32
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	40015804 	.word	0x40015804
 800d698:	40015824 	.word	0x40015824
 800d69c:	40015800 	.word	0x40015800
 800d6a0:	40015c00 	.word	0x40015c00
 800d6a4:	40015c04 	.word	0x40015c04
 800d6a8:	40015c24 	.word	0x40015c24
 800d6ac:	cccccccd 	.word	0xcccccccd
 800d6b0:	ff05c010 	.word	0xff05c010
 800d6b4:	ffff1ff0 	.word	0xffff1ff0
 800d6b8:	fff88000 	.word	0xfff88000

0800d6bc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d6ca:	f7f8 f9cf 	bl	8005a6c <HAL_GetTick>
 800d6ce:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d002      	beq.n	800d6dc <HAL_SAI_Transmit_DMA+0x20>
 800d6d6:	88fb      	ldrh	r3, [r7, #6]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d101      	bne.n	800d6e0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e093      	b.n	800d808 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	f040 808c 	bne.w	800d806 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d101      	bne.n	800d6fc <HAL_SAI_Transmit_DMA+0x40>
 800d6f8:	2302      	movs	r3, #2
 800d6fa:	e085      	b.n	800d808 <HAL_SAI_Transmit_DMA+0x14c>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	88fa      	ldrh	r2, [r7, #6]
 800d70e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	88fa      	ldrh	r2, [r7, #6]
 800d716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2212      	movs	r2, #18
 800d726:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d72e:	4a38      	ldr	r2, [pc, #224]	; (800d810 <HAL_SAI_Transmit_DMA+0x154>)
 800d730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d736:	4a37      	ldr	r2, [pc, #220]	; (800d814 <HAL_SAI_Transmit_DMA+0x158>)
 800d738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d73e:	4a36      	ldr	r2, [pc, #216]	; (800d818 <HAL_SAI_Transmit_DMA+0x15c>)
 800d740:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d746:	2200      	movs	r2, #0
 800d748:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d752:	4619      	mov	r1, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	331c      	adds	r3, #28
 800d75a:	461a      	mov	r2, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d762:	f7f9 f831 	bl	80067c8 <HAL_DMA_Start_IT>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d005      	beq.n	800d778 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d774:	2301      	movs	r3, #1
 800d776:	e047      	b.n	800d808 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d778:	2100      	movs	r1, #0
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f000 f8dc 	bl	800d938 <SAI_InterruptFlag>
 800d780:	4601      	mov	r1, r0
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	691a      	ldr	r2, [r3, #16]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	430a      	orrs	r2, r1
 800d78e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d79e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d7a0:	e015      	b.n	800d7ce <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d7a2:	f7f8 f963 	bl	8005a6c <HAL_GetTick>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	1ad3      	subs	r3, r2, r3
 800d7ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7b0:	d90d      	bls.n	800d7ce <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	e01c      	b.n	800d808 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	695b      	ldr	r3, [r3, #20]
 800d7d4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d0e2      	beq.n	800d7a2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d107      	bne.n	800d7fa <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d7f8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	e000      	b.n	800d808 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800d806:	2302      	movs	r3, #2
  }
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3718      	adds	r7, #24
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	0800da75 	.word	0x0800da75
 800d814:	0800da15 	.word	0x0800da15
 800d818:	0800db0d 	.word	0x0800db0d

0800d81c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	4613      	mov	r3, r2
 800d828:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d002      	beq.n	800d836 <HAL_SAI_Receive_DMA+0x1a>
 800d830:	88fb      	ldrh	r3, [r7, #6]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d101      	bne.n	800d83a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d836:	2301      	movs	r3, #1
 800d838:	e074      	b.n	800d924 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d840:	b2db      	uxtb	r3, r3
 800d842:	2b01      	cmp	r3, #1
 800d844:	d16d      	bne.n	800d922 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d101      	bne.n	800d854 <HAL_SAI_Receive_DMA+0x38>
 800d850:	2302      	movs	r3, #2
 800d852:	e067      	b.n	800d924 <HAL_SAI_Receive_DMA+0x108>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	88fa      	ldrh	r2, [r7, #6]
 800d866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	88fa      	ldrh	r2, [r7, #6]
 800d86e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2222      	movs	r2, #34	; 0x22
 800d87e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d886:	4a29      	ldr	r2, [pc, #164]	; (800d92c <HAL_SAI_Receive_DMA+0x110>)
 800d888:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d88e:	4a28      	ldr	r2, [pc, #160]	; (800d930 <HAL_SAI_Receive_DMA+0x114>)
 800d890:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d896:	4a27      	ldr	r2, [pc, #156]	; (800d934 <HAL_SAI_Receive_DMA+0x118>)
 800d898:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d89e:	2200      	movs	r2, #0
 800d8a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	331c      	adds	r3, #28
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d8ba:	f7f8 ff85 	bl	80067c8 <HAL_DMA_Start_IT>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d005      	beq.n	800d8d0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	e029      	b.n	800d924 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f000 f830 	bl	800d938 <SAI_InterruptFlag>
 800d8d8:	4601      	mov	r1, r0
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	691a      	ldr	r2, [r3, #16]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	430a      	orrs	r2, r1
 800d8e6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d8f6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d107      	bne.n	800d916 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d914:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d91e:	2300      	movs	r3, #0
 800d920:	e000      	b.n	800d924 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800d922:	2302      	movs	r3, #2
  }
}
 800d924:	4618      	mov	r0, r3
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	0800daf1 	.word	0x0800daf1
 800d930:	0800da91 	.word	0x0800da91
 800d934:	0800db0d 	.word	0x0800db0d

0800d938 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d942:	2301      	movs	r3, #1
 800d944:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d103      	bne.n	800d954 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f043 0308 	orr.w	r3, r3, #8
 800d952:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d958:	2b08      	cmp	r3, #8
 800d95a:	d10b      	bne.n	800d974 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d960:	2b03      	cmp	r3, #3
 800d962:	d003      	beq.n	800d96c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d103      	bne.n	800d974 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f043 0310 	orr.w	r3, r3, #16
 800d972:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	2b03      	cmp	r3, #3
 800d97a:	d003      	beq.n	800d984 <SAI_InterruptFlag+0x4c>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	2b02      	cmp	r3, #2
 800d982:	d104      	bne.n	800d98e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d98a:	60fb      	str	r3, [r7, #12]
 800d98c:	e003      	b.n	800d996 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f043 0304 	orr.w	r3, r3, #4
 800d994:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d996:	68fb      	ldr	r3, [r7, #12]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3714      	adds	r7, #20
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d9ac:	4b17      	ldr	r3, [pc, #92]	; (800da0c <SAI_Disable+0x68>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a17      	ldr	r2, [pc, #92]	; (800da10 <SAI_Disable+0x6c>)
 800d9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9b6:	0b1b      	lsrs	r3, r3, #12
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d9ce:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	1e5a      	subs	r2, r3, #1
 800d9d4:	60fa      	str	r2, [r7, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10a      	bne.n	800d9f0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d9ea:	2303      	movs	r3, #3
 800d9ec:	72fb      	strb	r3, [r7, #11]
      break;
 800d9ee:	e006      	b.n	800d9fe <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1e8      	bne.n	800d9d0 <SAI_Disable+0x2c>

  return status;
 800d9fe:	7afb      	ldrb	r3, [r7, #11]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	20000008 	.word	0x20000008
 800da10:	95cbec1b 	.word	0x95cbec1b

0800da14 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	69db      	ldr	r3, [r3, #28]
 800da26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da2a:	d01c      	beq.n	800da66 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2200      	movs	r2, #0
 800da30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800da42:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800da44:	2100      	movs	r1, #0
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f7ff ff76 	bl	800d938 <SAI_InterruptFlag>
 800da4c:	4603      	mov	r3, r0
 800da4e:	43d9      	mvns	r1, r3
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	691a      	ldr	r2, [r3, #16]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	400a      	ands	r2, r1
 800da5c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2201      	movs	r2, #1
 800da62:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7f7 f830 	bl	8004acc <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800da6c:	bf00      	nop
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da80:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f7f7 f82c 	bl	8004ae0 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800da88:	bf00      	nop
 800da8a:	3710      	adds	r7, #16
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da9c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	69db      	ldr	r3, [r3, #28]
 800daa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daa6:	d01c      	beq.n	800dae2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800dab6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dac0:	2100      	movs	r1, #0
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f7ff ff38 	bl	800d938 <SAI_InterruptFlag>
 800dac8:	4603      	mov	r3, r0
 800daca:	43d9      	mvns	r1, r3
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	691a      	ldr	r2, [r3, #16]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	400a      	ands	r2, r1
 800dad8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f7f3 fb1c 	bl	8001120 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800dae8:	bf00      	nop
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800dafe:	68f8      	ldr	r0, [r7, #12]
 800db00:	f7f3 fb1e 	bl	8001140 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800db04:	bf00      	nop
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db18:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db30:	2b01      	cmp	r3, #1
 800db32:	d004      	beq.n	800db3e <SAI_DMAError+0x32>
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d112      	bne.n	800db64 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800db4c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7ff ff28 	bl	800d9a4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f7f6 ffc5 	bl	8004af4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800db6a:	bf00      	nop
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b082      	sub	sp, #8
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d101      	bne.n	800db84 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	e022      	b.n	800dbca <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d105      	bne.n	800db9c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7f5 fb4e 	bl	8003238 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2203      	movs	r2, #3
 800dba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 f815 	bl	800dbd4 <HAL_SD_InitCard>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e00a      	b.n	800dbca <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
	...

0800dbd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dbd4:	b5b0      	push	{r4, r5, r7, lr}
 800dbd6:	b08e      	sub	sp, #56	; 0x38
 800dbd8:	af04      	add	r7, sp, #16
 800dbda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800dbec:	2300      	movs	r3, #0
 800dbee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800dbf0:	2376      	movs	r3, #118	; 0x76
 800dbf2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681d      	ldr	r5, [r3, #0]
 800dbf8:	466c      	mov	r4, sp
 800dbfa:	f107 0314 	add.w	r3, r7, #20
 800dbfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc06:	f107 0308 	add.w	r3, r7, #8
 800dc0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f002 fff3 	bl	8010bf8 <SDMMC_Init>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800dc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800dc20:	2301      	movs	r3, #1
 800dc22:	e056      	b.n	800dcd2 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	685a      	ldr	r2, [r3, #4]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc32:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f003 f816 	bl	8010c6a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc4c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fe10 	bl	800e874 <SD_PowerON>
 800dc54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc56:	6a3b      	ldr	r3, [r7, #32]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00b      	beq.n	800dc74 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc68:	6a3b      	ldr	r3, [r7, #32]
 800dc6a:	431a      	orrs	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e02e      	b.n	800dcd2 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 fd2f 	bl	800e6d8 <SD_InitCard>
 800dc7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc7c:	6a3b      	ldr	r3, [r7, #32]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00b      	beq.n	800dc9a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2201      	movs	r2, #1
 800dc86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc8e:	6a3b      	ldr	r3, [r7, #32]
 800dc90:	431a      	orrs	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e01b      	b.n	800dcd2 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dca2:	4618      	mov	r0, r3
 800dca4:	f003 f874 	bl	8010d90 <SDMMC_CmdBlockLength>
 800dca8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcaa:	6a3b      	ldr	r3, [r7, #32]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00f      	beq.n	800dcd0 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a09      	ldr	r2, [pc, #36]	; (800dcdc <HAL_SD_InitCard+0x108>)
 800dcb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	431a      	orrs	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dccc:	2301      	movs	r3, #1
 800dcce:	e000      	b.n	800dcd2 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3728      	adds	r7, #40	; 0x28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bdb0      	pop	{r4, r5, r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	004005ff 	.word	0x004005ff

0800dce0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b08c      	sub	sp, #48	; 0x30
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]
 800dcec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d107      	bne.n	800dd08 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e0c3      	b.n	800de90 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	f040 80bc 	bne.w	800de8e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dd1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	441a      	add	r2, r3
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d907      	bls.n	800dd3a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dd36:	2301      	movs	r3, #1
 800dd38:	e0aa      	b.n	800de90 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2203      	movs	r2, #3
 800dd3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2200      	movs	r2, #0
 800dd48:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800dd58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd5e:	4a4e      	ldr	r2, [pc, #312]	; (800de98 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800dd60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd66:	4a4d      	ldr	r2, [pc, #308]	; (800de9c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800dd68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd6e:	2200      	movs	r2, #0
 800dd70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd76:	2200      	movs	r2, #0
 800dd78:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd8a:	689a      	ldr	r2, [r3, #8]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	430a      	orrs	r2, r1
 800dd94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	3380      	adds	r3, #128	; 0x80
 800dda0:	4619      	mov	r1, r3
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	025b      	lsls	r3, r3, #9
 800dda8:	089b      	lsrs	r3, r3, #2
 800ddaa:	f7f8 fd0d 	bl	80067c8 <HAL_DMA_Start_IT>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d017      	beq.n	800dde4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800ddc2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a35      	ldr	r2, [pc, #212]	; (800dea0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ddca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	e055      	b.n	800de90 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f042 0208 	orr.w	r2, r2, #8
 800ddf2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d002      	beq.n	800de02 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	025b      	lsls	r3, r3, #9
 800de00:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800de02:	f04f 33ff 	mov.w	r3, #4294967295
 800de06:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	025b      	lsls	r3, r3, #9
 800de0c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800de0e:	2390      	movs	r3, #144	; 0x90
 800de10:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800de12:	2302      	movs	r3, #2
 800de14:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800de16:	2300      	movs	r3, #0
 800de18:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800de1a:	2301      	movs	r3, #1
 800de1c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f107 0210 	add.w	r2, r7, #16
 800de26:	4611      	mov	r1, r2
 800de28:	4618      	mov	r0, r3
 800de2a:	f002 ff85 	bl	8010d38 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d90a      	bls.n	800de4a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2282      	movs	r2, #130	; 0x82
 800de38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de40:	4618      	mov	r0, r3
 800de42:	f002 ffe9 	bl	8010e18 <SDMMC_CmdReadMultiBlock>
 800de46:	62f8      	str	r0, [r7, #44]	; 0x2c
 800de48:	e009      	b.n	800de5e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2281      	movs	r2, #129	; 0x81
 800de4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de56:	4618      	mov	r0, r3
 800de58:	f002 ffbc 	bl	8010dd4 <SDMMC_CmdReadSingleBlock>
 800de5c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800de5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de60:	2b00      	cmp	r3, #0
 800de62:	d012      	beq.n	800de8a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a0d      	ldr	r2, [pc, #52]	; (800dea0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800de6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de72:	431a      	orrs	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2200      	movs	r2, #0
 800de84:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800de86:	2301      	movs	r3, #1
 800de88:	e002      	b.n	800de90 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	e000      	b.n	800de90 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800de8e:	2302      	movs	r3, #2
  }
}
 800de90:	4618      	mov	r0, r3
 800de92:	3730      	adds	r7, #48	; 0x30
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	0800e5c3 	.word	0x0800e5c3
 800de9c:	0800e635 	.word	0x0800e635
 800dea0:	004005ff 	.word	0x004005ff

0800dea4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b08c      	sub	sp, #48	; 0x30
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
 800deb0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d107      	bne.n	800decc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dec8:	2301      	movs	r3, #1
 800deca:	e0c6      	b.n	800e05a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	f040 80bf 	bne.w	800e058 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	441a      	add	r2, r3
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deea:	429a      	cmp	r2, r3
 800deec:	d907      	bls.n	800defe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800defa:	2301      	movs	r3, #1
 800defc:	e0ad      	b.n	800e05a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2203      	movs	r2, #3
 800df02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2200      	movs	r2, #0
 800df0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f042 021a 	orr.w	r2, r2, #26
 800df1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df22:	4a50      	ldr	r2, [pc, #320]	; (800e064 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800df24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df2a:	4a4f      	ldr	r2, [pc, #316]	; (800e068 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800df2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df32:	2200      	movs	r2, #0
 800df34:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d002      	beq.n	800df44 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df40:	025b      	lsls	r3, r3, #9
 800df42:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d90a      	bls.n	800df60 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	22a0      	movs	r2, #160	; 0xa0
 800df4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df56:	4618      	mov	r0, r3
 800df58:	f002 ffa2 	bl	8010ea0 <SDMMC_CmdWriteMultiBlock>
 800df5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800df5e:	e009      	b.n	800df74 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2290      	movs	r2, #144	; 0x90
 800df64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df6c:	4618      	mov	r0, r3
 800df6e:	f002 ff75 	bl	8010e5c <SDMMC_CmdWriteSingleBlock>
 800df72:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800df74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d012      	beq.n	800dfa0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a3b      	ldr	r2, [pc, #236]	; (800e06c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800df80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df88:	431a      	orrs	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2201      	movs	r2, #1
 800df92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2200      	movs	r2, #0
 800df9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800df9c:	2301      	movs	r3, #1
 800df9e:	e05c      	b.n	800e05a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f042 0208 	orr.w	r2, r2, #8
 800dfae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfb4:	2240      	movs	r2, #64	; 0x40
 800dfb6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfc8:	689a      	ldr	r2, [r3, #8]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	430a      	orrs	r2, r1
 800dfd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dfd8:	68b9      	ldr	r1, [r7, #8]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3380      	adds	r3, #128	; 0x80
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	025b      	lsls	r3, r3, #9
 800dfe6:	089b      	lsrs	r3, r3, #2
 800dfe8:	f7f8 fbee 	bl	80067c8 <HAL_DMA_Start_IT>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d01a      	beq.n	800e028 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f022 021a 	bic.w	r2, r2, #26
 800e000:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4a19      	ldr	r2, [pc, #100]	; (800e06c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2201      	movs	r2, #1
 800e01a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	e018      	b.n	800e05a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e028:	f04f 33ff 	mov.w	r3, #4294967295
 800e02c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	025b      	lsls	r3, r3, #9
 800e032:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e034:	2390      	movs	r3, #144	; 0x90
 800e036:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e038:	2300      	movs	r3, #0
 800e03a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e03c:	2300      	movs	r3, #0
 800e03e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800e040:	2301      	movs	r3, #1
 800e042:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f107 0210 	add.w	r2, r7, #16
 800e04c:	4611      	mov	r1, r2
 800e04e:	4618      	mov	r0, r3
 800e050:	f002 fe72 	bl	8010d38 <SDMMC_ConfigData>

      return HAL_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	e000      	b.n	800e05a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800e058:	2302      	movs	r3, #2
  }
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3730      	adds	r7, #48	; 0x30
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	0800e599 	.word	0x0800e599
 800e068:	0800e635 	.word	0x0800e635
 800e06c:	004005ff 	.word	0x004005ff

0800e070 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e078:	bf00      	nop
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e092:	0f9b      	lsrs	r3, r3, #30
 800e094:	b2da      	uxtb	r2, r3
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e09e:	0e9b      	lsrs	r3, r3, #26
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	f003 030f 	and.w	r3, r3, #15
 800e0a6:	b2da      	uxtb	r2, r3
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0b0:	0e1b      	lsrs	r3, r3, #24
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	f003 0303 	and.w	r3, r3, #3
 800e0b8:	b2da      	uxtb	r2, r3
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0c2:	0c1b      	lsrs	r3, r3, #16
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ce:	0a1b      	lsrs	r3, r3, #8
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0e4:	0d1b      	lsrs	r3, r3, #20
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0f0:	0c1b      	lsrs	r3, r3, #16
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	f003 030f 	and.w	r3, r3, #15
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e102:	0bdb      	lsrs	r3, r3, #15
 800e104:	b2db      	uxtb	r3, r3
 800e106:	f003 0301 	and.w	r3, r3, #1
 800e10a:	b2da      	uxtb	r2, r3
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e114:	0b9b      	lsrs	r3, r3, #14
 800e116:	b2db      	uxtb	r3, r3
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e126:	0b5b      	lsrs	r3, r3, #13
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	f003 0301 	and.w	r3, r3, #1
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e138:	0b1b      	lsrs	r3, r3, #12
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	f003 0301 	and.w	r3, r3, #1
 800e140:	b2da      	uxtb	r2, r3
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2200      	movs	r2, #0
 800e14a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e150:	2b00      	cmp	r3, #0
 800e152:	d163      	bne.n	800e21c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e158:	009a      	lsls	r2, r3, #2
 800e15a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e15e:	4013      	ands	r3, r2
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e164:	0f92      	lsrs	r2, r2, #30
 800e166:	431a      	orrs	r2, r3
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e170:	0edb      	lsrs	r3, r3, #27
 800e172:	b2db      	uxtb	r3, r3
 800e174:	f003 0307 	and.w	r3, r3, #7
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e182:	0e1b      	lsrs	r3, r3, #24
 800e184:	b2db      	uxtb	r3, r3
 800e186:	f003 0307 	and.w	r3, r3, #7
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e194:	0d5b      	lsrs	r3, r3, #21
 800e196:	b2db      	uxtb	r3, r3
 800e198:	f003 0307 	and.w	r3, r3, #7
 800e19c:	b2da      	uxtb	r2, r3
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1a6:	0c9b      	lsrs	r3, r3, #18
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	f003 0307 	and.w	r3, r3, #7
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1b8:	0bdb      	lsrs	r3, r3, #15
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	f003 0307 	and.w	r3, r3, #7
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	691b      	ldr	r3, [r3, #16]
 800e1ca:	1c5a      	adds	r2, r3, #1
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	7e1b      	ldrb	r3, [r3, #24]
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	f003 0307 	and.w	r3, r3, #7
 800e1da:	3302      	adds	r3, #2
 800e1dc:	2201      	movs	r2, #1
 800e1de:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e1e6:	fb03 f202 	mul.w	r2, r3, r2
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	7a1b      	ldrb	r3, [r3, #8]
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	f003 030f 	and.w	r3, r3, #15
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	409a      	lsls	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e208:	0a52      	lsrs	r2, r2, #9
 800e20a:	fb03 f202 	mul.w	r2, r3, r2
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e218:	661a      	str	r2, [r3, #96]	; 0x60
 800e21a:	e031      	b.n	800e280 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e220:	2b01      	cmp	r3, #1
 800e222:	d11d      	bne.n	800e260 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e228:	041b      	lsls	r3, r3, #16
 800e22a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e232:	0c1b      	lsrs	r3, r3, #16
 800e234:	431a      	orrs	r2, r3
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	3301      	adds	r3, #1
 800e240:	029a      	lsls	r2, r3, #10
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e254:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	661a      	str	r2, [r3, #96]	; 0x60
 800e25e:	e00f      	b.n	800e280 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a58      	ldr	r2, [pc, #352]	; (800e3c8 <HAL_SD_GetCardCSD+0x344>)
 800e266:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e27c:	2301      	movs	r3, #1
 800e27e:	e09d      	b.n	800e3bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e284:	0b9b      	lsrs	r3, r3, #14
 800e286:	b2db      	uxtb	r3, r3
 800e288:	f003 0301 	and.w	r3, r3, #1
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e296:	09db      	lsrs	r3, r3, #7
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2ae:	b2da      	uxtb	r2, r3
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2b8:	0fdb      	lsrs	r3, r3, #31
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c4:	0f5b      	lsrs	r3, r3, #29
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	f003 0303 	and.w	r3, r3, #3
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2d6:	0e9b      	lsrs	r3, r3, #26
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	f003 0307 	and.w	r3, r3, #7
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2e8:	0d9b      	lsrs	r3, r3, #22
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	f003 030f 	and.w	r3, r3, #15
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2fa:	0d5b      	lsrs	r3, r3, #21
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	f003 0301 	and.w	r3, r3, #1
 800e302:	b2da      	uxtb	r2, r3
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	2200      	movs	r2, #0
 800e30e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e316:	0c1b      	lsrs	r3, r3, #16
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	f003 0301 	and.w	r3, r3, #1
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e32a:	0bdb      	lsrs	r3, r3, #15
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	b2da      	uxtb	r2, r3
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e33e:	0b9b      	lsrs	r3, r3, #14
 800e340:	b2db      	uxtb	r3, r3
 800e342:	f003 0301 	and.w	r3, r3, #1
 800e346:	b2da      	uxtb	r2, r3
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e352:	0b5b      	lsrs	r3, r3, #13
 800e354:	b2db      	uxtb	r3, r3
 800e356:	f003 0301 	and.w	r3, r3, #1
 800e35a:	b2da      	uxtb	r2, r3
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e366:	0b1b      	lsrs	r3, r3, #12
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e37a:	0a9b      	lsrs	r3, r3, #10
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	f003 0303 	and.w	r3, r3, #3
 800e382:	b2da      	uxtb	r2, r3
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e38e:	0a1b      	lsrs	r3, r3, #8
 800e390:	b2db      	uxtb	r3, r3
 800e392:	f003 0303 	and.w	r3, r3, #3
 800e396:	b2da      	uxtb	r2, r3
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3a2:	085b      	lsrs	r3, r3, #1
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e3ba:	2300      	movs	r3, #0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr
 800e3c8:	004005ff 	.word	0x004005ff

0800e3cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e424:	b5b0      	push	{r4, r5, r7, lr}
 800e426:	b08e      	sub	sp, #56	; 0x38
 800e428:	af04      	add	r7, sp, #16
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2203      	movs	r2, #3
 800e438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e440:	2b03      	cmp	r3, #3
 800e442:	d02e      	beq.n	800e4a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e44a:	d106      	bne.n	800e45a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e450:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	639a      	str	r2, [r3, #56]	; 0x38
 800e458:	e029      	b.n	800e4ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e460:	d10a      	bne.n	800e478 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 fabc 	bl	800e9e0 <SD_WideBus_Enable>
 800e468:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e46e:	6a3b      	ldr	r3, [r7, #32]
 800e470:	431a      	orrs	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	639a      	str	r2, [r3, #56]	; 0x38
 800e476:	e01a      	b.n	800e4ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d10a      	bne.n	800e494 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 faf9 	bl	800ea76 <SD_WideBus_Disable>
 800e484:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e48a:	6a3b      	ldr	r3, [r7, #32]
 800e48c:	431a      	orrs	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	639a      	str	r2, [r3, #56]	; 0x38
 800e492:	e00c      	b.n	800e4ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e498:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	639a      	str	r2, [r3, #56]	; 0x38
 800e4a0:	e005      	b.n	800e4ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00b      	beq.n	800e4ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a26      	ldr	r2, [pc, #152]	; (800e554 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e4bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4cc:	e01f      	b.n	800e50e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681d      	ldr	r5, [r3, #0]
 800e4f4:	466c      	mov	r4, sp
 800e4f6:	f107 0314 	add.w	r3, r7, #20
 800e4fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e502:	f107 0308 	add.w	r3, r7, #8
 800e506:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e508:	4628      	mov	r0, r5
 800e50a:	f002 fb75 	bl	8010bf8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e516:	4618      	mov	r0, r3
 800e518:	f002 fc3a 	bl	8010d90 <SDMMC_CmdBlockLength>
 800e51c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e51e:	6a3b      	ldr	r3, [r7, #32]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00c      	beq.n	800e53e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a0a      	ldr	r2, [pc, #40]	; (800e554 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e52a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e530:	6a3b      	ldr	r3, [r7, #32]
 800e532:	431a      	orrs	r2, r3
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2201      	movs	r2, #1
 800e542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3728      	adds	r7, #40	; 0x28
 800e54e:	46bd      	mov	sp, r7
 800e550:	bdb0      	pop	{r4, r5, r7, pc}
 800e552:	bf00      	nop
 800e554:	004005ff 	.word	0x004005ff

0800e558 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e564:	f107 030c 	add.w	r3, r7, #12
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fa10 	bl	800e990 <SD_SendStatus>
 800e570:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d005      	beq.n	800e584 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	431a      	orrs	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	0a5b      	lsrs	r3, r3, #9
 800e588:	f003 030f 	and.w	r3, r3, #15
 800e58c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e58e:	693b      	ldr	r3, [r7, #16]
}
 800e590:	4618      	mov	r0, r3
 800e592:	3718      	adds	r7, #24
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e598:	b480      	push	{r7}
 800e59a:	b085      	sub	sp, #20
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e5b6:	bf00      	nop
 800e5b8:	3714      	adds	r7, #20
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr

0800e5c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d4:	2b82      	cmp	r3, #130	; 0x82
 800e5d6:	d111      	bne.n	800e5fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f002 fc81 	bl	8010ee4 <SDMMC_CmdStopTransfer>
 800e5e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d008      	beq.n	800e5fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	431a      	orrs	r2, r3
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	f7ff fd3a 	bl	800e070 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f022 0208 	bic.w	r2, r2, #8
 800e60a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f240 523a 	movw	r2, #1338	; 0x53a
 800e614:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f004 f82d 	bl	8012684 <HAL_SD_RxCpltCallback>
#endif
}
 800e62a:	bf00      	nop
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
	...

0800e634 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e640:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7f8 fb3c 	bl	8006cc0 <HAL_DMA_GetError>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b02      	cmp	r3, #2
 800e64c:	d03e      	beq.n	800e6cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e654:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e65c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d002      	beq.n	800e66a <SD_DMAError+0x36>
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d12d      	bne.n	800e6c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a19      	ldr	r2, [pc, #100]	; (800e6d4 <SD_DMAError+0xa0>)
 800e670:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e680:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e686:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e68e:	6978      	ldr	r0, [r7, #20]
 800e690:	f7ff ff62 	bl	800e558 <HAL_SD_GetCardState>
 800e694:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	2b06      	cmp	r3, #6
 800e69a:	d002      	beq.n	800e6a2 <SD_DMAError+0x6e>
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	2b05      	cmp	r3, #5
 800e6a0:	d10a      	bne.n	800e6b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f002 fc1c 	bl	8010ee4 <SDMMC_CmdStopTransfer>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b2:	431a      	orrs	r2, r3
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e6c6:	6978      	ldr	r0, [r7, #20]
 800e6c8:	f7ff fcd2 	bl	800e070 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e6cc:	bf00      	nop
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	004005ff 	.word	0x004005ff

0800e6d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e6d8:	b5b0      	push	{r4, r5, r7, lr}
 800e6da:	b094      	sub	sp, #80	; 0x50
 800e6dc:	af04      	add	r7, sp, #16
 800e6de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f002 facd 	bl	8010c88 <SDMMC_GetPowerState>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d102      	bne.n	800e6fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e6f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e6f8:	e0b8      	b.n	800e86c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6fe:	2b03      	cmp	r3, #3
 800e700:	d02f      	beq.n	800e762 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4618      	mov	r0, r3
 800e708:	f002 fcf7 	bl	80110fa <SDMMC_CmdSendCID>
 800e70c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e710:	2b00      	cmp	r3, #0
 800e712:	d001      	beq.n	800e718 <SD_InitCard+0x40>
    {
      return errorstate;
 800e714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e716:	e0a9      	b.n	800e86c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2100      	movs	r1, #0
 800e71e:	4618      	mov	r0, r3
 800e720:	f002 faf7 	bl	8010d12 <SDMMC_GetResponse>
 800e724:	4602      	mov	r2, r0
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2104      	movs	r1, #4
 800e730:	4618      	mov	r0, r3
 800e732:	f002 faee 	bl	8010d12 <SDMMC_GetResponse>
 800e736:	4602      	mov	r2, r0
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2108      	movs	r1, #8
 800e742:	4618      	mov	r0, r3
 800e744:	f002 fae5 	bl	8010d12 <SDMMC_GetResponse>
 800e748:	4602      	mov	r2, r0
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	210c      	movs	r1, #12
 800e754:	4618      	mov	r0, r3
 800e756:	f002 fadc 	bl	8010d12 <SDMMC_GetResponse>
 800e75a:	4602      	mov	r2, r0
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e766:	2b03      	cmp	r3, #3
 800e768:	d00d      	beq.n	800e786 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f107 020e 	add.w	r2, r7, #14
 800e772:	4611      	mov	r1, r2
 800e774:	4618      	mov	r0, r3
 800e776:	f002 fcfd 	bl	8011174 <SDMMC_CmdSetRelAdd>
 800e77a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <SD_InitCard+0xae>
    {
      return errorstate;
 800e782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e784:	e072      	b.n	800e86c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e78a:	2b03      	cmp	r3, #3
 800e78c:	d036      	beq.n	800e7fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e78e:	89fb      	ldrh	r3, [r7, #14]
 800e790:	461a      	mov	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e79e:	041b      	lsls	r3, r3, #16
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	f002 fcc7 	bl	8011136 <SDMMC_CmdSendCSD>
 800e7a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d001      	beq.n	800e7b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b2:	e05b      	b.n	800e86c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f002 faa9 	bl	8010d12 <SDMMC_GetResponse>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2104      	movs	r1, #4
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f002 faa0 	bl	8010d12 <SDMMC_GetResponse>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2108      	movs	r1, #8
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f002 fa97 	bl	8010d12 <SDMMC_GetResponse>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	210c      	movs	r1, #12
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f002 fa8e 	bl	8010d12 <SDMMC_GetResponse>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2104      	movs	r1, #4
 800e802:	4618      	mov	r0, r3
 800e804:	f002 fa85 	bl	8010d12 <SDMMC_GetResponse>
 800e808:	4603      	mov	r3, r0
 800e80a:	0d1a      	lsrs	r2, r3, #20
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e810:	f107 0310 	add.w	r3, r7, #16
 800e814:	4619      	mov	r1, r3
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7ff fc34 	bl	800e084 <HAL_SD_GetCardCSD>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d002      	beq.n	800e828 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e822:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e826:	e021      	b.n	800e86c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6819      	ldr	r1, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e830:	041b      	lsls	r3, r3, #16
 800e832:	2200      	movs	r2, #0
 800e834:	461c      	mov	r4, r3
 800e836:	4615      	mov	r5, r2
 800e838:	4622      	mov	r2, r4
 800e83a:	462b      	mov	r3, r5
 800e83c:	4608      	mov	r0, r1
 800e83e:	f002 fb73 	bl	8010f28 <SDMMC_CmdSelDesel>
 800e842:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e846:	2b00      	cmp	r3, #0
 800e848:	d001      	beq.n	800e84e <SD_InitCard+0x176>
  {
    return errorstate;
 800e84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e84c:	e00e      	b.n	800e86c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681d      	ldr	r5, [r3, #0]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	466c      	mov	r4, sp
 800e856:	f103 0210 	add.w	r2, r3, #16
 800e85a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e85c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e860:	3304      	adds	r3, #4
 800e862:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e864:	4628      	mov	r0, r5
 800e866:	f002 f9c7 	bl	8010bf8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3740      	adds	r7, #64	; 0x40
 800e870:	46bd      	mov	sp, r7
 800e872:	bdb0      	pop	{r4, r5, r7, pc}

0800e874 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e87c:	2300      	movs	r3, #0
 800e87e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e880:	2300      	movs	r3, #0
 800e882:	617b      	str	r3, [r7, #20]
 800e884:	2300      	movs	r3, #0
 800e886:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4618      	mov	r0, r3
 800e88e:	f002 fb6e 	bl	8010f6e <SDMMC_CmdGoIdleState>
 800e892:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d001      	beq.n	800e89e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	e072      	b.n	800e984 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f002 fb81 	bl	8010faa <SDMMC_CmdOperCond>
 800e8a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00d      	beq.n	800e8cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f002 fb57 	bl	8010f6e <SDMMC_CmdGoIdleState>
 800e8c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d004      	beq.n	800e8d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	e05b      	b.n	800e984 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d137      	bne.n	800e94a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2100      	movs	r1, #0
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f002 fb81 	bl	8010fe8 <SDMMC_CmdAppCommand>
 800e8e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d02d      	beq.n	800e94a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e8f2:	e047      	b.n	800e984 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f002 fb74 	bl	8010fe8 <SDMMC_CmdAppCommand>
 800e900:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <SD_PowerON+0x98>
    {
      return errorstate;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	e03b      	b.n	800e984 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	491e      	ldr	r1, [pc, #120]	; (800e98c <SD_PowerON+0x118>)
 800e912:	4618      	mov	r0, r3
 800e914:	f002 fb8a 	bl	801102c <SDMMC_CmdAppOperCommand>
 800e918:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d002      	beq.n	800e926 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e924:	e02e      	b.n	800e984 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2100      	movs	r1, #0
 800e92c:	4618      	mov	r0, r3
 800e92e:	f002 f9f0 	bl	8010d12 <SDMMC_GetResponse>
 800e932:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	0fdb      	lsrs	r3, r3, #31
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d101      	bne.n	800e940 <SD_PowerON+0xcc>
 800e93c:	2301      	movs	r3, #1
 800e93e:	e000      	b.n	800e942 <SD_PowerON+0xce>
 800e940:	2300      	movs	r3, #0
 800e942:	613b      	str	r3, [r7, #16]

    count++;
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	3301      	adds	r3, #1
 800e948:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e950:	4293      	cmp	r3, r2
 800e952:	d802      	bhi.n	800e95a <SD_PowerON+0xe6>
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d0cc      	beq.n	800e8f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e960:	4293      	cmp	r3, r2
 800e962:	d902      	bls.n	800e96a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e968:	e00c      	b.n	800e984 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e970:	2b00      	cmp	r3, #0
 800e972:	d003      	beq.n	800e97c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	645a      	str	r2, [r3, #68]	; 0x44
 800e97a:	e002      	b.n	800e982 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e982:	2300      	movs	r3, #0
}
 800e984:	4618      	mov	r0, r3
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	c1100000 	.word	0xc1100000

0800e990 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d102      	bne.n	800e9a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e9a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e9a4:	e018      	b.n	800e9d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9ae:	041b      	lsls	r3, r3, #16
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	f002 fbff 	bl	80111b6 <SDMMC_CmdSendStatus>
 800e9b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	e009      	b.n	800e9d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f002 f9a1 	bl	8010d12 <SDMMC_GetResponse>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3710      	adds	r7, #16
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b086      	sub	sp, #24
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	60fb      	str	r3, [r7, #12]
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f002 f98b 	bl	8010d12 <SDMMC_GetResponse>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea06:	d102      	bne.n	800ea0e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea0c:	e02f      	b.n	800ea6e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea0e:	f107 030c 	add.w	r3, r7, #12
 800ea12:	4619      	mov	r1, r3
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 f879 	bl	800eb0c <SD_FindSCR>
 800ea1a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	e023      	b.n	800ea6e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d01c      	beq.n	800ea6a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea38:	041b      	lsls	r3, r3, #16
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	f002 fad3 	bl	8010fe8 <SDMMC_CmdAppCommand>
 800ea42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d001      	beq.n	800ea4e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	e00f      	b.n	800ea6e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2102      	movs	r1, #2
 800ea54:	4618      	mov	r0, r3
 800ea56:	f002 fb0d 	bl	8011074 <SDMMC_CmdBusWidth>
 800ea5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	e003      	b.n	800ea6e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea66:	2300      	movs	r3, #0
 800ea68:	e001      	b.n	800ea6e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3718      	adds	r7, #24
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b086      	sub	sp, #24
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ea7e:	2300      	movs	r3, #0
 800ea80:	60fb      	str	r3, [r7, #12]
 800ea82:	2300      	movs	r3, #0
 800ea84:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f002 f940 	bl	8010d12 <SDMMC_GetResponse>
 800ea92:	4603      	mov	r3, r0
 800ea94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea9c:	d102      	bne.n	800eaa4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eaa2:	e02f      	b.n	800eb04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eaa4:	f107 030c 	add.w	r3, r7, #12
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 f82e 	bl	800eb0c <SD_FindSCR>
 800eab0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	e023      	b.n	800eb04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d01c      	beq.n	800eb00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eace:	041b      	lsls	r3, r3, #16
 800ead0:	4619      	mov	r1, r3
 800ead2:	4610      	mov	r0, r2
 800ead4:	f002 fa88 	bl	8010fe8 <SDMMC_CmdAppCommand>
 800ead8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d001      	beq.n	800eae4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	e00f      	b.n	800eb04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2100      	movs	r1, #0
 800eaea:	4618      	mov	r0, r3
 800eaec:	f002 fac2 	bl	8011074 <SDMMC_CmdBusWidth>
 800eaf0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d001      	beq.n	800eafc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	e003      	b.n	800eb04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eafc:	2300      	movs	r3, #0
 800eafe:	e001      	b.n	800eb04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3718      	adds	r7, #24
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eb0c:	b590      	push	{r4, r7, lr}
 800eb0e:	b08f      	sub	sp, #60	; 0x3c
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb16:	f7f6 ffa9 	bl	8005a6c <HAL_GetTick>
 800eb1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800eb20:	2300      	movs	r3, #0
 800eb22:	60bb      	str	r3, [r7, #8]
 800eb24:	2300      	movs	r3, #0
 800eb26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2108      	movs	r1, #8
 800eb32:	4618      	mov	r0, r3
 800eb34:	f002 f92c 	bl	8010d90 <SDMMC_CmdBlockLength>
 800eb38:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb42:	e0b2      	b.n	800ecaa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb4c:	041b      	lsls	r3, r3, #16
 800eb4e:	4619      	mov	r1, r3
 800eb50:	4610      	mov	r0, r2
 800eb52:	f002 fa49 	bl	8010fe8 <SDMMC_CmdAppCommand>
 800eb56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <SD_FindSCR+0x56>
  {
    return errorstate;
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	e0a3      	b.n	800ecaa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb62:	f04f 33ff 	mov.w	r3, #4294967295
 800eb66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800eb68:	2308      	movs	r3, #8
 800eb6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800eb6c:	2330      	movs	r3, #48	; 0x30
 800eb6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eb70:	2302      	movs	r3, #2
 800eb72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eb74:	2300      	movs	r3, #0
 800eb76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f107 0210 	add.w	r2, r7, #16
 800eb84:	4611      	mov	r1, r2
 800eb86:	4618      	mov	r0, r3
 800eb88:	f002 f8d6 	bl	8010d38 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f002 fa91 	bl	80110b8 <SDMMC_CmdSendSCR>
 800eb96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d02a      	beq.n	800ebf4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800eb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba0:	e083      	b.n	800ecaa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00f      	beq.n	800ebd0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6819      	ldr	r1, [r3, #0]
 800ebb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb6:	009b      	lsls	r3, r3, #2
 800ebb8:	f107 0208 	add.w	r2, r7, #8
 800ebbc:	18d4      	adds	r4, r2, r3
 800ebbe:	4608      	mov	r0, r1
 800ebc0:	f002 f846 	bl	8010c50 <SDMMC_ReadFIFO>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	6023      	str	r3, [r4, #0]
      index++;
 800ebc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebca:	3301      	adds	r3, #1
 800ebcc:	637b      	str	r3, [r7, #52]	; 0x34
 800ebce:	e006      	b.n	800ebde <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d012      	beq.n	800ec04 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ebde:	f7f6 ff45 	bl	8005a6c <HAL_GetTick>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe6:	1ad3      	subs	r3, r2, r3
 800ebe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebec:	d102      	bne.n	800ebf4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ebee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebf2:	e05a      	b.n	800ecaa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebfa:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d0cf      	beq.n	800eba2 <SD_FindSCR+0x96>
 800ec02:	e000      	b.n	800ec06 <SD_FindSCR+0xfa>
      break;
 800ec04:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec0c:	f003 0308 	and.w	r3, r3, #8
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d005      	beq.n	800ec20 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2208      	movs	r2, #8
 800ec1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec1c:	2308      	movs	r3, #8
 800ec1e:	e044      	b.n	800ecaa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec26:	f003 0302 	and.w	r3, r3, #2
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d005      	beq.n	800ec3a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2202      	movs	r2, #2
 800ec34:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec36:	2302      	movs	r3, #2
 800ec38:	e037      	b.n	800ecaa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec40:	f003 0320 	and.w	r3, r3, #32
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d005      	beq.n	800ec54 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2220      	movs	r2, #32
 800ec4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec50:	2320      	movs	r3, #32
 800ec52:	e02a      	b.n	800ecaa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f240 523a 	movw	r2, #1338	; 0x53a
 800ec5c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	061a      	lsls	r2, r3, #24
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	021b      	lsls	r3, r3, #8
 800ec66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec6a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	0a1b      	lsrs	r3, r3, #8
 800ec70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	0e1b      	lsrs	r3, r3, #24
 800ec7a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7e:	601a      	str	r2, [r3, #0]
    scr++;
 800ec80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec82:	3304      	adds	r3, #4
 800ec84:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	061a      	lsls	r2, r3, #24
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	021b      	lsls	r3, r3, #8
 800ec8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec92:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	0a1b      	lsrs	r3, r3, #8
 800ec98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ec9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	0e1b      	lsrs	r3, r3, #24
 800eca2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800eca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800eca8:	2300      	movs	r3, #0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	373c      	adds	r7, #60	; 0x3c
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd90      	pop	{r4, r7, pc}

0800ecb2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b082      	sub	sp, #8
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
 800ecba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d101      	bne.n	800ecc6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e025      	b.n	800ed12 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d106      	bne.n	800ece0 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7f4 fdda 	bl	8003894 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2202      	movs	r2, #2
 800ece4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	3304      	adds	r3, #4
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	4610      	mov	r0, r2
 800ecf4:	f001 fe56 	bl	80109a4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6818      	ldr	r0, [r3, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	461a      	mov	r2, r3
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	f001 fec0 	bl	8010a88 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800ed10:	2300      	movs	r3, #0
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}

0800ed1a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ed1a:	b580      	push	{r7, lr}
 800ed1c:	b084      	sub	sp, #16
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	60f8      	str	r0, [r7, #12]
 800ed22:	60b9      	str	r1, [r7, #8]
 800ed24:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	2b02      	cmp	r3, #2
 800ed30:	d101      	bne.n	800ed36 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ed32:	2302      	movs	r3, #2
 800ed34:	e018      	b.n	800ed68 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2202      	movs	r2, #2
 800ed3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	68b9      	ldr	r1, [r7, #8]
 800ed46:	4618      	mov	r0, r3
 800ed48:	f001 ff1e 	bl	8010b88 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d104      	bne.n	800ed5e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2205      	movs	r2, #5
 800ed58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800ed5c:	e003      	b.n	800ed66 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2201      	movs	r2, #1
 800ed62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800ed66:	2300      	movs	r3, #0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	d101      	bne.n	800ed8a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ed86:	2302      	movs	r3, #2
 800ed88:	e00e      	b.n	800eda8 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2202      	movs	r2, #2
 800ed8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	6839      	ldr	r1, [r7, #0]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f001 ff19 	bl	8010bd0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2201      	movs	r2, #1
 800eda2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d101      	bne.n	800edc2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800edbe:	2301      	movs	r3, #1
 800edc0:	e04c      	b.n	800ee5c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d106      	bne.n	800eddc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f7f4 fa90 	bl	80032fc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2202      	movs	r2, #2
 800ede0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f022 0203 	bic.w	r2, r2, #3
 800edf2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	4b19      	ldr	r3, [pc, #100]	; (800ee64 <HAL_SPDIFRX_Init+0xb4>)
 800ee00:	4013      	ands	r3, r2
 800ee02:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800ee0c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800ee12:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800ee18:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800ee1e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800ee24:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800ee2a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800ee30:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800ee36:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800ee3c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800ee3e:	68fa      	ldr	r2, [r7, #12]
 800ee40:	4313      	orrs	r3, r2
 800ee42:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2201      	movs	r2, #1
 800ee56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3710      	adds	r7, #16
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	fff88407 	.word	0xfff88407

0800ee68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e049      	b.n	800ef0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d106      	bne.n	800ee94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f7f4 fa76 	bl	8003380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2202      	movs	r2, #2
 800ee98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	3304      	adds	r3, #4
 800eea4:	4619      	mov	r1, r3
 800eea6:	4610      	mov	r0, r2
 800eea8:	f000 fc22 	bl	800f6f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2201      	movs	r2, #1
 800eec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2201      	movs	r2, #1
 800eec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2201      	movs	r2, #1
 800eed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2201      	movs	r2, #1
 800eee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2201      	movs	r2, #1
 800eee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2201      	movs	r2, #1
 800eef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
	...

0800ef18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b085      	sub	sp, #20
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d001      	beq.n	800ef30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	e054      	b.n	800efda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2202      	movs	r2, #2
 800ef34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	68da      	ldr	r2, [r3, #12]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f042 0201 	orr.w	r2, r2, #1
 800ef46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a26      	ldr	r2, [pc, #152]	; (800efe8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d022      	beq.n	800ef98 <HAL_TIM_Base_Start_IT+0x80>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef5a:	d01d      	beq.n	800ef98 <HAL_TIM_Base_Start_IT+0x80>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4a22      	ldr	r2, [pc, #136]	; (800efec <HAL_TIM_Base_Start_IT+0xd4>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d018      	beq.n	800ef98 <HAL_TIM_Base_Start_IT+0x80>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4a21      	ldr	r2, [pc, #132]	; (800eff0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d013      	beq.n	800ef98 <HAL_TIM_Base_Start_IT+0x80>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a1f      	ldr	r2, [pc, #124]	; (800eff4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d00e      	beq.n	800ef98 <HAL_TIM_Base_Start_IT+0x80>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a1e      	ldr	r2, [pc, #120]	; (800eff8 <HAL_TIM_Base_Start_IT+0xe0>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d009      	beq.n	800ef98 <HAL_TIM_Base_Start_IT+0x80>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a1c      	ldr	r2, [pc, #112]	; (800effc <HAL_TIM_Base_Start_IT+0xe4>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d004      	beq.n	800ef98 <HAL_TIM_Base_Start_IT+0x80>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4a1b      	ldr	r2, [pc, #108]	; (800f000 <HAL_TIM_Base_Start_IT+0xe8>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d115      	bne.n	800efc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	689a      	ldr	r2, [r3, #8]
 800ef9e:	4b19      	ldr	r3, [pc, #100]	; (800f004 <HAL_TIM_Base_Start_IT+0xec>)
 800efa0:	4013      	ands	r3, r2
 800efa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b06      	cmp	r3, #6
 800efa8:	d015      	beq.n	800efd6 <HAL_TIM_Base_Start_IT+0xbe>
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efb0:	d011      	beq.n	800efd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f042 0201 	orr.w	r2, r2, #1
 800efc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efc2:	e008      	b.n	800efd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f042 0201 	orr.w	r2, r2, #1
 800efd2:	601a      	str	r2, [r3, #0]
 800efd4:	e000      	b.n	800efd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800efd8:	2300      	movs	r3, #0
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3714      	adds	r7, #20
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr
 800efe6:	bf00      	nop
 800efe8:	40010000 	.word	0x40010000
 800efec:	40000400 	.word	0x40000400
 800eff0:	40000800 	.word	0x40000800
 800eff4:	40000c00 	.word	0x40000c00
 800eff8:	40010400 	.word	0x40010400
 800effc:	40014000 	.word	0x40014000
 800f000:	40001800 	.word	0x40001800
 800f004:	00010007 	.word	0x00010007

0800f008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d101      	bne.n	800f01a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f016:	2301      	movs	r3, #1
 800f018:	e049      	b.n	800f0ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f020:	b2db      	uxtb	r3, r3
 800f022:	2b00      	cmp	r3, #0
 800f024:	d106      	bne.n	800f034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f7f4 fa14 	bl	800345c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2202      	movs	r2, #2
 800f038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	3304      	adds	r3, #4
 800f044:	4619      	mov	r1, r3
 800f046:	4610      	mov	r0, r2
 800f048:	f000 fb52 	bl	800f6f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2201      	movs	r2, #1
 800f070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0ac:	2300      	movs	r3, #0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b082      	sub	sp, #8
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	f003 0302 	and.w	r3, r3, #2
 800f0c8:	2b02      	cmp	r3, #2
 800f0ca:	d122      	bne.n	800f112 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	f003 0302 	and.w	r3, r3, #2
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d11b      	bne.n	800f112 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f06f 0202 	mvn.w	r2, #2
 800f0e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	699b      	ldr	r3, [r3, #24]
 800f0f0:	f003 0303 	and.w	r3, r3, #3
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d003      	beq.n	800f100 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 fadb 	bl	800f6b4 <HAL_TIM_IC_CaptureCallback>
 800f0fe:	e005      	b.n	800f10c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 facd 	bl	800f6a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fade 	bl	800f6c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	691b      	ldr	r3, [r3, #16]
 800f118:	f003 0304 	and.w	r3, r3, #4
 800f11c:	2b04      	cmp	r3, #4
 800f11e:	d122      	bne.n	800f166 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	f003 0304 	and.w	r3, r3, #4
 800f12a:	2b04      	cmp	r3, #4
 800f12c:	d11b      	bne.n	800f166 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f06f 0204 	mvn.w	r2, #4
 800f136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2202      	movs	r2, #2
 800f13c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	699b      	ldr	r3, [r3, #24]
 800f144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d003      	beq.n	800f154 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 fab1 	bl	800f6b4 <HAL_TIM_IC_CaptureCallback>
 800f152:	e005      	b.n	800f160 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 faa3 	bl	800f6a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fab4 	bl	800f6c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	691b      	ldr	r3, [r3, #16]
 800f16c:	f003 0308 	and.w	r3, r3, #8
 800f170:	2b08      	cmp	r3, #8
 800f172:	d122      	bne.n	800f1ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	f003 0308 	and.w	r3, r3, #8
 800f17e:	2b08      	cmp	r3, #8
 800f180:	d11b      	bne.n	800f1ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f06f 0208 	mvn.w	r2, #8
 800f18a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2204      	movs	r2, #4
 800f190:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	69db      	ldr	r3, [r3, #28]
 800f198:	f003 0303 	and.w	r3, r3, #3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d003      	beq.n	800f1a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 fa87 	bl	800f6b4 <HAL_TIM_IC_CaptureCallback>
 800f1a6:	e005      	b.n	800f1b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 fa79 	bl	800f6a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 fa8a 	bl	800f6c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	691b      	ldr	r3, [r3, #16]
 800f1c0:	f003 0310 	and.w	r3, r3, #16
 800f1c4:	2b10      	cmp	r3, #16
 800f1c6:	d122      	bne.n	800f20e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	f003 0310 	and.w	r3, r3, #16
 800f1d2:	2b10      	cmp	r3, #16
 800f1d4:	d11b      	bne.n	800f20e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f06f 0210 	mvn.w	r2, #16
 800f1de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2208      	movs	r2, #8
 800f1e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	69db      	ldr	r3, [r3, #28]
 800f1ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d003      	beq.n	800f1fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fa5d 	bl	800f6b4 <HAL_TIM_IC_CaptureCallback>
 800f1fa:	e005      	b.n	800f208 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 fa4f 	bl	800f6a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fa60 	bl	800f6c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	691b      	ldr	r3, [r3, #16]
 800f214:	f003 0301 	and.w	r3, r3, #1
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d10e      	bne.n	800f23a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	f003 0301 	and.w	r3, r3, #1
 800f226:	2b01      	cmp	r3, #1
 800f228:	d107      	bne.n	800f23a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f06f 0201 	mvn.w	r2, #1
 800f232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7f3 fbfd 	bl	8002a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	691b      	ldr	r3, [r3, #16]
 800f240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f244:	2b80      	cmp	r3, #128	; 0x80
 800f246:	d10e      	bne.n	800f266 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	68db      	ldr	r3, [r3, #12]
 800f24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f252:	2b80      	cmp	r3, #128	; 0x80
 800f254:	d107      	bne.n	800f266 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f25e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 fef3 	bl	801004c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f274:	d10e      	bne.n	800f294 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f280:	2b80      	cmp	r3, #128	; 0x80
 800f282:	d107      	bne.n	800f294 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f28c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 fee6 	bl	8010060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	691b      	ldr	r3, [r3, #16]
 800f29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f29e:	2b40      	cmp	r3, #64	; 0x40
 800f2a0:	d10e      	bne.n	800f2c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ac:	2b40      	cmp	r3, #64	; 0x40
 800f2ae:	d107      	bne.n	800f2c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f2b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 fa0e 	bl	800f6dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	f003 0320 	and.w	r3, r3, #32
 800f2ca:	2b20      	cmp	r3, #32
 800f2cc:	d10e      	bne.n	800f2ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	f003 0320 	and.w	r3, r3, #32
 800f2d8:	2b20      	cmp	r3, #32
 800f2da:	d107      	bne.n	800f2ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f06f 0220 	mvn.w	r2, #32
 800f2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 fea6 	bl	8010038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f2ec:	bf00      	nop
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f306:	2b01      	cmp	r3, #1
 800f308:	d101      	bne.n	800f30e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f30a:	2302      	movs	r3, #2
 800f30c:	e0fd      	b.n	800f50a <HAL_TIM_PWM_ConfigChannel+0x216>
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2201      	movs	r2, #1
 800f312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2b14      	cmp	r3, #20
 800f31a:	f200 80f0 	bhi.w	800f4fe <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f31e:	a201      	add	r2, pc, #4	; (adr r2, 800f324 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f324:	0800f379 	.word	0x0800f379
 800f328:	0800f4ff 	.word	0x0800f4ff
 800f32c:	0800f4ff 	.word	0x0800f4ff
 800f330:	0800f4ff 	.word	0x0800f4ff
 800f334:	0800f3b9 	.word	0x0800f3b9
 800f338:	0800f4ff 	.word	0x0800f4ff
 800f33c:	0800f4ff 	.word	0x0800f4ff
 800f340:	0800f4ff 	.word	0x0800f4ff
 800f344:	0800f3fb 	.word	0x0800f3fb
 800f348:	0800f4ff 	.word	0x0800f4ff
 800f34c:	0800f4ff 	.word	0x0800f4ff
 800f350:	0800f4ff 	.word	0x0800f4ff
 800f354:	0800f43b 	.word	0x0800f43b
 800f358:	0800f4ff 	.word	0x0800f4ff
 800f35c:	0800f4ff 	.word	0x0800f4ff
 800f360:	0800f4ff 	.word	0x0800f4ff
 800f364:	0800f47d 	.word	0x0800f47d
 800f368:	0800f4ff 	.word	0x0800f4ff
 800f36c:	0800f4ff 	.word	0x0800f4ff
 800f370:	0800f4ff 	.word	0x0800f4ff
 800f374:	0800f4bd 	.word	0x0800f4bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68b9      	ldr	r1, [r7, #8]
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 fa56 	bl	800f830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	699a      	ldr	r2, [r3, #24]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f042 0208 	orr.w	r2, r2, #8
 800f392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	699a      	ldr	r2, [r3, #24]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f022 0204 	bic.w	r2, r2, #4
 800f3a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	6999      	ldr	r1, [r3, #24]
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	691a      	ldr	r2, [r3, #16]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	430a      	orrs	r2, r1
 800f3b4:	619a      	str	r2, [r3, #24]
      break;
 800f3b6:	e0a3      	b.n	800f500 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	68b9      	ldr	r1, [r7, #8]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 faa8 	bl	800f914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	699a      	ldr	r2, [r3, #24]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	699a      	ldr	r2, [r3, #24]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	6999      	ldr	r1, [r3, #24]
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	691b      	ldr	r3, [r3, #16]
 800f3ee:	021a      	lsls	r2, r3, #8
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	430a      	orrs	r2, r1
 800f3f6:	619a      	str	r2, [r3, #24]
      break;
 800f3f8:	e082      	b.n	800f500 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	68b9      	ldr	r1, [r7, #8]
 800f400:	4618      	mov	r0, r3
 800f402:	f000 faff 	bl	800fa04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	69da      	ldr	r2, [r3, #28]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	f042 0208 	orr.w	r2, r2, #8
 800f414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	69da      	ldr	r2, [r3, #28]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f022 0204 	bic.w	r2, r2, #4
 800f424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	69d9      	ldr	r1, [r3, #28]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	691a      	ldr	r2, [r3, #16]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	430a      	orrs	r2, r1
 800f436:	61da      	str	r2, [r3, #28]
      break;
 800f438:	e062      	b.n	800f500 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	68b9      	ldr	r1, [r7, #8]
 800f440:	4618      	mov	r0, r3
 800f442:	f000 fb55 	bl	800faf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	69da      	ldr	r2, [r3, #28]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	69da      	ldr	r2, [r3, #28]
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	69d9      	ldr	r1, [r3, #28]
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	691b      	ldr	r3, [r3, #16]
 800f470:	021a      	lsls	r2, r3, #8
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	430a      	orrs	r2, r1
 800f478:	61da      	str	r2, [r3, #28]
      break;
 800f47a:	e041      	b.n	800f500 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	68b9      	ldr	r1, [r7, #8]
 800f482:	4618      	mov	r0, r3
 800f484:	f000 fb8c 	bl	800fba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f042 0208 	orr.w	r2, r2, #8
 800f496:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f022 0204 	bic.w	r2, r2, #4
 800f4a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	691a      	ldr	r2, [r3, #16]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	430a      	orrs	r2, r1
 800f4b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f4ba:	e021      	b.n	800f500 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	68b9      	ldr	r1, [r7, #8]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 fbbe 	bl	800fc44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	691b      	ldr	r3, [r3, #16]
 800f4f2:	021a      	lsls	r2, r3, #8
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	430a      	orrs	r2, r1
 800f4fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f4fc:	e000      	b.n	800f500 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f4fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2200      	movs	r2, #0
 800f504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f508:	2300      	movs	r3, #0
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3710      	adds	r7, #16
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop

0800f514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f524:	2b01      	cmp	r3, #1
 800f526:	d101      	bne.n	800f52c <HAL_TIM_ConfigClockSource+0x18>
 800f528:	2302      	movs	r3, #2
 800f52a:	e0b3      	b.n	800f694 <HAL_TIM_ConfigClockSource+0x180>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2201      	movs	r2, #1
 800f530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2202      	movs	r2, #2
 800f538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	4b55      	ldr	r3, [pc, #340]	; (800f69c <HAL_TIM_ConfigClockSource+0x188>)
 800f548:	4013      	ands	r3, r2
 800f54a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f552:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68fa      	ldr	r2, [r7, #12]
 800f55a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f564:	d03e      	beq.n	800f5e4 <HAL_TIM_ConfigClockSource+0xd0>
 800f566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f56a:	f200 8087 	bhi.w	800f67c <HAL_TIM_ConfigClockSource+0x168>
 800f56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f572:	f000 8085 	beq.w	800f680 <HAL_TIM_ConfigClockSource+0x16c>
 800f576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f57a:	d87f      	bhi.n	800f67c <HAL_TIM_ConfigClockSource+0x168>
 800f57c:	2b70      	cmp	r3, #112	; 0x70
 800f57e:	d01a      	beq.n	800f5b6 <HAL_TIM_ConfigClockSource+0xa2>
 800f580:	2b70      	cmp	r3, #112	; 0x70
 800f582:	d87b      	bhi.n	800f67c <HAL_TIM_ConfigClockSource+0x168>
 800f584:	2b60      	cmp	r3, #96	; 0x60
 800f586:	d050      	beq.n	800f62a <HAL_TIM_ConfigClockSource+0x116>
 800f588:	2b60      	cmp	r3, #96	; 0x60
 800f58a:	d877      	bhi.n	800f67c <HAL_TIM_ConfigClockSource+0x168>
 800f58c:	2b50      	cmp	r3, #80	; 0x50
 800f58e:	d03c      	beq.n	800f60a <HAL_TIM_ConfigClockSource+0xf6>
 800f590:	2b50      	cmp	r3, #80	; 0x50
 800f592:	d873      	bhi.n	800f67c <HAL_TIM_ConfigClockSource+0x168>
 800f594:	2b40      	cmp	r3, #64	; 0x40
 800f596:	d058      	beq.n	800f64a <HAL_TIM_ConfigClockSource+0x136>
 800f598:	2b40      	cmp	r3, #64	; 0x40
 800f59a:	d86f      	bhi.n	800f67c <HAL_TIM_ConfigClockSource+0x168>
 800f59c:	2b30      	cmp	r3, #48	; 0x30
 800f59e:	d064      	beq.n	800f66a <HAL_TIM_ConfigClockSource+0x156>
 800f5a0:	2b30      	cmp	r3, #48	; 0x30
 800f5a2:	d86b      	bhi.n	800f67c <HAL_TIM_ConfigClockSource+0x168>
 800f5a4:	2b20      	cmp	r3, #32
 800f5a6:	d060      	beq.n	800f66a <HAL_TIM_ConfigClockSource+0x156>
 800f5a8:	2b20      	cmp	r3, #32
 800f5aa:	d867      	bhi.n	800f67c <HAL_TIM_ConfigClockSource+0x168>
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d05c      	beq.n	800f66a <HAL_TIM_ConfigClockSource+0x156>
 800f5b0:	2b10      	cmp	r3, #16
 800f5b2:	d05a      	beq.n	800f66a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f5b4:	e062      	b.n	800f67c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6818      	ldr	r0, [r3, #0]
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	6899      	ldr	r1, [r3, #8]
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	685a      	ldr	r2, [r3, #4]
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	f000 fc0b 	bl	800fde0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f5d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	609a      	str	r2, [r3, #8]
      break;
 800f5e2:	e04e      	b.n	800f682 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6818      	ldr	r0, [r3, #0]
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	6899      	ldr	r1, [r3, #8]
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	685a      	ldr	r2, [r3, #4]
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	f000 fbf4 	bl	800fde0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	689a      	ldr	r2, [r3, #8]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f606:	609a      	str	r2, [r3, #8]
      break;
 800f608:	e03b      	b.n	800f682 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6818      	ldr	r0, [r3, #0]
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	6859      	ldr	r1, [r3, #4]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	461a      	mov	r2, r3
 800f618:	f000 fb68 	bl	800fcec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2150      	movs	r1, #80	; 0x50
 800f622:	4618      	mov	r0, r3
 800f624:	f000 fbc1 	bl	800fdaa <TIM_ITRx_SetConfig>
      break;
 800f628:	e02b      	b.n	800f682 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6818      	ldr	r0, [r3, #0]
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	6859      	ldr	r1, [r3, #4]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	461a      	mov	r2, r3
 800f638:	f000 fb87 	bl	800fd4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2160      	movs	r1, #96	; 0x60
 800f642:	4618      	mov	r0, r3
 800f644:	f000 fbb1 	bl	800fdaa <TIM_ITRx_SetConfig>
      break;
 800f648:	e01b      	b.n	800f682 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6818      	ldr	r0, [r3, #0]
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	6859      	ldr	r1, [r3, #4]
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	461a      	mov	r2, r3
 800f658:	f000 fb48 	bl	800fcec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2140      	movs	r1, #64	; 0x40
 800f662:	4618      	mov	r0, r3
 800f664:	f000 fba1 	bl	800fdaa <TIM_ITRx_SetConfig>
      break;
 800f668:	e00b      	b.n	800f682 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	4619      	mov	r1, r3
 800f674:	4610      	mov	r0, r2
 800f676:	f000 fb98 	bl	800fdaa <TIM_ITRx_SetConfig>
        break;
 800f67a:	e002      	b.n	800f682 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f67c:	bf00      	nop
 800f67e:	e000      	b.n	800f682 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f680:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2201      	movs	r2, #1
 800f686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f692:	2300      	movs	r3, #0
}
 800f694:	4618      	mov	r0, r3
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	fffeff88 	.word	0xfffeff88

0800f6a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b083      	sub	sp, #12
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f6a8:	bf00      	nop
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f6bc:	bf00      	nop
 800f6be:	370c      	adds	r7, #12
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6d0:	bf00      	nop
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr

0800f6dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6e4:	bf00      	nop
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b085      	sub	sp, #20
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a40      	ldr	r2, [pc, #256]	; (800f804 <TIM_Base_SetConfig+0x114>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d013      	beq.n	800f730 <TIM_Base_SetConfig+0x40>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f70e:	d00f      	beq.n	800f730 <TIM_Base_SetConfig+0x40>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4a3d      	ldr	r2, [pc, #244]	; (800f808 <TIM_Base_SetConfig+0x118>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d00b      	beq.n	800f730 <TIM_Base_SetConfig+0x40>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a3c      	ldr	r2, [pc, #240]	; (800f80c <TIM_Base_SetConfig+0x11c>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d007      	beq.n	800f730 <TIM_Base_SetConfig+0x40>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a3b      	ldr	r2, [pc, #236]	; (800f810 <TIM_Base_SetConfig+0x120>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d003      	beq.n	800f730 <TIM_Base_SetConfig+0x40>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a3a      	ldr	r2, [pc, #232]	; (800f814 <TIM_Base_SetConfig+0x124>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d108      	bne.n	800f742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	4313      	orrs	r3, r2
 800f740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a2f      	ldr	r2, [pc, #188]	; (800f804 <TIM_Base_SetConfig+0x114>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d02b      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f750:	d027      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a2c      	ldr	r2, [pc, #176]	; (800f808 <TIM_Base_SetConfig+0x118>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d023      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a2b      	ldr	r2, [pc, #172]	; (800f80c <TIM_Base_SetConfig+0x11c>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d01f      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4a2a      	ldr	r2, [pc, #168]	; (800f810 <TIM_Base_SetConfig+0x120>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d01b      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	4a29      	ldr	r2, [pc, #164]	; (800f814 <TIM_Base_SetConfig+0x124>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d017      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4a28      	ldr	r2, [pc, #160]	; (800f818 <TIM_Base_SetConfig+0x128>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d013      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a27      	ldr	r2, [pc, #156]	; (800f81c <TIM_Base_SetConfig+0x12c>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d00f      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4a26      	ldr	r2, [pc, #152]	; (800f820 <TIM_Base_SetConfig+0x130>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d00b      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4a25      	ldr	r2, [pc, #148]	; (800f824 <TIM_Base_SetConfig+0x134>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d007      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a24      	ldr	r2, [pc, #144]	; (800f828 <TIM_Base_SetConfig+0x138>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d003      	beq.n	800f7a2 <TIM_Base_SetConfig+0xb2>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a23      	ldr	r2, [pc, #140]	; (800f82c <TIM_Base_SetConfig+0x13c>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d108      	bne.n	800f7b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	695b      	ldr	r3, [r3, #20]
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	689a      	ldr	r2, [r3, #8]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	4a0a      	ldr	r2, [pc, #40]	; (800f804 <TIM_Base_SetConfig+0x114>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d003      	beq.n	800f7e8 <TIM_Base_SetConfig+0xf8>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a0c      	ldr	r2, [pc, #48]	; (800f814 <TIM_Base_SetConfig+0x124>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d103      	bne.n	800f7f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	691a      	ldr	r2, [r3, #16]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	615a      	str	r2, [r3, #20]
}
 800f7f6:	bf00      	nop
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	40010000 	.word	0x40010000
 800f808:	40000400 	.word	0x40000400
 800f80c:	40000800 	.word	0x40000800
 800f810:	40000c00 	.word	0x40000c00
 800f814:	40010400 	.word	0x40010400
 800f818:	40014000 	.word	0x40014000
 800f81c:	40014400 	.word	0x40014400
 800f820:	40014800 	.word	0x40014800
 800f824:	40001800 	.word	0x40001800
 800f828:	40001c00 	.word	0x40001c00
 800f82c:	40002000 	.word	0x40002000

0800f830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f830:	b480      	push	{r7}
 800f832:	b087      	sub	sp, #28
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	f023 0201 	bic.w	r2, r3, #1
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6a1b      	ldr	r3, [r3, #32]
 800f84a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	699b      	ldr	r3, [r3, #24]
 800f856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f858:	68fa      	ldr	r2, [r7, #12]
 800f85a:	4b2b      	ldr	r3, [pc, #172]	; (800f908 <TIM_OC1_SetConfig+0xd8>)
 800f85c:	4013      	ands	r3, r2
 800f85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f023 0303 	bic.w	r3, r3, #3
 800f866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	68fa      	ldr	r2, [r7, #12]
 800f86e:	4313      	orrs	r3, r2
 800f870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	f023 0302 	bic.w	r3, r3, #2
 800f878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	697a      	ldr	r2, [r7, #20]
 800f880:	4313      	orrs	r3, r2
 800f882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a21      	ldr	r2, [pc, #132]	; (800f90c <TIM_OC1_SetConfig+0xdc>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d003      	beq.n	800f894 <TIM_OC1_SetConfig+0x64>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4a20      	ldr	r2, [pc, #128]	; (800f910 <TIM_OC1_SetConfig+0xe0>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d10c      	bne.n	800f8ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	f023 0308 	bic.w	r3, r3, #8
 800f89a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	697a      	ldr	r2, [r7, #20]
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f023 0304 	bic.w	r3, r3, #4
 800f8ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a16      	ldr	r2, [pc, #88]	; (800f90c <TIM_OC1_SetConfig+0xdc>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d003      	beq.n	800f8be <TIM_OC1_SetConfig+0x8e>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a15      	ldr	r2, [pc, #84]	; (800f910 <TIM_OC1_SetConfig+0xe0>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d111      	bne.n	800f8e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	695b      	ldr	r3, [r3, #20]
 800f8d2:	693a      	ldr	r2, [r7, #16]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	699b      	ldr	r3, [r3, #24]
 800f8dc:	693a      	ldr	r2, [r7, #16]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	685a      	ldr	r2, [r3, #4]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	697a      	ldr	r2, [r7, #20]
 800f8fa:	621a      	str	r2, [r3, #32]
}
 800f8fc:	bf00      	nop
 800f8fe:	371c      	adds	r7, #28
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr
 800f908:	fffeff8f 	.word	0xfffeff8f
 800f90c:	40010000 	.word	0x40010000
 800f910:	40010400 	.word	0x40010400

0800f914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f914:	b480      	push	{r7}
 800f916:	b087      	sub	sp, #28
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a1b      	ldr	r3, [r3, #32]
 800f922:	f023 0210 	bic.w	r2, r3, #16
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a1b      	ldr	r3, [r3, #32]
 800f92e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	699b      	ldr	r3, [r3, #24]
 800f93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	4b2e      	ldr	r3, [pc, #184]	; (800f9f8 <TIM_OC2_SetConfig+0xe4>)
 800f940:	4013      	ands	r3, r2
 800f942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f94a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	021b      	lsls	r3, r3, #8
 800f952:	68fa      	ldr	r2, [r7, #12]
 800f954:	4313      	orrs	r3, r2
 800f956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	f023 0320 	bic.w	r3, r3, #32
 800f95e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	011b      	lsls	r3, r3, #4
 800f966:	697a      	ldr	r2, [r7, #20]
 800f968:	4313      	orrs	r3, r2
 800f96a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a23      	ldr	r2, [pc, #140]	; (800f9fc <TIM_OC2_SetConfig+0xe8>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d003      	beq.n	800f97c <TIM_OC2_SetConfig+0x68>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4a22      	ldr	r2, [pc, #136]	; (800fa00 <TIM_OC2_SetConfig+0xec>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d10d      	bne.n	800f998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	68db      	ldr	r3, [r3, #12]
 800f988:	011b      	lsls	r3, r3, #4
 800f98a:	697a      	ldr	r2, [r7, #20]
 800f98c:	4313      	orrs	r3, r2
 800f98e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4a18      	ldr	r2, [pc, #96]	; (800f9fc <TIM_OC2_SetConfig+0xe8>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d003      	beq.n	800f9a8 <TIM_OC2_SetConfig+0x94>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	4a17      	ldr	r2, [pc, #92]	; (800fa00 <TIM_OC2_SetConfig+0xec>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d113      	bne.n	800f9d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	695b      	ldr	r3, [r3, #20]
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	699b      	ldr	r3, [r3, #24]
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	693a      	ldr	r2, [r7, #16]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	685a      	ldr	r2, [r3, #4]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	697a      	ldr	r2, [r7, #20]
 800f9e8:	621a      	str	r2, [r3, #32]
}
 800f9ea:	bf00      	nop
 800f9ec:	371c      	adds	r7, #28
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	feff8fff 	.word	0xfeff8fff
 800f9fc:	40010000 	.word	0x40010000
 800fa00:	40010400 	.word	0x40010400

0800fa04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b087      	sub	sp, #28
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a1b      	ldr	r3, [r3, #32]
 800fa12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6a1b      	ldr	r3, [r3, #32]
 800fa1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	69db      	ldr	r3, [r3, #28]
 800fa2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	4b2d      	ldr	r3, [pc, #180]	; (800fae4 <TIM_OC3_SetConfig+0xe0>)
 800fa30:	4013      	ands	r3, r2
 800fa32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f023 0303 	bic.w	r3, r3, #3
 800fa3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	021b      	lsls	r3, r3, #8
 800fa54:	697a      	ldr	r2, [r7, #20]
 800fa56:	4313      	orrs	r3, r2
 800fa58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a22      	ldr	r2, [pc, #136]	; (800fae8 <TIM_OC3_SetConfig+0xe4>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d003      	beq.n	800fa6a <TIM_OC3_SetConfig+0x66>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a21      	ldr	r2, [pc, #132]	; (800faec <TIM_OC3_SetConfig+0xe8>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d10d      	bne.n	800fa86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	021b      	lsls	r3, r3, #8
 800fa78:	697a      	ldr	r2, [r7, #20]
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4a17      	ldr	r2, [pc, #92]	; (800fae8 <TIM_OC3_SetConfig+0xe4>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d003      	beq.n	800fa96 <TIM_OC3_SetConfig+0x92>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a16      	ldr	r2, [pc, #88]	; (800faec <TIM_OC3_SetConfig+0xe8>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d113      	bne.n	800fabe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800faa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	695b      	ldr	r3, [r3, #20]
 800faaa:	011b      	lsls	r3, r3, #4
 800faac:	693a      	ldr	r2, [r7, #16]
 800faae:	4313      	orrs	r3, r2
 800fab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	699b      	ldr	r3, [r3, #24]
 800fab6:	011b      	lsls	r3, r3, #4
 800fab8:	693a      	ldr	r2, [r7, #16]
 800faba:	4313      	orrs	r3, r2
 800fabc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	693a      	ldr	r2, [r7, #16]
 800fac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	68fa      	ldr	r2, [r7, #12]
 800fac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	685a      	ldr	r2, [r3, #4]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	621a      	str	r2, [r3, #32]
}
 800fad8:	bf00      	nop
 800fada:	371c      	adds	r7, #28
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr
 800fae4:	fffeff8f 	.word	0xfffeff8f
 800fae8:	40010000 	.word	0x40010000
 800faec:	40010400 	.word	0x40010400

0800faf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b087      	sub	sp, #28
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6a1b      	ldr	r3, [r3, #32]
 800fafe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6a1b      	ldr	r3, [r3, #32]
 800fb0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	69db      	ldr	r3, [r3, #28]
 800fb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	4b1e      	ldr	r3, [pc, #120]	; (800fb94 <TIM_OC4_SetConfig+0xa4>)
 800fb1c:	4013      	ands	r3, r2
 800fb1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	021b      	lsls	r3, r3, #8
 800fb2e:	68fa      	ldr	r2, [r7, #12]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	689b      	ldr	r3, [r3, #8]
 800fb40:	031b      	lsls	r3, r3, #12
 800fb42:	693a      	ldr	r2, [r7, #16]
 800fb44:	4313      	orrs	r3, r2
 800fb46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a13      	ldr	r2, [pc, #76]	; (800fb98 <TIM_OC4_SetConfig+0xa8>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d003      	beq.n	800fb58 <TIM_OC4_SetConfig+0x68>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4a12      	ldr	r2, [pc, #72]	; (800fb9c <TIM_OC4_SetConfig+0xac>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d109      	bne.n	800fb6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	019b      	lsls	r3, r3, #6
 800fb66:	697a      	ldr	r2, [r7, #20]
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	697a      	ldr	r2, [r7, #20]
 800fb70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	685a      	ldr	r2, [r3, #4]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	693a      	ldr	r2, [r7, #16]
 800fb84:	621a      	str	r2, [r3, #32]
}
 800fb86:	bf00      	nop
 800fb88:	371c      	adds	r7, #28
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	feff8fff 	.word	0xfeff8fff
 800fb98:	40010000 	.word	0x40010000
 800fb9c:	40010400 	.word	0x40010400

0800fba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b087      	sub	sp, #28
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6a1b      	ldr	r3, [r3, #32]
 800fbae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fbc8:	68fa      	ldr	r2, [r7, #12]
 800fbca:	4b1b      	ldr	r3, [pc, #108]	; (800fc38 <TIM_OC5_SetConfig+0x98>)
 800fbcc:	4013      	ands	r3, r2
 800fbce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fbe0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	041b      	lsls	r3, r3, #16
 800fbe8:	693a      	ldr	r2, [r7, #16]
 800fbea:	4313      	orrs	r3, r2
 800fbec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4a12      	ldr	r2, [pc, #72]	; (800fc3c <TIM_OC5_SetConfig+0x9c>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d003      	beq.n	800fbfe <TIM_OC5_SetConfig+0x5e>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4a11      	ldr	r2, [pc, #68]	; (800fc40 <TIM_OC5_SetConfig+0xa0>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d109      	bne.n	800fc12 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	695b      	ldr	r3, [r3, #20]
 800fc0a:	021b      	lsls	r3, r3, #8
 800fc0c:	697a      	ldr	r2, [r7, #20]
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	697a      	ldr	r2, [r7, #20]
 800fc16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	693a      	ldr	r2, [r7, #16]
 800fc2a:	621a      	str	r2, [r3, #32]
}
 800fc2c:	bf00      	nop
 800fc2e:	371c      	adds	r7, #28
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr
 800fc38:	fffeff8f 	.word	0xfffeff8f
 800fc3c:	40010000 	.word	0x40010000
 800fc40:	40010400 	.word	0x40010400

0800fc44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b087      	sub	sp, #28
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6a1b      	ldr	r3, [r3, #32]
 800fc52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a1b      	ldr	r3, [r3, #32]
 800fc5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	4b1c      	ldr	r3, [pc, #112]	; (800fce0 <TIM_OC6_SetConfig+0x9c>)
 800fc70:	4013      	ands	r3, r2
 800fc72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	021b      	lsls	r3, r3, #8
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	689b      	ldr	r3, [r3, #8]
 800fc8c:	051b      	lsls	r3, r3, #20
 800fc8e:	693a      	ldr	r2, [r7, #16]
 800fc90:	4313      	orrs	r3, r2
 800fc92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4a13      	ldr	r2, [pc, #76]	; (800fce4 <TIM_OC6_SetConfig+0xa0>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d003      	beq.n	800fca4 <TIM_OC6_SetConfig+0x60>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	4a12      	ldr	r2, [pc, #72]	; (800fce8 <TIM_OC6_SetConfig+0xa4>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d109      	bne.n	800fcb8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fcaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	695b      	ldr	r3, [r3, #20]
 800fcb0:	029b      	lsls	r3, r3, #10
 800fcb2:	697a      	ldr	r2, [r7, #20]
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	697a      	ldr	r2, [r7, #20]
 800fcbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	68fa      	ldr	r2, [r7, #12]
 800fcc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	685a      	ldr	r2, [r3, #4]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	693a      	ldr	r2, [r7, #16]
 800fcd0:	621a      	str	r2, [r3, #32]
}
 800fcd2:	bf00      	nop
 800fcd4:	371c      	adds	r7, #28
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	feff8fff 	.word	0xfeff8fff
 800fce4:	40010000 	.word	0x40010000
 800fce8:	40010400 	.word	0x40010400

0800fcec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b087      	sub	sp, #28
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	6a1b      	ldr	r3, [r3, #32]
 800fcfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	6a1b      	ldr	r3, [r3, #32]
 800fd02:	f023 0201 	bic.w	r2, r3, #1
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	699b      	ldr	r3, [r3, #24]
 800fd0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	011b      	lsls	r3, r3, #4
 800fd1c:	693a      	ldr	r2, [r7, #16]
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	f023 030a 	bic.w	r3, r3, #10
 800fd28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	693a      	ldr	r2, [r7, #16]
 800fd36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	697a      	ldr	r2, [r7, #20]
 800fd3c:	621a      	str	r2, [r3, #32]
}
 800fd3e:	bf00      	nop
 800fd40:	371c      	adds	r7, #28
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr

0800fd4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd4a:	b480      	push	{r7}
 800fd4c:	b087      	sub	sp, #28
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	60f8      	str	r0, [r7, #12]
 800fd52:	60b9      	str	r1, [r7, #8]
 800fd54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6a1b      	ldr	r3, [r3, #32]
 800fd5a:	f023 0210 	bic.w	r2, r3, #16
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	699b      	ldr	r3, [r3, #24]
 800fd66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6a1b      	ldr	r3, [r3, #32]
 800fd6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	031b      	lsls	r3, r3, #12
 800fd7a:	697a      	ldr	r2, [r7, #20]
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fd86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	011b      	lsls	r3, r3, #4
 800fd8c:	693a      	ldr	r2, [r7, #16]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	697a      	ldr	r2, [r7, #20]
 800fd96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	693a      	ldr	r2, [r7, #16]
 800fd9c:	621a      	str	r2, [r3, #32]
}
 800fd9e:	bf00      	nop
 800fda0:	371c      	adds	r7, #28
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr

0800fdaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fdaa:	b480      	push	{r7}
 800fdac:	b085      	sub	sp, #20
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
 800fdb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	689b      	ldr	r3, [r3, #8]
 800fdb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fdc2:	683a      	ldr	r2, [r7, #0]
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	f043 0307 	orr.w	r3, r3, #7
 800fdcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	609a      	str	r2, [r3, #8]
}
 800fdd4:	bf00      	nop
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b087      	sub	sp, #28
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
 800fdec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	689b      	ldr	r3, [r3, #8]
 800fdf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fdfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	021a      	lsls	r2, r3, #8
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	431a      	orrs	r2, r3
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	697a      	ldr	r2, [r7, #20]
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	697a      	ldr	r2, [r7, #20]
 800fe12:	609a      	str	r2, [r3, #8]
}
 800fe14:	bf00      	nop
 800fe16:	371c      	adds	r7, #28
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d101      	bne.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe34:	2302      	movs	r3, #2
 800fe36:	e06d      	b.n	800ff14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2202      	movs	r2, #2
 800fe44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a30      	ldr	r2, [pc, #192]	; (800ff20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d004      	beq.n	800fe6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4a2f      	ldr	r2, [pc, #188]	; (800ff24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d108      	bne.n	800fe7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fe72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	68fa      	ldr	r2, [r7, #12]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	68fa      	ldr	r2, [r7, #12]
 800fe96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4a20      	ldr	r2, [pc, #128]	; (800ff20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d022      	beq.n	800fee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800feaa:	d01d      	beq.n	800fee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a1d      	ldr	r2, [pc, #116]	; (800ff28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d018      	beq.n	800fee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a1c      	ldr	r2, [pc, #112]	; (800ff2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d013      	beq.n	800fee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a1a      	ldr	r2, [pc, #104]	; (800ff30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d00e      	beq.n	800fee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a15      	ldr	r2, [pc, #84]	; (800ff24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d009      	beq.n	800fee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a16      	ldr	r2, [pc, #88]	; (800ff34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d004      	beq.n	800fee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	4a15      	ldr	r2, [pc, #84]	; (800ff38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fee4:	4293      	cmp	r3, r2
 800fee6:	d10c      	bne.n	800ff02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800feee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	68ba      	ldr	r2, [r7, #8]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	68ba      	ldr	r2, [r7, #8]
 800ff00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2201      	movs	r2, #1
 800ff06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr
 800ff20:	40010000 	.word	0x40010000
 800ff24:	40010400 	.word	0x40010400
 800ff28:	40000400 	.word	0x40000400
 800ff2c:	40000800 	.word	0x40000800
 800ff30:	40000c00 	.word	0x40000c00
 800ff34:	40014000 	.word	0x40014000
 800ff38:	40001800 	.word	0x40001800

0800ff3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ff46:	2300      	movs	r3, #0
 800ff48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d101      	bne.n	800ff58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ff54:	2302      	movs	r3, #2
 800ff56:	e065      	b.n	8010024 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	689b      	ldr	r3, [r3, #8]
 800ff78:	4313      	orrs	r3, r2
 800ff7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	4313      	orrs	r3, r2
 800ff88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4313      	orrs	r3, r2
 800ff96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	695b      	ldr	r3, [r3, #20]
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	699b      	ldr	r3, [r3, #24]
 800ffcc:	041b      	lsls	r3, r3, #16
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a16      	ldr	r2, [pc, #88]	; (8010030 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d004      	beq.n	800ffe6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a14      	ldr	r2, [pc, #80]	; (8010034 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d115      	bne.n	8010012 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff0:	051b      	lsls	r3, r3, #20
 800fff2:	4313      	orrs	r3, r2
 800fff4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	69db      	ldr	r3, [r3, #28]
 8010000:	4313      	orrs	r3, r2
 8010002:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	6a1b      	ldr	r3, [r3, #32]
 801000e:	4313      	orrs	r3, r2
 8010010:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2200      	movs	r2, #0
 801001e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010022:	2300      	movs	r3, #0
}
 8010024:	4618      	mov	r0, r3
 8010026:	3714      	adds	r7, #20
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr
 8010030:	40010000 	.word	0x40010000
 8010034:	40010400 	.word	0x40010400

08010038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010068:	bf00      	nop
 801006a:	370c      	adds	r7, #12
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d101      	bne.n	8010086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010082:	2301      	movs	r3, #1
 8010084:	e040      	b.n	8010108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801008a:	2b00      	cmp	r3, #0
 801008c:	d106      	bne.n	801009c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2200      	movs	r2, #0
 8010092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7f3 face 	bl	8003638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2224      	movs	r2, #36	; 0x24
 80100a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f022 0201 	bic.w	r2, r2, #1
 80100b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 f8c0 	bl	8010238 <UART_SetConfig>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d101      	bne.n	80100c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80100be:	2301      	movs	r3, #1
 80100c0:	e022      	b.n	8010108 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d002      	beq.n	80100d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f000 fb18 	bl	8010700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	685a      	ldr	r2, [r3, #4]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80100de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	689a      	ldr	r2, [r3, #8]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80100ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f042 0201 	orr.w	r2, r2, #1
 80100fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 fb9f 	bl	8010844 <UART_CheckIdleState>
 8010106:	4603      	mov	r3, r0
}
 8010108:	4618      	mov	r0, r3
 801010a:	3708      	adds	r7, #8
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b08a      	sub	sp, #40	; 0x28
 8010114:	af02      	add	r7, sp, #8
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	603b      	str	r3, [r7, #0]
 801011c:	4613      	mov	r3, r2
 801011e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010124:	2b20      	cmp	r3, #32
 8010126:	f040 8081 	bne.w	801022c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d002      	beq.n	8010136 <HAL_UART_Transmit+0x26>
 8010130:	88fb      	ldrh	r3, [r7, #6]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d101      	bne.n	801013a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010136:	2301      	movs	r3, #1
 8010138:	e079      	b.n	801022e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010140:	2b01      	cmp	r3, #1
 8010142:	d101      	bne.n	8010148 <HAL_UART_Transmit+0x38>
 8010144:	2302      	movs	r3, #2
 8010146:	e072      	b.n	801022e <HAL_UART_Transmit+0x11e>
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2201      	movs	r2, #1
 801014c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2200      	movs	r2, #0
 8010154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2221      	movs	r2, #33	; 0x21
 801015c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801015e:	f7f5 fc85 	bl	8005a6c <HAL_GetTick>
 8010162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	88fa      	ldrh	r2, [r7, #6]
 8010168:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	88fa      	ldrh	r2, [r7, #6]
 8010170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	689b      	ldr	r3, [r3, #8]
 8010178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801017c:	d108      	bne.n	8010190 <HAL_UART_Transmit+0x80>
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	691b      	ldr	r3, [r3, #16]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d104      	bne.n	8010190 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8010186:	2300      	movs	r3, #0
 8010188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	61bb      	str	r3, [r7, #24]
 801018e:	e003      	b.n	8010198 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010194:	2300      	movs	r3, #0
 8010196:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2200      	movs	r2, #0
 801019c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80101a0:	e02c      	b.n	80101fc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	2200      	movs	r2, #0
 80101aa:	2180      	movs	r1, #128	; 0x80
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f000 fb7c 	bl	80108aa <UART_WaitOnFlagUntilTimeout>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d001      	beq.n	80101bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80101b8:	2303      	movs	r3, #3
 80101ba:	e038      	b.n	801022e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d10b      	bne.n	80101da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	461a      	mov	r2, r3
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80101d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80101d2:	69bb      	ldr	r3, [r7, #24]
 80101d4:	3302      	adds	r3, #2
 80101d6:	61bb      	str	r3, [r7, #24]
 80101d8:	e007      	b.n	80101ea <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	781a      	ldrb	r2, [r3, #0]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	3301      	adds	r3, #1
 80101e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	3b01      	subs	r3, #1
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010202:	b29b      	uxth	r3, r3
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1cc      	bne.n	80101a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	2200      	movs	r2, #0
 8010210:	2140      	movs	r1, #64	; 0x40
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f000 fb49 	bl	80108aa <UART_WaitOnFlagUntilTimeout>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d001      	beq.n	8010222 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 801021e:	2303      	movs	r3, #3
 8010220:	e005      	b.n	801022e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2220      	movs	r2, #32
 8010226:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8010228:	2300      	movs	r3, #0
 801022a:	e000      	b.n	801022e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 801022c:	2302      	movs	r3, #2
  }
}
 801022e:	4618      	mov	r0, r3
 8010230:	3720      	adds	r7, #32
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
	...

08010238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b088      	sub	sp, #32
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010240:	2300      	movs	r3, #0
 8010242:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	689a      	ldr	r2, [r3, #8]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	691b      	ldr	r3, [r3, #16]
 801024c:	431a      	orrs	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	695b      	ldr	r3, [r3, #20]
 8010252:	431a      	orrs	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	69db      	ldr	r3, [r3, #28]
 8010258:	4313      	orrs	r3, r2
 801025a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	4ba6      	ldr	r3, [pc, #664]	; (80104fc <UART_SetConfig+0x2c4>)
 8010264:	4013      	ands	r3, r2
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	6812      	ldr	r2, [r2, #0]
 801026a:	6979      	ldr	r1, [r7, #20]
 801026c:	430b      	orrs	r3, r1
 801026e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	68da      	ldr	r2, [r3, #12]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	430a      	orrs	r2, r1
 8010284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	699b      	ldr	r3, [r3, #24]
 801028a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	6a1b      	ldr	r3, [r3, #32]
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	4313      	orrs	r3, r2
 8010294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	697a      	ldr	r2, [r7, #20]
 80102a6:	430a      	orrs	r2, r1
 80102a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a94      	ldr	r2, [pc, #592]	; (8010500 <UART_SetConfig+0x2c8>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d120      	bne.n	80102f6 <UART_SetConfig+0xbe>
 80102b4:	4b93      	ldr	r3, [pc, #588]	; (8010504 <UART_SetConfig+0x2cc>)
 80102b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ba:	f003 0303 	and.w	r3, r3, #3
 80102be:	2b03      	cmp	r3, #3
 80102c0:	d816      	bhi.n	80102f0 <UART_SetConfig+0xb8>
 80102c2:	a201      	add	r2, pc, #4	; (adr r2, 80102c8 <UART_SetConfig+0x90>)
 80102c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102c8:	080102d9 	.word	0x080102d9
 80102cc:	080102e5 	.word	0x080102e5
 80102d0:	080102df 	.word	0x080102df
 80102d4:	080102eb 	.word	0x080102eb
 80102d8:	2301      	movs	r3, #1
 80102da:	77fb      	strb	r3, [r7, #31]
 80102dc:	e150      	b.n	8010580 <UART_SetConfig+0x348>
 80102de:	2302      	movs	r3, #2
 80102e0:	77fb      	strb	r3, [r7, #31]
 80102e2:	e14d      	b.n	8010580 <UART_SetConfig+0x348>
 80102e4:	2304      	movs	r3, #4
 80102e6:	77fb      	strb	r3, [r7, #31]
 80102e8:	e14a      	b.n	8010580 <UART_SetConfig+0x348>
 80102ea:	2308      	movs	r3, #8
 80102ec:	77fb      	strb	r3, [r7, #31]
 80102ee:	e147      	b.n	8010580 <UART_SetConfig+0x348>
 80102f0:	2310      	movs	r3, #16
 80102f2:	77fb      	strb	r3, [r7, #31]
 80102f4:	e144      	b.n	8010580 <UART_SetConfig+0x348>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a83      	ldr	r2, [pc, #524]	; (8010508 <UART_SetConfig+0x2d0>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d132      	bne.n	8010366 <UART_SetConfig+0x12e>
 8010300:	4b80      	ldr	r3, [pc, #512]	; (8010504 <UART_SetConfig+0x2cc>)
 8010302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010306:	f003 030c 	and.w	r3, r3, #12
 801030a:	2b0c      	cmp	r3, #12
 801030c:	d828      	bhi.n	8010360 <UART_SetConfig+0x128>
 801030e:	a201      	add	r2, pc, #4	; (adr r2, 8010314 <UART_SetConfig+0xdc>)
 8010310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010314:	08010349 	.word	0x08010349
 8010318:	08010361 	.word	0x08010361
 801031c:	08010361 	.word	0x08010361
 8010320:	08010361 	.word	0x08010361
 8010324:	08010355 	.word	0x08010355
 8010328:	08010361 	.word	0x08010361
 801032c:	08010361 	.word	0x08010361
 8010330:	08010361 	.word	0x08010361
 8010334:	0801034f 	.word	0x0801034f
 8010338:	08010361 	.word	0x08010361
 801033c:	08010361 	.word	0x08010361
 8010340:	08010361 	.word	0x08010361
 8010344:	0801035b 	.word	0x0801035b
 8010348:	2300      	movs	r3, #0
 801034a:	77fb      	strb	r3, [r7, #31]
 801034c:	e118      	b.n	8010580 <UART_SetConfig+0x348>
 801034e:	2302      	movs	r3, #2
 8010350:	77fb      	strb	r3, [r7, #31]
 8010352:	e115      	b.n	8010580 <UART_SetConfig+0x348>
 8010354:	2304      	movs	r3, #4
 8010356:	77fb      	strb	r3, [r7, #31]
 8010358:	e112      	b.n	8010580 <UART_SetConfig+0x348>
 801035a:	2308      	movs	r3, #8
 801035c:	77fb      	strb	r3, [r7, #31]
 801035e:	e10f      	b.n	8010580 <UART_SetConfig+0x348>
 8010360:	2310      	movs	r3, #16
 8010362:	77fb      	strb	r3, [r7, #31]
 8010364:	e10c      	b.n	8010580 <UART_SetConfig+0x348>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a68      	ldr	r2, [pc, #416]	; (801050c <UART_SetConfig+0x2d4>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d120      	bne.n	80103b2 <UART_SetConfig+0x17a>
 8010370:	4b64      	ldr	r3, [pc, #400]	; (8010504 <UART_SetConfig+0x2cc>)
 8010372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010376:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801037a:	2b30      	cmp	r3, #48	; 0x30
 801037c:	d013      	beq.n	80103a6 <UART_SetConfig+0x16e>
 801037e:	2b30      	cmp	r3, #48	; 0x30
 8010380:	d814      	bhi.n	80103ac <UART_SetConfig+0x174>
 8010382:	2b20      	cmp	r3, #32
 8010384:	d009      	beq.n	801039a <UART_SetConfig+0x162>
 8010386:	2b20      	cmp	r3, #32
 8010388:	d810      	bhi.n	80103ac <UART_SetConfig+0x174>
 801038a:	2b00      	cmp	r3, #0
 801038c:	d002      	beq.n	8010394 <UART_SetConfig+0x15c>
 801038e:	2b10      	cmp	r3, #16
 8010390:	d006      	beq.n	80103a0 <UART_SetConfig+0x168>
 8010392:	e00b      	b.n	80103ac <UART_SetConfig+0x174>
 8010394:	2300      	movs	r3, #0
 8010396:	77fb      	strb	r3, [r7, #31]
 8010398:	e0f2      	b.n	8010580 <UART_SetConfig+0x348>
 801039a:	2302      	movs	r3, #2
 801039c:	77fb      	strb	r3, [r7, #31]
 801039e:	e0ef      	b.n	8010580 <UART_SetConfig+0x348>
 80103a0:	2304      	movs	r3, #4
 80103a2:	77fb      	strb	r3, [r7, #31]
 80103a4:	e0ec      	b.n	8010580 <UART_SetConfig+0x348>
 80103a6:	2308      	movs	r3, #8
 80103a8:	77fb      	strb	r3, [r7, #31]
 80103aa:	e0e9      	b.n	8010580 <UART_SetConfig+0x348>
 80103ac:	2310      	movs	r3, #16
 80103ae:	77fb      	strb	r3, [r7, #31]
 80103b0:	e0e6      	b.n	8010580 <UART_SetConfig+0x348>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a56      	ldr	r2, [pc, #344]	; (8010510 <UART_SetConfig+0x2d8>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d120      	bne.n	80103fe <UART_SetConfig+0x1c6>
 80103bc:	4b51      	ldr	r3, [pc, #324]	; (8010504 <UART_SetConfig+0x2cc>)
 80103be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80103c6:	2bc0      	cmp	r3, #192	; 0xc0
 80103c8:	d013      	beq.n	80103f2 <UART_SetConfig+0x1ba>
 80103ca:	2bc0      	cmp	r3, #192	; 0xc0
 80103cc:	d814      	bhi.n	80103f8 <UART_SetConfig+0x1c0>
 80103ce:	2b80      	cmp	r3, #128	; 0x80
 80103d0:	d009      	beq.n	80103e6 <UART_SetConfig+0x1ae>
 80103d2:	2b80      	cmp	r3, #128	; 0x80
 80103d4:	d810      	bhi.n	80103f8 <UART_SetConfig+0x1c0>
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d002      	beq.n	80103e0 <UART_SetConfig+0x1a8>
 80103da:	2b40      	cmp	r3, #64	; 0x40
 80103dc:	d006      	beq.n	80103ec <UART_SetConfig+0x1b4>
 80103de:	e00b      	b.n	80103f8 <UART_SetConfig+0x1c0>
 80103e0:	2300      	movs	r3, #0
 80103e2:	77fb      	strb	r3, [r7, #31]
 80103e4:	e0cc      	b.n	8010580 <UART_SetConfig+0x348>
 80103e6:	2302      	movs	r3, #2
 80103e8:	77fb      	strb	r3, [r7, #31]
 80103ea:	e0c9      	b.n	8010580 <UART_SetConfig+0x348>
 80103ec:	2304      	movs	r3, #4
 80103ee:	77fb      	strb	r3, [r7, #31]
 80103f0:	e0c6      	b.n	8010580 <UART_SetConfig+0x348>
 80103f2:	2308      	movs	r3, #8
 80103f4:	77fb      	strb	r3, [r7, #31]
 80103f6:	e0c3      	b.n	8010580 <UART_SetConfig+0x348>
 80103f8:	2310      	movs	r3, #16
 80103fa:	77fb      	strb	r3, [r7, #31]
 80103fc:	e0c0      	b.n	8010580 <UART_SetConfig+0x348>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	4a44      	ldr	r2, [pc, #272]	; (8010514 <UART_SetConfig+0x2dc>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d125      	bne.n	8010454 <UART_SetConfig+0x21c>
 8010408:	4b3e      	ldr	r3, [pc, #248]	; (8010504 <UART_SetConfig+0x2cc>)
 801040a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801040e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010416:	d017      	beq.n	8010448 <UART_SetConfig+0x210>
 8010418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801041c:	d817      	bhi.n	801044e <UART_SetConfig+0x216>
 801041e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010422:	d00b      	beq.n	801043c <UART_SetConfig+0x204>
 8010424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010428:	d811      	bhi.n	801044e <UART_SetConfig+0x216>
 801042a:	2b00      	cmp	r3, #0
 801042c:	d003      	beq.n	8010436 <UART_SetConfig+0x1fe>
 801042e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010432:	d006      	beq.n	8010442 <UART_SetConfig+0x20a>
 8010434:	e00b      	b.n	801044e <UART_SetConfig+0x216>
 8010436:	2300      	movs	r3, #0
 8010438:	77fb      	strb	r3, [r7, #31]
 801043a:	e0a1      	b.n	8010580 <UART_SetConfig+0x348>
 801043c:	2302      	movs	r3, #2
 801043e:	77fb      	strb	r3, [r7, #31]
 8010440:	e09e      	b.n	8010580 <UART_SetConfig+0x348>
 8010442:	2304      	movs	r3, #4
 8010444:	77fb      	strb	r3, [r7, #31]
 8010446:	e09b      	b.n	8010580 <UART_SetConfig+0x348>
 8010448:	2308      	movs	r3, #8
 801044a:	77fb      	strb	r3, [r7, #31]
 801044c:	e098      	b.n	8010580 <UART_SetConfig+0x348>
 801044e:	2310      	movs	r3, #16
 8010450:	77fb      	strb	r3, [r7, #31]
 8010452:	e095      	b.n	8010580 <UART_SetConfig+0x348>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a2f      	ldr	r2, [pc, #188]	; (8010518 <UART_SetConfig+0x2e0>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d125      	bne.n	80104aa <UART_SetConfig+0x272>
 801045e:	4b29      	ldr	r3, [pc, #164]	; (8010504 <UART_SetConfig+0x2cc>)
 8010460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801046c:	d017      	beq.n	801049e <UART_SetConfig+0x266>
 801046e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010472:	d817      	bhi.n	80104a4 <UART_SetConfig+0x26c>
 8010474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010478:	d00b      	beq.n	8010492 <UART_SetConfig+0x25a>
 801047a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801047e:	d811      	bhi.n	80104a4 <UART_SetConfig+0x26c>
 8010480:	2b00      	cmp	r3, #0
 8010482:	d003      	beq.n	801048c <UART_SetConfig+0x254>
 8010484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010488:	d006      	beq.n	8010498 <UART_SetConfig+0x260>
 801048a:	e00b      	b.n	80104a4 <UART_SetConfig+0x26c>
 801048c:	2301      	movs	r3, #1
 801048e:	77fb      	strb	r3, [r7, #31]
 8010490:	e076      	b.n	8010580 <UART_SetConfig+0x348>
 8010492:	2302      	movs	r3, #2
 8010494:	77fb      	strb	r3, [r7, #31]
 8010496:	e073      	b.n	8010580 <UART_SetConfig+0x348>
 8010498:	2304      	movs	r3, #4
 801049a:	77fb      	strb	r3, [r7, #31]
 801049c:	e070      	b.n	8010580 <UART_SetConfig+0x348>
 801049e:	2308      	movs	r3, #8
 80104a0:	77fb      	strb	r3, [r7, #31]
 80104a2:	e06d      	b.n	8010580 <UART_SetConfig+0x348>
 80104a4:	2310      	movs	r3, #16
 80104a6:	77fb      	strb	r3, [r7, #31]
 80104a8:	e06a      	b.n	8010580 <UART_SetConfig+0x348>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4a1b      	ldr	r2, [pc, #108]	; (801051c <UART_SetConfig+0x2e4>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d138      	bne.n	8010526 <UART_SetConfig+0x2ee>
 80104b4:	4b13      	ldr	r3, [pc, #76]	; (8010504 <UART_SetConfig+0x2cc>)
 80104b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80104be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80104c2:	d017      	beq.n	80104f4 <UART_SetConfig+0x2bc>
 80104c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80104c8:	d82a      	bhi.n	8010520 <UART_SetConfig+0x2e8>
 80104ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80104ce:	d00b      	beq.n	80104e8 <UART_SetConfig+0x2b0>
 80104d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80104d4:	d824      	bhi.n	8010520 <UART_SetConfig+0x2e8>
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d003      	beq.n	80104e2 <UART_SetConfig+0x2aa>
 80104da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104de:	d006      	beq.n	80104ee <UART_SetConfig+0x2b6>
 80104e0:	e01e      	b.n	8010520 <UART_SetConfig+0x2e8>
 80104e2:	2300      	movs	r3, #0
 80104e4:	77fb      	strb	r3, [r7, #31]
 80104e6:	e04b      	b.n	8010580 <UART_SetConfig+0x348>
 80104e8:	2302      	movs	r3, #2
 80104ea:	77fb      	strb	r3, [r7, #31]
 80104ec:	e048      	b.n	8010580 <UART_SetConfig+0x348>
 80104ee:	2304      	movs	r3, #4
 80104f0:	77fb      	strb	r3, [r7, #31]
 80104f2:	e045      	b.n	8010580 <UART_SetConfig+0x348>
 80104f4:	2308      	movs	r3, #8
 80104f6:	77fb      	strb	r3, [r7, #31]
 80104f8:	e042      	b.n	8010580 <UART_SetConfig+0x348>
 80104fa:	bf00      	nop
 80104fc:	efff69f3 	.word	0xefff69f3
 8010500:	40011000 	.word	0x40011000
 8010504:	40023800 	.word	0x40023800
 8010508:	40004400 	.word	0x40004400
 801050c:	40004800 	.word	0x40004800
 8010510:	40004c00 	.word	0x40004c00
 8010514:	40005000 	.word	0x40005000
 8010518:	40011400 	.word	0x40011400
 801051c:	40007800 	.word	0x40007800
 8010520:	2310      	movs	r3, #16
 8010522:	77fb      	strb	r3, [r7, #31]
 8010524:	e02c      	b.n	8010580 <UART_SetConfig+0x348>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a72      	ldr	r2, [pc, #456]	; (80106f4 <UART_SetConfig+0x4bc>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d125      	bne.n	801057c <UART_SetConfig+0x344>
 8010530:	4b71      	ldr	r3, [pc, #452]	; (80106f8 <UART_SetConfig+0x4c0>)
 8010532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010536:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801053a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801053e:	d017      	beq.n	8010570 <UART_SetConfig+0x338>
 8010540:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010544:	d817      	bhi.n	8010576 <UART_SetConfig+0x33e>
 8010546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801054a:	d00b      	beq.n	8010564 <UART_SetConfig+0x32c>
 801054c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010550:	d811      	bhi.n	8010576 <UART_SetConfig+0x33e>
 8010552:	2b00      	cmp	r3, #0
 8010554:	d003      	beq.n	801055e <UART_SetConfig+0x326>
 8010556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801055a:	d006      	beq.n	801056a <UART_SetConfig+0x332>
 801055c:	e00b      	b.n	8010576 <UART_SetConfig+0x33e>
 801055e:	2300      	movs	r3, #0
 8010560:	77fb      	strb	r3, [r7, #31]
 8010562:	e00d      	b.n	8010580 <UART_SetConfig+0x348>
 8010564:	2302      	movs	r3, #2
 8010566:	77fb      	strb	r3, [r7, #31]
 8010568:	e00a      	b.n	8010580 <UART_SetConfig+0x348>
 801056a:	2304      	movs	r3, #4
 801056c:	77fb      	strb	r3, [r7, #31]
 801056e:	e007      	b.n	8010580 <UART_SetConfig+0x348>
 8010570:	2308      	movs	r3, #8
 8010572:	77fb      	strb	r3, [r7, #31]
 8010574:	e004      	b.n	8010580 <UART_SetConfig+0x348>
 8010576:	2310      	movs	r3, #16
 8010578:	77fb      	strb	r3, [r7, #31]
 801057a:	e001      	b.n	8010580 <UART_SetConfig+0x348>
 801057c:	2310      	movs	r3, #16
 801057e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	69db      	ldr	r3, [r3, #28]
 8010584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010588:	d15c      	bne.n	8010644 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 801058a:	7ffb      	ldrb	r3, [r7, #31]
 801058c:	2b08      	cmp	r3, #8
 801058e:	d828      	bhi.n	80105e2 <UART_SetConfig+0x3aa>
 8010590:	a201      	add	r2, pc, #4	; (adr r2, 8010598 <UART_SetConfig+0x360>)
 8010592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010596:	bf00      	nop
 8010598:	080105bd 	.word	0x080105bd
 801059c:	080105c5 	.word	0x080105c5
 80105a0:	080105cd 	.word	0x080105cd
 80105a4:	080105e3 	.word	0x080105e3
 80105a8:	080105d3 	.word	0x080105d3
 80105ac:	080105e3 	.word	0x080105e3
 80105b0:	080105e3 	.word	0x080105e3
 80105b4:	080105e3 	.word	0x080105e3
 80105b8:	080105db 	.word	0x080105db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80105bc:	f7fb fd9a 	bl	800c0f4 <HAL_RCC_GetPCLK1Freq>
 80105c0:	61b8      	str	r0, [r7, #24]
        break;
 80105c2:	e013      	b.n	80105ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80105c4:	f7fb fdaa 	bl	800c11c <HAL_RCC_GetPCLK2Freq>
 80105c8:	61b8      	str	r0, [r7, #24]
        break;
 80105ca:	e00f      	b.n	80105ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80105cc:	4b4b      	ldr	r3, [pc, #300]	; (80106fc <UART_SetConfig+0x4c4>)
 80105ce:	61bb      	str	r3, [r7, #24]
        break;
 80105d0:	e00c      	b.n	80105ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80105d2:	f7fb fcbd 	bl	800bf50 <HAL_RCC_GetSysClockFreq>
 80105d6:	61b8      	str	r0, [r7, #24]
        break;
 80105d8:	e008      	b.n	80105ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80105da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80105de:	61bb      	str	r3, [r7, #24]
        break;
 80105e0:	e004      	b.n	80105ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80105e2:	2300      	movs	r3, #0
 80105e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80105e6:	2301      	movs	r3, #1
 80105e8:	77bb      	strb	r3, [r7, #30]
        break;
 80105ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80105ec:	69bb      	ldr	r3, [r7, #24]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d074      	beq.n	80106dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80105f2:	69bb      	ldr	r3, [r7, #24]
 80105f4:	005a      	lsls	r2, r3, #1
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	085b      	lsrs	r3, r3, #1
 80105fc:	441a      	add	r2, r3
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	fbb2 f3f3 	udiv	r3, r2, r3
 8010606:	b29b      	uxth	r3, r3
 8010608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	2b0f      	cmp	r3, #15
 801060e:	d916      	bls.n	801063e <UART_SetConfig+0x406>
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010616:	d212      	bcs.n	801063e <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	b29b      	uxth	r3, r3
 801061c:	f023 030f 	bic.w	r3, r3, #15
 8010620:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	085b      	lsrs	r3, r3, #1
 8010626:	b29b      	uxth	r3, r3
 8010628:	f003 0307 	and.w	r3, r3, #7
 801062c:	b29a      	uxth	r2, r3
 801062e:	89fb      	ldrh	r3, [r7, #14]
 8010630:	4313      	orrs	r3, r2
 8010632:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	89fa      	ldrh	r2, [r7, #14]
 801063a:	60da      	str	r2, [r3, #12]
 801063c:	e04e      	b.n	80106dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801063e:	2301      	movs	r3, #1
 8010640:	77bb      	strb	r3, [r7, #30]
 8010642:	e04b      	b.n	80106dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010644:	7ffb      	ldrb	r3, [r7, #31]
 8010646:	2b08      	cmp	r3, #8
 8010648:	d827      	bhi.n	801069a <UART_SetConfig+0x462>
 801064a:	a201      	add	r2, pc, #4	; (adr r2, 8010650 <UART_SetConfig+0x418>)
 801064c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010650:	08010675 	.word	0x08010675
 8010654:	0801067d 	.word	0x0801067d
 8010658:	08010685 	.word	0x08010685
 801065c:	0801069b 	.word	0x0801069b
 8010660:	0801068b 	.word	0x0801068b
 8010664:	0801069b 	.word	0x0801069b
 8010668:	0801069b 	.word	0x0801069b
 801066c:	0801069b 	.word	0x0801069b
 8010670:	08010693 	.word	0x08010693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010674:	f7fb fd3e 	bl	800c0f4 <HAL_RCC_GetPCLK1Freq>
 8010678:	61b8      	str	r0, [r7, #24]
        break;
 801067a:	e013      	b.n	80106a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801067c:	f7fb fd4e 	bl	800c11c <HAL_RCC_GetPCLK2Freq>
 8010680:	61b8      	str	r0, [r7, #24]
        break;
 8010682:	e00f      	b.n	80106a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010684:	4b1d      	ldr	r3, [pc, #116]	; (80106fc <UART_SetConfig+0x4c4>)
 8010686:	61bb      	str	r3, [r7, #24]
        break;
 8010688:	e00c      	b.n	80106a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801068a:	f7fb fc61 	bl	800bf50 <HAL_RCC_GetSysClockFreq>
 801068e:	61b8      	str	r0, [r7, #24]
        break;
 8010690:	e008      	b.n	80106a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010696:	61bb      	str	r3, [r7, #24]
        break;
 8010698:	e004      	b.n	80106a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801069a:	2300      	movs	r3, #0
 801069c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801069e:	2301      	movs	r3, #1
 80106a0:	77bb      	strb	r3, [r7, #30]
        break;
 80106a2:	bf00      	nop
    }

    if (pclk != 0U)
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d018      	beq.n	80106dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	085a      	lsrs	r2, r3, #1
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	441a      	add	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80106bc:	b29b      	uxth	r3, r3
 80106be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	2b0f      	cmp	r3, #15
 80106c4:	d908      	bls.n	80106d8 <UART_SetConfig+0x4a0>
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106cc:	d204      	bcs.n	80106d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	693a      	ldr	r2, [r7, #16]
 80106d4:	60da      	str	r2, [r3, #12]
 80106d6:	e001      	b.n	80106dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80106d8:	2301      	movs	r3, #1
 80106da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80106e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3720      	adds	r7, #32
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	40007c00 	.word	0x40007c00
 80106f8:	40023800 	.word	0x40023800
 80106fc:	00f42400 	.word	0x00f42400

08010700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070c:	f003 0301 	and.w	r3, r3, #1
 8010710:	2b00      	cmp	r3, #0
 8010712:	d00a      	beq.n	801072a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	430a      	orrs	r2, r1
 8010728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801072e:	f003 0302 	and.w	r3, r3, #2
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00a      	beq.n	801074c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	430a      	orrs	r2, r1
 801074a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010750:	f003 0304 	and.w	r3, r3, #4
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00a      	beq.n	801076e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	430a      	orrs	r2, r1
 801076c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010772:	f003 0308 	and.w	r3, r3, #8
 8010776:	2b00      	cmp	r3, #0
 8010778:	d00a      	beq.n	8010790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	430a      	orrs	r2, r1
 801078e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010794:	f003 0310 	and.w	r3, r3, #16
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00a      	beq.n	80107b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	689b      	ldr	r3, [r3, #8]
 80107a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	430a      	orrs	r2, r1
 80107b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b6:	f003 0320 	and.w	r3, r3, #32
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00a      	beq.n	80107d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	430a      	orrs	r2, r1
 80107d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d01a      	beq.n	8010816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	430a      	orrs	r2, r1
 80107f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80107fe:	d10a      	bne.n	8010816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	430a      	orrs	r2, r1
 8010814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801081e:	2b00      	cmp	r3, #0
 8010820:	d00a      	beq.n	8010838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	430a      	orrs	r2, r1
 8010836:	605a      	str	r2, [r3, #4]
  }
}
 8010838:	bf00      	nop
 801083a:	370c      	adds	r7, #12
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b086      	sub	sp, #24
 8010848:	af02      	add	r7, sp, #8
 801084a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010854:	f7f5 f90a 	bl	8005a6c <HAL_GetTick>
 8010858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	f003 0308 	and.w	r3, r3, #8
 8010864:	2b08      	cmp	r3, #8
 8010866:	d10e      	bne.n	8010886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801086c:	9300      	str	r3, [sp, #0]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2200      	movs	r2, #0
 8010872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 f817 	bl	80108aa <UART_WaitOnFlagUntilTimeout>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	d001      	beq.n	8010886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010882:	2303      	movs	r3, #3
 8010884:	e00d      	b.n	80108a2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2220      	movs	r2, #32
 801088a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2220      	movs	r2, #32
 8010890:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b084      	sub	sp, #16
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	60f8      	str	r0, [r7, #12]
 80108b2:	60b9      	str	r1, [r7, #8]
 80108b4:	603b      	str	r3, [r7, #0]
 80108b6:	4613      	mov	r3, r2
 80108b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108ba:	e05e      	b.n	801097a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80108bc:	69bb      	ldr	r3, [r7, #24]
 80108be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c2:	d05a      	beq.n	801097a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80108c4:	f7f5 f8d2 	bl	8005a6c <HAL_GetTick>
 80108c8:	4602      	mov	r2, r0
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	69ba      	ldr	r2, [r7, #24]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d302      	bcc.n	80108da <UART_WaitOnFlagUntilTimeout+0x30>
 80108d4:	69bb      	ldr	r3, [r7, #24]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d11b      	bne.n	8010912 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80108e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	689a      	ldr	r2, [r3, #8]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f022 0201 	bic.w	r2, r2, #1
 80108f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2220      	movs	r2, #32
 80108fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2220      	movs	r2, #32
 8010904:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	2200      	movs	r2, #0
 801090a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 801090e:	2303      	movs	r3, #3
 8010910:	e043      	b.n	801099a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f003 0304 	and.w	r3, r3, #4
 801091c:	2b00      	cmp	r3, #0
 801091e:	d02c      	beq.n	801097a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	69db      	ldr	r3, [r3, #28]
 8010926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801092a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801092e:	d124      	bne.n	801097a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	681a      	ldr	r2, [r3, #0]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010948:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	689a      	ldr	r2, [r3, #8]
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f022 0201 	bic.w	r2, r2, #1
 8010958:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2220      	movs	r2, #32
 801095e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2220      	movs	r2, #32
 8010964:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2220      	movs	r2, #32
 801096a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	2200      	movs	r2, #0
 8010972:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010976:	2303      	movs	r3, #3
 8010978:	e00f      	b.n	801099a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	69da      	ldr	r2, [r3, #28]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	4013      	ands	r3, r2
 8010984:	68ba      	ldr	r2, [r7, #8]
 8010986:	429a      	cmp	r2, r3
 8010988:	bf0c      	ite	eq
 801098a:	2301      	moveq	r3, #1
 801098c:	2300      	movne	r3, #0
 801098e:	b2db      	uxtb	r3, r3
 8010990:	461a      	mov	r2, r3
 8010992:	79fb      	ldrb	r3, [r7, #7]
 8010994:	429a      	cmp	r2, r3
 8010996:	d091      	beq.n	80108bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3710      	adds	r7, #16
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
	...

080109a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80109ae:	2300      	movs	r3, #0
 80109b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d027      	beq.n	8010a0e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80109c4:	68fa      	ldr	r2, [r7, #12]
 80109c6:	4b2f      	ldr	r3, [pc, #188]	; (8010a84 <FMC_SDRAM_Init+0xe0>)
 80109c8:	4013      	ands	r3, r2
 80109ca:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80109d4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80109da:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80109e0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80109e6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80109ec:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80109f2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80109f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80109fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	68fa      	ldr	r2, [r7, #12]
 8010a0a:	601a      	str	r2, [r3, #0]
 8010a0c:	e032      	b.n	8010a74 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010a1a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010a24:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010a2a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010a2c:	68fa      	ldr	r2, [r7, #12]
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010a38:	68ba      	ldr	r2, [r7, #8]
 8010a3a:	4b12      	ldr	r3, [pc, #72]	; (8010a84 <FMC_SDRAM_Init+0xe0>)
 8010a3c:	4013      	ands	r3, r2
 8010a3e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010a48:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8010a4e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8010a54:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8010a5a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8010a60:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010a62:	68ba      	ldr	r2, [r7, #8]
 8010a64:	4313      	orrs	r3, r2
 8010a66:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	68fa      	ldr	r2, [r7, #12]
 8010a6c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8010a74:	2300      	movs	r3, #0
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3714      	adds	r7, #20
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr
 8010a82:	bf00      	nop
 8010a84:	ffff8000 	.word	0xffff8000

08010a88 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b087      	sub	sp, #28
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8010a94:	2300      	movs	r3, #0
 8010a96:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d02e      	beq.n	8010b00 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	689b      	ldr	r3, [r3, #8]
 8010aa6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010aae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	3b01      	subs	r3, #1
 8010abc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010abe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	3b01      	subs	r3, #1
 8010ac6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8010ac8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	3b01      	subs	r3, #1
 8010ad0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8010ad2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	691b      	ldr	r3, [r3, #16]
 8010ad8:	3b01      	subs	r3, #1
 8010ada:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8010adc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	695b      	ldr	r3, [r3, #20]
 8010ae2:	3b01      	subs	r3, #1
 8010ae4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8010ae6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	699b      	ldr	r3, [r3, #24]
 8010aec:	3b01      	subs	r3, #1
 8010aee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010af0:	4313      	orrs	r3, r2
 8010af2:	697a      	ldr	r2, [r7, #20]
 8010af4:	4313      	orrs	r3, r2
 8010af6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	697a      	ldr	r2, [r7, #20]
 8010afc:	609a      	str	r2, [r3, #8]
 8010afe:	e039      	b.n	8010b74 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8010b06:	697a      	ldr	r2, [r7, #20]
 8010b08:	4b1e      	ldr	r3, [pc, #120]	; (8010b84 <FMC_SDRAM_Timing_Init+0xfc>)
 8010b0a:	4013      	ands	r3, r2
 8010b0c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	3b01      	subs	r3, #1
 8010b14:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	695b      	ldr	r3, [r3, #20]
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010b1e:	4313      	orrs	r3, r2
 8010b20:	697a      	ldr	r2, [r7, #20]
 8010b22:	4313      	orrs	r3, r2
 8010b24:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	68db      	ldr	r3, [r3, #12]
 8010b2a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010b32:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010b42:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	689b      	ldr	r3, [r3, #8]
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010b4c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	691b      	ldr	r3, [r3, #16]
 8010b52:	3b01      	subs	r3, #1
 8010b54:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010b56:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	699b      	ldr	r3, [r3, #24]
 8010b5c:	3b01      	subs	r3, #1
 8010b5e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010b60:	4313      	orrs	r3, r2
 8010b62:	693a      	ldr	r2, [r7, #16]
 8010b64:	4313      	orrs	r3, r2
 8010b66:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	697a      	ldr	r2, [r7, #20]
 8010b6c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	693a      	ldr	r2, [r7, #16]
 8010b72:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	371c      	adds	r7, #28
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	ff0f0fff 	.word	0xff0f0fff

08010b88 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	60b9      	str	r1, [r7, #8]
 8010b92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	691a      	ldr	r2, [r3, #16]
 8010b98:	4b0c      	ldr	r3, [pc, #48]	; (8010bcc <FMC_SDRAM_SendCommand+0x44>)
 8010b9a:	4013      	ands	r3, r2
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	6811      	ldr	r1, [r2, #0]
 8010ba0:	68ba      	ldr	r2, [r7, #8]
 8010ba2:	6852      	ldr	r2, [r2, #4]
 8010ba4:	4311      	orrs	r1, r2
 8010ba6:	68ba      	ldr	r2, [r7, #8]
 8010ba8:	6892      	ldr	r2, [r2, #8]
 8010baa:	3a01      	subs	r2, #1
 8010bac:	0152      	lsls	r2, r2, #5
 8010bae:	4311      	orrs	r1, r2
 8010bb0:	68ba      	ldr	r2, [r7, #8]
 8010bb2:	68d2      	ldr	r2, [r2, #12]
 8010bb4:	0252      	lsls	r2, r2, #9
 8010bb6:	430a      	orrs	r2, r1
 8010bb8:	431a      	orrs	r2, r3
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8010bbe:	2300      	movs	r3, #0
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3714      	adds	r7, #20
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr
 8010bcc:	ffc00000 	.word	0xffc00000

08010bd0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	695a      	ldr	r2, [r3, #20]
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	005b      	lsls	r3, r3, #1
 8010be2:	431a      	orrs	r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8010be8:	2300      	movs	r3, #0
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	370c      	adds	r7, #12
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr
	...

08010bf8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010bf8:	b084      	sub	sp, #16
 8010bfa:	b480      	push	{r7}
 8010bfc:	b085      	sub	sp, #20
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
 8010c02:	f107 001c 	add.w	r0, r7, #28
 8010c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010c0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010c10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010c12:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010c16:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010c1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010c1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010c22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010c24:	68fa      	ldr	r2, [r7, #12]
 8010c26:	4313      	orrs	r3, r2
 8010c28:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	685a      	ldr	r2, [r3, #4]
 8010c2e:	4b07      	ldr	r3, [pc, #28]	; (8010c4c <SDMMC_Init+0x54>)
 8010c30:	4013      	ands	r3, r2
 8010c32:	68fa      	ldr	r2, [r7, #12]
 8010c34:	431a      	orrs	r2, r3
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	b004      	add	sp, #16
 8010c48:	4770      	bx	lr
 8010c4a:	bf00      	nop
 8010c4c:	ffff8100 	.word	0xffff8100

08010c50 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	370c      	adds	r7, #12
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr

08010c6a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010c6a:	b580      	push	{r7, lr}
 8010c6c:	b082      	sub	sp, #8
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2203      	movs	r2, #3
 8010c76:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010c78:	2002      	movs	r0, #2
 8010c7a:	f7f4 ff03 	bl	8005a84 <HAL_Delay>
  
  return HAL_OK;
 8010c7e:	2300      	movs	r3, #0
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3708      	adds	r7, #8
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f003 0303 	and.w	r3, r3, #3
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b085      	sub	sp, #20
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cc2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010cc8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010cce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cd0:	68fa      	ldr	r2, [r7, #12]
 8010cd2:	4313      	orrs	r3, r2
 8010cd4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	68da      	ldr	r2, [r3, #12]
 8010cda:	4b06      	ldr	r3, [pc, #24]	; (8010cf4 <SDMMC_SendCommand+0x50>)
 8010cdc:	4013      	ands	r3, r2
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	431a      	orrs	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010ce6:	2300      	movs	r3, #0
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3714      	adds	r7, #20
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr
 8010cf4:	fffff000 	.word	0xfffff000

08010cf8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	b2db      	uxtb	r3, r3
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	370c      	adds	r7, #12
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d10:	4770      	bx	lr

08010d12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010d12:	b480      	push	{r7}
 8010d14:	b085      	sub	sp, #20
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]
 8010d1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	3314      	adds	r3, #20
 8010d20:	461a      	mov	r2, r3
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	4413      	add	r3, r2
 8010d26:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
}  
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3714      	adds	r7, #20
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr

08010d38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b085      	sub	sp, #20
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010d42:	2300      	movs	r3, #0
 8010d44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	685a      	ldr	r2, [r3, #4]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d5e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010d64:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010d6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d6c:	68fa      	ldr	r2, [r7, #12]
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d76:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	431a      	orrs	r2, r3
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010d82:	2300      	movs	r3, #0

}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3714      	adds	r7, #20
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr

08010d90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b088      	sub	sp, #32
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010d9e:	2310      	movs	r3, #16
 8010da0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010da2:	2340      	movs	r3, #64	; 0x40
 8010da4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010da6:	2300      	movs	r3, #0
 8010da8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010db0:	f107 0308 	add.w	r3, r7, #8
 8010db4:	4619      	mov	r1, r3
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f7ff ff74 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dc0:	2110      	movs	r1, #16
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 fa46 	bl	8011254 <SDMMC_GetCmdResp1>
 8010dc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dca:	69fb      	ldr	r3, [r7, #28]
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3720      	adds	r7, #32
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b088      	sub	sp, #32
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010de2:	2311      	movs	r3, #17
 8010de4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010de6:	2340      	movs	r3, #64	; 0x40
 8010de8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dea:	2300      	movs	r3, #0
 8010dec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010df2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010df4:	f107 0308 	add.w	r3, r7, #8
 8010df8:	4619      	mov	r1, r3
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f7ff ff52 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e04:	2111      	movs	r1, #17
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 fa24 	bl	8011254 <SDMMC_GetCmdResp1>
 8010e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e0e:	69fb      	ldr	r3, [r7, #28]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3720      	adds	r7, #32
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b088      	sub	sp, #32
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010e26:	2312      	movs	r3, #18
 8010e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e2a:	2340      	movs	r3, #64	; 0x40
 8010e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e38:	f107 0308 	add.w	r3, r7, #8
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f7ff ff30 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e48:	2112      	movs	r1, #18
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f000 fa02 	bl	8011254 <SDMMC_GetCmdResp1>
 8010e50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e52:	69fb      	ldr	r3, [r7, #28]
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3720      	adds	r7, #32
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b088      	sub	sp, #32
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010e6a:	2318      	movs	r3, #24
 8010e6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e6e:	2340      	movs	r3, #64	; 0x40
 8010e70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e72:	2300      	movs	r3, #0
 8010e74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e7c:	f107 0308 	add.w	r3, r7, #8
 8010e80:	4619      	mov	r1, r3
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f7ff ff0e 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e8c:	2118      	movs	r1, #24
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f000 f9e0 	bl	8011254 <SDMMC_GetCmdResp1>
 8010e94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e96:	69fb      	ldr	r3, [r7, #28]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3720      	adds	r7, #32
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b088      	sub	sp, #32
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010eae:	2319      	movs	r3, #25
 8010eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eb2:	2340      	movs	r3, #64	; 0x40
 8010eb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ebe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ec0:	f107 0308 	add.w	r3, r7, #8
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f7ff feec 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ed0:	2119      	movs	r1, #25
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f000 f9be 	bl	8011254 <SDMMC_GetCmdResp1>
 8010ed8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010eda:	69fb      	ldr	r3, [r7, #28]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3720      	adds	r7, #32
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b088      	sub	sp, #32
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010eec:	2300      	movs	r3, #0
 8010eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010ef0:	230c      	movs	r3, #12
 8010ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ef4:	2340      	movs	r3, #64	; 0x40
 8010ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f02:	f107 0308 	add.w	r3, r7, #8
 8010f06:	4619      	mov	r1, r3
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7ff fecb 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010f0e:	4a05      	ldr	r2, [pc, #20]	; (8010f24 <SDMMC_CmdStopTransfer+0x40>)
 8010f10:	210c      	movs	r1, #12
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 f99e 	bl	8011254 <SDMMC_GetCmdResp1>
 8010f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f1a:	69fb      	ldr	r3, [r7, #28]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3720      	adds	r7, #32
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	05f5e100 	.word	0x05f5e100

08010f28 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b08a      	sub	sp, #40	; 0x28
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010f38:	2307      	movs	r3, #7
 8010f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f3c:	2340      	movs	r3, #64	; 0x40
 8010f3e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f40:	2300      	movs	r3, #0
 8010f42:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f48:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f4a:	f107 0310 	add.w	r3, r7, #16
 8010f4e:	4619      	mov	r1, r3
 8010f50:	68f8      	ldr	r0, [r7, #12]
 8010f52:	f7ff fea7 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f5a:	2107      	movs	r1, #7
 8010f5c:	68f8      	ldr	r0, [r7, #12]
 8010f5e:	f000 f979 	bl	8011254 <SDMMC_GetCmdResp1>
 8010f62:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3728      	adds	r7, #40	; 0x28
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b088      	sub	sp, #32
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010f76:	2300      	movs	r3, #0
 8010f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f82:	2300      	movs	r3, #0
 8010f84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f8c:	f107 0308 	add.w	r3, r7, #8
 8010f90:	4619      	mov	r1, r3
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f7ff fe86 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 f92f 	bl	80111fc <SDMMC_GetCmdError>
 8010f9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fa0:	69fb      	ldr	r3, [r7, #28]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3720      	adds	r7, #32
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}

08010faa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010faa:	b580      	push	{r7, lr}
 8010fac:	b088      	sub	sp, #32
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010fb2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010fb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010fb8:	2308      	movs	r3, #8
 8010fba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fbc:	2340      	movs	r3, #64	; 0x40
 8010fbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fca:	f107 0308 	add.w	r3, r7, #8
 8010fce:	4619      	mov	r1, r3
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f7ff fe67 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 fb26 	bl	8011628 <SDMMC_GetCmdResp7>
 8010fdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fde:	69fb      	ldr	r3, [r7, #28]
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3720      	adds	r7, #32
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b088      	sub	sp, #32
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010ff6:	2337      	movs	r3, #55	; 0x37
 8010ff8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ffa:	2340      	movs	r3, #64	; 0x40
 8010ffc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ffe:	2300      	movs	r3, #0
 8011000:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011006:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011008:	f107 0308 	add.w	r3, r7, #8
 801100c:	4619      	mov	r1, r3
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7ff fe48 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011014:	f241 3288 	movw	r2, #5000	; 0x1388
 8011018:	2137      	movs	r1, #55	; 0x37
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 f91a 	bl	8011254 <SDMMC_GetCmdResp1>
 8011020:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011022:	69fb      	ldr	r3, [r7, #28]
}
 8011024:	4618      	mov	r0, r3
 8011026:	3720      	adds	r7, #32
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b088      	sub	sp, #32
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011036:	683a      	ldr	r2, [r7, #0]
 8011038:	4b0d      	ldr	r3, [pc, #52]	; (8011070 <SDMMC_CmdAppOperCommand+0x44>)
 801103a:	4313      	orrs	r3, r2
 801103c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801103e:	2329      	movs	r3, #41	; 0x29
 8011040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011042:	2340      	movs	r3, #64	; 0x40
 8011044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011046:	2300      	movs	r3, #0
 8011048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801104a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801104e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011050:	f107 0308 	add.w	r3, r7, #8
 8011054:	4619      	mov	r1, r3
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f7ff fe24 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f000 fa2f 	bl	80114c0 <SDMMC_GetCmdResp3>
 8011062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011064:	69fb      	ldr	r3, [r7, #28]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3720      	adds	r7, #32
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	80100000 	.word	0x80100000

08011074 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b088      	sub	sp, #32
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011082:	2306      	movs	r3, #6
 8011084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011086:	2340      	movs	r3, #64	; 0x40
 8011088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801108a:	2300      	movs	r3, #0
 801108c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801108e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011092:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011094:	f107 0308 	add.w	r3, r7, #8
 8011098:	4619      	mov	r1, r3
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f7ff fe02 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80110a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80110a4:	2106      	movs	r1, #6
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f000 f8d4 	bl	8011254 <SDMMC_GetCmdResp1>
 80110ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110ae:	69fb      	ldr	r3, [r7, #28]
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3720      	adds	r7, #32
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b088      	sub	sp, #32
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80110c0:	2300      	movs	r3, #0
 80110c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80110c4:	2333      	movs	r3, #51	; 0x33
 80110c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110c8:	2340      	movs	r3, #64	; 0x40
 80110ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110cc:	2300      	movs	r3, #0
 80110ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110d6:	f107 0308 	add.w	r3, r7, #8
 80110da:	4619      	mov	r1, r3
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f7ff fde1 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80110e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80110e6:	2133      	movs	r1, #51	; 0x33
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 f8b3 	bl	8011254 <SDMMC_GetCmdResp1>
 80110ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110f0:	69fb      	ldr	r3, [r7, #28]
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3720      	adds	r7, #32
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80110fa:	b580      	push	{r7, lr}
 80110fc:	b088      	sub	sp, #32
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011102:	2300      	movs	r3, #0
 8011104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011106:	2302      	movs	r3, #2
 8011108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801110a:	23c0      	movs	r3, #192	; 0xc0
 801110c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801110e:	2300      	movs	r3, #0
 8011110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011116:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011118:	f107 0308 	add.w	r3, r7, #8
 801111c:	4619      	mov	r1, r3
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7ff fdc0 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 f983 	bl	8011430 <SDMMC_GetCmdResp2>
 801112a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801112c:	69fb      	ldr	r3, [r7, #28]
}
 801112e:	4618      	mov	r0, r3
 8011130:	3720      	adds	r7, #32
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011136:	b580      	push	{r7, lr}
 8011138:	b088      	sub	sp, #32
 801113a:	af00      	add	r7, sp, #0
 801113c:	6078      	str	r0, [r7, #4]
 801113e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011144:	2309      	movs	r3, #9
 8011146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011148:	23c0      	movs	r3, #192	; 0xc0
 801114a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801114c:	2300      	movs	r3, #0
 801114e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011154:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011156:	f107 0308 	add.w	r3, r7, #8
 801115a:	4619      	mov	r1, r3
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f7ff fda1 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f000 f964 	bl	8011430 <SDMMC_GetCmdResp2>
 8011168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801116a:	69fb      	ldr	r3, [r7, #28]
}
 801116c:	4618      	mov	r0, r3
 801116e:	3720      	adds	r7, #32
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801117e:	2300      	movs	r3, #0
 8011180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011182:	2303      	movs	r3, #3
 8011184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011186:	2340      	movs	r3, #64	; 0x40
 8011188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801118a:	2300      	movs	r3, #0
 801118c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801118e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011192:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011194:	f107 0308 	add.w	r3, r7, #8
 8011198:	4619      	mov	r1, r3
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f7ff fd82 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80111a0:	683a      	ldr	r2, [r7, #0]
 80111a2:	2103      	movs	r1, #3
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f000 f9c9 	bl	801153c <SDMMC_GetCmdResp6>
 80111aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111ac:	69fb      	ldr	r3, [r7, #28]
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3720      	adds	r7, #32
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}

080111b6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80111b6:	b580      	push	{r7, lr}
 80111b8:	b088      	sub	sp, #32
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
 80111be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80111c4:	230d      	movs	r3, #13
 80111c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111c8:	2340      	movs	r3, #64	; 0x40
 80111ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111cc:	2300      	movs	r3, #0
 80111ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111d6:	f107 0308 	add.w	r3, r7, #8
 80111da:	4619      	mov	r1, r3
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f7ff fd61 	bl	8010ca4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80111e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80111e6:	210d      	movs	r1, #13
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f000 f833 	bl	8011254 <SDMMC_GetCmdResp1>
 80111ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111f0:	69fb      	ldr	r3, [r7, #28]
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3720      	adds	r7, #32
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
	...

080111fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b085      	sub	sp, #20
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011204:	4b11      	ldr	r3, [pc, #68]	; (801124c <SDMMC_GetCmdError+0x50>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4a11      	ldr	r2, [pc, #68]	; (8011250 <SDMMC_GetCmdError+0x54>)
 801120a:	fba2 2303 	umull	r2, r3, r2, r3
 801120e:	0a5b      	lsrs	r3, r3, #9
 8011210:	f241 3288 	movw	r2, #5000	; 0x1388
 8011214:	fb02 f303 	mul.w	r3, r2, r3
 8011218:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	1e5a      	subs	r2, r3, #1
 801121e:	60fa      	str	r2, [r7, #12]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d102      	bne.n	801122a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011228:	e009      	b.n	801123e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011232:	2b00      	cmp	r3, #0
 8011234:	d0f1      	beq.n	801121a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	22c5      	movs	r2, #197	; 0xc5
 801123a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801123c:	2300      	movs	r3, #0
}
 801123e:	4618      	mov	r0, r3
 8011240:	3714      	adds	r7, #20
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop
 801124c:	20000008 	.word	0x20000008
 8011250:	10624dd3 	.word	0x10624dd3

08011254 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b088      	sub	sp, #32
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	460b      	mov	r3, r1
 801125e:	607a      	str	r2, [r7, #4]
 8011260:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011262:	4b70      	ldr	r3, [pc, #448]	; (8011424 <SDMMC_GetCmdResp1+0x1d0>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a70      	ldr	r2, [pc, #448]	; (8011428 <SDMMC_GetCmdResp1+0x1d4>)
 8011268:	fba2 2303 	umull	r2, r3, r2, r3
 801126c:	0a5a      	lsrs	r2, r3, #9
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	fb02 f303 	mul.w	r3, r2, r3
 8011274:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	1e5a      	subs	r2, r3, #1
 801127a:	61fa      	str	r2, [r7, #28]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d102      	bne.n	8011286 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011284:	e0c9      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801128a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801128c:	69bb      	ldr	r3, [r7, #24]
 801128e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011292:	2b00      	cmp	r3, #0
 8011294:	d0ef      	beq.n	8011276 <SDMMC_GetCmdResp1+0x22>
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801129c:	2b00      	cmp	r3, #0
 801129e:	d1ea      	bne.n	8011276 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112a4:	f003 0304 	and.w	r3, r3, #4
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d004      	beq.n	80112b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2204      	movs	r2, #4
 80112b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112b2:	2304      	movs	r3, #4
 80112b4:	e0b1      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112ba:	f003 0301 	and.w	r3, r3, #1
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d004      	beq.n	80112cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2201      	movs	r2, #1
 80112c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112c8:	2301      	movs	r3, #1
 80112ca:	e0a6      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	22c5      	movs	r2, #197	; 0xc5
 80112d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80112d2:	68f8      	ldr	r0, [r7, #12]
 80112d4:	f7ff fd10 	bl	8010cf8 <SDMMC_GetCommandResponse>
 80112d8:	4603      	mov	r3, r0
 80112da:	461a      	mov	r2, r3
 80112dc:	7afb      	ldrb	r3, [r7, #11]
 80112de:	4293      	cmp	r3, r2
 80112e0:	d001      	beq.n	80112e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112e2:	2301      	movs	r3, #1
 80112e4:	e099      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80112e6:	2100      	movs	r1, #0
 80112e8:	68f8      	ldr	r0, [r7, #12]
 80112ea:	f7ff fd12 	bl	8010d12 <SDMMC_GetResponse>
 80112ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80112f0:	697a      	ldr	r2, [r7, #20]
 80112f2:	4b4e      	ldr	r3, [pc, #312]	; (801142c <SDMMC_GetCmdResp1+0x1d8>)
 80112f4:	4013      	ands	r3, r2
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d101      	bne.n	80112fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80112fa:	2300      	movs	r3, #0
 80112fc:	e08d      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	2b00      	cmp	r3, #0
 8011302:	da02      	bge.n	801130a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011308:	e087      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011310:	2b00      	cmp	r3, #0
 8011312:	d001      	beq.n	8011318 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011314:	2340      	movs	r3, #64	; 0x40
 8011316:	e080      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801131e:	2b00      	cmp	r3, #0
 8011320:	d001      	beq.n	8011326 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011322:	2380      	movs	r3, #128	; 0x80
 8011324:	e079      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801132c:	2b00      	cmp	r3, #0
 801132e:	d002      	beq.n	8011336 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011334:	e071      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801133c:	2b00      	cmp	r3, #0
 801133e:	d002      	beq.n	8011346 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011344:	e069      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801134c:	2b00      	cmp	r3, #0
 801134e:	d002      	beq.n	8011356 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011354:	e061      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801135c:	2b00      	cmp	r3, #0
 801135e:	d002      	beq.n	8011366 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011364:	e059      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801136c:	2b00      	cmp	r3, #0
 801136e:	d002      	beq.n	8011376 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011374:	e051      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801137c:	2b00      	cmp	r3, #0
 801137e:	d002      	beq.n	8011386 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011384:	e049      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801138c:	2b00      	cmp	r3, #0
 801138e:	d002      	beq.n	8011396 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011394:	e041      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801139c:	2b00      	cmp	r3, #0
 801139e:	d002      	beq.n	80113a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80113a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113a4:	e039      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d002      	beq.n	80113b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80113b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80113b4:	e031      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d002      	beq.n	80113c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80113c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80113c4:	e029      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d002      	beq.n	80113d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80113d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80113d4:	e021      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d002      	beq.n	80113e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80113e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80113e4:	e019      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d002      	beq.n	80113f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80113f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80113f4:	e011      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d002      	beq.n	8011406 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011400:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011404:	e009      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	f003 0308 	and.w	r3, r3, #8
 801140c:	2b00      	cmp	r3, #0
 801140e:	d002      	beq.n	8011416 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011410:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011414:	e001      	b.n	801141a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801141a:	4618      	mov	r0, r3
 801141c:	3720      	adds	r7, #32
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	20000008 	.word	0x20000008
 8011428:	10624dd3 	.word	0x10624dd3
 801142c:	fdffe008 	.word	0xfdffe008

08011430 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011430:	b480      	push	{r7}
 8011432:	b085      	sub	sp, #20
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011438:	4b1f      	ldr	r3, [pc, #124]	; (80114b8 <SDMMC_GetCmdResp2+0x88>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	4a1f      	ldr	r2, [pc, #124]	; (80114bc <SDMMC_GetCmdResp2+0x8c>)
 801143e:	fba2 2303 	umull	r2, r3, r2, r3
 8011442:	0a5b      	lsrs	r3, r3, #9
 8011444:	f241 3288 	movw	r2, #5000	; 0x1388
 8011448:	fb02 f303 	mul.w	r3, r2, r3
 801144c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	1e5a      	subs	r2, r3, #1
 8011452:	60fa      	str	r2, [r7, #12]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d102      	bne.n	801145e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801145c:	e026      	b.n	80114ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011462:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801146a:	2b00      	cmp	r3, #0
 801146c:	d0ef      	beq.n	801144e <SDMMC_GetCmdResp2+0x1e>
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011474:	2b00      	cmp	r3, #0
 8011476:	d1ea      	bne.n	801144e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801147c:	f003 0304 	and.w	r3, r3, #4
 8011480:	2b00      	cmp	r3, #0
 8011482:	d004      	beq.n	801148e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2204      	movs	r2, #4
 8011488:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801148a:	2304      	movs	r3, #4
 801148c:	e00e      	b.n	80114ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011492:	f003 0301 	and.w	r3, r3, #1
 8011496:	2b00      	cmp	r3, #0
 8011498:	d004      	beq.n	80114a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2201      	movs	r2, #1
 801149e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114a0:	2301      	movs	r3, #1
 80114a2:	e003      	b.n	80114ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	22c5      	movs	r2, #197	; 0xc5
 80114a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80114aa:	2300      	movs	r3, #0
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3714      	adds	r7, #20
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr
 80114b8:	20000008 	.word	0x20000008
 80114bc:	10624dd3 	.word	0x10624dd3

080114c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b085      	sub	sp, #20
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80114c8:	4b1a      	ldr	r3, [pc, #104]	; (8011534 <SDMMC_GetCmdResp3+0x74>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	4a1a      	ldr	r2, [pc, #104]	; (8011538 <SDMMC_GetCmdResp3+0x78>)
 80114ce:	fba2 2303 	umull	r2, r3, r2, r3
 80114d2:	0a5b      	lsrs	r3, r3, #9
 80114d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80114d8:	fb02 f303 	mul.w	r3, r2, r3
 80114dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	1e5a      	subs	r2, r3, #1
 80114e2:	60fa      	str	r2, [r7, #12]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d102      	bne.n	80114ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80114ec:	e01b      	b.n	8011526 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d0ef      	beq.n	80114de <SDMMC_GetCmdResp3+0x1e>
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011504:	2b00      	cmp	r3, #0
 8011506:	d1ea      	bne.n	80114de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801150c:	f003 0304 	and.w	r3, r3, #4
 8011510:	2b00      	cmp	r3, #0
 8011512:	d004      	beq.n	801151e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2204      	movs	r2, #4
 8011518:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801151a:	2304      	movs	r3, #4
 801151c:	e003      	b.n	8011526 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	22c5      	movs	r2, #197	; 0xc5
 8011522:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	3714      	adds	r7, #20
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	20000008 	.word	0x20000008
 8011538:	10624dd3 	.word	0x10624dd3

0801153c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b088      	sub	sp, #32
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	460b      	mov	r3, r1
 8011546:	607a      	str	r2, [r7, #4]
 8011548:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801154a:	4b35      	ldr	r3, [pc, #212]	; (8011620 <SDMMC_GetCmdResp6+0xe4>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	4a35      	ldr	r2, [pc, #212]	; (8011624 <SDMMC_GetCmdResp6+0xe8>)
 8011550:	fba2 2303 	umull	r2, r3, r2, r3
 8011554:	0a5b      	lsrs	r3, r3, #9
 8011556:	f241 3288 	movw	r2, #5000	; 0x1388
 801155a:	fb02 f303 	mul.w	r3, r2, r3
 801155e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011560:	69fb      	ldr	r3, [r7, #28]
 8011562:	1e5a      	subs	r2, r3, #1
 8011564:	61fa      	str	r2, [r7, #28]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d102      	bne.n	8011570 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801156a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801156e:	e052      	b.n	8011616 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011574:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801157c:	2b00      	cmp	r3, #0
 801157e:	d0ef      	beq.n	8011560 <SDMMC_GetCmdResp6+0x24>
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011586:	2b00      	cmp	r3, #0
 8011588:	d1ea      	bne.n	8011560 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801158e:	f003 0304 	and.w	r3, r3, #4
 8011592:	2b00      	cmp	r3, #0
 8011594:	d004      	beq.n	80115a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2204      	movs	r2, #4
 801159a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801159c:	2304      	movs	r3, #4
 801159e:	e03a      	b.n	8011616 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a4:	f003 0301 	and.w	r3, r3, #1
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d004      	beq.n	80115b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2201      	movs	r2, #1
 80115b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115b2:	2301      	movs	r3, #1
 80115b4:	e02f      	b.n	8011616 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	f7ff fb9e 	bl	8010cf8 <SDMMC_GetCommandResponse>
 80115bc:	4603      	mov	r3, r0
 80115be:	461a      	mov	r2, r3
 80115c0:	7afb      	ldrb	r3, [r7, #11]
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d001      	beq.n	80115ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115c6:	2301      	movs	r3, #1
 80115c8:	e025      	b.n	8011616 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	22c5      	movs	r2, #197	; 0xc5
 80115ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80115d0:	2100      	movs	r1, #0
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f7ff fb9d 	bl	8010d12 <SDMMC_GetResponse>
 80115d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d106      	bne.n	80115f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	0c1b      	lsrs	r3, r3, #16
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80115ee:	2300      	movs	r3, #0
 80115f0:	e011      	b.n	8011616 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d002      	beq.n	8011602 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80115fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011600:	e009      	b.n	8011616 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011608:	2b00      	cmp	r3, #0
 801160a:	d002      	beq.n	8011612 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801160c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011610:	e001      	b.n	8011616 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011616:	4618      	mov	r0, r3
 8011618:	3720      	adds	r7, #32
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}
 801161e:	bf00      	nop
 8011620:	20000008 	.word	0x20000008
 8011624:	10624dd3 	.word	0x10624dd3

08011628 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011628:	b480      	push	{r7}
 801162a:	b085      	sub	sp, #20
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011630:	4b22      	ldr	r3, [pc, #136]	; (80116bc <SDMMC_GetCmdResp7+0x94>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	4a22      	ldr	r2, [pc, #136]	; (80116c0 <SDMMC_GetCmdResp7+0x98>)
 8011636:	fba2 2303 	umull	r2, r3, r2, r3
 801163a:	0a5b      	lsrs	r3, r3, #9
 801163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011640:	fb02 f303 	mul.w	r3, r2, r3
 8011644:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	1e5a      	subs	r2, r3, #1
 801164a:	60fa      	str	r2, [r7, #12]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d102      	bne.n	8011656 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011654:	e02c      	b.n	80116b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801165a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011662:	2b00      	cmp	r3, #0
 8011664:	d0ef      	beq.n	8011646 <SDMMC_GetCmdResp7+0x1e>
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801166c:	2b00      	cmp	r3, #0
 801166e:	d1ea      	bne.n	8011646 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011674:	f003 0304 	and.w	r3, r3, #4
 8011678:	2b00      	cmp	r3, #0
 801167a:	d004      	beq.n	8011686 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2204      	movs	r2, #4
 8011680:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011682:	2304      	movs	r3, #4
 8011684:	e014      	b.n	80116b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801168a:	f003 0301 	and.w	r3, r3, #1
 801168e:	2b00      	cmp	r3, #0
 8011690:	d004      	beq.n	801169c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2201      	movs	r2, #1
 8011696:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011698:	2301      	movs	r3, #1
 801169a:	e009      	b.n	80116b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d002      	beq.n	80116ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2240      	movs	r2, #64	; 0x40
 80116ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80116ae:	2300      	movs	r3, #0
  
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3714      	adds	r7, #20
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr
 80116bc:	20000008 	.word	0x20000008
 80116c0:	10624dd3 	.word	0x10624dd3

080116c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80116c4:	b084      	sub	sp, #16
 80116c6:	b580      	push	{r7, lr}
 80116c8:	b084      	sub	sp, #16
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
 80116ce:	f107 001c 	add.w	r0, r7, #28
 80116d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80116d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d120      	bne.n	801171e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	68da      	ldr	r2, [r3, #12]
 80116ec:	4b20      	ldr	r3, [pc, #128]	; (8011770 <USB_CoreInit+0xac>)
 80116ee:	4013      	ands	r3, r2
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011702:	2b01      	cmp	r3, #1
 8011704:	d105      	bne.n	8011712 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f000 f942 	bl	801199c <USB_CoreReset>
 8011718:	4603      	mov	r3, r0
 801171a:	73fb      	strb	r3, [r7, #15]
 801171c:	e010      	b.n	8011740 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f936 	bl	801199c <USB_CoreReset>
 8011730:	4603      	mov	r3, r0
 8011732:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8011740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011742:	2b01      	cmp	r3, #1
 8011744:	d10b      	bne.n	801175e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	f043 0206 	orr.w	r2, r3, #6
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	f043 0220 	orr.w	r2, r3, #32
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011760:	4618      	mov	r0, r3
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801176a:	b004      	add	sp, #16
 801176c:	4770      	bx	lr
 801176e:	bf00      	nop
 8011770:	ffbdffbf 	.word	0xffbdffbf

08011774 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	689b      	ldr	r3, [r3, #8]
 8011780:	f043 0201 	orr.w	r2, r3, #1
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011788:	2300      	movs	r3, #0
}
 801178a:	4618      	mov	r0, r3
 801178c:	370c      	adds	r7, #12
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr

08011796 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011796:	b480      	push	{r7}
 8011798:	b083      	sub	sp, #12
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	f023 0201 	bic.w	r2, r3, #1
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80117aa:	2300      	movs	r3, #0
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	460b      	mov	r3, r1
 80117c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80117d0:	78fb      	ldrb	r3, [r7, #3]
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	d106      	bne.n	80117e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	60da      	str	r2, [r3, #12]
 80117e2:	e00b      	b.n	80117fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80117e4:	78fb      	ldrb	r3, [r7, #3]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d106      	bne.n	80117f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	60da      	str	r2, [r3, #12]
 80117f6:	e001      	b.n	80117fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80117f8:	2301      	movs	r3, #1
 80117fa:	e003      	b.n	8011804 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80117fc:	2032      	movs	r0, #50	; 0x32
 80117fe:	f7f4 f941 	bl	8005a84 <HAL_Delay>

  return HAL_OK;
 8011802:	2300      	movs	r3, #0
}
 8011804:	4618      	mov	r0, r3
 8011806:	3708      	adds	r7, #8
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801180c:	b480      	push	{r7}
 801180e:	b085      	sub	sp, #20
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011816:	2300      	movs	r3, #0
 8011818:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	019b      	lsls	r3, r3, #6
 801181e:	f043 0220 	orr.w	r2, r3, #32
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	3301      	adds	r3, #1
 801182a:	60fb      	str	r3, [r7, #12]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	4a09      	ldr	r2, [pc, #36]	; (8011854 <USB_FlushTxFifo+0x48>)
 8011830:	4293      	cmp	r3, r2
 8011832:	d901      	bls.n	8011838 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011834:	2303      	movs	r3, #3
 8011836:	e006      	b.n	8011846 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	691b      	ldr	r3, [r3, #16]
 801183c:	f003 0320 	and.w	r3, r3, #32
 8011840:	2b20      	cmp	r3, #32
 8011842:	d0f0      	beq.n	8011826 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011844:	2300      	movs	r3, #0
}
 8011846:	4618      	mov	r0, r3
 8011848:	3714      	adds	r7, #20
 801184a:	46bd      	mov	sp, r7
 801184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011850:	4770      	bx	lr
 8011852:	bf00      	nop
 8011854:	00030d40 	.word	0x00030d40

08011858 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011858:	b480      	push	{r7}
 801185a:	b085      	sub	sp, #20
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011860:	2300      	movs	r3, #0
 8011862:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2210      	movs	r2, #16
 8011868:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	3301      	adds	r3, #1
 801186e:	60fb      	str	r3, [r7, #12]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	4a09      	ldr	r2, [pc, #36]	; (8011898 <USB_FlushRxFifo+0x40>)
 8011874:	4293      	cmp	r3, r2
 8011876:	d901      	bls.n	801187c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011878:	2303      	movs	r3, #3
 801187a:	e006      	b.n	801188a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	691b      	ldr	r3, [r3, #16]
 8011880:	f003 0310 	and.w	r3, r3, #16
 8011884:	2b10      	cmp	r3, #16
 8011886:	d0f0      	beq.n	801186a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011888:	2300      	movs	r3, #0
}
 801188a:	4618      	mov	r0, r3
 801188c:	3714      	adds	r7, #20
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr
 8011896:	bf00      	nop
 8011898:	00030d40 	.word	0x00030d40

0801189c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801189c:	b480      	push	{r7}
 801189e:	b089      	sub	sp, #36	; 0x24
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	4611      	mov	r1, r2
 80118a8:	461a      	mov	r2, r3
 80118aa:	460b      	mov	r3, r1
 80118ac:	71fb      	strb	r3, [r7, #7]
 80118ae:	4613      	mov	r3, r2
 80118b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80118ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d11a      	bne.n	80118f8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80118c2:	88bb      	ldrh	r3, [r7, #4]
 80118c4:	3303      	adds	r3, #3
 80118c6:	089b      	lsrs	r3, r3, #2
 80118c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80118ca:	2300      	movs	r3, #0
 80118cc:	61bb      	str	r3, [r7, #24]
 80118ce:	e00f      	b.n	80118f0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80118d0:	79fb      	ldrb	r3, [r7, #7]
 80118d2:	031a      	lsls	r2, r3, #12
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	4413      	add	r3, r2
 80118d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118dc:	461a      	mov	r2, r3
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	3304      	adds	r3, #4
 80118e8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	3301      	adds	r3, #1
 80118ee:	61bb      	str	r3, [r7, #24]
 80118f0:	69ba      	ldr	r2, [r7, #24]
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d3eb      	bcc.n	80118d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80118f8:	2300      	movs	r3, #0
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3724      	adds	r7, #36	; 0x24
 80118fe:	46bd      	mov	sp, r7
 8011900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011904:	4770      	bx	lr

08011906 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011906:	b480      	push	{r7}
 8011908:	b089      	sub	sp, #36	; 0x24
 801190a:	af00      	add	r7, sp, #0
 801190c:	60f8      	str	r0, [r7, #12]
 801190e:	60b9      	str	r1, [r7, #8]
 8011910:	4613      	mov	r3, r2
 8011912:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801191c:	88fb      	ldrh	r3, [r7, #6]
 801191e:	3303      	adds	r3, #3
 8011920:	089b      	lsrs	r3, r3, #2
 8011922:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011924:	2300      	movs	r3, #0
 8011926:	61bb      	str	r3, [r7, #24]
 8011928:	e00b      	b.n	8011942 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	601a      	str	r2, [r3, #0]
    pDest++;
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	3304      	adds	r3, #4
 801193a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	3301      	adds	r3, #1
 8011940:	61bb      	str	r3, [r7, #24]
 8011942:	69ba      	ldr	r2, [r7, #24]
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	429a      	cmp	r2, r3
 8011948:	d3ef      	bcc.n	801192a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801194a:	69fb      	ldr	r3, [r7, #28]
}
 801194c:	4618      	mov	r0, r3
 801194e:	3724      	adds	r7, #36	; 0x24
 8011950:	46bd      	mov	sp, r7
 8011952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011956:	4770      	bx	lr

08011958 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	695b      	ldr	r3, [r3, #20]
 8011964:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	699b      	ldr	r3, [r3, #24]
 801196a:	68fa      	ldr	r2, [r7, #12]
 801196c:	4013      	ands	r3, r2
 801196e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011970:	68fb      	ldr	r3, [r7, #12]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3714      	adds	r7, #20
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr

0801197e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801197e:	b480      	push	{r7}
 8011980:	b083      	sub	sp, #12
 8011982:	af00      	add	r7, sp, #0
 8011984:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	695b      	ldr	r3, [r3, #20]
 801198a:	f003 0301 	and.w	r3, r3, #1
}
 801198e:	4618      	mov	r0, r3
 8011990:	370c      	adds	r7, #12
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr
	...

0801199c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801199c:	b480      	push	{r7}
 801199e:	b085      	sub	sp, #20
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80119a4:	2300      	movs	r3, #0
 80119a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	3301      	adds	r3, #1
 80119ac:	60fb      	str	r3, [r7, #12]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	4a13      	ldr	r2, [pc, #76]	; (8011a00 <USB_CoreReset+0x64>)
 80119b2:	4293      	cmp	r3, r2
 80119b4:	d901      	bls.n	80119ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80119b6:	2303      	movs	r3, #3
 80119b8:	e01b      	b.n	80119f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	691b      	ldr	r3, [r3, #16]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	daf2      	bge.n	80119a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80119c2:	2300      	movs	r3, #0
 80119c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	691b      	ldr	r3, [r3, #16]
 80119ca:	f043 0201 	orr.w	r2, r3, #1
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	3301      	adds	r3, #1
 80119d6:	60fb      	str	r3, [r7, #12]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	4a09      	ldr	r2, [pc, #36]	; (8011a00 <USB_CoreReset+0x64>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d901      	bls.n	80119e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80119e0:	2303      	movs	r3, #3
 80119e2:	e006      	b.n	80119f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	691b      	ldr	r3, [r3, #16]
 80119e8:	f003 0301 	and.w	r3, r3, #1
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d0f0      	beq.n	80119d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80119f0:	2300      	movs	r3, #0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3714      	adds	r7, #20
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr
 80119fe:	bf00      	nop
 8011a00:	00030d40 	.word	0x00030d40

08011a04 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011a04:	b084      	sub	sp, #16
 8011a06:	b580      	push	{r7, lr}
 8011a08:	b084      	sub	sp, #16
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
 8011a0e:	f107 001c 	add.w	r0, r7, #28
 8011a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a20:	461a      	mov	r2, r3
 8011a22:	2300      	movs	r3, #0
 8011a24:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d018      	beq.n	8011a70 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8011a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d10a      	bne.n	8011a5a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	68ba      	ldr	r2, [r7, #8]
 8011a4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011a52:	f043 0304 	orr.w	r3, r3, #4
 8011a56:	6013      	str	r3, [r2, #0]
 8011a58:	e014      	b.n	8011a84 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	68ba      	ldr	r2, [r7, #8]
 8011a64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011a68:	f023 0304 	bic.w	r3, r3, #4
 8011a6c:	6013      	str	r3, [r2, #0]
 8011a6e:	e009      	b.n	8011a84 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011a7e:	f023 0304 	bic.w	r3, r3, #4
 8011a82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8011a84:	2110      	movs	r1, #16
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f7ff fec0 	bl	801180c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f7ff fee3 	bl	8011858 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011a92:	2300      	movs	r3, #0
 8011a94:	60fb      	str	r3, [r7, #12]
 8011a96:	e015      	b.n	8011ac4 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	015a      	lsls	r2, r3, #5
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8011aaa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	015a      	lsls	r2, r3, #5
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	4413      	add	r3, r2
 8011ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011ab8:	461a      	mov	r2, r3
 8011aba:	2300      	movs	r3, #0
 8011abc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	60fb      	str	r3, [r7, #12]
 8011ac4:	6a3b      	ldr	r3, [r7, #32]
 8011ac6:	68fa      	ldr	r2, [r7, #12]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d3e5      	bcc.n	8011a98 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8011acc:	2101      	movs	r1, #1
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f000 f8ac 	bl	8011c2c <USB_DriveVbus>

  HAL_Delay(200U);
 8011ad4:	20c8      	movs	r0, #200	; 0xc8
 8011ad6:	f7f3 ffd5 	bl	8005a84 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2200      	movs	r2, #0
 8011ade:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d00b      	beq.n	8011b0c <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011afa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	4a14      	ldr	r2, [pc, #80]	; (8011b50 <USB_HostInit+0x14c>)
 8011b00:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	4a13      	ldr	r2, [pc, #76]	; (8011b54 <USB_HostInit+0x150>)
 8011b06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8011b0a:	e009      	b.n	8011b20 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2280      	movs	r2, #128	; 0x80
 8011b10:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	4a10      	ldr	r2, [pc, #64]	; (8011b58 <USB_HostInit+0x154>)
 8011b16:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	4a10      	ldr	r2, [pc, #64]	; (8011b5c <USB_HostInit+0x158>)
 8011b1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d105      	bne.n	8011b32 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	699b      	ldr	r3, [r3, #24]
 8011b2a:	f043 0210 	orr.w	r2, r3, #16
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	699a      	ldr	r2, [r3, #24]
 8011b36:	4b0a      	ldr	r3, [pc, #40]	; (8011b60 <USB_HostInit+0x15c>)
 8011b38:	4313      	orrs	r3, r2
 8011b3a:	687a      	ldr	r2, [r7, #4]
 8011b3c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b4a:	b004      	add	sp, #16
 8011b4c:	4770      	bx	lr
 8011b4e:	bf00      	nop
 8011b50:	01000200 	.word	0x01000200
 8011b54:	00e00300 	.word	0x00e00300
 8011b58:	00600080 	.word	0x00600080
 8011b5c:	004000e0 	.word	0x004000e0
 8011b60:	a3200008 	.word	0xa3200008

08011b64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	68fa      	ldr	r2, [r7, #12]
 8011b7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b82:	f023 0303 	bic.w	r3, r3, #3
 8011b86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	78fb      	ldrb	r3, [r7, #3]
 8011b92:	f003 0303 	and.w	r3, r3, #3
 8011b96:	68f9      	ldr	r1, [r7, #12]
 8011b98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011ba0:	78fb      	ldrb	r3, [r7, #3]
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d107      	bne.n	8011bb6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011bac:	461a      	mov	r2, r3
 8011bae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8011bb2:	6053      	str	r3, [r2, #4]
 8011bb4:	e009      	b.n	8011bca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8011bb6:	78fb      	ldrb	r3, [r7, #3]
 8011bb8:	2b02      	cmp	r3, #2
 8011bba:	d106      	bne.n	8011bca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	f241 7370 	movw	r3, #6000	; 0x1770
 8011bc8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8011bca:	2300      	movs	r3, #0
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3714      	adds	r7, #20
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd6:	4770      	bx	lr

08011bd8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8011be4:	2300      	movs	r3, #0
 8011be6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011bf8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	68fa      	ldr	r2, [r7, #12]
 8011bfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c06:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8011c08:	2064      	movs	r0, #100	; 0x64
 8011c0a:	f7f3 ff3b 	bl	8005a84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	68fa      	ldr	r2, [r7, #12]
 8011c12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8011c1c:	200a      	movs	r0, #10
 8011c1e:	f7f3 ff31 	bl	8005a84 <HAL_Delay>

  return HAL_OK;
 8011c22:	2300      	movs	r3, #0
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3710      	adds	r7, #16
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}

08011c2c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b085      	sub	sp, #20
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	460b      	mov	r3, r1
 8011c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011c50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d109      	bne.n	8011c70 <USB_DriveVbus+0x44>
 8011c5c:	78fb      	ldrb	r3, [r7, #3]
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d106      	bne.n	8011c70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	68fa      	ldr	r2, [r7, #12]
 8011c66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011c6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011c6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c7a:	d109      	bne.n	8011c90 <USB_DriveVbus+0x64>
 8011c7c:	78fb      	ldrb	r3, [r7, #3]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d106      	bne.n	8011c90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	68fa      	ldr	r2, [r7, #12]
 8011c86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8011c90:	2300      	movs	r3, #0
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3714      	adds	r7, #20
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr

08011c9e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011c9e:	b480      	push	{r7}
 8011ca0:	b085      	sub	sp, #20
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011caa:	2300      	movs	r3, #0
 8011cac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	0c5b      	lsrs	r3, r3, #17
 8011cbc:	f003 0303 	and.w	r3, r3, #3
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3714      	adds	r7, #20
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cca:	4770      	bx	lr

08011ccc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b085      	sub	sp, #20
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011cde:	689b      	ldr	r3, [r3, #8]
 8011ce0:	b29b      	uxth	r3, r3
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3714      	adds	r7, #20
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr
	...

08011cf0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b088      	sub	sp, #32
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	4608      	mov	r0, r1
 8011cfa:	4611      	mov	r1, r2
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	4603      	mov	r3, r0
 8011d00:	70fb      	strb	r3, [r7, #3]
 8011d02:	460b      	mov	r3, r1
 8011d04:	70bb      	strb	r3, [r7, #2]
 8011d06:	4613      	mov	r3, r2
 8011d08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8011d12:	78fb      	ldrb	r3, [r7, #3]
 8011d14:	015a      	lsls	r2, r3, #5
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	4413      	add	r3, r2
 8011d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d1e:	461a      	mov	r2, r3
 8011d20:	f04f 33ff 	mov.w	r3, #4294967295
 8011d24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8011d26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d2a:	2b03      	cmp	r3, #3
 8011d2c:	d87e      	bhi.n	8011e2c <USB_HC_Init+0x13c>
 8011d2e:	a201      	add	r2, pc, #4	; (adr r2, 8011d34 <USB_HC_Init+0x44>)
 8011d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d34:	08011d45 	.word	0x08011d45
 8011d38:	08011def 	.word	0x08011def
 8011d3c:	08011d45 	.word	0x08011d45
 8011d40:	08011db1 	.word	0x08011db1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011d44:	78fb      	ldrb	r3, [r7, #3]
 8011d46:	015a      	lsls	r2, r3, #5
 8011d48:	693b      	ldr	r3, [r7, #16]
 8011d4a:	4413      	add	r3, r2
 8011d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d50:	461a      	mov	r2, r3
 8011d52:	f240 439d 	movw	r3, #1181	; 0x49d
 8011d56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8011d58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	da10      	bge.n	8011d82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011d60:	78fb      	ldrb	r3, [r7, #3]
 8011d62:	015a      	lsls	r2, r3, #5
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	4413      	add	r3, r2
 8011d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	78fa      	ldrb	r2, [r7, #3]
 8011d70:	0151      	lsls	r1, r2, #5
 8011d72:	693a      	ldr	r2, [r7, #16]
 8011d74:	440a      	add	r2, r1
 8011d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d7e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8011d80:	e057      	b.n	8011e32 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d051      	beq.n	8011e32 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8011d8e:	78fb      	ldrb	r3, [r7, #3]
 8011d90:	015a      	lsls	r2, r3, #5
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	4413      	add	r3, r2
 8011d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	78fa      	ldrb	r2, [r7, #3]
 8011d9e:	0151      	lsls	r1, r2, #5
 8011da0:	693a      	ldr	r2, [r7, #16]
 8011da2:	440a      	add	r2, r1
 8011da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011da8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011dac:	60d3      	str	r3, [r2, #12]
      break;
 8011dae:	e040      	b.n	8011e32 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011db0:	78fb      	ldrb	r3, [r7, #3]
 8011db2:	015a      	lsls	r2, r3, #5
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	4413      	add	r3, r2
 8011db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	f240 639d 	movw	r3, #1693	; 0x69d
 8011dc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011dc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	da34      	bge.n	8011e36 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011dcc:	78fb      	ldrb	r3, [r7, #3]
 8011dce:	015a      	lsls	r2, r3, #5
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	4413      	add	r3, r2
 8011dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	78fa      	ldrb	r2, [r7, #3]
 8011ddc:	0151      	lsls	r1, r2, #5
 8011dde:	693a      	ldr	r2, [r7, #16]
 8011de0:	440a      	add	r2, r1
 8011de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011dea:	60d3      	str	r3, [r2, #12]
      }

      break;
 8011dec:	e023      	b.n	8011e36 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011dee:	78fb      	ldrb	r3, [r7, #3]
 8011df0:	015a      	lsls	r2, r3, #5
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	4413      	add	r3, r2
 8011df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	f240 2325 	movw	r3, #549	; 0x225
 8011e00:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011e02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	da17      	bge.n	8011e3a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8011e0a:	78fb      	ldrb	r3, [r7, #3]
 8011e0c:	015a      	lsls	r2, r3, #5
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	4413      	add	r3, r2
 8011e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	78fa      	ldrb	r2, [r7, #3]
 8011e1a:	0151      	lsls	r1, r2, #5
 8011e1c:	693a      	ldr	r2, [r7, #16]
 8011e1e:	440a      	add	r2, r1
 8011e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011e24:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8011e28:	60d3      	str	r3, [r2, #12]
      }
      break;
 8011e2a:	e006      	b.n	8011e3a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	77fb      	strb	r3, [r7, #31]
      break;
 8011e30:	e004      	b.n	8011e3c <USB_HC_Init+0x14c>
      break;
 8011e32:	bf00      	nop
 8011e34:	e002      	b.n	8011e3c <USB_HC_Init+0x14c>
      break;
 8011e36:	bf00      	nop
 8011e38:	e000      	b.n	8011e3c <USB_HC_Init+0x14c>
      break;
 8011e3a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8011e3c:	693b      	ldr	r3, [r7, #16]
 8011e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e42:	699a      	ldr	r2, [r3, #24]
 8011e44:	78fb      	ldrb	r3, [r7, #3]
 8011e46:	f003 030f 	and.w	r3, r3, #15
 8011e4a:	2101      	movs	r1, #1
 8011e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8011e50:	6939      	ldr	r1, [r7, #16]
 8011e52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011e56:	4313      	orrs	r3, r2
 8011e58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	699b      	ldr	r3, [r3, #24]
 8011e5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8011e66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	da03      	bge.n	8011e76 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8011e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e72:	61bb      	str	r3, [r7, #24]
 8011e74:	e001      	b.n	8011e7a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8011e76:	2300      	movs	r3, #0
 8011e78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7ff ff0f 	bl	8011c9e <USB_GetHostSpeed>
 8011e80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8011e82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011e86:	2b02      	cmp	r3, #2
 8011e88:	d106      	bne.n	8011e98 <USB_HC_Init+0x1a8>
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2b02      	cmp	r3, #2
 8011e8e:	d003      	beq.n	8011e98 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8011e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011e94:	617b      	str	r3, [r7, #20]
 8011e96:	e001      	b.n	8011e9c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011e9c:	787b      	ldrb	r3, [r7, #1]
 8011e9e:	059b      	lsls	r3, r3, #22
 8011ea0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011ea4:	78bb      	ldrb	r3, [r7, #2]
 8011ea6:	02db      	lsls	r3, r3, #11
 8011ea8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011eac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011eae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011eb2:	049b      	lsls	r3, r3, #18
 8011eb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011eb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8011eba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011ec0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8011ec2:	69bb      	ldr	r3, [r7, #24]
 8011ec4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011ec6:	78fb      	ldrb	r3, [r7, #3]
 8011ec8:	0159      	lsls	r1, r3, #5
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	440b      	add	r3, r1
 8011ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011ed2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011ed8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8011eda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011ede:	2b03      	cmp	r3, #3
 8011ee0:	d10f      	bne.n	8011f02 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8011ee2:	78fb      	ldrb	r3, [r7, #3]
 8011ee4:	015a      	lsls	r2, r3, #5
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	4413      	add	r3, r2
 8011eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	78fa      	ldrb	r2, [r7, #3]
 8011ef2:	0151      	lsls	r1, r2, #5
 8011ef4:	693a      	ldr	r2, [r7, #16]
 8011ef6:	440a      	add	r2, r1
 8011ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011f00:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8011f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3720      	adds	r7, #32
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}

08011f0c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08c      	sub	sp, #48	; 0x30
 8011f10:	af02      	add	r7, sp, #8
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	4613      	mov	r3, r2
 8011f18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	785b      	ldrb	r3, [r3, #1]
 8011f22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8011f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f28:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d02d      	beq.n	8011f92 <USB_HC_StartXfer+0x86>
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	791b      	ldrb	r3, [r3, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d129      	bne.n	8011f92 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d117      	bne.n	8011f74 <USB_HC_StartXfer+0x68>
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	79db      	ldrb	r3, [r3, #7]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d003      	beq.n	8011f54 <USB_HC_StartXfer+0x48>
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	79db      	ldrb	r3, [r3, #7]
 8011f50:	2b02      	cmp	r3, #2
 8011f52:	d10f      	bne.n	8011f74 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	015a      	lsls	r2, r3, #5
 8011f58:	6a3b      	ldr	r3, [r7, #32]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011f60:	68db      	ldr	r3, [r3, #12]
 8011f62:	69fa      	ldr	r2, [r7, #28]
 8011f64:	0151      	lsls	r1, r2, #5
 8011f66:	6a3a      	ldr	r2, [r7, #32]
 8011f68:	440a      	add	r2, r1
 8011f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f72:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d10b      	bne.n	8011f92 <USB_HC_StartXfer+0x86>
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	795b      	ldrb	r3, [r3, #5]
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d107      	bne.n	8011f92 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	785b      	ldrb	r3, [r3, #1]
 8011f86:	4619      	mov	r1, r3
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f000 fa2f 	bl	80123ec <USB_DoPing>
      return HAL_OK;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	e0f8      	b.n	8012184 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	695b      	ldr	r3, [r3, #20]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d018      	beq.n	8011fcc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	695b      	ldr	r3, [r3, #20]
 8011f9e:	68ba      	ldr	r2, [r7, #8]
 8011fa0:	8912      	ldrh	r2, [r2, #8]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	3b01      	subs	r3, #1
 8011fa6:	68ba      	ldr	r2, [r7, #8]
 8011fa8:	8912      	ldrh	r2, [r2, #8]
 8011faa:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8011fb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011fb2:	8b7b      	ldrh	r3, [r7, #26]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d90b      	bls.n	8011fd0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8011fb8:	8b7b      	ldrh	r3, [r7, #26]
 8011fba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011fbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011fbe:	68ba      	ldr	r2, [r7, #8]
 8011fc0:	8912      	ldrh	r2, [r2, #8]
 8011fc2:	fb03 f202 	mul.w	r2, r3, r2
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	611a      	str	r2, [r3, #16]
 8011fca:	e001      	b.n	8011fd0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	78db      	ldrb	r3, [r3, #3]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d007      	beq.n	8011fe8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011fd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011fda:	68ba      	ldr	r2, [r7, #8]
 8011fdc:	8912      	ldrh	r2, [r2, #8]
 8011fde:	fb03 f202 	mul.w	r2, r3, r2
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	611a      	str	r2, [r3, #16]
 8011fe6:	e003      	b.n	8011ff0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	695a      	ldr	r2, [r3, #20]
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	691b      	ldr	r3, [r3, #16]
 8011ff4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011ff8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ffa:	04d9      	lsls	r1, r3, #19
 8011ffc:	4b63      	ldr	r3, [pc, #396]	; (801218c <USB_HC_StartXfer+0x280>)
 8011ffe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012000:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	7a9b      	ldrb	r3, [r3, #10]
 8012006:	075b      	lsls	r3, r3, #29
 8012008:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801200c:	69f9      	ldr	r1, [r7, #28]
 801200e:	0148      	lsls	r0, r1, #5
 8012010:	6a39      	ldr	r1, [r7, #32]
 8012012:	4401      	add	r1, r0
 8012014:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012018:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801201a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 801201c:	79fb      	ldrb	r3, [r7, #7]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d009      	beq.n	8012036 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	68d9      	ldr	r1, [r3, #12]
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	015a      	lsls	r2, r3, #5
 801202a:	6a3b      	ldr	r3, [r7, #32]
 801202c:	4413      	add	r3, r2
 801202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012032:	460a      	mov	r2, r1
 8012034:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8012036:	6a3b      	ldr	r3, [r7, #32]
 8012038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801203c:	689b      	ldr	r3, [r3, #8]
 801203e:	f003 0301 	and.w	r3, r3, #1
 8012042:	2b00      	cmp	r3, #0
 8012044:	bf0c      	ite	eq
 8012046:	2301      	moveq	r3, #1
 8012048:	2300      	movne	r3, #0
 801204a:	b2db      	uxtb	r3, r3
 801204c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	015a      	lsls	r2, r3, #5
 8012052:	6a3b      	ldr	r3, [r7, #32]
 8012054:	4413      	add	r3, r2
 8012056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	69fa      	ldr	r2, [r7, #28]
 801205e:	0151      	lsls	r1, r2, #5
 8012060:	6a3a      	ldr	r2, [r7, #32]
 8012062:	440a      	add	r2, r1
 8012064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012068:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801206c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801206e:	69fb      	ldr	r3, [r7, #28]
 8012070:	015a      	lsls	r2, r3, #5
 8012072:	6a3b      	ldr	r3, [r7, #32]
 8012074:	4413      	add	r3, r2
 8012076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	7e7b      	ldrb	r3, [r7, #25]
 801207e:	075b      	lsls	r3, r3, #29
 8012080:	69f9      	ldr	r1, [r7, #28]
 8012082:	0148      	lsls	r0, r1, #5
 8012084:	6a39      	ldr	r1, [r7, #32]
 8012086:	4401      	add	r1, r0
 8012088:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 801208c:	4313      	orrs	r3, r2
 801208e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	015a      	lsls	r2, r3, #5
 8012094:	6a3b      	ldr	r3, [r7, #32]
 8012096:	4413      	add	r3, r2
 8012098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80120a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	78db      	ldrb	r3, [r3, #3]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d004      	beq.n	80120ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120b6:	613b      	str	r3, [r7, #16]
 80120b8:	e003      	b.n	80120c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80120c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80120c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	015a      	lsls	r2, r3, #5
 80120ce:	6a3b      	ldr	r3, [r7, #32]
 80120d0:	4413      	add	r3, r2
 80120d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80120d6:	461a      	mov	r2, r3
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80120dc:	79fb      	ldrb	r3, [r7, #7]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d001      	beq.n	80120e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80120e2:	2300      	movs	r3, #0
 80120e4:	e04e      	b.n	8012184 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	78db      	ldrb	r3, [r3, #3]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d149      	bne.n	8012182 <USB_HC_StartXfer+0x276>
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	695b      	ldr	r3, [r3, #20]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d045      	beq.n	8012182 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	79db      	ldrb	r3, [r3, #7]
 80120fa:	2b03      	cmp	r3, #3
 80120fc:	d830      	bhi.n	8012160 <USB_HC_StartXfer+0x254>
 80120fe:	a201      	add	r2, pc, #4	; (adr r2, 8012104 <USB_HC_StartXfer+0x1f8>)
 8012100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012104:	08012115 	.word	0x08012115
 8012108:	08012139 	.word	0x08012139
 801210c:	08012115 	.word	0x08012115
 8012110:	08012139 	.word	0x08012139
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	695b      	ldr	r3, [r3, #20]
 8012118:	3303      	adds	r3, #3
 801211a:	089b      	lsrs	r3, r3, #2
 801211c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801211e:	8afa      	ldrh	r2, [r7, #22]
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012124:	b29b      	uxth	r3, r3
 8012126:	429a      	cmp	r2, r3
 8012128:	d91c      	bls.n	8012164 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	699b      	ldr	r3, [r3, #24]
 801212e:	f043 0220 	orr.w	r2, r3, #32
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	619a      	str	r2, [r3, #24]
        }
        break;
 8012136:	e015      	b.n	8012164 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	695b      	ldr	r3, [r3, #20]
 801213c:	3303      	adds	r3, #3
 801213e:	089b      	lsrs	r3, r3, #2
 8012140:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8012142:	8afa      	ldrh	r2, [r7, #22]
 8012144:	6a3b      	ldr	r3, [r7, #32]
 8012146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801214a:	691b      	ldr	r3, [r3, #16]
 801214c:	b29b      	uxth	r3, r3
 801214e:	429a      	cmp	r2, r3
 8012150:	d90a      	bls.n	8012168 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	699b      	ldr	r3, [r3, #24]
 8012156:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	619a      	str	r2, [r3, #24]
        }
        break;
 801215e:	e003      	b.n	8012168 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8012160:	bf00      	nop
 8012162:	e002      	b.n	801216a <USB_HC_StartXfer+0x25e>
        break;
 8012164:	bf00      	nop
 8012166:	e000      	b.n	801216a <USB_HC_StartXfer+0x25e>
        break;
 8012168:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	68d9      	ldr	r1, [r3, #12]
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	785a      	ldrb	r2, [r3, #1]
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	695b      	ldr	r3, [r3, #20]
 8012176:	b29b      	uxth	r3, r3
 8012178:	2000      	movs	r0, #0
 801217a:	9000      	str	r0, [sp, #0]
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f7ff fb8d 	bl	801189c <USB_WritePacket>
  }

  return HAL_OK;
 8012182:	2300      	movs	r3, #0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3728      	adds	r7, #40	; 0x28
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	1ff80000 	.word	0x1ff80000

08012190 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012190:	b480      	push	{r7}
 8012192:	b085      	sub	sp, #20
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80121a2:	695b      	ldr	r3, [r3, #20]
 80121a4:	b29b      	uxth	r3, r3
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	3714      	adds	r7, #20
 80121aa:	46bd      	mov	sp, r7
 80121ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b0:	4770      	bx	lr

080121b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80121b2:	b480      	push	{r7}
 80121b4:	b089      	sub	sp, #36	; 0x24
 80121b6:	af00      	add	r7, sp, #0
 80121b8:	6078      	str	r0, [r7, #4]
 80121ba:	460b      	mov	r3, r1
 80121bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80121c2:	78fb      	ldrb	r3, [r7, #3]
 80121c4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80121c6:	2300      	movs	r3, #0
 80121c8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	015a      	lsls	r2, r3, #5
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	4413      	add	r3, r2
 80121d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	0c9b      	lsrs	r3, r3, #18
 80121da:	f003 0303 	and.w	r3, r3, #3
 80121de:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	015a      	lsls	r2, r3, #5
 80121e4:	69bb      	ldr	r3, [r7, #24]
 80121e6:	4413      	add	r3, r2
 80121e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	0fdb      	lsrs	r3, r3, #31
 80121f0:	f003 0301 	and.w	r3, r3, #1
 80121f4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	689b      	ldr	r3, [r3, #8]
 80121fa:	f003 0320 	and.w	r3, r3, #32
 80121fe:	2b20      	cmp	r3, #32
 8012200:	d104      	bne.n	801220c <USB_HC_Halt+0x5a>
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d101      	bne.n	801220c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8012208:	2300      	movs	r3, #0
 801220a:	e0e8      	b.n	80123de <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d002      	beq.n	8012218 <USB_HC_Halt+0x66>
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	2b02      	cmp	r3, #2
 8012216:	d173      	bne.n	8012300 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	015a      	lsls	r2, r3, #5
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	4413      	add	r3, r2
 8012220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	697a      	ldr	r2, [r7, #20]
 8012228:	0151      	lsls	r1, r2, #5
 801222a:	69ba      	ldr	r2, [r7, #24]
 801222c:	440a      	add	r2, r1
 801222e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012236:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	689b      	ldr	r3, [r3, #8]
 801223c:	f003 0320 	and.w	r3, r3, #32
 8012240:	2b00      	cmp	r3, #0
 8012242:	f040 80cb 	bne.w	80123dc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801224a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801224e:	2b00      	cmp	r3, #0
 8012250:	d143      	bne.n	80122da <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	015a      	lsls	r2, r3, #5
 8012256:	69bb      	ldr	r3, [r7, #24]
 8012258:	4413      	add	r3, r2
 801225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	697a      	ldr	r2, [r7, #20]
 8012262:	0151      	lsls	r1, r2, #5
 8012264:	69ba      	ldr	r2, [r7, #24]
 8012266:	440a      	add	r2, r1
 8012268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801226c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012270:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	015a      	lsls	r2, r3, #5
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	4413      	add	r3, r2
 801227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	697a      	ldr	r2, [r7, #20]
 8012282:	0151      	lsls	r1, r2, #5
 8012284:	69ba      	ldr	r2, [r7, #24]
 8012286:	440a      	add	r2, r1
 8012288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801228c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012290:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	015a      	lsls	r2, r3, #5
 8012296:	69bb      	ldr	r3, [r7, #24]
 8012298:	4413      	add	r3, r2
 801229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	697a      	ldr	r2, [r7, #20]
 80122a2:	0151      	lsls	r1, r2, #5
 80122a4:	69ba      	ldr	r2, [r7, #24]
 80122a6:	440a      	add	r2, r1
 80122a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80122ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80122b0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80122b2:	69fb      	ldr	r3, [r7, #28]
 80122b4:	3301      	adds	r3, #1
 80122b6:	61fb      	str	r3, [r7, #28]
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80122be:	d81d      	bhi.n	80122fc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	015a      	lsls	r2, r3, #5
 80122c4:	69bb      	ldr	r3, [r7, #24]
 80122c6:	4413      	add	r3, r2
 80122c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80122d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80122d6:	d0ec      	beq.n	80122b2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80122d8:	e080      	b.n	80123dc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	015a      	lsls	r2, r3, #5
 80122de:	69bb      	ldr	r3, [r7, #24]
 80122e0:	4413      	add	r3, r2
 80122e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	697a      	ldr	r2, [r7, #20]
 80122ea:	0151      	lsls	r1, r2, #5
 80122ec:	69ba      	ldr	r2, [r7, #24]
 80122ee:	440a      	add	r2, r1
 80122f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80122f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80122f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80122fa:	e06f      	b.n	80123dc <USB_HC_Halt+0x22a>
            break;
 80122fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80122fe:	e06d      	b.n	80123dc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	015a      	lsls	r2, r3, #5
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	4413      	add	r3, r2
 8012308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	697a      	ldr	r2, [r7, #20]
 8012310:	0151      	lsls	r1, r2, #5
 8012312:	69ba      	ldr	r2, [r7, #24]
 8012314:	440a      	add	r2, r1
 8012316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801231a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801231e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8012320:	69bb      	ldr	r3, [r7, #24]
 8012322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012326:	691b      	ldr	r3, [r3, #16]
 8012328:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801232c:	2b00      	cmp	r3, #0
 801232e:	d143      	bne.n	80123b8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	015a      	lsls	r2, r3, #5
 8012334:	69bb      	ldr	r3, [r7, #24]
 8012336:	4413      	add	r3, r2
 8012338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	697a      	ldr	r2, [r7, #20]
 8012340:	0151      	lsls	r1, r2, #5
 8012342:	69ba      	ldr	r2, [r7, #24]
 8012344:	440a      	add	r2, r1
 8012346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801234a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801234e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	015a      	lsls	r2, r3, #5
 8012354:	69bb      	ldr	r3, [r7, #24]
 8012356:	4413      	add	r3, r2
 8012358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	697a      	ldr	r2, [r7, #20]
 8012360:	0151      	lsls	r1, r2, #5
 8012362:	69ba      	ldr	r2, [r7, #24]
 8012364:	440a      	add	r2, r1
 8012366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801236a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801236e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	015a      	lsls	r2, r3, #5
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	4413      	add	r3, r2
 8012378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	697a      	ldr	r2, [r7, #20]
 8012380:	0151      	lsls	r1, r2, #5
 8012382:	69ba      	ldr	r2, [r7, #24]
 8012384:	440a      	add	r2, r1
 8012386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801238a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801238e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	3301      	adds	r3, #1
 8012394:	61fb      	str	r3, [r7, #28]
 8012396:	69fb      	ldr	r3, [r7, #28]
 8012398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801239c:	d81d      	bhi.n	80123da <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	015a      	lsls	r2, r3, #5
 80123a2:	69bb      	ldr	r3, [r7, #24]
 80123a4:	4413      	add	r3, r2
 80123a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80123b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80123b4:	d0ec      	beq.n	8012390 <USB_HC_Halt+0x1de>
 80123b6:	e011      	b.n	80123dc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	015a      	lsls	r2, r3, #5
 80123bc:	69bb      	ldr	r3, [r7, #24]
 80123be:	4413      	add	r3, r2
 80123c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	697a      	ldr	r2, [r7, #20]
 80123c8:	0151      	lsls	r1, r2, #5
 80123ca:	69ba      	ldr	r2, [r7, #24]
 80123cc:	440a      	add	r2, r1
 80123ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80123d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80123d6:	6013      	str	r3, [r2, #0]
 80123d8:	e000      	b.n	80123dc <USB_HC_Halt+0x22a>
          break;
 80123da:	bf00      	nop
    }
  }

  return HAL_OK;
 80123dc:	2300      	movs	r3, #0
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3724      	adds	r7, #36	; 0x24
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr
	...

080123ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b087      	sub	sp, #28
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	460b      	mov	r3, r1
 80123f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80123fc:	78fb      	ldrb	r3, [r7, #3]
 80123fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012400:	2301      	movs	r3, #1
 8012402:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	04da      	lsls	r2, r3, #19
 8012408:	4b15      	ldr	r3, [pc, #84]	; (8012460 <USB_DoPing+0x74>)
 801240a:	4013      	ands	r3, r2
 801240c:	693a      	ldr	r2, [r7, #16]
 801240e:	0151      	lsls	r1, r2, #5
 8012410:	697a      	ldr	r2, [r7, #20]
 8012412:	440a      	add	r2, r1
 8012414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801241c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	015a      	lsls	r2, r3, #5
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	4413      	add	r3, r2
 8012426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012434:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801243c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	015a      	lsls	r2, r3, #5
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	4413      	add	r3, r2
 8012446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801244a:	461a      	mov	r2, r3
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8012450:	2300      	movs	r3, #0
}
 8012452:	4618      	mov	r0, r3
 8012454:	371c      	adds	r7, #28
 8012456:	46bd      	mov	sp, r7
 8012458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop
 8012460:	1ff80000 	.word	0x1ff80000

08012464 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b086      	sub	sp, #24
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8012470:	2300      	movs	r3, #0
 8012472:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f7ff f98e 	bl	8011796 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 801247a:	2110      	movs	r1, #16
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f7ff f9c5 	bl	801180c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f7ff f9e8 	bl	8011858 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8012488:	2300      	movs	r3, #0
 801248a:	613b      	str	r3, [r7, #16]
 801248c:	e01f      	b.n	80124ce <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	015a      	lsls	r2, r3, #5
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	4413      	add	r3, r2
 8012496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80124a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80124b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	015a      	lsls	r2, r3, #5
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	4413      	add	r3, r2
 80124be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124c2:	461a      	mov	r2, r3
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	3301      	adds	r3, #1
 80124cc:	613b      	str	r3, [r7, #16]
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	2b0f      	cmp	r3, #15
 80124d2:	d9dc      	bls.n	801248e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80124d4:	2300      	movs	r3, #0
 80124d6:	613b      	str	r3, [r7, #16]
 80124d8:	e034      	b.n	8012544 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	015a      	lsls	r2, r3, #5
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	4413      	add	r3, r2
 80124e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80124f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80124f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012500:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	015a      	lsls	r2, r3, #5
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	4413      	add	r3, r2
 801250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801250e:	461a      	mov	r2, r3
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	3301      	adds	r3, #1
 8012518:	617b      	str	r3, [r7, #20]
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012520:	d80c      	bhi.n	801253c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	015a      	lsls	r2, r3, #5
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	4413      	add	r3, r2
 801252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012538:	d0ec      	beq.n	8012514 <USB_StopHost+0xb0>
 801253a:	e000      	b.n	801253e <USB_StopHost+0xda>
        break;
 801253c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	3301      	adds	r3, #1
 8012542:	613b      	str	r3, [r7, #16]
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	2b0f      	cmp	r3, #15
 8012548:	d9c7      	bls.n	80124da <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012550:	461a      	mov	r2, r3
 8012552:	f04f 33ff 	mov.w	r3, #4294967295
 8012556:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f04f 32ff 	mov.w	r2, #4294967295
 801255e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f7ff f907 	bl	8011774 <USB_EnableGlobalInt>

  return HAL_OK;
 8012566:	2300      	movs	r3, #0
}
 8012568:	4618      	mov	r0, r3
 801256a:	3718      	adds	r7, #24
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012574:	4904      	ldr	r1, [pc, #16]	; (8012588 <MX_FATFS_Init+0x18>)
 8012576:	4805      	ldr	r0, [pc, #20]	; (801258c <MX_FATFS_Init+0x1c>)
 8012578:	f002 fbf0 	bl	8014d5c <FATFS_LinkDriver>
 801257c:	4603      	mov	r3, r0
 801257e:	461a      	mov	r2, r3
 8012580:	4b03      	ldr	r3, [pc, #12]	; (8012590 <MX_FATFS_Init+0x20>)
 8012582:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012584:	bf00      	nop
 8012586:	bd80      	pop	{r7, pc}
 8012588:	200418e8 	.word	0x200418e8
 801258c:	0801ba3c 	.word	0x0801ba3c
 8012590:	200418e4 	.word	0x200418e4

08012594 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801259a:	2300      	movs	r3, #0
 801259c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801259e:	f000 f87b 	bl	8012698 <BSP_SD_IsDetected>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d001      	beq.n	80125ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80125a8:	2302      	movs	r3, #2
 80125aa:	e012      	b.n	80125d2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80125ac:	480b      	ldr	r0, [pc, #44]	; (80125dc <BSP_SD_Init+0x48>)
 80125ae:	f7fb fae0 	bl	800db72 <HAL_SD_Init>
 80125b2:	4603      	mov	r3, r0
 80125b4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80125b6:	79fb      	ldrb	r3, [r7, #7]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d109      	bne.n	80125d0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80125bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80125c0:	4806      	ldr	r0, [pc, #24]	; (80125dc <BSP_SD_Init+0x48>)
 80125c2:	f7fb ff2f 	bl	800e424 <HAL_SD_ConfigWideBusOperation>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d001      	beq.n	80125d0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80125cc:	2301      	movs	r3, #1
 80125ce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80125d0:	79fb      	ldrb	r3, [r7, #7]
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	20001818 	.word	0x20001818

080125e0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b086      	sub	sp, #24
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80125ec:	2300      	movs	r3, #0
 80125ee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	68ba      	ldr	r2, [r7, #8]
 80125f4:	68f9      	ldr	r1, [r7, #12]
 80125f6:	4806      	ldr	r0, [pc, #24]	; (8012610 <BSP_SD_ReadBlocks_DMA+0x30>)
 80125f8:	f7fb fb72 	bl	800dce0 <HAL_SD_ReadBlocks_DMA>
 80125fc:	4603      	mov	r3, r0
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d001      	beq.n	8012606 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012602:	2301      	movs	r3, #1
 8012604:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012606:	7dfb      	ldrb	r3, [r7, #23]
}
 8012608:	4618      	mov	r0, r3
 801260a:	3718      	adds	r7, #24
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	20001818 	.word	0x20001818

08012614 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	af00      	add	r7, sp, #0
 801261a:	60f8      	str	r0, [r7, #12]
 801261c:	60b9      	str	r1, [r7, #8]
 801261e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012620:	2300      	movs	r3, #0
 8012622:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	68ba      	ldr	r2, [r7, #8]
 8012628:	68f9      	ldr	r1, [r7, #12]
 801262a:	4806      	ldr	r0, [pc, #24]	; (8012644 <BSP_SD_WriteBlocks_DMA+0x30>)
 801262c:	f7fb fc3a 	bl	800dea4 <HAL_SD_WriteBlocks_DMA>
 8012630:	4603      	mov	r3, r0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d001      	beq.n	801263a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012636:	2301      	movs	r3, #1
 8012638:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801263a:	7dfb      	ldrb	r3, [r7, #23]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3718      	adds	r7, #24
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	20001818 	.word	0x20001818

08012648 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801264c:	4805      	ldr	r0, [pc, #20]	; (8012664 <BSP_SD_GetCardState+0x1c>)
 801264e:	f7fb ff83 	bl	800e558 <HAL_SD_GetCardState>
 8012652:	4603      	mov	r3, r0
 8012654:	2b04      	cmp	r3, #4
 8012656:	bf14      	ite	ne
 8012658:	2301      	movne	r3, #1
 801265a:	2300      	moveq	r3, #0
 801265c:	b2db      	uxtb	r3, r3
}
 801265e:	4618      	mov	r0, r3
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	20001818 	.word	0x20001818

08012668 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012670:	6879      	ldr	r1, [r7, #4]
 8012672:	4803      	ldr	r0, [pc, #12]	; (8012680 <BSP_SD_GetCardInfo+0x18>)
 8012674:	f7fb feaa 	bl	800e3cc <HAL_SD_GetCardInfo>
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	20001818 	.word	0x20001818

08012684 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801268c:	f000 f9b2 	bl	80129f4 <BSP_SD_ReadCpltCallback>
}
 8012690:	bf00      	nop
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801269e:	2301      	movs	r3, #1
 80126a0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80126a2:	f000 f80b 	bl	80126bc <BSP_PlatformIsDetected>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d101      	bne.n	80126b0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80126ac:	2300      	movs	r3, #0
 80126ae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80126b0:	79fb      	ldrb	r3, [r7, #7]
 80126b2:	b2db      	uxtb	r3, r3
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3708      	adds	r7, #8
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80126c2:	2301      	movs	r3, #1
 80126c4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80126c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80126ca:	4806      	ldr	r0, [pc, #24]	; (80126e4 <BSP_PlatformIsDetected+0x28>)
 80126cc:	f7f5 fa38 	bl	8007b40 <HAL_GPIO_ReadPin>
 80126d0:	4603      	mov	r3, r0
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d001      	beq.n	80126da <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80126d6:	2300      	movs	r3, #0
 80126d8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80126da:	79fb      	ldrb	r3, [r7, #7]
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3708      	adds	r7, #8
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	40020800 	.word	0x40020800

080126e8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b084      	sub	sp, #16
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80126f0:	f002 fb80 	bl	8014df4 <osKernelSysTick>
 80126f4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80126f6:	e006      	b.n	8012706 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80126f8:	f7ff ffa6 	bl	8012648 <BSP_SD_GetCardState>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d101      	bne.n	8012706 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012702:	2300      	movs	r3, #0
 8012704:	e009      	b.n	801271a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8012706:	f002 fb75 	bl	8014df4 <osKernelSysTick>
 801270a:	4602      	mov	r2, r0
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	1ad3      	subs	r3, r2, r3
 8012710:	687a      	ldr	r2, [r7, #4]
 8012712:	429a      	cmp	r2, r3
 8012714:	d8f0      	bhi.n	80126f8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012716:	f04f 33ff 	mov.w	r3, #4294967295
}
 801271a:	4618      	mov	r0, r3
 801271c:	3710      	adds	r7, #16
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
	...

08012724 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	4603      	mov	r3, r0
 801272c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801272e:	4b0b      	ldr	r3, [pc, #44]	; (801275c <SD_CheckStatus+0x38>)
 8012730:	2201      	movs	r2, #1
 8012732:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012734:	f7ff ff88 	bl	8012648 <BSP_SD_GetCardState>
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d107      	bne.n	801274e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801273e:	4b07      	ldr	r3, [pc, #28]	; (801275c <SD_CheckStatus+0x38>)
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	b2db      	uxtb	r3, r3
 8012744:	f023 0301 	bic.w	r3, r3, #1
 8012748:	b2da      	uxtb	r2, r3
 801274a:	4b04      	ldr	r3, [pc, #16]	; (801275c <SD_CheckStatus+0x38>)
 801274c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801274e:	4b03      	ldr	r3, [pc, #12]	; (801275c <SD_CheckStatus+0x38>)
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	b2db      	uxtb	r3, r3
}
 8012754:	4618      	mov	r0, r3
 8012756:	3708      	adds	r7, #8
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	20000029 	.word	0x20000029

08012760 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012760:	b590      	push	{r4, r7, lr}
 8012762:	b087      	sub	sp, #28
 8012764:	af00      	add	r7, sp, #0
 8012766:	4603      	mov	r3, r0
 8012768:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801276a:	4b20      	ldr	r3, [pc, #128]	; (80127ec <SD_initialize+0x8c>)
 801276c:	2201      	movs	r2, #1
 801276e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8012770:	f002 fb34 	bl	8014ddc <osKernelRunning>
 8012774:	4603      	mov	r3, r0
 8012776:	2b00      	cmp	r3, #0
 8012778:	d030      	beq.n	80127dc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801277a:	f7ff ff0b 	bl	8012594 <BSP_SD_Init>
 801277e:	4603      	mov	r3, r0
 8012780:	2b00      	cmp	r3, #0
 8012782:	d107      	bne.n	8012794 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8012784:	79fb      	ldrb	r3, [r7, #7]
 8012786:	4618      	mov	r0, r3
 8012788:	f7ff ffcc 	bl	8012724 <SD_CheckStatus>
 801278c:	4603      	mov	r3, r0
 801278e:	461a      	mov	r2, r3
 8012790:	4b16      	ldr	r3, [pc, #88]	; (80127ec <SD_initialize+0x8c>)
 8012792:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012794:	4b15      	ldr	r3, [pc, #84]	; (80127ec <SD_initialize+0x8c>)
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	b2db      	uxtb	r3, r3
 801279a:	2b01      	cmp	r3, #1
 801279c:	d01e      	beq.n	80127dc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 801279e:	4b14      	ldr	r3, [pc, #80]	; (80127f0 <SD_initialize+0x90>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d10e      	bne.n	80127c4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80127a6:	4b13      	ldr	r3, [pc, #76]	; (80127f4 <SD_initialize+0x94>)
 80127a8:	f107 0408 	add.w	r4, r7, #8
 80127ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80127ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80127b2:	f107 0308 	add.w	r3, r7, #8
 80127b6:	2100      	movs	r1, #0
 80127b8:	4618      	mov	r0, r3
 80127ba:	f002 fc17 	bl	8014fec <osMessageCreate>
 80127be:	4603      	mov	r3, r0
 80127c0:	4a0b      	ldr	r2, [pc, #44]	; (80127f0 <SD_initialize+0x90>)
 80127c2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80127c4:	4b0a      	ldr	r3, [pc, #40]	; (80127f0 <SD_initialize+0x90>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d107      	bne.n	80127dc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80127cc:	4b07      	ldr	r3, [pc, #28]	; (80127ec <SD_initialize+0x8c>)
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	f043 0301 	orr.w	r3, r3, #1
 80127d6:	b2da      	uxtb	r2, r3
 80127d8:	4b04      	ldr	r3, [pc, #16]	; (80127ec <SD_initialize+0x8c>)
 80127da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80127dc:	4b03      	ldr	r3, [pc, #12]	; (80127ec <SD_initialize+0x8c>)
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	b2db      	uxtb	r3, r3
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	371c      	adds	r7, #28
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd90      	pop	{r4, r7, pc}
 80127ea:	bf00      	nop
 80127ec:	20000029 	.word	0x20000029
 80127f0:	200418ec 	.word	0x200418ec
 80127f4:	08019a9c 	.word	0x08019a9c

080127f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	4603      	mov	r3, r0
 8012800:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012802:	79fb      	ldrb	r3, [r7, #7]
 8012804:	4618      	mov	r0, r3
 8012806:	f7ff ff8d 	bl	8012724 <SD_CheckStatus>
 801280a:	4603      	mov	r3, r0
}
 801280c:	4618      	mov	r0, r3
 801280e:	3708      	adds	r7, #8
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b08a      	sub	sp, #40	; 0x28
 8012818:	af00      	add	r7, sp, #0
 801281a:	60b9      	str	r1, [r7, #8]
 801281c:	607a      	str	r2, [r7, #4]
 801281e:	603b      	str	r3, [r7, #0]
 8012820:	4603      	mov	r3, r0
 8012822:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012824:	2301      	movs	r3, #1
 8012826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801282a:	f247 5030 	movw	r0, #30000	; 0x7530
 801282e:	f7ff ff5b 	bl	80126e8 <SD_CheckStatusWithTimeout>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	da02      	bge.n	801283e <SD_read+0x2a>
  {
    return res;
 8012838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801283c:	e032      	b.n	80128a4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801283e:	683a      	ldr	r2, [r7, #0]
 8012840:	6879      	ldr	r1, [r7, #4]
 8012842:	68b8      	ldr	r0, [r7, #8]
 8012844:	f7ff fecc 	bl	80125e0 <BSP_SD_ReadBlocks_DMA>
 8012848:	4603      	mov	r3, r0
 801284a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 801284e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012852:	2b00      	cmp	r3, #0
 8012854:	d124      	bne.n	80128a0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012856:	4b15      	ldr	r3, [pc, #84]	; (80128ac <SD_read+0x98>)
 8012858:	6819      	ldr	r1, [r3, #0]
 801285a:	f107 0314 	add.w	r3, r7, #20
 801285e:	f247 5230 	movw	r2, #30000	; 0x7530
 8012862:	4618      	mov	r0, r3
 8012864:	f002 fc2a 	bl	80150bc <osMessageGet>

    if (event.status == osEventMessage)
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	2b10      	cmp	r3, #16
 801286c:	d118      	bne.n	80128a0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	2b01      	cmp	r3, #1
 8012872:	d115      	bne.n	80128a0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8012874:	f002 fabe 	bl	8014df4 <osKernelSysTick>
 8012878:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801287a:	e008      	b.n	801288e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801287c:	f7ff fee4 	bl	8012648 <BSP_SD_GetCardState>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d103      	bne.n	801288e <SD_read+0x7a>
              {
                res = RES_OK;
 8012886:	2300      	movs	r3, #0
 8012888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801288c:	e008      	b.n	80128a0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801288e:	f002 fab1 	bl	8014df4 <osKernelSysTick>
 8012892:	4602      	mov	r2, r0
 8012894:	6a3b      	ldr	r3, [r7, #32]
 8012896:	1ad3      	subs	r3, r2, r3
 8012898:	f247 522f 	movw	r2, #29999	; 0x752f
 801289c:	4293      	cmp	r3, r2
 801289e:	d9ed      	bls.n	801287c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80128a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3728      	adds	r7, #40	; 0x28
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	200418ec 	.word	0x200418ec

080128b0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b08a      	sub	sp, #40	; 0x28
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	60b9      	str	r1, [r7, #8]
 80128b8:	607a      	str	r2, [r7, #4]
 80128ba:	603b      	str	r3, [r7, #0]
 80128bc:	4603      	mov	r3, r0
 80128be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80128c0:	2301      	movs	r3, #1
 80128c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80128c6:	f247 5030 	movw	r0, #30000	; 0x7530
 80128ca:	f7ff ff0d 	bl	80126e8 <SD_CheckStatusWithTimeout>
 80128ce:	4603      	mov	r3, r0
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	da02      	bge.n	80128da <SD_write+0x2a>
  {
    return res;
 80128d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128d8:	e02e      	b.n	8012938 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80128da:	683a      	ldr	r2, [r7, #0]
 80128dc:	6879      	ldr	r1, [r7, #4]
 80128de:	68b8      	ldr	r0, [r7, #8]
 80128e0:	f7ff fe98 	bl	8012614 <BSP_SD_WriteBlocks_DMA>
 80128e4:	4603      	mov	r3, r0
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d124      	bne.n	8012934 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80128ea:	4b15      	ldr	r3, [pc, #84]	; (8012940 <SD_write+0x90>)
 80128ec:	6819      	ldr	r1, [r3, #0]
 80128ee:	f107 0314 	add.w	r3, r7, #20
 80128f2:	f247 5230 	movw	r2, #30000	; 0x7530
 80128f6:	4618      	mov	r0, r3
 80128f8:	f002 fbe0 	bl	80150bc <osMessageGet>

    if (event.status == osEventMessage)
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	2b10      	cmp	r3, #16
 8012900:	d118      	bne.n	8012934 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	2b02      	cmp	r3, #2
 8012906:	d115      	bne.n	8012934 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8012908:	f002 fa74 	bl	8014df4 <osKernelSysTick>
 801290c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801290e:	e008      	b.n	8012922 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012910:	f7ff fe9a 	bl	8012648 <BSP_SD_GetCardState>
 8012914:	4603      	mov	r3, r0
 8012916:	2b00      	cmp	r3, #0
 8012918:	d103      	bne.n	8012922 <SD_write+0x72>
          {
            res = RES_OK;
 801291a:	2300      	movs	r3, #0
 801291c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012920:	e008      	b.n	8012934 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012922:	f002 fa67 	bl	8014df4 <osKernelSysTick>
 8012926:	4602      	mov	r2, r0
 8012928:	6a3b      	ldr	r3, [r7, #32]
 801292a:	1ad3      	subs	r3, r2, r3
 801292c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012930:	4293      	cmp	r3, r2
 8012932:	d9ed      	bls.n	8012910 <SD_write+0x60>
    }

  }
#endif

  return res;
 8012934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012938:	4618      	mov	r0, r3
 801293a:	3728      	adds	r7, #40	; 0x28
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}
 8012940:	200418ec 	.word	0x200418ec

08012944 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b08c      	sub	sp, #48	; 0x30
 8012948:	af00      	add	r7, sp, #0
 801294a:	4603      	mov	r3, r0
 801294c:	603a      	str	r2, [r7, #0]
 801294e:	71fb      	strb	r3, [r7, #7]
 8012950:	460b      	mov	r3, r1
 8012952:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012954:	2301      	movs	r3, #1
 8012956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801295a:	4b25      	ldr	r3, [pc, #148]	; (80129f0 <SD_ioctl+0xac>)
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	b2db      	uxtb	r3, r3
 8012960:	f003 0301 	and.w	r3, r3, #1
 8012964:	2b00      	cmp	r3, #0
 8012966:	d001      	beq.n	801296c <SD_ioctl+0x28>
 8012968:	2303      	movs	r3, #3
 801296a:	e03c      	b.n	80129e6 <SD_ioctl+0xa2>

  switch (cmd)
 801296c:	79bb      	ldrb	r3, [r7, #6]
 801296e:	2b03      	cmp	r3, #3
 8012970:	d834      	bhi.n	80129dc <SD_ioctl+0x98>
 8012972:	a201      	add	r2, pc, #4	; (adr r2, 8012978 <SD_ioctl+0x34>)
 8012974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012978:	08012989 	.word	0x08012989
 801297c:	08012991 	.word	0x08012991
 8012980:	080129a9 	.word	0x080129a9
 8012984:	080129c3 	.word	0x080129c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012988:	2300      	movs	r3, #0
 801298a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801298e:	e028      	b.n	80129e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012990:	f107 030c 	add.w	r3, r7, #12
 8012994:	4618      	mov	r0, r3
 8012996:	f7ff fe67 	bl	8012668 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80129a0:	2300      	movs	r3, #0
 80129a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80129a6:	e01c      	b.n	80129e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80129a8:	f107 030c 	add.w	r3, r7, #12
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7ff fe5b 	bl	8012668 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80129b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80129ba:	2300      	movs	r3, #0
 80129bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80129c0:	e00f      	b.n	80129e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80129c2:	f107 030c 	add.w	r3, r7, #12
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7ff fe4e 	bl	8012668 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80129cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ce:	0a5a      	lsrs	r2, r3, #9
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80129d4:	2300      	movs	r3, #0
 80129d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80129da:	e002      	b.n	80129e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80129dc:	2304      	movs	r3, #4
 80129de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80129e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3730      	adds	r7, #48	; 0x30
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	20000029 	.word	0x20000029

080129f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80129f8:	4b04      	ldr	r3, [pc, #16]	; (8012a0c <BSP_SD_ReadCpltCallback+0x18>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2200      	movs	r2, #0
 80129fe:	2101      	movs	r1, #1
 8012a00:	4618      	mov	r0, r3
 8012a02:	f002 fb1b 	bl	801503c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8012a06:	bf00      	nop
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	200418ec 	.word	0x200418ec

08012a10 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8012a10:	b480      	push	{r7}
 8012a12:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8012a14:	bf00      	nop
 8012a16:	46bd      	mov	sp, r7
 8012a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1c:	4770      	bx	lr

08012a1e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8012a1e:	b590      	push	{r4, r7, lr}
 8012a20:	b089      	sub	sp, #36	; 0x24
 8012a22:	af04      	add	r7, sp, #16
 8012a24:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8012a26:	2301      	movs	r3, #1
 8012a28:	2202      	movs	r2, #2
 8012a2a:	2102      	movs	r1, #2
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f000 fcb9 	bl	80133a4 <USBH_FindInterface>
 8012a32:	4603      	mov	r3, r0
 8012a34:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012a36:	7bfb      	ldrb	r3, [r7, #15]
 8012a38:	2bff      	cmp	r3, #255	; 0xff
 8012a3a:	d002      	beq.n	8012a42 <USBH_CDC_InterfaceInit+0x24>
 8012a3c:	7bfb      	ldrb	r3, [r7, #15]
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d901      	bls.n	8012a46 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012a42:	2302      	movs	r3, #2
 8012a44:	e13d      	b.n	8012cc2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8012a46:	7bfb      	ldrb	r3, [r7, #15]
 8012a48:	4619      	mov	r1, r3
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f000 fc8e 	bl	801336c <USBH_SelectInterface>
 8012a50:	4603      	mov	r3, r0
 8012a52:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8012a54:	7bbb      	ldrb	r3, [r7, #14]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d001      	beq.n	8012a5e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8012a5a:	2302      	movs	r3, #2
 8012a5c:	e131      	b.n	8012cc2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8012a64:	2050      	movs	r0, #80	; 0x50
 8012a66:	f005 fa3f 	bl	8017ee8 <malloc>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012a74:	69db      	ldr	r3, [r3, #28]
 8012a76:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d101      	bne.n	8012a82 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8012a7e:	2302      	movs	r3, #2
 8012a80:	e11f      	b.n	8012cc2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8012a82:	2250      	movs	r2, #80	; 0x50
 8012a84:	2100      	movs	r1, #0
 8012a86:	68b8      	ldr	r0, [r7, #8]
 8012a88:	f005 fa4c 	bl	8017f24 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8012a8c:	7bfb      	ldrb	r3, [r7, #15]
 8012a8e:	687a      	ldr	r2, [r7, #4]
 8012a90:	211a      	movs	r1, #26
 8012a92:	fb01 f303 	mul.w	r3, r1, r3
 8012a96:	4413      	add	r3, r2
 8012a98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	b25b      	sxtb	r3, r3
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	da15      	bge.n	8012ad0 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012aa4:	7bfb      	ldrb	r3, [r7, #15]
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	211a      	movs	r1, #26
 8012aaa:	fb01 f303 	mul.w	r3, r1, r3
 8012aae:	4413      	add	r3, r2
 8012ab0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012ab4:	781a      	ldrb	r2, [r3, #0]
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012aba:	7bfb      	ldrb	r3, [r7, #15]
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	211a      	movs	r1, #26
 8012ac0:	fb01 f303 	mul.w	r3, r1, r3
 8012ac4:	4413      	add	r3, r2
 8012ac6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012aca:	881a      	ldrh	r2, [r3, #0]
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	785b      	ldrb	r3, [r3, #1]
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f002 f891 	bl	8014bfe <USBH_AllocPipe>
 8012adc:	4603      	mov	r3, r0
 8012ade:	461a      	mov	r2, r3
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	7819      	ldrb	r1, [r3, #0]
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	7858      	ldrb	r0, [r3, #1]
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012af8:	68ba      	ldr	r2, [r7, #8]
 8012afa:	8952      	ldrh	r2, [r2, #10]
 8012afc:	9202      	str	r2, [sp, #8]
 8012afe:	2203      	movs	r2, #3
 8012b00:	9201      	str	r2, [sp, #4]
 8012b02:	9300      	str	r3, [sp, #0]
 8012b04:	4623      	mov	r3, r4
 8012b06:	4602      	mov	r2, r0
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f002 f849 	bl	8014ba0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	2200      	movs	r2, #0
 8012b14:	4619      	mov	r1, r3
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f005 f938 	bl	8017d8c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	2200      	movs	r2, #0
 8012b20:	210a      	movs	r1, #10
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 fc3e 	bl	80133a4 <USBH_FindInterface>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012b2c:	7bfb      	ldrb	r3, [r7, #15]
 8012b2e:	2bff      	cmp	r3, #255	; 0xff
 8012b30:	d002      	beq.n	8012b38 <USBH_CDC_InterfaceInit+0x11a>
 8012b32:	7bfb      	ldrb	r3, [r7, #15]
 8012b34:	2b01      	cmp	r3, #1
 8012b36:	d901      	bls.n	8012b3c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012b38:	2302      	movs	r3, #2
 8012b3a:	e0c2      	b.n	8012cc2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8012b3c:	7bfb      	ldrb	r3, [r7, #15]
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	211a      	movs	r1, #26
 8012b42:	fb01 f303 	mul.w	r3, r1, r3
 8012b46:	4413      	add	r3, r2
 8012b48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	b25b      	sxtb	r3, r3
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	da16      	bge.n	8012b82 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012b54:	7bfb      	ldrb	r3, [r7, #15]
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	211a      	movs	r1, #26
 8012b5a:	fb01 f303 	mul.w	r3, r1, r3
 8012b5e:	4413      	add	r3, r2
 8012b60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012b64:	781a      	ldrb	r2, [r3, #0]
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012b6a:	7bfb      	ldrb	r3, [r7, #15]
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	211a      	movs	r1, #26
 8012b70:	fb01 f303 	mul.w	r3, r1, r3
 8012b74:	4413      	add	r3, r2
 8012b76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012b7a:	881a      	ldrh	r2, [r3, #0]
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	835a      	strh	r2, [r3, #26]
 8012b80:	e015      	b.n	8012bae <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012b82:	7bfb      	ldrb	r3, [r7, #15]
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	211a      	movs	r1, #26
 8012b88:	fb01 f303 	mul.w	r3, r1, r3
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012b92:	781a      	ldrb	r2, [r3, #0]
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012b98:	7bfb      	ldrb	r3, [r7, #15]
 8012b9a:	687a      	ldr	r2, [r7, #4]
 8012b9c:	211a      	movs	r1, #26
 8012b9e:	fb01 f303 	mul.w	r3, r1, r3
 8012ba2:	4413      	add	r3, r2
 8012ba4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012ba8:	881a      	ldrh	r2, [r3, #0]
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8012bae:	7bfb      	ldrb	r3, [r7, #15]
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	211a      	movs	r1, #26
 8012bb4:	fb01 f303 	mul.w	r3, r1, r3
 8012bb8:	4413      	add	r3, r2
 8012bba:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	b25b      	sxtb	r3, r3
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	da16      	bge.n	8012bf4 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012bc6:	7bfb      	ldrb	r3, [r7, #15]
 8012bc8:	687a      	ldr	r2, [r7, #4]
 8012bca:	211a      	movs	r1, #26
 8012bcc:	fb01 f303 	mul.w	r3, r1, r3
 8012bd0:	4413      	add	r3, r2
 8012bd2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012bd6:	781a      	ldrb	r2, [r3, #0]
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012bdc:	7bfb      	ldrb	r3, [r7, #15]
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	211a      	movs	r1, #26
 8012be2:	fb01 f303 	mul.w	r3, r1, r3
 8012be6:	4413      	add	r3, r2
 8012be8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012bec:	881a      	ldrh	r2, [r3, #0]
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	835a      	strh	r2, [r3, #26]
 8012bf2:	e015      	b.n	8012c20 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012bf4:	7bfb      	ldrb	r3, [r7, #15]
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	211a      	movs	r1, #26
 8012bfa:	fb01 f303 	mul.w	r3, r1, r3
 8012bfe:	4413      	add	r3, r2
 8012c00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012c04:	781a      	ldrb	r2, [r3, #0]
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012c0a:	7bfb      	ldrb	r3, [r7, #15]
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	211a      	movs	r1, #26
 8012c10:	fb01 f303 	mul.w	r3, r1, r3
 8012c14:	4413      	add	r3, r2
 8012c16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012c1a:	881a      	ldrh	r2, [r3, #0]
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	7b9b      	ldrb	r3, [r3, #14]
 8012c24:	4619      	mov	r1, r3
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f001 ffe9 	bl	8014bfe <USBH_AllocPipe>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	461a      	mov	r2, r3
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	7bdb      	ldrb	r3, [r3, #15]
 8012c38:	4619      	mov	r1, r3
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f001 ffdf 	bl	8014bfe <USBH_AllocPipe>
 8012c40:	4603      	mov	r3, r0
 8012c42:	461a      	mov	r2, r3
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	7b59      	ldrb	r1, [r3, #13]
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	7b98      	ldrb	r0, [r3, #14]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012c5c:	68ba      	ldr	r2, [r7, #8]
 8012c5e:	8b12      	ldrh	r2, [r2, #24]
 8012c60:	9202      	str	r2, [sp, #8]
 8012c62:	2202      	movs	r2, #2
 8012c64:	9201      	str	r2, [sp, #4]
 8012c66:	9300      	str	r3, [sp, #0]
 8012c68:	4623      	mov	r3, r4
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f001 ff97 	bl	8014ba0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	7b19      	ldrb	r1, [r3, #12]
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	7bd8      	ldrb	r0, [r3, #15]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012c86:	68ba      	ldr	r2, [r7, #8]
 8012c88:	8b52      	ldrh	r2, [r2, #26]
 8012c8a:	9202      	str	r2, [sp, #8]
 8012c8c:	2202      	movs	r2, #2
 8012c8e:	9201      	str	r2, [sp, #4]
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	4623      	mov	r3, r4
 8012c94:	4602      	mov	r2, r0
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f001 ff82 	bl	8014ba0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	7b5b      	ldrb	r3, [r3, #13]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	4619      	mov	r1, r3
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f005 f86d 	bl	8017d8c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	7b1b      	ldrb	r3, [r3, #12]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	4619      	mov	r1, r3
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f005 f866 	bl	8017d8c <USBH_LL_SetToggle>

  return USBH_OK;
 8012cc0:	2300      	movs	r3, #0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3714      	adds	r7, #20
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd90      	pop	{r4, r7, pc}

08012cca <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b084      	sub	sp, #16
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012cd8:	69db      	ldr	r3, [r3, #28]
 8012cda:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d00e      	beq.n	8012d02 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	4619      	mov	r1, r3
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f001 ff77 	bl	8014bde <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	f001 ffa2 	bl	8014c40 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	7b1b      	ldrb	r3, [r3, #12]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00e      	beq.n	8012d28 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	7b1b      	ldrb	r3, [r3, #12]
 8012d0e:	4619      	mov	r1, r3
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f001 ff64 	bl	8014bde <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	7b1b      	ldrb	r3, [r3, #12]
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f001 ff8f 	bl	8014c40 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	2200      	movs	r2, #0
 8012d26:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	7b5b      	ldrb	r3, [r3, #13]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d00e      	beq.n	8012d4e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	7b5b      	ldrb	r3, [r3, #13]
 8012d34:	4619      	mov	r1, r3
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f001 ff51 	bl	8014bde <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	7b5b      	ldrb	r3, [r3, #13]
 8012d40:	4619      	mov	r1, r3
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f001 ff7c 	bl	8014c40 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012d54:	69db      	ldr	r3, [r3, #28]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d00b      	beq.n	8012d72 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012d60:	69db      	ldr	r3, [r3, #28]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f005 f8c8 	bl	8017ef8 <free>
    phost->pActiveClass->pData = 0U;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012d6e:	2200      	movs	r2, #0
 8012d70:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8012d72:	2300      	movs	r3, #0
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3710      	adds	r7, #16
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}

08012d7c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b084      	sub	sp, #16
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012d8a:	69db      	ldr	r3, [r3, #28]
 8012d8c:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	3340      	adds	r3, #64	; 0x40
 8012d92:	4619      	mov	r1, r3
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 f8b2 	bl	8012efe <GetLineCoding>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8012d9e:	7afb      	ldrb	r3, [r7, #11]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d105      	bne.n	8012db0 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012daa:	2102      	movs	r1, #2
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8012db0:	7afb      	ldrb	r3, [r7, #11]
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3710      	adds	r7, #16
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
	...

08012dbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012dd2:	69db      	ldr	r3, [r3, #28]
 8012dd4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012ddc:	2b04      	cmp	r3, #4
 8012dde:	d877      	bhi.n	8012ed0 <USBH_CDC_Process+0x114>
 8012de0:	a201      	add	r2, pc, #4	; (adr r2, 8012de8 <USBH_CDC_Process+0x2c>)
 8012de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012de6:	bf00      	nop
 8012de8:	08012dfd 	.word	0x08012dfd
 8012dec:	08012e03 	.word	0x08012e03
 8012df0:	08012e33 	.word	0x08012e33
 8012df4:	08012ea7 	.word	0x08012ea7
 8012df8:	08012eb5 	.word	0x08012eb5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8012e00:	e06d      	b.n	8012ede <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e06:	4619      	mov	r1, r3
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	f000 f897 	bl	8012f3c <SetLineCoding>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012e12:	7bbb      	ldrb	r3, [r7, #14]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d104      	bne.n	8012e22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	2202      	movs	r2, #2
 8012e1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012e20:	e058      	b.n	8012ed4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8012e22:	7bbb      	ldrb	r3, [r7, #14]
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	d055      	beq.n	8012ed4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	2204      	movs	r2, #4
 8012e2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8012e30:	e050      	b.n	8012ed4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	3340      	adds	r3, #64	; 0x40
 8012e36:	4619      	mov	r1, r3
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f000 f860 	bl	8012efe <GetLineCoding>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012e42:	7bbb      	ldrb	r3, [r7, #14]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d126      	bne.n	8012e96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e5a:	791b      	ldrb	r3, [r3, #4]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d13b      	bne.n	8012ed8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d133      	bne.n	8012ed8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d12b      	bne.n	8012ed8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d124      	bne.n	8012ed8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f000 f982 	bl	8013198 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012e94:	e020      	b.n	8012ed8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8012e96:	7bbb      	ldrb	r3, [r7, #14]
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d01d      	beq.n	8012ed8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	2204      	movs	r2, #4
 8012ea0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8012ea4:	e018      	b.n	8012ed8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f000 f867 	bl	8012f7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f000 f8f6 	bl	801309e <CDC_ProcessReception>
      break;
 8012eb2:	e014      	b.n	8012ede <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8012eb4:	2100      	movs	r1, #0
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f001 f951 	bl	801415e <USBH_ClrFeature>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012ec0:	7bbb      	ldrb	r3, [r7, #14]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d10a      	bne.n	8012edc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8012ece:	e005      	b.n	8012edc <USBH_CDC_Process+0x120>

    default:
      break;
 8012ed0:	bf00      	nop
 8012ed2:	e004      	b.n	8012ede <USBH_CDC_Process+0x122>
      break;
 8012ed4:	bf00      	nop
 8012ed6:	e002      	b.n	8012ede <USBH_CDC_Process+0x122>
      break;
 8012ed8:	bf00      	nop
 8012eda:	e000      	b.n	8012ede <USBH_CDC_Process+0x122>
      break;
 8012edc:	bf00      	nop

  }

  return status;
 8012ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	3710      	adds	r7, #16
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}

08012ee8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b083      	sub	sp, #12
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	370c      	adds	r7, #12
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efc:	4770      	bx	lr

08012efe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012efe:	b580      	push	{r7, lr}
 8012f00:	b082      	sub	sp, #8
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
 8012f06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	22a1      	movs	r2, #161	; 0xa1
 8012f0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2221      	movs	r2, #33	; 0x21
 8012f12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2200      	movs	r2, #0
 8012f18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2207      	movs	r2, #7
 8012f24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	2207      	movs	r2, #7
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f001 faf6 	bl	801451e <USBH_CtlReq>
 8012f32:	4603      	mov	r3, r0
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2221      	movs	r2, #33	; 0x21
 8012f4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2220      	movs	r2, #32
 8012f50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2200      	movs	r2, #0
 8012f56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2207      	movs	r2, #7
 8012f62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	2207      	movs	r2, #7
 8012f68:	4619      	mov	r1, r3
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f001 fad7 	bl	801451e <USBH_CtlReq>
 8012f70:	4603      	mov	r3, r0
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3708      	adds	r7, #8
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}

08012f7a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8012f7a:	b580      	push	{r7, lr}
 8012f7c:	b086      	sub	sp, #24
 8012f7e:	af02      	add	r7, sp, #8
 8012f80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012f88:	69db      	ldr	r3, [r3, #28]
 8012f8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d002      	beq.n	8012fa0 <CDC_ProcessTransmission+0x26>
 8012f9a:	2b02      	cmp	r3, #2
 8012f9c:	d023      	beq.n	8012fe6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8012f9e:	e07a      	b.n	8013096 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa4:	68fa      	ldr	r2, [r7, #12]
 8012fa6:	8b12      	ldrh	r2, [r2, #24]
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	d90b      	bls.n	8012fc4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	69d9      	ldr	r1, [r3, #28]
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	8b1a      	ldrh	r2, [r3, #24]
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	7b5b      	ldrb	r3, [r3, #13]
 8012fb8:	2001      	movs	r0, #1
 8012fba:	9000      	str	r0, [sp, #0]
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f001 fdac 	bl	8014b1a <USBH_BulkSendData>
 8012fc2:	e00b      	b.n	8012fdc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	7b5b      	ldrb	r3, [r3, #13]
 8012fd2:	2001      	movs	r0, #1
 8012fd4:	9000      	str	r0, [sp, #0]
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f001 fd9f 	bl	8014b1a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2202      	movs	r2, #2
 8012fe0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8012fe4:	e057      	b.n	8013096 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	7b5b      	ldrb	r3, [r3, #13]
 8012fea:	4619      	mov	r1, r3
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f004 fea3 	bl	8017d38 <USBH_LL_GetURBState>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8012ff6:	7afb      	ldrb	r3, [r7, #11]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d136      	bne.n	801306a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013000:	68fa      	ldr	r2, [r7, #12]
 8013002:	8b12      	ldrh	r2, [r2, #24]
 8013004:	4293      	cmp	r3, r2
 8013006:	d90e      	bls.n	8013026 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801300c:	68fa      	ldr	r2, [r7, #12]
 801300e:	8b12      	ldrh	r2, [r2, #24]
 8013010:	1a9a      	subs	r2, r3, r2
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	69db      	ldr	r3, [r3, #28]
 801301a:	68fa      	ldr	r2, [r7, #12]
 801301c:	8b12      	ldrh	r2, [r2, #24]
 801301e:	441a      	add	r2, r3
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	61da      	str	r2, [r3, #28]
 8013024:	e002      	b.n	801302c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2200      	movs	r2, #0
 801302a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013030:	2b00      	cmp	r3, #0
 8013032:	d004      	beq.n	801303e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	2201      	movs	r2, #1
 8013038:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 801303c:	e006      	b.n	801304c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2200      	movs	r2, #0
 8013042:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f000 f892 	bl	8013170 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2204      	movs	r2, #4
 8013050:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013060:	2200      	movs	r2, #0
 8013062:	4619      	mov	r1, r3
 8013064:	f001 ffea 	bl	801503c <osMessagePut>
      break;
 8013068:	e014      	b.n	8013094 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 801306a:	7afb      	ldrb	r3, [r7, #11]
 801306c:	2b02      	cmp	r3, #2
 801306e:	d111      	bne.n	8013094 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	2201      	movs	r2, #1
 8013074:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2204      	movs	r2, #4
 801307c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801308c:	2200      	movs	r2, #0
 801308e:	4619      	mov	r1, r3
 8013090:	f001 ffd4 	bl	801503c <osMessagePut>
      break;
 8013094:	bf00      	nop
  }
}
 8013096:	bf00      	nop
 8013098:	3710      	adds	r7, #16
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}

0801309e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 801309e:	b580      	push	{r7, lr}
 80130a0:	b086      	sub	sp, #24
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130ac:	69db      	ldr	r3, [r3, #28]
 80130ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80130b0:	2300      	movs	r3, #0
 80130b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80130ba:	2b03      	cmp	r3, #3
 80130bc:	d002      	beq.n	80130c4 <CDC_ProcessReception+0x26>
 80130be:	2b04      	cmp	r3, #4
 80130c0:	d00e      	beq.n	80130e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80130c2:	e051      	b.n	8013168 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	6a19      	ldr	r1, [r3, #32]
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	8b5a      	ldrh	r2, [r3, #26]
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	7b1b      	ldrb	r3, [r3, #12]
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f001 fd47 	bl	8014b64 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	2204      	movs	r2, #4
 80130da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80130de:	e043      	b.n	8013168 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	7b1b      	ldrb	r3, [r3, #12]
 80130e4:	4619      	mov	r1, r3
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f004 fe26 	bl	8017d38 <USBH_LL_GetURBState>
 80130ec:	4603      	mov	r3, r0
 80130ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80130f0:	7cfb      	ldrb	r3, [r7, #19]
 80130f2:	2b01      	cmp	r3, #1
 80130f4:	d137      	bne.n	8013166 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	7b1b      	ldrb	r3, [r3, #12]
 80130fa:	4619      	mov	r1, r3
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f004 fd89 	bl	8017c14 <USBH_LL_GetLastXferSize>
 8013102:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013108:	68fa      	ldr	r2, [r7, #12]
 801310a:	429a      	cmp	r2, r3
 801310c:	d016      	beq.n	801313c <CDC_ProcessReception+0x9e>
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	8b5b      	ldrh	r3, [r3, #26]
 8013112:	461a      	mov	r2, r3
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	4293      	cmp	r3, r2
 8013118:	d910      	bls.n	801313c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	1ad2      	subs	r2, r2, r3
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	6a1a      	ldr	r2, [r3, #32]
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	441a      	add	r2, r3
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	2203      	movs	r2, #3
 8013136:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801313a:	e006      	b.n	801314a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	2200      	movs	r2, #0
 8013140:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f000 f81d 	bl	8013184 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2204      	movs	r2, #4
 801314e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801315e:	2200      	movs	r2, #0
 8013160:	4619      	mov	r1, r3
 8013162:	f001 ff6b 	bl	801503c <osMessagePut>
      break;
 8013166:	bf00      	nop
  }
}
 8013168:	bf00      	nop
 801316a:	3718      	adds	r7, #24
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8013170:	b480      	push	{r7}
 8013172:	b083      	sub	sp, #12
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013178:	bf00      	nop
 801317a:	370c      	adds	r7, #12
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr

08013184 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013184:	b480      	push	{r7}
 8013186:	b083      	sub	sp, #12
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801318c:	bf00      	nop
 801318e:	370c      	adds	r7, #12
 8013190:	46bd      	mov	sp, r7
 8013192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013196:	4770      	bx	lr

08013198 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80131a0:	bf00      	nop
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr

080131ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80131ac:	b5b0      	push	{r4, r5, r7, lr}
 80131ae:	b090      	sub	sp, #64	; 0x40
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	60f8      	str	r0, [r7, #12]
 80131b4:	60b9      	str	r1, [r7, #8]
 80131b6:	4613      	mov	r3, r2
 80131b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d101      	bne.n	80131c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80131c0:	2302      	movs	r3, #2
 80131c2:	e04d      	b.n	8013260 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	79fa      	ldrb	r2, [r7, #7]
 80131c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	2200      	movs	r2, #0
 80131d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	2200      	movs	r2, #0
 80131d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80131dc:	68f8      	ldr	r0, [r7, #12]
 80131de:	f000 f847 	bl	8013270 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	2200      	movs	r2, #0
 80131e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2200      	movs	r2, #0
 80131ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	2200      	movs	r2, #0
 80131f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2200      	movs	r2, #0
 80131fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d003      	beq.n	8013210 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	68ba      	ldr	r2, [r7, #8]
 801320c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8013210:	4b15      	ldr	r3, [pc, #84]	; (8013268 <USBH_Init+0xbc>)
 8013212:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8013216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 801321c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013220:	2100      	movs	r1, #0
 8013222:	4618      	mov	r0, r3
 8013224:	f001 fee2 	bl	8014fec <osMessageCreate>
 8013228:	4602      	mov	r2, r0
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8013230:	4b0e      	ldr	r3, [pc, #56]	; (801326c <USBH_Init+0xc0>)
 8013232:	f107 0414 	add.w	r4, r7, #20
 8013236:	461d      	mov	r5, r3
 8013238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801323a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801323c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8013244:	f107 0314 	add.w	r3, r7, #20
 8013248:	68f9      	ldr	r1, [r7, #12]
 801324a:	4618      	mov	r0, r3
 801324c:	f001 fde2 	bl	8014e14 <osThreadCreate>
 8013250:	4602      	mov	r2, r0
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8013258:	68f8      	ldr	r0, [r7, #12]
 801325a:	f004 fc27 	bl	8017aac <USBH_LL_Init>

  return USBH_OK;
 801325e:	2300      	movs	r3, #0
}
 8013260:	4618      	mov	r0, r3
 8013262:	3740      	adds	r7, #64	; 0x40
 8013264:	46bd      	mov	sp, r7
 8013266:	bdb0      	pop	{r4, r5, r7, pc}
 8013268:	08019abc 	.word	0x08019abc
 801326c:	08019acc 	.word	0x08019acc

08013270 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8013270:	b480      	push	{r7}
 8013272:	b085      	sub	sp, #20
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8013278:	2300      	movs	r3, #0
 801327a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801327c:	2300      	movs	r3, #0
 801327e:	60fb      	str	r3, [r7, #12]
 8013280:	e009      	b.n	8013296 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	33e0      	adds	r3, #224	; 0xe0
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	4413      	add	r3, r2
 801328c:	2200      	movs	r2, #0
 801328e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	3301      	adds	r3, #1
 8013294:	60fb      	str	r3, [r7, #12]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2b0e      	cmp	r3, #14
 801329a:	d9f2      	bls.n	8013282 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801329c:	2300      	movs	r3, #0
 801329e:	60fb      	str	r3, [r7, #12]
 80132a0:	e009      	b.n	80132b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80132a2:	687a      	ldr	r2, [r7, #4]
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	4413      	add	r3, r2
 80132a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80132ac:	2200      	movs	r2, #0
 80132ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	3301      	adds	r3, #1
 80132b4:	60fb      	str	r3, [r7, #12]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132bc:	d3f1      	bcc.n	80132a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2200      	movs	r2, #0
 80132c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2200      	movs	r2, #0
 80132c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2201      	movs	r2, #1
 80132ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2201      	movs	r2, #1
 80132dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2240      	movs	r2, #64	; 0x40
 80132e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2200      	movs	r2, #0
 80132e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2200      	movs	r2, #0
 80132ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2201      	movs	r2, #1
 80132f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2200      	movs	r2, #0
 80132fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2200      	movs	r2, #0
 8013306:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 801330a:	2300      	movs	r3, #0
}
 801330c:	4618      	mov	r0, r3
 801330e:	3714      	adds	r7, #20
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr

08013318 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8013322:	2300      	movs	r3, #0
 8013324:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d016      	beq.n	801335a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8013332:	2b00      	cmp	r3, #0
 8013334:	d10e      	bne.n	8013354 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801333c:	1c59      	adds	r1, r3, #1
 801333e:	687a      	ldr	r2, [r7, #4]
 8013340:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	33de      	adds	r3, #222	; 0xde
 8013348:	6839      	ldr	r1, [r7, #0]
 801334a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 801334e:	2300      	movs	r3, #0
 8013350:	73fb      	strb	r3, [r7, #15]
 8013352:	e004      	b.n	801335e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8013354:	2302      	movs	r3, #2
 8013356:	73fb      	strb	r3, [r7, #15]
 8013358:	e001      	b.n	801335e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801335a:	2302      	movs	r3, #2
 801335c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013360:	4618      	mov	r0, r3
 8013362:	3714      	adds	r7, #20
 8013364:	46bd      	mov	sp, r7
 8013366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336a:	4770      	bx	lr

0801336c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801336c:	b480      	push	{r7}
 801336e:	b085      	sub	sp, #20
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
 8013374:	460b      	mov	r3, r1
 8013376:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8013378:	2300      	movs	r3, #0
 801337a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8013382:	78fa      	ldrb	r2, [r7, #3]
 8013384:	429a      	cmp	r2, r3
 8013386:	d204      	bcs.n	8013392 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	78fa      	ldrb	r2, [r7, #3]
 801338c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8013390:	e001      	b.n	8013396 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013392:	2302      	movs	r3, #2
 8013394:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013396:	7bfb      	ldrb	r3, [r7, #15]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3714      	adds	r7, #20
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b087      	sub	sp, #28
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	4608      	mov	r0, r1
 80133ae:	4611      	mov	r1, r2
 80133b0:	461a      	mov	r2, r3
 80133b2:	4603      	mov	r3, r0
 80133b4:	70fb      	strb	r3, [r7, #3]
 80133b6:	460b      	mov	r3, r1
 80133b8:	70bb      	strb	r3, [r7, #2]
 80133ba:	4613      	mov	r3, r2
 80133bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80133be:	2300      	movs	r3, #0
 80133c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80133c2:	2300      	movs	r3, #0
 80133c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80133cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80133ce:	e025      	b.n	801341c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80133d0:	7dfb      	ldrb	r3, [r7, #23]
 80133d2:	221a      	movs	r2, #26
 80133d4:	fb02 f303 	mul.w	r3, r2, r3
 80133d8:	3308      	adds	r3, #8
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	4413      	add	r3, r2
 80133de:	3302      	adds	r3, #2
 80133e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	795b      	ldrb	r3, [r3, #5]
 80133e6:	78fa      	ldrb	r2, [r7, #3]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d002      	beq.n	80133f2 <USBH_FindInterface+0x4e>
 80133ec:	78fb      	ldrb	r3, [r7, #3]
 80133ee:	2bff      	cmp	r3, #255	; 0xff
 80133f0:	d111      	bne.n	8013416 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80133f6:	78ba      	ldrb	r2, [r7, #2]
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d002      	beq.n	8013402 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80133fc:	78bb      	ldrb	r3, [r7, #2]
 80133fe:	2bff      	cmp	r3, #255	; 0xff
 8013400:	d109      	bne.n	8013416 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013406:	787a      	ldrb	r2, [r7, #1]
 8013408:	429a      	cmp	r2, r3
 801340a:	d002      	beq.n	8013412 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801340c:	787b      	ldrb	r3, [r7, #1]
 801340e:	2bff      	cmp	r3, #255	; 0xff
 8013410:	d101      	bne.n	8013416 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8013412:	7dfb      	ldrb	r3, [r7, #23]
 8013414:	e006      	b.n	8013424 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8013416:	7dfb      	ldrb	r3, [r7, #23]
 8013418:	3301      	adds	r3, #1
 801341a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801341c:	7dfb      	ldrb	r3, [r7, #23]
 801341e:	2b01      	cmp	r3, #1
 8013420:	d9d6      	bls.n	80133d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8013422:	23ff      	movs	r3, #255	; 0xff
}
 8013424:	4618      	mov	r0, r3
 8013426:	371c      	adds	r7, #28
 8013428:	46bd      	mov	sp, r7
 801342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342e:	4770      	bx	lr

08013430 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f004 fb73 	bl	8017b24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 801343e:	2101      	movs	r1, #1
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f004 fc8c 	bl	8017d5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8013446:	2300      	movs	r3, #0
}
 8013448:	4618      	mov	r0, r3
 801344a:	3708      	adds	r7, #8
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}

08013450 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b088      	sub	sp, #32
 8013454:	af04      	add	r7, sp, #16
 8013456:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013458:	2302      	movs	r3, #2
 801345a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 801345c:	2300      	movs	r3, #0
 801345e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8013466:	b2db      	uxtb	r3, r3
 8013468:	2b01      	cmp	r3, #1
 801346a:	d102      	bne.n	8013472 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2203      	movs	r2, #3
 8013470:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	b2db      	uxtb	r3, r3
 8013478:	2b0b      	cmp	r3, #11
 801347a:	f200 823c 	bhi.w	80138f6 <USBH_Process+0x4a6>
 801347e:	a201      	add	r2, pc, #4	; (adr r2, 8013484 <USBH_Process+0x34>)
 8013480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013484:	080134b5 	.word	0x080134b5
 8013488:	08013503 	.word	0x08013503
 801348c:	08013587 	.word	0x08013587
 8013490:	08013875 	.word	0x08013875
 8013494:	080138f7 	.word	0x080138f7
 8013498:	08013647 	.word	0x08013647
 801349c:	080137ff 	.word	0x080137ff
 80134a0:	08013699 	.word	0x08013699
 80134a4:	080136d5 	.word	0x080136d5
 80134a8:	0801370f 	.word	0x0801370f
 80134ac:	08013757 	.word	0x08013757
 80134b0:	0801385d 	.word	0x0801385d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	2b00      	cmp	r3, #0
 80134be:	f000 821c 	beq.w	80138fa <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2201      	movs	r2, #1
 80134c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80134c8:	20c8      	movs	r0, #200	; 0xc8
 80134ca:	f004 fc8f 	bl	8017dec <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f004 fb85 	bl	8017bde <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2200      	movs	r2, #0
 80134d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2200      	movs	r2, #0
 80134e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2201      	movs	r2, #1
 80134e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80134f8:	2200      	movs	r2, #0
 80134fa:	4619      	mov	r1, r3
 80134fc:	f001 fd9e 	bl	801503c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013500:	e1fb      	b.n	80138fa <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8013508:	2b01      	cmp	r3, #1
 801350a:	d107      	bne.n	801351c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2200      	movs	r2, #0
 8013510:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2202      	movs	r2, #2
 8013518:	701a      	strb	r2, [r3, #0]
 801351a:	e025      	b.n	8013568 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8013522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013526:	d914      	bls.n	8013552 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801352e:	3301      	adds	r3, #1
 8013530:	b2da      	uxtb	r2, r3
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801353e:	2b03      	cmp	r3, #3
 8013540:	d903      	bls.n	801354a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	220d      	movs	r2, #13
 8013546:	701a      	strb	r2, [r3, #0]
 8013548:	e00e      	b.n	8013568 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2200      	movs	r2, #0
 801354e:	701a      	strb	r2, [r3, #0]
 8013550:	e00a      	b.n	8013568 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8013558:	f103 020a 	add.w	r2, r3, #10
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8013562:	200a      	movs	r0, #10
 8013564:	f004 fc42 	bl	8017dec <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2201      	movs	r2, #1
 801356c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801357c:	2200      	movs	r2, #0
 801357e:	4619      	mov	r1, r3
 8013580:	f001 fd5c 	bl	801503c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013584:	e1c0      	b.n	8013908 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801358c:	2b00      	cmp	r3, #0
 801358e:	d005      	beq.n	801359c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013596:	2104      	movs	r1, #4
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 801359c:	2064      	movs	r0, #100	; 0x64
 801359e:	f004 fc25 	bl	8017dec <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f004 faf4 	bl	8017b90 <USBH_LL_GetSpeed>
 80135a8:	4603      	mov	r3, r0
 80135aa:	461a      	mov	r2, r3
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2205      	movs	r2, #5
 80135b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80135b8:	2100      	movs	r1, #0
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f001 fb1f 	bl	8014bfe <USBH_AllocPipe>
 80135c0:	4603      	mov	r3, r0
 80135c2:	461a      	mov	r2, r3
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80135c8:	2180      	movs	r1, #128	; 0x80
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f001 fb17 	bl	8014bfe <USBH_AllocPipe>
 80135d0:	4603      	mov	r3, r0
 80135d2:	461a      	mov	r2, r3
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	7919      	ldrb	r1, [r3, #4]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80135ec:	b292      	uxth	r2, r2
 80135ee:	9202      	str	r2, [sp, #8]
 80135f0:	2200      	movs	r2, #0
 80135f2:	9201      	str	r2, [sp, #4]
 80135f4:	9300      	str	r3, [sp, #0]
 80135f6:	4603      	mov	r3, r0
 80135f8:	2280      	movs	r2, #128	; 0x80
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f001 fad0 	bl	8014ba0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	7959      	ldrb	r1, [r3, #5]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013614:	b292      	uxth	r2, r2
 8013616:	9202      	str	r2, [sp, #8]
 8013618:	2200      	movs	r2, #0
 801361a:	9201      	str	r2, [sp, #4]
 801361c:	9300      	str	r3, [sp, #0]
 801361e:	4603      	mov	r3, r0
 8013620:	2200      	movs	r2, #0
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f001 fabc 	bl	8014ba0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2201      	movs	r2, #1
 801362c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801363c:	2200      	movs	r2, #0
 801363e:	4619      	mov	r1, r3
 8013640:	f001 fcfc 	bl	801503c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013644:	e160      	b.n	8013908 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f000 f964 	bl	8013914 <USBH_HandleEnum>
 801364c:	4603      	mov	r3, r0
 801364e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8013650:	7bbb      	ldrb	r3, [r7, #14]
 8013652:	b2db      	uxtb	r3, r3
 8013654:	2b00      	cmp	r3, #0
 8013656:	f040 8152 	bne.w	80138fe <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2200      	movs	r2, #0
 801365e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8013668:	2b01      	cmp	r3, #1
 801366a:	d103      	bne.n	8013674 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2208      	movs	r2, #8
 8013670:	701a      	strb	r2, [r3, #0]
 8013672:	e002      	b.n	801367a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2207      	movs	r2, #7
 8013678:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2205      	movs	r2, #5
 801367e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801368e:	2200      	movs	r2, #0
 8013690:	4619      	mov	r1, r3
 8013692:	f001 fcd3 	bl	801503c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013696:	e132      	b.n	80138fe <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801369e:	2b00      	cmp	r3, #0
 80136a0:	f000 812f 	beq.w	8013902 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80136aa:	2101      	movs	r1, #1
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2208      	movs	r2, #8
 80136b4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2205      	movs	r2, #5
 80136ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80136ca:	2200      	movs	r2, #0
 80136cc:	4619      	mov	r1, r3
 80136ce:	f001 fcb5 	bl	801503c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80136d2:	e116      	b.n	8013902 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80136da:	b29b      	uxth	r3, r3
 80136dc:	4619      	mov	r1, r3
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f000 fcf6 	bl	80140d0 <USBH_SetCfg>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d102      	bne.n	80136f0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2209      	movs	r2, #9
 80136ee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2201      	movs	r2, #1
 80136f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013704:	2200      	movs	r2, #0
 8013706:	4619      	mov	r1, r3
 8013708:	f001 fc98 	bl	801503c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801370c:	e0fc      	b.n	8013908 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8013714:	f003 0320 	and.w	r3, r3, #32
 8013718:	2b00      	cmp	r3, #0
 801371a:	d00a      	beq.n	8013732 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 801371c:	2101      	movs	r1, #1
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f000 fcf9 	bl	8014116 <USBH_SetFeature>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d106      	bne.n	8013738 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	220a      	movs	r2, #10
 801372e:	701a      	strb	r2, [r3, #0]
 8013730:	e002      	b.n	8013738 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	220a      	movs	r2, #10
 8013736:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2201      	movs	r2, #1
 801373c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801374c:	2200      	movs	r2, #0
 801374e:	4619      	mov	r1, r3
 8013750:	f001 fc74 	bl	801503c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013754:	e0d8      	b.n	8013908 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801375c:	2b00      	cmp	r3, #0
 801375e:	d03f      	beq.n	80137e0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2200      	movs	r2, #0
 8013764:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013768:	2300      	movs	r3, #0
 801376a:	73fb      	strb	r3, [r7, #15]
 801376c:	e016      	b.n	801379c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801376e:	7bfa      	ldrb	r2, [r7, #15]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	32de      	adds	r2, #222	; 0xde
 8013774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013778:	791a      	ldrb	r2, [r3, #4]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8013780:	429a      	cmp	r2, r3
 8013782:	d108      	bne.n	8013796 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8013784:	7bfa      	ldrb	r2, [r7, #15]
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	32de      	adds	r2, #222	; 0xde
 801378a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8013794:	e005      	b.n	80137a2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013796:	7bfb      	ldrb	r3, [r7, #15]
 8013798:	3301      	adds	r3, #1
 801379a:	73fb      	strb	r3, [r7, #15]
 801379c:	7bfb      	ldrb	r3, [r7, #15]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d0e5      	beq.n	801376e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d016      	beq.n	80137da <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80137b2:	689b      	ldr	r3, [r3, #8]
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	4798      	blx	r3
 80137b8:	4603      	mov	r3, r0
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d109      	bne.n	80137d2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2206      	movs	r2, #6
 80137c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80137ca:	2103      	movs	r1, #3
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	4798      	blx	r3
 80137d0:	e006      	b.n	80137e0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	220d      	movs	r2, #13
 80137d6:	701a      	strb	r2, [r3, #0]
 80137d8:	e002      	b.n	80137e0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	220d      	movs	r2, #13
 80137de:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2205      	movs	r2, #5
 80137e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80137f4:	2200      	movs	r2, #0
 80137f6:	4619      	mov	r1, r3
 80137f8:	f001 fc20 	bl	801503c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80137fc:	e084      	b.n	8013908 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013804:	2b00      	cmp	r3, #0
 8013806:	d017      	beq.n	8013838 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801380e:	691b      	ldr	r3, [r3, #16]
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	4798      	blx	r3
 8013814:	4603      	mov	r3, r0
 8013816:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013818:	7bbb      	ldrb	r3, [r7, #14]
 801381a:	b2db      	uxtb	r3, r3
 801381c:	2b00      	cmp	r3, #0
 801381e:	d103      	bne.n	8013828 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	220b      	movs	r2, #11
 8013824:	701a      	strb	r2, [r3, #0]
 8013826:	e00a      	b.n	801383e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8013828:	7bbb      	ldrb	r3, [r7, #14]
 801382a:	b2db      	uxtb	r3, r3
 801382c:	2b02      	cmp	r3, #2
 801382e:	d106      	bne.n	801383e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	220d      	movs	r2, #13
 8013834:	701a      	strb	r2, [r3, #0]
 8013836:	e002      	b.n	801383e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	220d      	movs	r2, #13
 801383c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2205      	movs	r2, #5
 8013842:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013852:	2200      	movs	r2, #0
 8013854:	4619      	mov	r1, r3
 8013856:	f001 fbf1 	bl	801503c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801385a:	e055      	b.n	8013908 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013862:	2b00      	cmp	r3, #0
 8013864:	d04f      	beq.n	8013906 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801386c:	695b      	ldr	r3, [r3, #20]
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	4798      	blx	r3
      }
      break;
 8013872:	e048      	b.n	8013906 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2200      	movs	r2, #0
 8013878:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 801387c:	6878      	ldr	r0, [r7, #4]
 801387e:	f7ff fcf7 	bl	8013270 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013888:	2b00      	cmp	r3, #0
 801388a:	d009      	beq.n	80138a0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013892:	68db      	ldr	r3, [r3, #12]
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2200      	movs	r2, #0
 801389c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d005      	beq.n	80138b6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80138b0:	2105      	movs	r1, #5
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d107      	bne.n	80138d2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f7ff fdb0 	bl	8013430 <USBH_Start>
 80138d0:	e002      	b.n	80138d8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f004 f926 	bl	8017b24 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2201      	movs	r2, #1
 80138dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80138ec:	2200      	movs	r2, #0
 80138ee:	4619      	mov	r1, r3
 80138f0:	f001 fba4 	bl	801503c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80138f4:	e008      	b.n	8013908 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80138f6:	bf00      	nop
 80138f8:	e006      	b.n	8013908 <USBH_Process+0x4b8>
      break;
 80138fa:	bf00      	nop
 80138fc:	e004      	b.n	8013908 <USBH_Process+0x4b8>
      break;
 80138fe:	bf00      	nop
 8013900:	e002      	b.n	8013908 <USBH_Process+0x4b8>
    break;
 8013902:	bf00      	nop
 8013904:	e000      	b.n	8013908 <USBH_Process+0x4b8>
      break;
 8013906:	bf00      	nop
  }
  return USBH_OK;
 8013908:	2300      	movs	r3, #0
}
 801390a:	4618      	mov	r0, r3
 801390c:	3710      	adds	r7, #16
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop

08013914 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b088      	sub	sp, #32
 8013918:	af04      	add	r7, sp, #16
 801391a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 801391c:	2301      	movs	r3, #1
 801391e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013920:	2301      	movs	r3, #1
 8013922:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	785b      	ldrb	r3, [r3, #1]
 8013928:	2b07      	cmp	r3, #7
 801392a:	f200 8208 	bhi.w	8013d3e <USBH_HandleEnum+0x42a>
 801392e:	a201      	add	r2, pc, #4	; (adr r2, 8013934 <USBH_HandleEnum+0x20>)
 8013930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013934:	08013955 	.word	0x08013955
 8013938:	08013a13 	.word	0x08013a13
 801393c:	08013a7d 	.word	0x08013a7d
 8013940:	08013b0b 	.word	0x08013b0b
 8013944:	08013b75 	.word	0x08013b75
 8013948:	08013be5 	.word	0x08013be5
 801394c:	08013c81 	.word	0x08013c81
 8013950:	08013cff 	.word	0x08013cff
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013954:	2108      	movs	r1, #8
 8013956:	6878      	ldr	r0, [r7, #4]
 8013958:	f000 faea 	bl	8013f30 <USBH_Get_DevDesc>
 801395c:	4603      	mov	r3, r0
 801395e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013960:	7bbb      	ldrb	r3, [r7, #14]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d130      	bne.n	80139c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2201      	movs	r2, #1
 8013974:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	7919      	ldrb	r1, [r3, #4]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801398a:	b292      	uxth	r2, r2
 801398c:	9202      	str	r2, [sp, #8]
 801398e:	2200      	movs	r2, #0
 8013990:	9201      	str	r2, [sp, #4]
 8013992:	9300      	str	r3, [sp, #0]
 8013994:	4603      	mov	r3, r0
 8013996:	2280      	movs	r2, #128	; 0x80
 8013998:	6878      	ldr	r0, [r7, #4]
 801399a:	f001 f901 	bl	8014ba0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	7959      	ldrb	r1, [r3, #5]
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80139b2:	b292      	uxth	r2, r2
 80139b4:	9202      	str	r2, [sp, #8]
 80139b6:	2200      	movs	r2, #0
 80139b8:	9201      	str	r2, [sp, #4]
 80139ba:	9300      	str	r3, [sp, #0]
 80139bc:	4603      	mov	r3, r0
 80139be:	2200      	movs	r2, #0
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f001 f8ed 	bl	8014ba0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80139c6:	e1bc      	b.n	8013d42 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80139c8:	7bbb      	ldrb	r3, [r7, #14]
 80139ca:	2b03      	cmp	r3, #3
 80139cc:	f040 81b9 	bne.w	8013d42 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80139d6:	3301      	adds	r3, #1
 80139d8:	b2da      	uxtb	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80139e6:	2b03      	cmp	r3, #3
 80139e8:	d903      	bls.n	80139f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	220d      	movs	r2, #13
 80139ee:	701a      	strb	r2, [r3, #0]
      break;
 80139f0:	e1a7      	b.n	8013d42 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	795b      	ldrb	r3, [r3, #5]
 80139f6:	4619      	mov	r1, r3
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f001 f921 	bl	8014c40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	791b      	ldrb	r3, [r3, #4]
 8013a02:	4619      	mov	r1, r3
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f001 f91b 	bl	8014c40 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	701a      	strb	r2, [r3, #0]
      break;
 8013a10:	e197      	b.n	8013d42 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8013a12:	2112      	movs	r1, #18
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f000 fa8b 	bl	8013f30 <USBH_Get_DevDesc>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013a1e:	7bbb      	ldrb	r3, [r7, #14]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d103      	bne.n	8013a2c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2202      	movs	r2, #2
 8013a28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013a2a:	e18c      	b.n	8013d46 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013a2c:	7bbb      	ldrb	r3, [r7, #14]
 8013a2e:	2b03      	cmp	r3, #3
 8013a30:	f040 8189 	bne.w	8013d46 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	b2da      	uxtb	r2, r3
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013a4a:	2b03      	cmp	r3, #3
 8013a4c:	d903      	bls.n	8013a56 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	220d      	movs	r2, #13
 8013a52:	701a      	strb	r2, [r3, #0]
      break;
 8013a54:	e177      	b.n	8013d46 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	795b      	ldrb	r3, [r3, #5]
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f001 f8ef 	bl	8014c40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	791b      	ldrb	r3, [r3, #4]
 8013a66:	4619      	mov	r1, r3
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f001 f8e9 	bl	8014c40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2200      	movs	r2, #0
 8013a72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2200      	movs	r2, #0
 8013a78:	701a      	strb	r2, [r3, #0]
      break;
 8013a7a:	e164      	b.n	8013d46 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8013a7c:	2101      	movs	r1, #1
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f000 fb02 	bl	8014088 <USBH_SetAddress>
 8013a84:	4603      	mov	r3, r0
 8013a86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013a88:	7bbb      	ldrb	r3, [r7, #14]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d132      	bne.n	8013af4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8013a8e:	2002      	movs	r0, #2
 8013a90:	f004 f9ac 	bl	8017dec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2201      	movs	r2, #1
 8013a98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2203      	movs	r2, #3
 8013aa0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	7919      	ldrb	r1, [r3, #4]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8013ab2:	687a      	ldr	r2, [r7, #4]
 8013ab4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013ab6:	b292      	uxth	r2, r2
 8013ab8:	9202      	str	r2, [sp, #8]
 8013aba:	2200      	movs	r2, #0
 8013abc:	9201      	str	r2, [sp, #4]
 8013abe:	9300      	str	r3, [sp, #0]
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	2280      	movs	r2, #128	; 0x80
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f001 f86b 	bl	8014ba0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	7959      	ldrb	r1, [r3, #5]
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013ade:	b292      	uxth	r2, r2
 8013ae0:	9202      	str	r2, [sp, #8]
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	9201      	str	r2, [sp, #4]
 8013ae6:	9300      	str	r3, [sp, #0]
 8013ae8:	4603      	mov	r3, r0
 8013aea:	2200      	movs	r2, #0
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f001 f857 	bl	8014ba0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8013af2:	e12a      	b.n	8013d4a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013af4:	7bbb      	ldrb	r3, [r7, #14]
 8013af6:	2b03      	cmp	r3, #3
 8013af8:	f040 8127 	bne.w	8013d4a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	220d      	movs	r2, #13
 8013b00:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2200      	movs	r2, #0
 8013b06:	705a      	strb	r2, [r3, #1]
      break;
 8013b08:	e11f      	b.n	8013d4a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8013b0a:	2109      	movs	r1, #9
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 fa37 	bl	8013f80 <USBH_Get_CfgDesc>
 8013b12:	4603      	mov	r3, r0
 8013b14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013b16:	7bbb      	ldrb	r3, [r7, #14]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d103      	bne.n	8013b24 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2204      	movs	r2, #4
 8013b20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013b22:	e114      	b.n	8013d4e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013b24:	7bbb      	ldrb	r3, [r7, #14]
 8013b26:	2b03      	cmp	r3, #3
 8013b28:	f040 8111 	bne.w	8013d4e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013b32:	3301      	adds	r3, #1
 8013b34:	b2da      	uxtb	r2, r3
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013b42:	2b03      	cmp	r3, #3
 8013b44:	d903      	bls.n	8013b4e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	220d      	movs	r2, #13
 8013b4a:	701a      	strb	r2, [r3, #0]
      break;
 8013b4c:	e0ff      	b.n	8013d4e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	795b      	ldrb	r3, [r3, #5]
 8013b52:	4619      	mov	r1, r3
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f001 f873 	bl	8014c40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	791b      	ldrb	r3, [r3, #4]
 8013b5e:	4619      	mov	r1, r3
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f001 f86d 	bl	8014c40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2200      	movs	r2, #0
 8013b6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	701a      	strb	r2, [r3, #0]
      break;
 8013b72:	e0ec      	b.n	8013d4e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8013b7a:	4619      	mov	r1, r3
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f000 f9ff 	bl	8013f80 <USBH_Get_CfgDesc>
 8013b82:	4603      	mov	r3, r0
 8013b84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013b86:	7bbb      	ldrb	r3, [r7, #14]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d103      	bne.n	8013b94 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2205      	movs	r2, #5
 8013b90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013b92:	e0de      	b.n	8013d52 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013b94:	7bbb      	ldrb	r3, [r7, #14]
 8013b96:	2b03      	cmp	r3, #3
 8013b98:	f040 80db 	bne.w	8013d52 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	b2da      	uxtb	r2, r3
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013bb2:	2b03      	cmp	r3, #3
 8013bb4:	d903      	bls.n	8013bbe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	220d      	movs	r2, #13
 8013bba:	701a      	strb	r2, [r3, #0]
      break;
 8013bbc:	e0c9      	b.n	8013d52 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	795b      	ldrb	r3, [r3, #5]
 8013bc2:	4619      	mov	r1, r3
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f001 f83b 	bl	8014c40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	791b      	ldrb	r3, [r3, #4]
 8013bce:	4619      	mov	r1, r3
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f001 f835 	bl	8014c40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2200      	movs	r2, #0
 8013bda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2200      	movs	r2, #0
 8013be0:	701a      	strb	r2, [r3, #0]
      break;
 8013be2:	e0b6      	b.n	8013d52 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d036      	beq.n	8013c5c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013bfa:	23ff      	movs	r3, #255	; 0xff
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f000 f9e3 	bl	8013fc8 <USBH_Get_StringDesc>
 8013c02:	4603      	mov	r3, r0
 8013c04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013c06:	7bbb      	ldrb	r3, [r7, #14]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d111      	bne.n	8013c30 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2206      	movs	r2, #6
 8013c10:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	2205      	movs	r2, #5
 8013c16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013c26:	2200      	movs	r2, #0
 8013c28:	4619      	mov	r1, r3
 8013c2a:	f001 fa07 	bl	801503c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013c2e:	e092      	b.n	8013d56 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013c30:	7bbb      	ldrb	r3, [r7, #14]
 8013c32:	2b03      	cmp	r3, #3
 8013c34:	f040 808f 	bne.w	8013d56 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2206      	movs	r2, #6
 8013c3c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	2205      	movs	r2, #5
 8013c42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013c52:	2200      	movs	r2, #0
 8013c54:	4619      	mov	r1, r3
 8013c56:	f001 f9f1 	bl	801503c <osMessagePut>
      break;
 8013c5a:	e07c      	b.n	8013d56 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2206      	movs	r2, #6
 8013c60:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2205      	movs	r2, #5
 8013c66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013c76:	2200      	movs	r2, #0
 8013c78:	4619      	mov	r1, r3
 8013c7a:	f001 f9df 	bl	801503c <osMessagePut>
      break;
 8013c7e:	e06a      	b.n	8013d56 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d027      	beq.n	8013cda <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013c96:	23ff      	movs	r3, #255	; 0xff
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f000 f995 	bl	8013fc8 <USBH_Get_StringDesc>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013ca2:	7bbb      	ldrb	r3, [r7, #14]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d103      	bne.n	8013cb0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2207      	movs	r2, #7
 8013cac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013cae:	e054      	b.n	8013d5a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013cb0:	7bbb      	ldrb	r3, [r7, #14]
 8013cb2:	2b03      	cmp	r3, #3
 8013cb4:	d151      	bne.n	8013d5a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2207      	movs	r2, #7
 8013cba:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2205      	movs	r2, #5
 8013cc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	4619      	mov	r1, r3
 8013cd4:	f001 f9b2 	bl	801503c <osMessagePut>
      break;
 8013cd8:	e03f      	b.n	8013d5a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2207      	movs	r2, #7
 8013cde:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2205      	movs	r2, #5
 8013ce4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	4619      	mov	r1, r3
 8013cf8:	f001 f9a0 	bl	801503c <osMessagePut>
      break;
 8013cfc:	e02d      	b.n	8013d5a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d017      	beq.n	8013d38 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013d14:	23ff      	movs	r3, #255	; 0xff
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f000 f956 	bl	8013fc8 <USBH_Get_StringDesc>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013d20:	7bbb      	ldrb	r3, [r7, #14]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d102      	bne.n	8013d2c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8013d26:	2300      	movs	r3, #0
 8013d28:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8013d2a:	e018      	b.n	8013d5e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013d2c:	7bbb      	ldrb	r3, [r7, #14]
 8013d2e:	2b03      	cmp	r3, #3
 8013d30:	d115      	bne.n	8013d5e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8013d32:	2300      	movs	r3, #0
 8013d34:	73fb      	strb	r3, [r7, #15]
      break;
 8013d36:	e012      	b.n	8013d5e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8013d3c:	e00f      	b.n	8013d5e <USBH_HandleEnum+0x44a>

    default:
      break;
 8013d3e:	bf00      	nop
 8013d40:	e00e      	b.n	8013d60 <USBH_HandleEnum+0x44c>
      break;
 8013d42:	bf00      	nop
 8013d44:	e00c      	b.n	8013d60 <USBH_HandleEnum+0x44c>
      break;
 8013d46:	bf00      	nop
 8013d48:	e00a      	b.n	8013d60 <USBH_HandleEnum+0x44c>
      break;
 8013d4a:	bf00      	nop
 8013d4c:	e008      	b.n	8013d60 <USBH_HandleEnum+0x44c>
      break;
 8013d4e:	bf00      	nop
 8013d50:	e006      	b.n	8013d60 <USBH_HandleEnum+0x44c>
      break;
 8013d52:	bf00      	nop
 8013d54:	e004      	b.n	8013d60 <USBH_HandleEnum+0x44c>
      break;
 8013d56:	bf00      	nop
 8013d58:	e002      	b.n	8013d60 <USBH_HandleEnum+0x44c>
      break;
 8013d5a:	bf00      	nop
 8013d5c:	e000      	b.n	8013d60 <USBH_HandleEnum+0x44c>
      break;
 8013d5e:	bf00      	nop
  }
  return Status;
 8013d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3710      	adds	r7, #16
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}
 8013d6a:	bf00      	nop

08013d6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	b083      	sub	sp, #12
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	683a      	ldr	r2, [r7, #0]
 8013d7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8013d7e:	bf00      	nop
 8013d80:	370c      	adds	r7, #12
 8013d82:	46bd      	mov	sp, r7
 8013d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d88:	4770      	bx	lr

08013d8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8013d8a:	b580      	push	{r7, lr}
 8013d8c:	b082      	sub	sp, #8
 8013d8e:	af00      	add	r7, sp, #0
 8013d90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013d98:	1c5a      	adds	r2, r3, #1
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f000 f804 	bl	8013dae <USBH_HandleSof>
}
 8013da6:	bf00      	nop
 8013da8:	3708      	adds	r7, #8
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}

08013dae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8013dae:	b580      	push	{r7, lr}
 8013db0:	b082      	sub	sp, #8
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	b2db      	uxtb	r3, r3
 8013dbc:	2b0b      	cmp	r3, #11
 8013dbe:	d10a      	bne.n	8013dd6 <USBH_HandleSof+0x28>
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d005      	beq.n	8013dd6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013dd0:	699b      	ldr	r3, [r3, #24]
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	4798      	blx	r3
  }
}
 8013dd6:	bf00      	nop
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b082      	sub	sp, #8
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	2201      	movs	r2, #1
 8013dea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2201      	movs	r2, #1
 8013df2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013e02:	2200      	movs	r2, #0
 8013e04:	4619      	mov	r1, r3
 8013e06:	f001 f919 	bl	801503c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8013e0a:	bf00      	nop
}
 8013e0c:	3708      	adds	r7, #8
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}

08013e12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8013e12:	b480      	push	{r7}
 8013e14:	b083      	sub	sp, #12
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8013e22:	bf00      	nop
}
 8013e24:	370c      	adds	r7, #12
 8013e26:	46bd      	mov	sp, r7
 8013e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2c:	4770      	bx	lr

08013e2e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8013e2e:	b580      	push	{r7, lr}
 8013e30:	b082      	sub	sp, #8
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2201      	movs	r2, #1
 8013e3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2200      	movs	r2, #0
 8013e42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	2201      	movs	r2, #1
 8013e52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013e62:	2200      	movs	r2, #0
 8013e64:	4619      	mov	r1, r3
 8013e66:	f001 f8e9 	bl	801503c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8013e6a:	2300      	movs	r3, #0
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3708      	adds	r7, #8
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2201      	movs	r2, #1
 8013e80:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2200      	movs	r2, #0
 8013e88:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f003 fe60 	bl	8017b5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	791b      	ldrb	r3, [r3, #4]
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f000 fecd 	bl	8014c40 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	795b      	ldrb	r3, [r3, #5]
 8013eaa:	4619      	mov	r1, r3
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f000 fec7 	bl	8014c40 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2201      	movs	r2, #1
 8013eb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	4619      	mov	r1, r3
 8013eca:	f001 f8b7 	bl	801503c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8013ece:	2300      	movs	r3, #0
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b086      	sub	sp, #24
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8013ee6:	f107 030c 	add.w	r3, r7, #12
 8013eea:	f04f 32ff 	mov.w	r2, #4294967295
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f001 f8e4 	bl	80150bc <osMessageGet>
    if (event.status == osEventMessage)
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2b10      	cmp	r3, #16
 8013ef8:	d1f2      	bne.n	8013ee0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8013efa:	6878      	ldr	r0, [r7, #4]
 8013efc:	f7ff faa8 	bl	8013450 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013f00:	e7ee      	b.n	8013ee0 <USBH_Process_OS+0x8>

08013f02 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8013f02:	b580      	push	{r7, lr}
 8013f04:	b082      	sub	sp, #8
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2201      	movs	r2, #1
 8013f0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013f1e:	2200      	movs	r2, #0
 8013f20:	4619      	mov	r1, r3
 8013f22:	f001 f88b 	bl	801503c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8013f26:	2300      	movs	r3, #0
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3708      	adds	r7, #8
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b086      	sub	sp, #24
 8013f34:	af02      	add	r7, sp, #8
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	460b      	mov	r3, r1
 8013f3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8013f42:	78fb      	ldrb	r3, [r7, #3]
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	9300      	str	r3, [sp, #0]
 8013f48:	4613      	mov	r3, r2
 8013f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013f4e:	2100      	movs	r1, #0
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f000 f864 	bl	801401e <USBH_GetDescriptor>
 8013f56:	4603      	mov	r3, r0
 8013f58:	73fb      	strb	r3, [r7, #15]
 8013f5a:	7bfb      	ldrb	r3, [r7, #15]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d10a      	bne.n	8013f76 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f203 3026 	addw	r0, r3, #806	; 0x326
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013f6c:	78fa      	ldrb	r2, [r7, #3]
 8013f6e:	b292      	uxth	r2, r2
 8013f70:	4619      	mov	r1, r3
 8013f72:	f000 f918 	bl	80141a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8013f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3710      	adds	r7, #16
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}

08013f80 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b086      	sub	sp, #24
 8013f84:	af02      	add	r7, sp, #8
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	460b      	mov	r3, r1
 8013f8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	331c      	adds	r3, #28
 8013f90:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8013f92:	887b      	ldrh	r3, [r7, #2]
 8013f94:	9300      	str	r3, [sp, #0]
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f9c:	2100      	movs	r1, #0
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 f83d 	bl	801401e <USBH_GetDescriptor>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	72fb      	strb	r3, [r7, #11]
 8013fa8:	7afb      	ldrb	r3, [r7, #11]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d107      	bne.n	8013fbe <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8013fb4:	887a      	ldrh	r2, [r7, #2]
 8013fb6:	68f9      	ldr	r1, [r7, #12]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f000 f964 	bl	8014286 <USBH_ParseCfgDesc>
  }

  return status;
 8013fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b088      	sub	sp, #32
 8013fcc:	af02      	add	r7, sp, #8
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	607a      	str	r2, [r7, #4]
 8013fd2:	461a      	mov	r2, r3
 8013fd4:	460b      	mov	r3, r1
 8013fd6:	72fb      	strb	r3, [r7, #11]
 8013fd8:	4613      	mov	r3, r2
 8013fda:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8013fdc:	7afb      	ldrb	r3, [r7, #11]
 8013fde:	b29b      	uxth	r3, r3
 8013fe0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013fe4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8013fec:	893b      	ldrh	r3, [r7, #8]
 8013fee:	9300      	str	r3, [sp, #0]
 8013ff0:	460b      	mov	r3, r1
 8013ff2:	2100      	movs	r1, #0
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f000 f812 	bl	801401e <USBH_GetDescriptor>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	75fb      	strb	r3, [r7, #23]
 8013ffe:	7dfb      	ldrb	r3, [r7, #23]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d107      	bne.n	8014014 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801400a:	893a      	ldrh	r2, [r7, #8]
 801400c:	6879      	ldr	r1, [r7, #4]
 801400e:	4618      	mov	r0, r3
 8014010:	f000 fa37 	bl	8014482 <USBH_ParseStringDesc>
  }

  return status;
 8014014:	7dfb      	ldrb	r3, [r7, #23]
}
 8014016:	4618      	mov	r0, r3
 8014018:	3718      	adds	r7, #24
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}

0801401e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801401e:	b580      	push	{r7, lr}
 8014020:	b084      	sub	sp, #16
 8014022:	af00      	add	r7, sp, #0
 8014024:	60f8      	str	r0, [r7, #12]
 8014026:	607b      	str	r3, [r7, #4]
 8014028:	460b      	mov	r3, r1
 801402a:	72fb      	strb	r3, [r7, #11]
 801402c:	4613      	mov	r3, r2
 801402e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	789b      	ldrb	r3, [r3, #2]
 8014034:	2b01      	cmp	r3, #1
 8014036:	d11c      	bne.n	8014072 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8014038:	7afb      	ldrb	r3, [r7, #11]
 801403a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801403e:	b2da      	uxtb	r2, r3
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2206      	movs	r2, #6
 8014048:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	893a      	ldrh	r2, [r7, #8]
 801404e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8014050:	893b      	ldrh	r3, [r7, #8]
 8014052:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801405a:	d104      	bne.n	8014066 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	f240 4209 	movw	r2, #1033	; 0x409
 8014062:	829a      	strh	r2, [r3, #20]
 8014064:	e002      	b.n	801406c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	2200      	movs	r2, #0
 801406a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	8b3a      	ldrh	r2, [r7, #24]
 8014070:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8014072:	8b3b      	ldrh	r3, [r7, #24]
 8014074:	461a      	mov	r2, r3
 8014076:	6879      	ldr	r1, [r7, #4]
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f000 fa50 	bl	801451e <USBH_CtlReq>
 801407e:	4603      	mov	r3, r0
}
 8014080:	4618      	mov	r0, r3
 8014082:	3710      	adds	r7, #16
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}

08014088 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	460b      	mov	r3, r1
 8014092:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	789b      	ldrb	r3, [r3, #2]
 8014098:	2b01      	cmp	r3, #1
 801409a:	d10f      	bne.n	80140bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2200      	movs	r2, #0
 80140a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2205      	movs	r2, #5
 80140a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80140a8:	78fb      	ldrb	r3, [r7, #3]
 80140aa:	b29a      	uxth	r2, r3
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2200      	movs	r2, #0
 80140b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2200      	movs	r2, #0
 80140ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80140bc:	2200      	movs	r2, #0
 80140be:	2100      	movs	r1, #0
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f000 fa2c 	bl	801451e <USBH_CtlReq>
 80140c6:	4603      	mov	r3, r0
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3708      	adds	r7, #8
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	460b      	mov	r3, r1
 80140da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	789b      	ldrb	r3, [r3, #2]
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	d10e      	bne.n	8014102 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2200      	movs	r2, #0
 80140e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2209      	movs	r2, #9
 80140ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	887a      	ldrh	r2, [r7, #2]
 80140f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2200      	movs	r2, #0
 80140fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2200      	movs	r2, #0
 8014100:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8014102:	2200      	movs	r2, #0
 8014104:	2100      	movs	r1, #0
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 fa09 	bl	801451e <USBH_CtlReq>
 801410c:	4603      	mov	r3, r0
}
 801410e:	4618      	mov	r0, r3
 8014110:	3708      	adds	r7, #8
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}

08014116 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8014116:	b580      	push	{r7, lr}
 8014118:	b082      	sub	sp, #8
 801411a:	af00      	add	r7, sp, #0
 801411c:	6078      	str	r0, [r7, #4]
 801411e:	460b      	mov	r3, r1
 8014120:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	789b      	ldrb	r3, [r3, #2]
 8014126:	2b01      	cmp	r3, #1
 8014128:	d10f      	bne.n	801414a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2200      	movs	r2, #0
 801412e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	2203      	movs	r2, #3
 8014134:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8014136:	78fb      	ldrb	r3, [r7, #3]
 8014138:	b29a      	uxth	r2, r3
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	2200      	movs	r2, #0
 8014142:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2200      	movs	r2, #0
 8014148:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801414a:	2200      	movs	r2, #0
 801414c:	2100      	movs	r1, #0
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f000 f9e5 	bl	801451e <USBH_CtlReq>
 8014154:	4603      	mov	r3, r0
}
 8014156:	4618      	mov	r0, r3
 8014158:	3708      	adds	r7, #8
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}

0801415e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801415e:	b580      	push	{r7, lr}
 8014160:	b082      	sub	sp, #8
 8014162:	af00      	add	r7, sp, #0
 8014164:	6078      	str	r0, [r7, #4]
 8014166:	460b      	mov	r3, r1
 8014168:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	789b      	ldrb	r3, [r3, #2]
 801416e:	2b01      	cmp	r3, #1
 8014170:	d10f      	bne.n	8014192 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2202      	movs	r2, #2
 8014176:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	2201      	movs	r2, #1
 801417c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2200      	movs	r2, #0
 8014182:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8014184:	78fb      	ldrb	r3, [r7, #3]
 8014186:	b29a      	uxth	r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2200      	movs	r2, #0
 8014190:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8014192:	2200      	movs	r2, #0
 8014194:	2100      	movs	r1, #0
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f000 f9c1 	bl	801451e <USBH_CtlReq>
 801419c:	4603      	mov	r3, r0
}
 801419e:	4618      	mov	r0, r3
 80141a0:	3708      	adds	r7, #8
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}

080141a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80141a6:	b480      	push	{r7}
 80141a8:	b085      	sub	sp, #20
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	60f8      	str	r0, [r7, #12]
 80141ae:	60b9      	str	r1, [r7, #8]
 80141b0:	4613      	mov	r3, r2
 80141b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	781a      	ldrb	r2, [r3, #0]
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	785a      	ldrb	r2, [r3, #1]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	3302      	adds	r3, #2
 80141c8:	781b      	ldrb	r3, [r3, #0]
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	3303      	adds	r3, #3
 80141d0:	781b      	ldrb	r3, [r3, #0]
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	021b      	lsls	r3, r3, #8
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	4313      	orrs	r3, r2
 80141da:	b29a      	uxth	r2, r3
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	791a      	ldrb	r2, [r3, #4]
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	795a      	ldrb	r2, [r3, #5]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	799a      	ldrb	r2, [r3, #6]
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	79da      	ldrb	r2, [r3, #7]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8014200:	88fb      	ldrh	r3, [r7, #6]
 8014202:	2b08      	cmp	r3, #8
 8014204:	d939      	bls.n	801427a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	3308      	adds	r3, #8
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	b29a      	uxth	r2, r3
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	3309      	adds	r3, #9
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	b29b      	uxth	r3, r3
 8014216:	021b      	lsls	r3, r3, #8
 8014218:	b29b      	uxth	r3, r3
 801421a:	4313      	orrs	r3, r2
 801421c:	b29a      	uxth	r2, r3
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	330a      	adds	r3, #10
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	b29a      	uxth	r2, r3
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	330b      	adds	r3, #11
 801422e:	781b      	ldrb	r3, [r3, #0]
 8014230:	b29b      	uxth	r3, r3
 8014232:	021b      	lsls	r3, r3, #8
 8014234:	b29b      	uxth	r3, r3
 8014236:	4313      	orrs	r3, r2
 8014238:	b29a      	uxth	r2, r3
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	330c      	adds	r3, #12
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	b29a      	uxth	r2, r3
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	330d      	adds	r3, #13
 801424a:	781b      	ldrb	r3, [r3, #0]
 801424c:	b29b      	uxth	r3, r3
 801424e:	021b      	lsls	r3, r3, #8
 8014250:	b29b      	uxth	r3, r3
 8014252:	4313      	orrs	r3, r2
 8014254:	b29a      	uxth	r2, r3
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	7b9a      	ldrb	r2, [r3, #14]
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	7bda      	ldrb	r2, [r3, #15]
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	7c1a      	ldrb	r2, [r3, #16]
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	7c5a      	ldrb	r2, [r3, #17]
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	745a      	strb	r2, [r3, #17]
  }
}
 801427a:	bf00      	nop
 801427c:	3714      	adds	r7, #20
 801427e:	46bd      	mov	sp, r7
 8014280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014284:	4770      	bx	lr

08014286 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8014286:	b580      	push	{r7, lr}
 8014288:	b08a      	sub	sp, #40	; 0x28
 801428a:	af00      	add	r7, sp, #0
 801428c:	60f8      	str	r0, [r7, #12]
 801428e:	60b9      	str	r1, [r7, #8]
 8014290:	4613      	mov	r3, r2
 8014292:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8014298:	2300      	movs	r3, #0
 801429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 801429e:	2300      	movs	r3, #0
 80142a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	781a      	ldrb	r2, [r3, #0]
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	785a      	ldrb	r2, [r3, #1]
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	3302      	adds	r3, #2
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	b29a      	uxth	r2, r3
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	3303      	adds	r3, #3
 80142c4:	781b      	ldrb	r3, [r3, #0]
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	021b      	lsls	r3, r3, #8
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	4313      	orrs	r3, r2
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	791a      	ldrb	r2, [r3, #4]
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	795a      	ldrb	r2, [r3, #5]
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	799a      	ldrb	r2, [r3, #6]
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	79da      	ldrb	r2, [r3, #7]
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	7a1a      	ldrb	r2, [r3, #8]
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80142fc:	88fb      	ldrh	r3, [r7, #6]
 80142fe:	2b09      	cmp	r3, #9
 8014300:	d95f      	bls.n	80143c2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8014302:	2309      	movs	r3, #9
 8014304:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8014306:	2300      	movs	r3, #0
 8014308:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801430a:	e051      	b.n	80143b0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801430c:	f107 0316 	add.w	r3, r7, #22
 8014310:	4619      	mov	r1, r3
 8014312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014314:	f000 f8e8 	bl	80144e8 <USBH_GetNextDesc>
 8014318:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 801431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431c:	785b      	ldrb	r3, [r3, #1]
 801431e:	2b04      	cmp	r3, #4
 8014320:	d146      	bne.n	80143b0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8014322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014326:	221a      	movs	r2, #26
 8014328:	fb02 f303 	mul.w	r3, r2, r3
 801432c:	3308      	adds	r3, #8
 801432e:	68fa      	ldr	r2, [r7, #12]
 8014330:	4413      	add	r3, r2
 8014332:	3302      	adds	r3, #2
 8014334:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8014336:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014338:	69f8      	ldr	r0, [r7, #28]
 801433a:	f000 f846 	bl	80143ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801433e:	2300      	movs	r3, #0
 8014340:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8014344:	2300      	movs	r3, #0
 8014346:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014348:	e022      	b.n	8014390 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801434a:	f107 0316 	add.w	r3, r7, #22
 801434e:	4619      	mov	r1, r3
 8014350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014352:	f000 f8c9 	bl	80144e8 <USBH_GetNextDesc>
 8014356:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8014358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435a:	785b      	ldrb	r3, [r3, #1]
 801435c:	2b05      	cmp	r3, #5
 801435e:	d117      	bne.n	8014390 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8014360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014364:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014368:	3201      	adds	r2, #1
 801436a:	00d2      	lsls	r2, r2, #3
 801436c:	211a      	movs	r1, #26
 801436e:	fb01 f303 	mul.w	r3, r1, r3
 8014372:	4413      	add	r3, r2
 8014374:	3308      	adds	r3, #8
 8014376:	68fa      	ldr	r2, [r7, #12]
 8014378:	4413      	add	r3, r2
 801437a:	3304      	adds	r3, #4
 801437c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 801437e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014380:	69b8      	ldr	r0, [r7, #24]
 8014382:	f000 f851 	bl	8014428 <USBH_ParseEPDesc>
            ep_ix++;
 8014386:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801438a:	3301      	adds	r3, #1
 801438c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014390:	69fb      	ldr	r3, [r7, #28]
 8014392:	791b      	ldrb	r3, [r3, #4]
 8014394:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014398:	429a      	cmp	r2, r3
 801439a:	d204      	bcs.n	80143a6 <USBH_ParseCfgDesc+0x120>
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	885a      	ldrh	r2, [r3, #2]
 80143a0:	8afb      	ldrh	r3, [r7, #22]
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d8d1      	bhi.n	801434a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80143a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80143aa:	3301      	adds	r3, #1
 80143ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80143b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80143b4:	2b01      	cmp	r3, #1
 80143b6:	d804      	bhi.n	80143c2 <USBH_ParseCfgDesc+0x13c>
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	885a      	ldrh	r2, [r3, #2]
 80143bc:	8afb      	ldrh	r3, [r7, #22]
 80143be:	429a      	cmp	r2, r3
 80143c0:	d8a4      	bhi.n	801430c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80143c2:	bf00      	nop
 80143c4:	3728      	adds	r7, #40	; 0x28
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}

080143ca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80143ca:	b480      	push	{r7}
 80143cc:	b083      	sub	sp, #12
 80143ce:	af00      	add	r7, sp, #0
 80143d0:	6078      	str	r0, [r7, #4]
 80143d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	781a      	ldrb	r2, [r3, #0]
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	785a      	ldrb	r2, [r3, #1]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	789a      	ldrb	r2, [r3, #2]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	78da      	ldrb	r2, [r3, #3]
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	791a      	ldrb	r2, [r3, #4]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	795a      	ldrb	r2, [r3, #5]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	799a      	ldrb	r2, [r3, #6]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	79da      	ldrb	r2, [r3, #7]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	7a1a      	ldrb	r2, [r3, #8]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	721a      	strb	r2, [r3, #8]
}
 801441c:	bf00      	nop
 801441e:	370c      	adds	r7, #12
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr

08014428 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8014428:	b480      	push	{r7}
 801442a:	b083      	sub	sp, #12
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	781a      	ldrb	r2, [r3, #0]
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	785a      	ldrb	r2, [r3, #1]
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	789a      	ldrb	r2, [r3, #2]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	78da      	ldrb	r2, [r3, #3]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	3304      	adds	r3, #4
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	b29a      	uxth	r2, r3
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	3305      	adds	r3, #5
 801445e:	781b      	ldrb	r3, [r3, #0]
 8014460:	b29b      	uxth	r3, r3
 8014462:	021b      	lsls	r3, r3, #8
 8014464:	b29b      	uxth	r3, r3
 8014466:	4313      	orrs	r3, r2
 8014468:	b29a      	uxth	r2, r3
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	799a      	ldrb	r2, [r3, #6]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	719a      	strb	r2, [r3, #6]
}
 8014476:	bf00      	nop
 8014478:	370c      	adds	r7, #12
 801447a:	46bd      	mov	sp, r7
 801447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014480:	4770      	bx	lr

08014482 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8014482:	b480      	push	{r7}
 8014484:	b087      	sub	sp, #28
 8014486:	af00      	add	r7, sp, #0
 8014488:	60f8      	str	r0, [r7, #12]
 801448a:	60b9      	str	r1, [r7, #8]
 801448c:	4613      	mov	r3, r2
 801448e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	3301      	adds	r3, #1
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	2b03      	cmp	r3, #3
 8014498:	d120      	bne.n	80144dc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	1e9a      	subs	r2, r3, #2
 80144a0:	88fb      	ldrh	r3, [r7, #6]
 80144a2:	4293      	cmp	r3, r2
 80144a4:	bf28      	it	cs
 80144a6:	4613      	movcs	r3, r2
 80144a8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	3302      	adds	r3, #2
 80144ae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80144b0:	2300      	movs	r3, #0
 80144b2:	82fb      	strh	r3, [r7, #22]
 80144b4:	e00b      	b.n	80144ce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80144b6:	8afb      	ldrh	r3, [r7, #22]
 80144b8:	68fa      	ldr	r2, [r7, #12]
 80144ba:	4413      	add	r3, r2
 80144bc:	781a      	ldrb	r2, [r3, #0]
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	3301      	adds	r3, #1
 80144c6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80144c8:	8afb      	ldrh	r3, [r7, #22]
 80144ca:	3302      	adds	r3, #2
 80144cc:	82fb      	strh	r3, [r7, #22]
 80144ce:	8afa      	ldrh	r2, [r7, #22]
 80144d0:	8abb      	ldrh	r3, [r7, #20]
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d3ef      	bcc.n	80144b6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	2200      	movs	r2, #0
 80144da:	701a      	strb	r2, [r3, #0]
  }
}
 80144dc:	bf00      	nop
 80144de:	371c      	adds	r7, #28
 80144e0:	46bd      	mov	sp, r7
 80144e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e6:	4770      	bx	lr

080144e8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80144e8:	b480      	push	{r7}
 80144ea:	b085      	sub	sp, #20
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	881a      	ldrh	r2, [r3, #0]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	4413      	add	r3, r2
 80144fe:	b29a      	uxth	r2, r3
 8014500:	683b      	ldr	r3, [r7, #0]
 8014502:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	4413      	add	r3, r2
 801450e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014510:	68fb      	ldr	r3, [r7, #12]
}
 8014512:	4618      	mov	r0, r3
 8014514:	3714      	adds	r7, #20
 8014516:	46bd      	mov	sp, r7
 8014518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451c:	4770      	bx	lr

0801451e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801451e:	b580      	push	{r7, lr}
 8014520:	b086      	sub	sp, #24
 8014522:	af00      	add	r7, sp, #0
 8014524:	60f8      	str	r0, [r7, #12]
 8014526:	60b9      	str	r1, [r7, #8]
 8014528:	4613      	mov	r3, r2
 801452a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801452c:	2301      	movs	r3, #1
 801452e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	789b      	ldrb	r3, [r3, #2]
 8014534:	2b01      	cmp	r3, #1
 8014536:	d002      	beq.n	801453e <USBH_CtlReq+0x20>
 8014538:	2b02      	cmp	r3, #2
 801453a:	d01d      	beq.n	8014578 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 801453c:	e043      	b.n	80145c6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	68ba      	ldr	r2, [r7, #8]
 8014542:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	88fa      	ldrh	r2, [r7, #6]
 8014548:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	2201      	movs	r2, #1
 801454e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2202      	movs	r2, #2
 8014554:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8014556:	2301      	movs	r3, #1
 8014558:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2203      	movs	r2, #3
 801455e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801456e:	2200      	movs	r2, #0
 8014570:	4619      	mov	r1, r3
 8014572:	f000 fd63 	bl	801503c <osMessagePut>
      break;
 8014576:	e026      	b.n	80145c6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8014578:	68f8      	ldr	r0, [r7, #12]
 801457a:	f000 f829 	bl	80145d0 <USBH_HandleControl>
 801457e:	4603      	mov	r3, r0
 8014580:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8014582:	7dfb      	ldrb	r3, [r7, #23]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d002      	beq.n	801458e <USBH_CtlReq+0x70>
 8014588:	7dfb      	ldrb	r3, [r7, #23]
 801458a:	2b03      	cmp	r3, #3
 801458c:	d106      	bne.n	801459c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2201      	movs	r2, #1
 8014592:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	2200      	movs	r2, #0
 8014598:	761a      	strb	r2, [r3, #24]
 801459a:	e005      	b.n	80145a8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 801459c:	7dfb      	ldrb	r3, [r7, #23]
 801459e:	2b02      	cmp	r3, #2
 80145a0:	d102      	bne.n	80145a8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2201      	movs	r2, #1
 80145a6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2203      	movs	r2, #3
 80145ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80145bc:	2200      	movs	r2, #0
 80145be:	4619      	mov	r1, r3
 80145c0:	f000 fd3c 	bl	801503c <osMessagePut>
      break;
 80145c4:	bf00      	nop
  }
  return status;
 80145c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3718      	adds	r7, #24
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b086      	sub	sp, #24
 80145d4:	af02      	add	r7, sp, #8
 80145d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80145d8:	2301      	movs	r3, #1
 80145da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80145dc:	2300      	movs	r3, #0
 80145de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	7e1b      	ldrb	r3, [r3, #24]
 80145e4:	3b01      	subs	r3, #1
 80145e6:	2b0a      	cmp	r3, #10
 80145e8:	f200 8229 	bhi.w	8014a3e <USBH_HandleControl+0x46e>
 80145ec:	a201      	add	r2, pc, #4	; (adr r2, 80145f4 <USBH_HandleControl+0x24>)
 80145ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145f2:	bf00      	nop
 80145f4:	08014621 	.word	0x08014621
 80145f8:	0801463b 	.word	0x0801463b
 80145fc:	080146dd 	.word	0x080146dd
 8014600:	08014703 	.word	0x08014703
 8014604:	0801478f 	.word	0x0801478f
 8014608:	080147b9 	.word	0x080147b9
 801460c:	0801487b 	.word	0x0801487b
 8014610:	0801489d 	.word	0x0801489d
 8014614:	0801492f 	.word	0x0801492f
 8014618:	08014955 	.word	0x08014955
 801461c:	080149e7 	.word	0x080149e7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f103 0110 	add.w	r1, r3, #16
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	795b      	ldrb	r3, [r3, #5]
 801462a:	461a      	mov	r2, r3
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f000 fa17 	bl	8014a60 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2202      	movs	r2, #2
 8014636:	761a      	strb	r2, [r3, #24]
      break;
 8014638:	e20c      	b.n	8014a54 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	795b      	ldrb	r3, [r3, #5]
 801463e:	4619      	mov	r1, r3
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f003 fb79 	bl	8017d38 <USBH_LL_GetURBState>
 8014646:	4603      	mov	r3, r0
 8014648:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801464a:	7bbb      	ldrb	r3, [r7, #14]
 801464c:	2b01      	cmp	r3, #1
 801464e:	d12c      	bne.n	80146aa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	7c1b      	ldrb	r3, [r3, #16]
 8014654:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014658:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	8adb      	ldrh	r3, [r3, #22]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d00a      	beq.n	8014678 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8014662:	7b7b      	ldrb	r3, [r7, #13]
 8014664:	2b80      	cmp	r3, #128	; 0x80
 8014666:	d103      	bne.n	8014670 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2203      	movs	r2, #3
 801466c:	761a      	strb	r2, [r3, #24]
 801466e:	e00d      	b.n	801468c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2205      	movs	r2, #5
 8014674:	761a      	strb	r2, [r3, #24]
 8014676:	e009      	b.n	801468c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8014678:	7b7b      	ldrb	r3, [r7, #13]
 801467a:	2b80      	cmp	r3, #128	; 0x80
 801467c:	d103      	bne.n	8014686 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2209      	movs	r2, #9
 8014682:	761a      	strb	r2, [r3, #24]
 8014684:	e002      	b.n	801468c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2207      	movs	r2, #7
 801468a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2203      	movs	r2, #3
 8014690:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80146a0:	2200      	movs	r2, #0
 80146a2:	4619      	mov	r1, r3
 80146a4:	f000 fcca 	bl	801503c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80146a8:	e1cb      	b.n	8014a42 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80146aa:	7bbb      	ldrb	r3, [r7, #14]
 80146ac:	2b04      	cmp	r3, #4
 80146ae:	d003      	beq.n	80146b8 <USBH_HandleControl+0xe8>
 80146b0:	7bbb      	ldrb	r3, [r7, #14]
 80146b2:	2b02      	cmp	r3, #2
 80146b4:	f040 81c5 	bne.w	8014a42 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	220b      	movs	r2, #11
 80146bc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2203      	movs	r2, #3
 80146c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80146d2:	2200      	movs	r2, #0
 80146d4:	4619      	mov	r1, r3
 80146d6:	f000 fcb1 	bl	801503c <osMessagePut>
      break;
 80146da:	e1b2      	b.n	8014a42 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80146e2:	b29a      	uxth	r2, r3
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	6899      	ldr	r1, [r3, #8]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	899a      	ldrh	r2, [r3, #12]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	791b      	ldrb	r3, [r3, #4]
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f000 f9f2 	bl	8014ade <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2204      	movs	r2, #4
 80146fe:	761a      	strb	r2, [r3, #24]
      break;
 8014700:	e1a8      	b.n	8014a54 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	791b      	ldrb	r3, [r3, #4]
 8014706:	4619      	mov	r1, r3
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f003 fb15 	bl	8017d38 <USBH_LL_GetURBState>
 801470e:	4603      	mov	r3, r0
 8014710:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8014712:	7bbb      	ldrb	r3, [r7, #14]
 8014714:	2b01      	cmp	r3, #1
 8014716:	d110      	bne.n	801473a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2209      	movs	r2, #9
 801471c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2203      	movs	r2, #3
 8014722:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014732:	2200      	movs	r2, #0
 8014734:	4619      	mov	r1, r3
 8014736:	f000 fc81 	bl	801503c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801473a:	7bbb      	ldrb	r3, [r7, #14]
 801473c:	2b05      	cmp	r3, #5
 801473e:	d110      	bne.n	8014762 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8014740:	2303      	movs	r3, #3
 8014742:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2203      	movs	r2, #3
 8014748:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014758:	2200      	movs	r2, #0
 801475a:	4619      	mov	r1, r3
 801475c:	f000 fc6e 	bl	801503c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014760:	e171      	b.n	8014a46 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8014762:	7bbb      	ldrb	r3, [r7, #14]
 8014764:	2b04      	cmp	r3, #4
 8014766:	f040 816e 	bne.w	8014a46 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	220b      	movs	r2, #11
 801476e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	2203      	movs	r2, #3
 8014774:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014784:	2200      	movs	r2, #0
 8014786:	4619      	mov	r1, r3
 8014788:	f000 fc58 	bl	801503c <osMessagePut>
      break;
 801478c:	e15b      	b.n	8014a46 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6899      	ldr	r1, [r3, #8]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	899a      	ldrh	r2, [r3, #12]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	795b      	ldrb	r3, [r3, #5]
 801479a:	2001      	movs	r0, #1
 801479c:	9000      	str	r0, [sp, #0]
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 f978 	bl	8014a94 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2206      	movs	r2, #6
 80147b4:	761a      	strb	r2, [r3, #24]
      break;
 80147b6:	e14d      	b.n	8014a54 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	795b      	ldrb	r3, [r3, #5]
 80147bc:	4619      	mov	r1, r3
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f003 faba 	bl	8017d38 <USBH_LL_GetURBState>
 80147c4:	4603      	mov	r3, r0
 80147c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80147c8:	7bbb      	ldrb	r3, [r7, #14]
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d111      	bne.n	80147f2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	2207      	movs	r2, #7
 80147d2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2203      	movs	r2, #3
 80147d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80147e8:	2200      	movs	r2, #0
 80147ea:	4619      	mov	r1, r3
 80147ec:	f000 fc26 	bl	801503c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80147f0:	e12b      	b.n	8014a4a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80147f2:	7bbb      	ldrb	r3, [r7, #14]
 80147f4:	2b05      	cmp	r3, #5
 80147f6:	d113      	bne.n	8014820 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	220c      	movs	r2, #12
 80147fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80147fe:	2303      	movs	r3, #3
 8014800:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2203      	movs	r2, #3
 8014806:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014816:	2200      	movs	r2, #0
 8014818:	4619      	mov	r1, r3
 801481a:	f000 fc0f 	bl	801503c <osMessagePut>
      break;
 801481e:	e114      	b.n	8014a4a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014820:	7bbb      	ldrb	r3, [r7, #14]
 8014822:	2b02      	cmp	r3, #2
 8014824:	d111      	bne.n	801484a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2205      	movs	r2, #5
 801482a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2203      	movs	r2, #3
 8014830:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014840:	2200      	movs	r2, #0
 8014842:	4619      	mov	r1, r3
 8014844:	f000 fbfa 	bl	801503c <osMessagePut>
      break;
 8014848:	e0ff      	b.n	8014a4a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801484a:	7bbb      	ldrb	r3, [r7, #14]
 801484c:	2b04      	cmp	r3, #4
 801484e:	f040 80fc 	bne.w	8014a4a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	220b      	movs	r2, #11
 8014856:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8014858:	2302      	movs	r3, #2
 801485a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2203      	movs	r2, #3
 8014860:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014870:	2200      	movs	r2, #0
 8014872:	4619      	mov	r1, r3
 8014874:	f000 fbe2 	bl	801503c <osMessagePut>
      break;
 8014878:	e0e7      	b.n	8014a4a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	791b      	ldrb	r3, [r3, #4]
 801487e:	2200      	movs	r2, #0
 8014880:	2100      	movs	r1, #0
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f000 f92b 	bl	8014ade <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801488e:	b29a      	uxth	r2, r3
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2208      	movs	r2, #8
 8014898:	761a      	strb	r2, [r3, #24]

      break;
 801489a:	e0db      	b.n	8014a54 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	791b      	ldrb	r3, [r3, #4]
 80148a0:	4619      	mov	r1, r3
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f003 fa48 	bl	8017d38 <USBH_LL_GetURBState>
 80148a8:	4603      	mov	r3, r0
 80148aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80148ac:	7bbb      	ldrb	r3, [r7, #14]
 80148ae:	2b01      	cmp	r3, #1
 80148b0:	d113      	bne.n	80148da <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	220d      	movs	r2, #13
 80148b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80148b8:	2300      	movs	r3, #0
 80148ba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2203      	movs	r2, #3
 80148c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80148d0:	2200      	movs	r2, #0
 80148d2:	4619      	mov	r1, r3
 80148d4:	f000 fbb2 	bl	801503c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80148d8:	e0b9      	b.n	8014a4e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80148da:	7bbb      	ldrb	r3, [r7, #14]
 80148dc:	2b04      	cmp	r3, #4
 80148de:	d111      	bne.n	8014904 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	220b      	movs	r2, #11
 80148e4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2203      	movs	r2, #3
 80148ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80148fa:	2200      	movs	r2, #0
 80148fc:	4619      	mov	r1, r3
 80148fe:	f000 fb9d 	bl	801503c <osMessagePut>
      break;
 8014902:	e0a4      	b.n	8014a4e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8014904:	7bbb      	ldrb	r3, [r7, #14]
 8014906:	2b05      	cmp	r3, #5
 8014908:	f040 80a1 	bne.w	8014a4e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 801490c:	2303      	movs	r3, #3
 801490e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2203      	movs	r2, #3
 8014914:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014924:	2200      	movs	r2, #0
 8014926:	4619      	mov	r1, r3
 8014928:	f000 fb88 	bl	801503c <osMessagePut>
      break;
 801492c:	e08f      	b.n	8014a4e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	795b      	ldrb	r3, [r3, #5]
 8014932:	2201      	movs	r2, #1
 8014934:	9200      	str	r2, [sp, #0]
 8014936:	2200      	movs	r2, #0
 8014938:	2100      	movs	r1, #0
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f000 f8aa 	bl	8014a94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014946:	b29a      	uxth	r2, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	220a      	movs	r2, #10
 8014950:	761a      	strb	r2, [r3, #24]
      break;
 8014952:	e07f      	b.n	8014a54 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	795b      	ldrb	r3, [r3, #5]
 8014958:	4619      	mov	r1, r3
 801495a:	6878      	ldr	r0, [r7, #4]
 801495c:	f003 f9ec 	bl	8017d38 <USBH_LL_GetURBState>
 8014960:	4603      	mov	r3, r0
 8014962:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8014964:	7bbb      	ldrb	r3, [r7, #14]
 8014966:	2b01      	cmp	r3, #1
 8014968:	d113      	bne.n	8014992 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 801496a:	2300      	movs	r3, #0
 801496c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	220d      	movs	r2, #13
 8014972:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2203      	movs	r2, #3
 8014978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014988:	2200      	movs	r2, #0
 801498a:	4619      	mov	r1, r3
 801498c:	f000 fb56 	bl	801503c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014990:	e05f      	b.n	8014a52 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014992:	7bbb      	ldrb	r3, [r7, #14]
 8014994:	2b02      	cmp	r3, #2
 8014996:	d111      	bne.n	80149bc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2209      	movs	r2, #9
 801499c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2203      	movs	r2, #3
 80149a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80149b2:	2200      	movs	r2, #0
 80149b4:	4619      	mov	r1, r3
 80149b6:	f000 fb41 	bl	801503c <osMessagePut>
      break;
 80149ba:	e04a      	b.n	8014a52 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80149bc:	7bbb      	ldrb	r3, [r7, #14]
 80149be:	2b04      	cmp	r3, #4
 80149c0:	d147      	bne.n	8014a52 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	220b      	movs	r2, #11
 80149c6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2203      	movs	r2, #3
 80149cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80149dc:	2200      	movs	r2, #0
 80149de:	4619      	mov	r1, r3
 80149e0:	f000 fb2c 	bl	801503c <osMessagePut>
      break;
 80149e4:	e035      	b.n	8014a52 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	7e5b      	ldrb	r3, [r3, #25]
 80149ea:	3301      	adds	r3, #1
 80149ec:	b2da      	uxtb	r2, r3
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	765a      	strb	r2, [r3, #25]
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	7e5b      	ldrb	r3, [r3, #25]
 80149f6:	2b02      	cmp	r3, #2
 80149f8:	d806      	bhi.n	8014a08 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2201      	movs	r2, #1
 80149fe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2201      	movs	r2, #1
 8014a04:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8014a06:	e025      	b.n	8014a54 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014a0e:	2106      	movs	r1, #6
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2200      	movs	r2, #0
 8014a18:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	795b      	ldrb	r3, [r3, #5]
 8014a1e:	4619      	mov	r1, r3
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f000 f90d 	bl	8014c40 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	791b      	ldrb	r3, [r3, #4]
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f000 f907 	bl	8014c40 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	2200      	movs	r2, #0
 8014a36:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8014a38:	2302      	movs	r3, #2
 8014a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8014a3c:	e00a      	b.n	8014a54 <USBH_HandleControl+0x484>

    default:
      break;
 8014a3e:	bf00      	nop
 8014a40:	e008      	b.n	8014a54 <USBH_HandleControl+0x484>
      break;
 8014a42:	bf00      	nop
 8014a44:	e006      	b.n	8014a54 <USBH_HandleControl+0x484>
      break;
 8014a46:	bf00      	nop
 8014a48:	e004      	b.n	8014a54 <USBH_HandleControl+0x484>
      break;
 8014a4a:	bf00      	nop
 8014a4c:	e002      	b.n	8014a54 <USBH_HandleControl+0x484>
      break;
 8014a4e:	bf00      	nop
 8014a50:	e000      	b.n	8014a54 <USBH_HandleControl+0x484>
      break;
 8014a52:	bf00      	nop
  }

  return status;
 8014a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3710      	adds	r7, #16
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop

08014a60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b088      	sub	sp, #32
 8014a64:	af04      	add	r7, sp, #16
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	60b9      	str	r1, [r7, #8]
 8014a6a:	4613      	mov	r3, r2
 8014a6c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014a6e:	79f9      	ldrb	r1, [r7, #7]
 8014a70:	2300      	movs	r3, #0
 8014a72:	9303      	str	r3, [sp, #12]
 8014a74:	2308      	movs	r3, #8
 8014a76:	9302      	str	r3, [sp, #8]
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	9301      	str	r3, [sp, #4]
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	9300      	str	r3, [sp, #0]
 8014a80:	2300      	movs	r3, #0
 8014a82:	2200      	movs	r2, #0
 8014a84:	68f8      	ldr	r0, [r7, #12]
 8014a86:	f003 f926 	bl	8017cd6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8014a8a:	2300      	movs	r3, #0
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3710      	adds	r7, #16
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}

08014a94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b088      	sub	sp, #32
 8014a98:	af04      	add	r7, sp, #16
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	60b9      	str	r1, [r7, #8]
 8014a9e:	4611      	mov	r1, r2
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	460b      	mov	r3, r1
 8014aa4:	80fb      	strh	r3, [r7, #6]
 8014aa6:	4613      	mov	r3, r2
 8014aa8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d001      	beq.n	8014ab8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014ab8:	7979      	ldrb	r1, [r7, #5]
 8014aba:	7e3b      	ldrb	r3, [r7, #24]
 8014abc:	9303      	str	r3, [sp, #12]
 8014abe:	88fb      	ldrh	r3, [r7, #6]
 8014ac0:	9302      	str	r3, [sp, #8]
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	9301      	str	r3, [sp, #4]
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	9300      	str	r3, [sp, #0]
 8014aca:	2300      	movs	r3, #0
 8014acc:	2200      	movs	r2, #0
 8014ace:	68f8      	ldr	r0, [r7, #12]
 8014ad0:	f003 f901 	bl	8017cd6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8014ad4:	2300      	movs	r3, #0
}
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	3710      	adds	r7, #16
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}

08014ade <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014ade:	b580      	push	{r7, lr}
 8014ae0:	b088      	sub	sp, #32
 8014ae2:	af04      	add	r7, sp, #16
 8014ae4:	60f8      	str	r0, [r7, #12]
 8014ae6:	60b9      	str	r1, [r7, #8]
 8014ae8:	4611      	mov	r1, r2
 8014aea:	461a      	mov	r2, r3
 8014aec:	460b      	mov	r3, r1
 8014aee:	80fb      	strh	r3, [r7, #6]
 8014af0:	4613      	mov	r3, r2
 8014af2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014af4:	7979      	ldrb	r1, [r7, #5]
 8014af6:	2300      	movs	r3, #0
 8014af8:	9303      	str	r3, [sp, #12]
 8014afa:	88fb      	ldrh	r3, [r7, #6]
 8014afc:	9302      	str	r3, [sp, #8]
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	9301      	str	r3, [sp, #4]
 8014b02:	2301      	movs	r3, #1
 8014b04:	9300      	str	r3, [sp, #0]
 8014b06:	2300      	movs	r3, #0
 8014b08:	2201      	movs	r2, #1
 8014b0a:	68f8      	ldr	r0, [r7, #12]
 8014b0c:	f003 f8e3 	bl	8017cd6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8014b10:	2300      	movs	r3, #0

}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3710      	adds	r7, #16
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}

08014b1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8014b1a:	b580      	push	{r7, lr}
 8014b1c:	b088      	sub	sp, #32
 8014b1e:	af04      	add	r7, sp, #16
 8014b20:	60f8      	str	r0, [r7, #12]
 8014b22:	60b9      	str	r1, [r7, #8]
 8014b24:	4611      	mov	r1, r2
 8014b26:	461a      	mov	r2, r3
 8014b28:	460b      	mov	r3, r1
 8014b2a:	80fb      	strh	r3, [r7, #6]
 8014b2c:	4613      	mov	r3, r2
 8014b2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d001      	beq.n	8014b3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014b3e:	7979      	ldrb	r1, [r7, #5]
 8014b40:	7e3b      	ldrb	r3, [r7, #24]
 8014b42:	9303      	str	r3, [sp, #12]
 8014b44:	88fb      	ldrh	r3, [r7, #6]
 8014b46:	9302      	str	r3, [sp, #8]
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	9301      	str	r3, [sp, #4]
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	9300      	str	r3, [sp, #0]
 8014b50:	2302      	movs	r3, #2
 8014b52:	2200      	movs	r2, #0
 8014b54:	68f8      	ldr	r0, [r7, #12]
 8014b56:	f003 f8be 	bl	8017cd6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8014b5a:	2300      	movs	r3, #0
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3710      	adds	r7, #16
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b088      	sub	sp, #32
 8014b68:	af04      	add	r7, sp, #16
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	4611      	mov	r1, r2
 8014b70:	461a      	mov	r2, r3
 8014b72:	460b      	mov	r3, r1
 8014b74:	80fb      	strh	r3, [r7, #6]
 8014b76:	4613      	mov	r3, r2
 8014b78:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014b7a:	7979      	ldrb	r1, [r7, #5]
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	9303      	str	r3, [sp, #12]
 8014b80:	88fb      	ldrh	r3, [r7, #6]
 8014b82:	9302      	str	r3, [sp, #8]
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	9301      	str	r3, [sp, #4]
 8014b88:	2301      	movs	r3, #1
 8014b8a:	9300      	str	r3, [sp, #0]
 8014b8c:	2302      	movs	r3, #2
 8014b8e:	2201      	movs	r2, #1
 8014b90:	68f8      	ldr	r0, [r7, #12]
 8014b92:	f003 f8a0 	bl	8017cd6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8014b96:	2300      	movs	r3, #0
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3710      	adds	r7, #16
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b086      	sub	sp, #24
 8014ba4:	af04      	add	r7, sp, #16
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	4608      	mov	r0, r1
 8014baa:	4611      	mov	r1, r2
 8014bac:	461a      	mov	r2, r3
 8014bae:	4603      	mov	r3, r0
 8014bb0:	70fb      	strb	r3, [r7, #3]
 8014bb2:	460b      	mov	r3, r1
 8014bb4:	70bb      	strb	r3, [r7, #2]
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8014bba:	7878      	ldrb	r0, [r7, #1]
 8014bbc:	78ba      	ldrb	r2, [r7, #2]
 8014bbe:	78f9      	ldrb	r1, [r7, #3]
 8014bc0:	8b3b      	ldrh	r3, [r7, #24]
 8014bc2:	9302      	str	r3, [sp, #8]
 8014bc4:	7d3b      	ldrb	r3, [r7, #20]
 8014bc6:	9301      	str	r3, [sp, #4]
 8014bc8:	7c3b      	ldrb	r3, [r7, #16]
 8014bca:	9300      	str	r3, [sp, #0]
 8014bcc:	4603      	mov	r3, r0
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f003 f833 	bl	8017c3a <USBH_LL_OpenPipe>

  return USBH_OK;
 8014bd4:	2300      	movs	r3, #0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3708      	adds	r7, #8
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}

08014bde <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8014bde:	b580      	push	{r7, lr}
 8014be0:	b082      	sub	sp, #8
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	6078      	str	r0, [r7, #4]
 8014be6:	460b      	mov	r3, r1
 8014be8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8014bea:	78fb      	ldrb	r3, [r7, #3]
 8014bec:	4619      	mov	r1, r3
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f003 f852 	bl	8017c98 <USBH_LL_ClosePipe>

  return USBH_OK;
 8014bf4:	2300      	movs	r3, #0
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	3708      	adds	r7, #8
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}

08014bfe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8014bfe:	b580      	push	{r7, lr}
 8014c00:	b084      	sub	sp, #16
 8014c02:	af00      	add	r7, sp, #0
 8014c04:	6078      	str	r0, [r7, #4]
 8014c06:	460b      	mov	r3, r1
 8014c08:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f000 f836 	bl	8014c7c <USBH_GetFreePipe>
 8014c10:	4603      	mov	r3, r0
 8014c12:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014c14:	89fb      	ldrh	r3, [r7, #14]
 8014c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d00a      	beq.n	8014c34 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8014c1e:	78fa      	ldrb	r2, [r7, #3]
 8014c20:	89fb      	ldrh	r3, [r7, #14]
 8014c22:	f003 030f 	and.w	r3, r3, #15
 8014c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014c2a:	6879      	ldr	r1, [r7, #4]
 8014c2c:	33e0      	adds	r3, #224	; 0xe0
 8014c2e:	009b      	lsls	r3, r3, #2
 8014c30:	440b      	add	r3, r1
 8014c32:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8014c34:	89fb      	ldrh	r3, [r7, #14]
 8014c36:	b2db      	uxtb	r3, r3
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	3710      	adds	r7, #16
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd80      	pop	{r7, pc}

08014c40 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8014c40:	b480      	push	{r7}
 8014c42:	b083      	sub	sp, #12
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
 8014c48:	460b      	mov	r3, r1
 8014c4a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8014c4c:	78fb      	ldrb	r3, [r7, #3]
 8014c4e:	2b0a      	cmp	r3, #10
 8014c50:	d80d      	bhi.n	8014c6e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8014c52:	78fb      	ldrb	r3, [r7, #3]
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	33e0      	adds	r3, #224	; 0xe0
 8014c58:	009b      	lsls	r3, r3, #2
 8014c5a:	4413      	add	r3, r2
 8014c5c:	685a      	ldr	r2, [r3, #4]
 8014c5e:	78fb      	ldrb	r3, [r7, #3]
 8014c60:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014c64:	6879      	ldr	r1, [r7, #4]
 8014c66:	33e0      	adds	r3, #224	; 0xe0
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	440b      	add	r3, r1
 8014c6c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8014c6e:	2300      	movs	r3, #0
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	370c      	adds	r7, #12
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr

08014c7c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b085      	sub	sp, #20
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8014c84:	2300      	movs	r3, #0
 8014c86:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8014c88:	2300      	movs	r3, #0
 8014c8a:	73fb      	strb	r3, [r7, #15]
 8014c8c:	e00f      	b.n	8014cae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8014c8e:	7bfb      	ldrb	r3, [r7, #15]
 8014c90:	687a      	ldr	r2, [r7, #4]
 8014c92:	33e0      	adds	r3, #224	; 0xe0
 8014c94:	009b      	lsls	r3, r3, #2
 8014c96:	4413      	add	r3, r2
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d102      	bne.n	8014ca8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8014ca2:	7bfb      	ldrb	r3, [r7, #15]
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	e007      	b.n	8014cb8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8014ca8:	7bfb      	ldrb	r3, [r7, #15]
 8014caa:	3301      	adds	r3, #1
 8014cac:	73fb      	strb	r3, [r7, #15]
 8014cae:	7bfb      	ldrb	r3, [r7, #15]
 8014cb0:	2b0a      	cmp	r3, #10
 8014cb2:	d9ec      	bls.n	8014c8e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8014cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3714      	adds	r7, #20
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr

08014cc4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b087      	sub	sp, #28
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	4613      	mov	r3, r2
 8014cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014cda:	4b1f      	ldr	r3, [pc, #124]	; (8014d58 <FATFS_LinkDriverEx+0x94>)
 8014cdc:	7a5b      	ldrb	r3, [r3, #9]
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d131      	bne.n	8014d48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014ce4:	4b1c      	ldr	r3, [pc, #112]	; (8014d58 <FATFS_LinkDriverEx+0x94>)
 8014ce6:	7a5b      	ldrb	r3, [r3, #9]
 8014ce8:	b2db      	uxtb	r3, r3
 8014cea:	461a      	mov	r2, r3
 8014cec:	4b1a      	ldr	r3, [pc, #104]	; (8014d58 <FATFS_LinkDriverEx+0x94>)
 8014cee:	2100      	movs	r1, #0
 8014cf0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014cf2:	4b19      	ldr	r3, [pc, #100]	; (8014d58 <FATFS_LinkDriverEx+0x94>)
 8014cf4:	7a5b      	ldrb	r3, [r3, #9]
 8014cf6:	b2db      	uxtb	r3, r3
 8014cf8:	4a17      	ldr	r2, [pc, #92]	; (8014d58 <FATFS_LinkDriverEx+0x94>)
 8014cfa:	009b      	lsls	r3, r3, #2
 8014cfc:	4413      	add	r3, r2
 8014cfe:	68fa      	ldr	r2, [r7, #12]
 8014d00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014d02:	4b15      	ldr	r3, [pc, #84]	; (8014d58 <FATFS_LinkDriverEx+0x94>)
 8014d04:	7a5b      	ldrb	r3, [r3, #9]
 8014d06:	b2db      	uxtb	r3, r3
 8014d08:	461a      	mov	r2, r3
 8014d0a:	4b13      	ldr	r3, [pc, #76]	; (8014d58 <FATFS_LinkDriverEx+0x94>)
 8014d0c:	4413      	add	r3, r2
 8014d0e:	79fa      	ldrb	r2, [r7, #7]
 8014d10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014d12:	4b11      	ldr	r3, [pc, #68]	; (8014d58 <FATFS_LinkDriverEx+0x94>)
 8014d14:	7a5b      	ldrb	r3, [r3, #9]
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	1c5a      	adds	r2, r3, #1
 8014d1a:	b2d1      	uxtb	r1, r2
 8014d1c:	4a0e      	ldr	r2, [pc, #56]	; (8014d58 <FATFS_LinkDriverEx+0x94>)
 8014d1e:	7251      	strb	r1, [r2, #9]
 8014d20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014d22:	7dbb      	ldrb	r3, [r7, #22]
 8014d24:	3330      	adds	r3, #48	; 0x30
 8014d26:	b2da      	uxtb	r2, r3
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	3301      	adds	r3, #1
 8014d30:	223a      	movs	r2, #58	; 0x3a
 8014d32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014d34:	68bb      	ldr	r3, [r7, #8]
 8014d36:	3302      	adds	r3, #2
 8014d38:	222f      	movs	r2, #47	; 0x2f
 8014d3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	3303      	adds	r3, #3
 8014d40:	2200      	movs	r2, #0
 8014d42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014d44:	2300      	movs	r3, #0
 8014d46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	371c      	adds	r7, #28
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d54:	4770      	bx	lr
 8014d56:	bf00      	nop
 8014d58:	200418f0 	.word	0x200418f0

08014d5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014d66:	2200      	movs	r2, #0
 8014d68:	6839      	ldr	r1, [r7, #0]
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f7ff ffaa 	bl	8014cc4 <FATFS_LinkDriverEx>
 8014d70:	4603      	mov	r3, r0
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3708      	adds	r7, #8
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}

08014d7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014d7a:	b480      	push	{r7}
 8014d7c:	b085      	sub	sp, #20
 8014d7e:	af00      	add	r7, sp, #0
 8014d80:	4603      	mov	r3, r0
 8014d82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014d84:	2300      	movs	r3, #0
 8014d86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d8c:	2b84      	cmp	r3, #132	; 0x84
 8014d8e:	d005      	beq.n	8014d9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014d90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	4413      	add	r3, r2
 8014d98:	3303      	adds	r3, #3
 8014d9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3714      	adds	r7, #20
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr

08014daa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014daa:	b480      	push	{r7}
 8014dac:	b083      	sub	sp, #12
 8014dae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014db0:	f3ef 8305 	mrs	r3, IPSR
 8014db4:	607b      	str	r3, [r7, #4]
  return(result);
 8014db6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	bf14      	ite	ne
 8014dbc:	2301      	movne	r3, #1
 8014dbe:	2300      	moveq	r3, #0
 8014dc0:	b2db      	uxtb	r3, r3
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	370c      	adds	r7, #12
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dcc:	4770      	bx	lr

08014dce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014dce:	b580      	push	{r7, lr}
 8014dd0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014dd2:	f001 f9e7 	bl	80161a4 <vTaskStartScheduler>
  
  return osOK;
 8014dd6:	2300      	movs	r3, #0
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014de0:	f001 fe3a 	bl	8016a58 <xTaskGetSchedulerState>
 8014de4:	4603      	mov	r3, r0
 8014de6:	2b01      	cmp	r3, #1
 8014de8:	d101      	bne.n	8014dee <osKernelRunning+0x12>
    return 0;
 8014dea:	2300      	movs	r3, #0
 8014dec:	e000      	b.n	8014df0 <osKernelRunning+0x14>
  else
    return 1;
 8014dee:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014df8:	f7ff ffd7 	bl	8014daa <inHandlerMode>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d003      	beq.n	8014e0a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014e02:	f001 faef 	bl	80163e4 <xTaskGetTickCountFromISR>
 8014e06:	4603      	mov	r3, r0
 8014e08:	e002      	b.n	8014e10 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014e0a:	f001 fadb 	bl	80163c4 <xTaskGetTickCount>
 8014e0e:	4603      	mov	r3, r0
  }
}
 8014e10:	4618      	mov	r0, r3
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e16:	b089      	sub	sp, #36	; 0x24
 8014e18:	af04      	add	r7, sp, #16
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	695b      	ldr	r3, [r3, #20]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d020      	beq.n	8014e68 <osThreadCreate+0x54>
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	699b      	ldr	r3, [r3, #24]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d01c      	beq.n	8014e68 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	685c      	ldr	r4, [r3, #4]
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	681d      	ldr	r5, [r3, #0]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	691e      	ldr	r6, [r3, #16]
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014e40:	4618      	mov	r0, r3
 8014e42:	f7ff ff9a 	bl	8014d7a <makeFreeRtosPriority>
 8014e46:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	695b      	ldr	r3, [r3, #20]
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014e50:	9202      	str	r2, [sp, #8]
 8014e52:	9301      	str	r3, [sp, #4]
 8014e54:	9100      	str	r1, [sp, #0]
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	4632      	mov	r2, r6
 8014e5a:	4629      	mov	r1, r5
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	f000 ffc5 	bl	8015dec <xTaskCreateStatic>
 8014e62:	4603      	mov	r3, r0
 8014e64:	60fb      	str	r3, [r7, #12]
 8014e66:	e01c      	b.n	8014ea2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	685c      	ldr	r4, [r3, #4]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014e74:	b29e      	uxth	r6, r3
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7ff ff7c 	bl	8014d7a <makeFreeRtosPriority>
 8014e82:	4602      	mov	r2, r0
 8014e84:	f107 030c 	add.w	r3, r7, #12
 8014e88:	9301      	str	r3, [sp, #4]
 8014e8a:	9200      	str	r2, [sp, #0]
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	4632      	mov	r2, r6
 8014e90:	4629      	mov	r1, r5
 8014e92:	4620      	mov	r0, r4
 8014e94:	f001 f80d 	bl	8015eb2 <xTaskCreate>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b01      	cmp	r3, #1
 8014e9c:	d001      	beq.n	8014ea2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	e000      	b.n	8014ea4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3714      	adds	r7, #20
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014eac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b084      	sub	sp, #16
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d001      	beq.n	8014ec2 <osDelay+0x16>
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	e000      	b.n	8014ec4 <osDelay+0x18>
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f001 f937 	bl	8016138 <vTaskDelay>
  
  return osOK;
 8014eca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3710      	adds	r7, #16
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b086      	sub	sp, #24
 8014ed8:	af02      	add	r7, sp, #8
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8014ee6:	f7ff ff60 	bl	8014daa <inHandlerMode>
 8014eea:	4603      	mov	r3, r0
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d01c      	beq.n	8014f2a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8014ef0:	6839      	ldr	r1, [r7, #0]
 8014ef2:	f107 0208 	add.w	r2, r7, #8
 8014ef6:	f107 030c 	add.w	r3, r7, #12
 8014efa:	9300      	str	r3, [sp, #0]
 8014efc:	4613      	mov	r3, r2
 8014efe:	2201      	movs	r2, #1
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f001 ff67 	bl	8016dd4 <xTaskGenericNotifyFromISR>
 8014f06:	4603      	mov	r3, r0
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	d002      	beq.n	8014f12 <osSignalSet+0x3e>
      return 0x80000000;
 8014f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014f10:	e019      	b.n	8014f46 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d015      	beq.n	8014f44 <osSignalSet+0x70>
 8014f18:	4b0d      	ldr	r3, [pc, #52]	; (8014f50 <osSignalSet+0x7c>)
 8014f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f1e:	601a      	str	r2, [r3, #0]
 8014f20:	f3bf 8f4f 	dsb	sy
 8014f24:	f3bf 8f6f 	isb	sy
 8014f28:	e00c      	b.n	8014f44 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8014f2a:	6839      	ldr	r1, [r7, #0]
 8014f2c:	f107 0308 	add.w	r3, r7, #8
 8014f30:	2201      	movs	r2, #1
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f001 fe92 	bl	8016c5c <xTaskGenericNotify>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	2b01      	cmp	r3, #1
 8014f3c:	d002      	beq.n	8014f44 <osSignalSet+0x70>
    return 0x80000000;
 8014f3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014f42:	e000      	b.n	8014f46 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8014f44:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3710      	adds	r7, #16
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	e000ed04 	.word	0xe000ed04

08014f54 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8014f54:	b590      	push	{r4, r7, lr}
 8014f56:	b089      	sub	sp, #36	; 0x24
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	60b9      	str	r1, [r7, #8]
 8014f5e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8014f60:	2300      	movs	r3, #0
 8014f62:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8014f64:	2300      	movs	r3, #0
 8014f66:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f6e:	d103      	bne.n	8014f78 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8014f70:	f04f 33ff 	mov.w	r3, #4294967295
 8014f74:	61fb      	str	r3, [r7, #28]
 8014f76:	e009      	b.n	8014f8c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d006      	beq.n	8014f8c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d101      	bne.n	8014f8c <osSignalWait+0x38>
      ticks = 1;
 8014f88:	2301      	movs	r3, #1
 8014f8a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8014f8c:	f7ff ff0d 	bl	8014daa <inHandlerMode>
 8014f90:	4603      	mov	r3, r0
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d002      	beq.n	8014f9c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8014f96:	2382      	movs	r3, #130	; 0x82
 8014f98:	613b      	str	r3, [r7, #16]
 8014f9a:	e01b      	b.n	8014fd4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8014f9c:	68b9      	ldr	r1, [r7, #8]
 8014f9e:	f107 0310 	add.w	r3, r7, #16
 8014fa2:	1d1a      	adds	r2, r3, #4
 8014fa4:	69fb      	ldr	r3, [r7, #28]
 8014fa6:	2000      	movs	r0, #0
 8014fa8:	f001 fdfe 	bl	8016ba8 <xTaskNotifyWait>
 8014fac:	4603      	mov	r3, r0
 8014fae:	2b01      	cmp	r3, #1
 8014fb0:	d008      	beq.n	8014fc4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8014fb2:	69fb      	ldr	r3, [r7, #28]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d102      	bne.n	8014fbe <osSignalWait+0x6a>
 8014fb8:	2300      	movs	r3, #0
 8014fba:	613b      	str	r3, [r7, #16]
 8014fbc:	e00a      	b.n	8014fd4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8014fbe:	2340      	movs	r3, #64	; 0x40
 8014fc0:	613b      	str	r3, [r7, #16]
 8014fc2:	e007      	b.n	8014fd4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8014fc4:	697b      	ldr	r3, [r7, #20]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	da02      	bge.n	8014fd0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8014fca:	2386      	movs	r3, #134	; 0x86
 8014fcc:	613b      	str	r3, [r7, #16]
 8014fce:	e001      	b.n	8014fd4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8014fd0:	2308      	movs	r3, #8
 8014fd2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	461c      	mov	r4, r3
 8014fd8:	f107 0310 	add.w	r3, r7, #16
 8014fdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014fe0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014fe4:	68f8      	ldr	r0, [r7, #12]
 8014fe6:	3724      	adds	r7, #36	; 0x24
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd90      	pop	{r4, r7, pc}

08014fec <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014fec:	b590      	push	{r4, r7, lr}
 8014fee:	b085      	sub	sp, #20
 8014ff0:	af02      	add	r7, sp, #8
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	689b      	ldr	r3, [r3, #8]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d011      	beq.n	8015022 <osMessageCreate+0x36>
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	68db      	ldr	r3, [r3, #12]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d00d      	beq.n	8015022 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6818      	ldr	r0, [r3, #0]
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6859      	ldr	r1, [r3, #4]
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	689a      	ldr	r2, [r3, #8]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	68db      	ldr	r3, [r3, #12]
 8015016:	2400      	movs	r4, #0
 8015018:	9400      	str	r4, [sp, #0]
 801501a:	f000 f9e1 	bl	80153e0 <xQueueGenericCreateStatic>
 801501e:	4603      	mov	r3, r0
 8015020:	e008      	b.n	8015034 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	6818      	ldr	r0, [r3, #0]
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	2200      	movs	r2, #0
 801502c:	4619      	mov	r1, r3
 801502e:	f000 fa59 	bl	80154e4 <xQueueGenericCreate>
 8015032:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015034:	4618      	mov	r0, r3
 8015036:	370c      	adds	r7, #12
 8015038:	46bd      	mov	sp, r7
 801503a:	bd90      	pop	{r4, r7, pc}

0801503c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b086      	sub	sp, #24
 8015040:	af00      	add	r7, sp, #0
 8015042:	60f8      	str	r0, [r7, #12]
 8015044:	60b9      	str	r1, [r7, #8]
 8015046:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8015048:	2300      	movs	r3, #0
 801504a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d101      	bne.n	801505a <osMessagePut+0x1e>
    ticks = 1;
 8015056:	2301      	movs	r3, #1
 8015058:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801505a:	f7ff fea6 	bl	8014daa <inHandlerMode>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d018      	beq.n	8015096 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8015064:	f107 0210 	add.w	r2, r7, #16
 8015068:	f107 0108 	add.w	r1, r7, #8
 801506c:	2300      	movs	r3, #0
 801506e:	68f8      	ldr	r0, [r7, #12]
 8015070:	f000 fba0 	bl	80157b4 <xQueueGenericSendFromISR>
 8015074:	4603      	mov	r3, r0
 8015076:	2b01      	cmp	r3, #1
 8015078:	d001      	beq.n	801507e <osMessagePut+0x42>
      return osErrorOS;
 801507a:	23ff      	movs	r3, #255	; 0xff
 801507c:	e018      	b.n	80150b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d014      	beq.n	80150ae <osMessagePut+0x72>
 8015084:	4b0c      	ldr	r3, [pc, #48]	; (80150b8 <osMessagePut+0x7c>)
 8015086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801508a:	601a      	str	r2, [r3, #0]
 801508c:	f3bf 8f4f 	dsb	sy
 8015090:	f3bf 8f6f 	isb	sy
 8015094:	e00b      	b.n	80150ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8015096:	f107 0108 	add.w	r1, r7, #8
 801509a:	2300      	movs	r3, #0
 801509c:	697a      	ldr	r2, [r7, #20]
 801509e:	68f8      	ldr	r0, [r7, #12]
 80150a0:	f000 fa82 	bl	80155a8 <xQueueGenericSend>
 80150a4:	4603      	mov	r3, r0
 80150a6:	2b01      	cmp	r3, #1
 80150a8:	d001      	beq.n	80150ae <osMessagePut+0x72>
      return osErrorOS;
 80150aa:	23ff      	movs	r3, #255	; 0xff
 80150ac:	e000      	b.n	80150b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80150ae:	2300      	movs	r3, #0
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3718      	adds	r7, #24
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	e000ed04 	.word	0xe000ed04

080150bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80150bc:	b590      	push	{r4, r7, lr}
 80150be:	b08b      	sub	sp, #44	; 0x2c
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	60f8      	str	r0, [r7, #12]
 80150c4:	60b9      	str	r1, [r7, #8]
 80150c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80150cc:	2300      	movs	r3, #0
 80150ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d10a      	bne.n	80150ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80150d6:	2380      	movs	r3, #128	; 0x80
 80150d8:	617b      	str	r3, [r7, #20]
    return event;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	461c      	mov	r4, r3
 80150de:	f107 0314 	add.w	r3, r7, #20
 80150e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80150e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80150ea:	e054      	b.n	8015196 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80150ec:	2300      	movs	r3, #0
 80150ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80150f0:	2300      	movs	r3, #0
 80150f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150fa:	d103      	bne.n	8015104 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80150fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015100:	627b      	str	r3, [r7, #36]	; 0x24
 8015102:	e009      	b.n	8015118 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d006      	beq.n	8015118 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015110:	2b00      	cmp	r3, #0
 8015112:	d101      	bne.n	8015118 <osMessageGet+0x5c>
      ticks = 1;
 8015114:	2301      	movs	r3, #1
 8015116:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015118:	f7ff fe47 	bl	8014daa <inHandlerMode>
 801511c:	4603      	mov	r3, r0
 801511e:	2b00      	cmp	r3, #0
 8015120:	d01c      	beq.n	801515c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8015122:	f107 0220 	add.w	r2, r7, #32
 8015126:	f107 0314 	add.w	r3, r7, #20
 801512a:	3304      	adds	r3, #4
 801512c:	4619      	mov	r1, r3
 801512e:	68b8      	ldr	r0, [r7, #8]
 8015130:	f000 fcc6 	bl	8015ac0 <xQueueReceiveFromISR>
 8015134:	4603      	mov	r3, r0
 8015136:	2b01      	cmp	r3, #1
 8015138:	d102      	bne.n	8015140 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801513a:	2310      	movs	r3, #16
 801513c:	617b      	str	r3, [r7, #20]
 801513e:	e001      	b.n	8015144 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8015140:	2300      	movs	r3, #0
 8015142:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015144:	6a3b      	ldr	r3, [r7, #32]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d01d      	beq.n	8015186 <osMessageGet+0xca>
 801514a:	4b15      	ldr	r3, [pc, #84]	; (80151a0 <osMessageGet+0xe4>)
 801514c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015150:	601a      	str	r2, [r3, #0]
 8015152:	f3bf 8f4f 	dsb	sy
 8015156:	f3bf 8f6f 	isb	sy
 801515a:	e014      	b.n	8015186 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801515c:	f107 0314 	add.w	r3, r7, #20
 8015160:	3304      	adds	r3, #4
 8015162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015164:	4619      	mov	r1, r3
 8015166:	68b8      	ldr	r0, [r7, #8]
 8015168:	f000 fbc4 	bl	80158f4 <xQueueReceive>
 801516c:	4603      	mov	r3, r0
 801516e:	2b01      	cmp	r3, #1
 8015170:	d102      	bne.n	8015178 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8015172:	2310      	movs	r3, #16
 8015174:	617b      	str	r3, [r7, #20]
 8015176:	e006      	b.n	8015186 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8015178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801517a:	2b00      	cmp	r3, #0
 801517c:	d101      	bne.n	8015182 <osMessageGet+0xc6>
 801517e:	2300      	movs	r3, #0
 8015180:	e000      	b.n	8015184 <osMessageGet+0xc8>
 8015182:	2340      	movs	r3, #64	; 0x40
 8015184:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	461c      	mov	r4, r3
 801518a:	f107 0314 	add.w	r3, r7, #20
 801518e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015196:	68f8      	ldr	r0, [r7, #12]
 8015198:	372c      	adds	r7, #44	; 0x2c
 801519a:	46bd      	mov	sp, r7
 801519c:	bd90      	pop	{r4, r7, pc}
 801519e:	bf00      	nop
 80151a0:	e000ed04 	.word	0xe000ed04

080151a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80151a4:	b480      	push	{r7}
 80151a6:	b083      	sub	sp, #12
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f103 0208 	add.w	r2, r3, #8
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	f04f 32ff 	mov.w	r2, #4294967295
 80151bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	f103 0208 	add.w	r2, r3, #8
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f103 0208 	add.w	r2, r3, #8
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2200      	movs	r2, #0
 80151d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80151d8:	bf00      	nop
 80151da:	370c      	adds	r7, #12
 80151dc:	46bd      	mov	sp, r7
 80151de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e2:	4770      	bx	lr

080151e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80151e4:	b480      	push	{r7}
 80151e6:	b083      	sub	sp, #12
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2200      	movs	r2, #0
 80151f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80151f2:	bf00      	nop
 80151f4:	370c      	adds	r7, #12
 80151f6:	46bd      	mov	sp, r7
 80151f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fc:	4770      	bx	lr

080151fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80151fe:	b480      	push	{r7}
 8015200:	b085      	sub	sp, #20
 8015202:	af00      	add	r7, sp, #0
 8015204:	6078      	str	r0, [r7, #4]
 8015206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	685b      	ldr	r3, [r3, #4]
 801520c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	68fa      	ldr	r2, [r7, #12]
 8015212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	689a      	ldr	r2, [r3, #8]
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	689b      	ldr	r3, [r3, #8]
 8015220:	683a      	ldr	r2, [r7, #0]
 8015222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	683a      	ldr	r2, [r7, #0]
 8015228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	687a      	ldr	r2, [r7, #4]
 801522e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	1c5a      	adds	r2, r3, #1
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	601a      	str	r2, [r3, #0]
}
 801523a:	bf00      	nop
 801523c:	3714      	adds	r7, #20
 801523e:	46bd      	mov	sp, r7
 8015240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015244:	4770      	bx	lr

08015246 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015246:	b480      	push	{r7}
 8015248:	b085      	sub	sp, #20
 801524a:	af00      	add	r7, sp, #0
 801524c:	6078      	str	r0, [r7, #4]
 801524e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801525c:	d103      	bne.n	8015266 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	691b      	ldr	r3, [r3, #16]
 8015262:	60fb      	str	r3, [r7, #12]
 8015264:	e00c      	b.n	8015280 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	3308      	adds	r3, #8
 801526a:	60fb      	str	r3, [r7, #12]
 801526c:	e002      	b.n	8015274 <vListInsert+0x2e>
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	60fb      	str	r3, [r7, #12]
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	685b      	ldr	r3, [r3, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	68ba      	ldr	r2, [r7, #8]
 801527c:	429a      	cmp	r2, r3
 801527e:	d2f6      	bcs.n	801526e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	685a      	ldr	r2, [r3, #4]
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	685b      	ldr	r3, [r3, #4]
 801528c:	683a      	ldr	r2, [r7, #0]
 801528e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015290:	683b      	ldr	r3, [r7, #0]
 8015292:	68fa      	ldr	r2, [r7, #12]
 8015294:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	683a      	ldr	r2, [r7, #0]
 801529a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	687a      	ldr	r2, [r7, #4]
 80152a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	1c5a      	adds	r2, r3, #1
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	601a      	str	r2, [r3, #0]
}
 80152ac:	bf00      	nop
 80152ae:	3714      	adds	r7, #20
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr

080152b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80152b8:	b480      	push	{r7}
 80152ba:	b085      	sub	sp, #20
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	691b      	ldr	r3, [r3, #16]
 80152c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	685b      	ldr	r3, [r3, #4]
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	6892      	ldr	r2, [r2, #8]
 80152ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	689b      	ldr	r3, [r3, #8]
 80152d4:	687a      	ldr	r2, [r7, #4]
 80152d6:	6852      	ldr	r2, [r2, #4]
 80152d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	687a      	ldr	r2, [r7, #4]
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d103      	bne.n	80152ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	689a      	ldr	r2, [r3, #8]
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	1e5a      	subs	r2, r3, #1
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	681b      	ldr	r3, [r3, #0]
}
 8015300:	4618      	mov	r0, r3
 8015302:	3714      	adds	r7, #20
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr

0801530c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d10c      	bne.n	801533a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015324:	b672      	cpsid	i
 8015326:	f383 8811 	msr	BASEPRI, r3
 801532a:	f3bf 8f6f 	isb	sy
 801532e:	f3bf 8f4f 	dsb	sy
 8015332:	b662      	cpsie	i
 8015334:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015336:	bf00      	nop
 8015338:	e7fe      	b.n	8015338 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801533a:	f001 ff9f 	bl	801727c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	681a      	ldr	r2, [r3, #0]
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015346:	68f9      	ldr	r1, [r7, #12]
 8015348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801534a:	fb01 f303 	mul.w	r3, r1, r3
 801534e:	441a      	add	r2, r3
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2200      	movs	r2, #0
 8015358:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	681a      	ldr	r2, [r3, #0]
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	681a      	ldr	r2, [r3, #0]
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801536a:	3b01      	subs	r3, #1
 801536c:	68f9      	ldr	r1, [r7, #12]
 801536e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015370:	fb01 f303 	mul.w	r3, r1, r3
 8015374:	441a      	add	r2, r3
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	22ff      	movs	r2, #255	; 0xff
 801537e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	22ff      	movs	r2, #255	; 0xff
 8015386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d114      	bne.n	80153ba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	691b      	ldr	r3, [r3, #16]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d01a      	beq.n	80153ce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	3310      	adds	r3, #16
 801539c:	4618      	mov	r0, r3
 801539e:	f001 f995 	bl	80166cc <xTaskRemoveFromEventList>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d012      	beq.n	80153ce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80153a8:	4b0c      	ldr	r3, [pc, #48]	; (80153dc <xQueueGenericReset+0xd0>)
 80153aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153ae:	601a      	str	r2, [r3, #0]
 80153b0:	f3bf 8f4f 	dsb	sy
 80153b4:	f3bf 8f6f 	isb	sy
 80153b8:	e009      	b.n	80153ce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	3310      	adds	r3, #16
 80153be:	4618      	mov	r0, r3
 80153c0:	f7ff fef0 	bl	80151a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	3324      	adds	r3, #36	; 0x24
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7ff feeb 	bl	80151a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80153ce:	f001 ff89 	bl	80172e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80153d2:	2301      	movs	r3, #1
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	3710      	adds	r7, #16
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	e000ed04 	.word	0xe000ed04

080153e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b08e      	sub	sp, #56	; 0x38
 80153e4:	af02      	add	r7, sp, #8
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	607a      	str	r2, [r7, #4]
 80153ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d10c      	bne.n	801540e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80153f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153f8:	b672      	cpsid	i
 80153fa:	f383 8811 	msr	BASEPRI, r3
 80153fe:	f3bf 8f6f 	isb	sy
 8015402:	f3bf 8f4f 	dsb	sy
 8015406:	b662      	cpsie	i
 8015408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801540a:	bf00      	nop
 801540c:	e7fe      	b.n	801540c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d10c      	bne.n	801542e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8015414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015418:	b672      	cpsid	i
 801541a:	f383 8811 	msr	BASEPRI, r3
 801541e:	f3bf 8f6f 	isb	sy
 8015422:	f3bf 8f4f 	dsb	sy
 8015426:	b662      	cpsie	i
 8015428:	627b      	str	r3, [r7, #36]	; 0x24
}
 801542a:	bf00      	nop
 801542c:	e7fe      	b.n	801542c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d002      	beq.n	801543a <xQueueGenericCreateStatic+0x5a>
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d001      	beq.n	801543e <xQueueGenericCreateStatic+0x5e>
 801543a:	2301      	movs	r3, #1
 801543c:	e000      	b.n	8015440 <xQueueGenericCreateStatic+0x60>
 801543e:	2300      	movs	r3, #0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d10c      	bne.n	801545e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8015444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015448:	b672      	cpsid	i
 801544a:	f383 8811 	msr	BASEPRI, r3
 801544e:	f3bf 8f6f 	isb	sy
 8015452:	f3bf 8f4f 	dsb	sy
 8015456:	b662      	cpsie	i
 8015458:	623b      	str	r3, [r7, #32]
}
 801545a:	bf00      	nop
 801545c:	e7fe      	b.n	801545c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d102      	bne.n	801546a <xQueueGenericCreateStatic+0x8a>
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d101      	bne.n	801546e <xQueueGenericCreateStatic+0x8e>
 801546a:	2301      	movs	r3, #1
 801546c:	e000      	b.n	8015470 <xQueueGenericCreateStatic+0x90>
 801546e:	2300      	movs	r3, #0
 8015470:	2b00      	cmp	r3, #0
 8015472:	d10c      	bne.n	801548e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8015474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015478:	b672      	cpsid	i
 801547a:	f383 8811 	msr	BASEPRI, r3
 801547e:	f3bf 8f6f 	isb	sy
 8015482:	f3bf 8f4f 	dsb	sy
 8015486:	b662      	cpsie	i
 8015488:	61fb      	str	r3, [r7, #28]
}
 801548a:	bf00      	nop
 801548c:	e7fe      	b.n	801548c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801548e:	2348      	movs	r3, #72	; 0x48
 8015490:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	2b48      	cmp	r3, #72	; 0x48
 8015496:	d00c      	beq.n	80154b2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8015498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801549c:	b672      	cpsid	i
 801549e:	f383 8811 	msr	BASEPRI, r3
 80154a2:	f3bf 8f6f 	isb	sy
 80154a6:	f3bf 8f4f 	dsb	sy
 80154aa:	b662      	cpsie	i
 80154ac:	61bb      	str	r3, [r7, #24]
}
 80154ae:	bf00      	nop
 80154b0:	e7fe      	b.n	80154b0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80154b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80154b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d00d      	beq.n	80154da <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80154be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154c0:	2201      	movs	r2, #1
 80154c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80154c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80154ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154cc:	9300      	str	r3, [sp, #0]
 80154ce:	4613      	mov	r3, r2
 80154d0:	687a      	ldr	r2, [r7, #4]
 80154d2:	68b9      	ldr	r1, [r7, #8]
 80154d4:	68f8      	ldr	r0, [r7, #12]
 80154d6:	f000 f847 	bl	8015568 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80154da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80154dc:	4618      	mov	r0, r3
 80154de:	3730      	adds	r7, #48	; 0x30
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b08a      	sub	sp, #40	; 0x28
 80154e8:	af02      	add	r7, sp, #8
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	4613      	mov	r3, r2
 80154f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d10c      	bne.n	8015512 <xQueueGenericCreate+0x2e>
	__asm volatile
 80154f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154fc:	b672      	cpsid	i
 80154fe:	f383 8811 	msr	BASEPRI, r3
 8015502:	f3bf 8f6f 	isb	sy
 8015506:	f3bf 8f4f 	dsb	sy
 801550a:	b662      	cpsie	i
 801550c:	613b      	str	r3, [r7, #16]
}
 801550e:	bf00      	nop
 8015510:	e7fe      	b.n	8015510 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d102      	bne.n	801551e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8015518:	2300      	movs	r3, #0
 801551a:	61fb      	str	r3, [r7, #28]
 801551c:	e004      	b.n	8015528 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	68ba      	ldr	r2, [r7, #8]
 8015522:	fb02 f303 	mul.w	r3, r2, r3
 8015526:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015528:	69fb      	ldr	r3, [r7, #28]
 801552a:	3348      	adds	r3, #72	; 0x48
 801552c:	4618      	mov	r0, r3
 801552e:	f001 ffd1 	bl	80174d4 <pvPortMalloc>
 8015532:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015534:	69bb      	ldr	r3, [r7, #24]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d011      	beq.n	801555e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801553a:	69bb      	ldr	r3, [r7, #24]
 801553c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	3348      	adds	r3, #72	; 0x48
 8015542:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015544:	69bb      	ldr	r3, [r7, #24]
 8015546:	2200      	movs	r2, #0
 8015548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801554c:	79fa      	ldrb	r2, [r7, #7]
 801554e:	69bb      	ldr	r3, [r7, #24]
 8015550:	9300      	str	r3, [sp, #0]
 8015552:	4613      	mov	r3, r2
 8015554:	697a      	ldr	r2, [r7, #20]
 8015556:	68b9      	ldr	r1, [r7, #8]
 8015558:	68f8      	ldr	r0, [r7, #12]
 801555a:	f000 f805 	bl	8015568 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801555e:	69bb      	ldr	r3, [r7, #24]
	}
 8015560:	4618      	mov	r0, r3
 8015562:	3720      	adds	r7, #32
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}

08015568 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b084      	sub	sp, #16
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
 8015574:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d103      	bne.n	8015584 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801557c:	69bb      	ldr	r3, [r7, #24]
 801557e:	69ba      	ldr	r2, [r7, #24]
 8015580:	601a      	str	r2, [r3, #0]
 8015582:	e002      	b.n	801558a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015584:	69bb      	ldr	r3, [r7, #24]
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	68fa      	ldr	r2, [r7, #12]
 801558e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	68ba      	ldr	r2, [r7, #8]
 8015594:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015596:	2101      	movs	r1, #1
 8015598:	69b8      	ldr	r0, [r7, #24]
 801559a:	f7ff feb7 	bl	801530c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801559e:	bf00      	nop
 80155a0:	3710      	adds	r7, #16
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}
	...

080155a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b08e      	sub	sp, #56	; 0x38
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	60f8      	str	r0, [r7, #12]
 80155b0:	60b9      	str	r1, [r7, #8]
 80155b2:	607a      	str	r2, [r7, #4]
 80155b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80155b6:	2300      	movs	r3, #0
 80155b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80155be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d10c      	bne.n	80155de <xQueueGenericSend+0x36>
	__asm volatile
 80155c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155c8:	b672      	cpsid	i
 80155ca:	f383 8811 	msr	BASEPRI, r3
 80155ce:	f3bf 8f6f 	isb	sy
 80155d2:	f3bf 8f4f 	dsb	sy
 80155d6:	b662      	cpsie	i
 80155d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80155da:	bf00      	nop
 80155dc:	e7fe      	b.n	80155dc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d103      	bne.n	80155ec <xQueueGenericSend+0x44>
 80155e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d101      	bne.n	80155f0 <xQueueGenericSend+0x48>
 80155ec:	2301      	movs	r3, #1
 80155ee:	e000      	b.n	80155f2 <xQueueGenericSend+0x4a>
 80155f0:	2300      	movs	r3, #0
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d10c      	bne.n	8015610 <xQueueGenericSend+0x68>
	__asm volatile
 80155f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155fa:	b672      	cpsid	i
 80155fc:	f383 8811 	msr	BASEPRI, r3
 8015600:	f3bf 8f6f 	isb	sy
 8015604:	f3bf 8f4f 	dsb	sy
 8015608:	b662      	cpsie	i
 801560a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801560c:	bf00      	nop
 801560e:	e7fe      	b.n	801560e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	2b02      	cmp	r3, #2
 8015614:	d103      	bne.n	801561e <xQueueGenericSend+0x76>
 8015616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801561a:	2b01      	cmp	r3, #1
 801561c:	d101      	bne.n	8015622 <xQueueGenericSend+0x7a>
 801561e:	2301      	movs	r3, #1
 8015620:	e000      	b.n	8015624 <xQueueGenericSend+0x7c>
 8015622:	2300      	movs	r3, #0
 8015624:	2b00      	cmp	r3, #0
 8015626:	d10c      	bne.n	8015642 <xQueueGenericSend+0x9a>
	__asm volatile
 8015628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801562c:	b672      	cpsid	i
 801562e:	f383 8811 	msr	BASEPRI, r3
 8015632:	f3bf 8f6f 	isb	sy
 8015636:	f3bf 8f4f 	dsb	sy
 801563a:	b662      	cpsie	i
 801563c:	623b      	str	r3, [r7, #32]
}
 801563e:	bf00      	nop
 8015640:	e7fe      	b.n	8015640 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015642:	f001 fa09 	bl	8016a58 <xTaskGetSchedulerState>
 8015646:	4603      	mov	r3, r0
 8015648:	2b00      	cmp	r3, #0
 801564a:	d102      	bne.n	8015652 <xQueueGenericSend+0xaa>
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d101      	bne.n	8015656 <xQueueGenericSend+0xae>
 8015652:	2301      	movs	r3, #1
 8015654:	e000      	b.n	8015658 <xQueueGenericSend+0xb0>
 8015656:	2300      	movs	r3, #0
 8015658:	2b00      	cmp	r3, #0
 801565a:	d10c      	bne.n	8015676 <xQueueGenericSend+0xce>
	__asm volatile
 801565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015660:	b672      	cpsid	i
 8015662:	f383 8811 	msr	BASEPRI, r3
 8015666:	f3bf 8f6f 	isb	sy
 801566a:	f3bf 8f4f 	dsb	sy
 801566e:	b662      	cpsie	i
 8015670:	61fb      	str	r3, [r7, #28]
}
 8015672:	bf00      	nop
 8015674:	e7fe      	b.n	8015674 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015676:	f001 fe01 	bl	801727c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801567c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015682:	429a      	cmp	r2, r3
 8015684:	d302      	bcc.n	801568c <xQueueGenericSend+0xe4>
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	2b02      	cmp	r3, #2
 801568a:	d129      	bne.n	80156e0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801568c:	683a      	ldr	r2, [r7, #0]
 801568e:	68b9      	ldr	r1, [r7, #8]
 8015690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015692:	f000 fa9b 	bl	8015bcc <prvCopyDataToQueue>
 8015696:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801569c:	2b00      	cmp	r3, #0
 801569e:	d010      	beq.n	80156c2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80156a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a2:	3324      	adds	r3, #36	; 0x24
 80156a4:	4618      	mov	r0, r3
 80156a6:	f001 f811 	bl	80166cc <xTaskRemoveFromEventList>
 80156aa:	4603      	mov	r3, r0
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d013      	beq.n	80156d8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80156b0:	4b3f      	ldr	r3, [pc, #252]	; (80157b0 <xQueueGenericSend+0x208>)
 80156b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156b6:	601a      	str	r2, [r3, #0]
 80156b8:	f3bf 8f4f 	dsb	sy
 80156bc:	f3bf 8f6f 	isb	sy
 80156c0:	e00a      	b.n	80156d8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80156c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d007      	beq.n	80156d8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80156c8:	4b39      	ldr	r3, [pc, #228]	; (80157b0 <xQueueGenericSend+0x208>)
 80156ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156ce:	601a      	str	r2, [r3, #0]
 80156d0:	f3bf 8f4f 	dsb	sy
 80156d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80156d8:	f001 fe04 	bl	80172e4 <vPortExitCritical>
				return pdPASS;
 80156dc:	2301      	movs	r3, #1
 80156de:	e063      	b.n	80157a8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d103      	bne.n	80156ee <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80156e6:	f001 fdfd 	bl	80172e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80156ea:	2300      	movs	r3, #0
 80156ec:	e05c      	b.n	80157a8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80156ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d106      	bne.n	8015702 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80156f4:	f107 0314 	add.w	r3, r7, #20
 80156f8:	4618      	mov	r0, r3
 80156fa:	f001 f84b 	bl	8016794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80156fe:	2301      	movs	r3, #1
 8015700:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015702:	f001 fdef 	bl	80172e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015706:	f000 fdb1 	bl	801626c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801570a:	f001 fdb7 	bl	801727c <vPortEnterCritical>
 801570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015714:	b25b      	sxtb	r3, r3
 8015716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801571a:	d103      	bne.n	8015724 <xQueueGenericSend+0x17c>
 801571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801571e:	2200      	movs	r2, #0
 8015720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801572a:	b25b      	sxtb	r3, r3
 801572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015730:	d103      	bne.n	801573a <xQueueGenericSend+0x192>
 8015732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015734:	2200      	movs	r2, #0
 8015736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801573a:	f001 fdd3 	bl	80172e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801573e:	1d3a      	adds	r2, r7, #4
 8015740:	f107 0314 	add.w	r3, r7, #20
 8015744:	4611      	mov	r1, r2
 8015746:	4618      	mov	r0, r3
 8015748:	f001 f83a 	bl	80167c0 <xTaskCheckForTimeOut>
 801574c:	4603      	mov	r3, r0
 801574e:	2b00      	cmp	r3, #0
 8015750:	d124      	bne.n	801579c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015754:	f000 fb32 	bl	8015dbc <prvIsQueueFull>
 8015758:	4603      	mov	r3, r0
 801575a:	2b00      	cmp	r3, #0
 801575c:	d018      	beq.n	8015790 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015760:	3310      	adds	r3, #16
 8015762:	687a      	ldr	r2, [r7, #4]
 8015764:	4611      	mov	r1, r2
 8015766:	4618      	mov	r0, r3
 8015768:	f000 ff8a 	bl	8016680 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801576c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801576e:	f000 fabd 	bl	8015cec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015772:	f000 fd89 	bl	8016288 <xTaskResumeAll>
 8015776:	4603      	mov	r3, r0
 8015778:	2b00      	cmp	r3, #0
 801577a:	f47f af7c 	bne.w	8015676 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 801577e:	4b0c      	ldr	r3, [pc, #48]	; (80157b0 <xQueueGenericSend+0x208>)
 8015780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015784:	601a      	str	r2, [r3, #0]
 8015786:	f3bf 8f4f 	dsb	sy
 801578a:	f3bf 8f6f 	isb	sy
 801578e:	e772      	b.n	8015676 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015792:	f000 faab 	bl	8015cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015796:	f000 fd77 	bl	8016288 <xTaskResumeAll>
 801579a:	e76c      	b.n	8015676 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801579c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801579e:	f000 faa5 	bl	8015cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80157a2:	f000 fd71 	bl	8016288 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80157a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3738      	adds	r7, #56	; 0x38
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	e000ed04 	.word	0xe000ed04

080157b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b08e      	sub	sp, #56	; 0x38
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	607a      	str	r2, [r7, #4]
 80157c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80157c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d10c      	bne.n	80157e6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80157cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d0:	b672      	cpsid	i
 80157d2:	f383 8811 	msr	BASEPRI, r3
 80157d6:	f3bf 8f6f 	isb	sy
 80157da:	f3bf 8f4f 	dsb	sy
 80157de:	b662      	cpsie	i
 80157e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80157e2:	bf00      	nop
 80157e4:	e7fe      	b.n	80157e4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d103      	bne.n	80157f4 <xQueueGenericSendFromISR+0x40>
 80157ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d101      	bne.n	80157f8 <xQueueGenericSendFromISR+0x44>
 80157f4:	2301      	movs	r3, #1
 80157f6:	e000      	b.n	80157fa <xQueueGenericSendFromISR+0x46>
 80157f8:	2300      	movs	r3, #0
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d10c      	bne.n	8015818 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80157fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015802:	b672      	cpsid	i
 8015804:	f383 8811 	msr	BASEPRI, r3
 8015808:	f3bf 8f6f 	isb	sy
 801580c:	f3bf 8f4f 	dsb	sy
 8015810:	b662      	cpsie	i
 8015812:	623b      	str	r3, [r7, #32]
}
 8015814:	bf00      	nop
 8015816:	e7fe      	b.n	8015816 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	2b02      	cmp	r3, #2
 801581c:	d103      	bne.n	8015826 <xQueueGenericSendFromISR+0x72>
 801581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015822:	2b01      	cmp	r3, #1
 8015824:	d101      	bne.n	801582a <xQueueGenericSendFromISR+0x76>
 8015826:	2301      	movs	r3, #1
 8015828:	e000      	b.n	801582c <xQueueGenericSendFromISR+0x78>
 801582a:	2300      	movs	r3, #0
 801582c:	2b00      	cmp	r3, #0
 801582e:	d10c      	bne.n	801584a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8015830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015834:	b672      	cpsid	i
 8015836:	f383 8811 	msr	BASEPRI, r3
 801583a:	f3bf 8f6f 	isb	sy
 801583e:	f3bf 8f4f 	dsb	sy
 8015842:	b662      	cpsie	i
 8015844:	61fb      	str	r3, [r7, #28]
}
 8015846:	bf00      	nop
 8015848:	e7fe      	b.n	8015848 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801584a:	f001 fdff 	bl	801744c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801584e:	f3ef 8211 	mrs	r2, BASEPRI
 8015852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015856:	b672      	cpsid	i
 8015858:	f383 8811 	msr	BASEPRI, r3
 801585c:	f3bf 8f6f 	isb	sy
 8015860:	f3bf 8f4f 	dsb	sy
 8015864:	b662      	cpsie	i
 8015866:	61ba      	str	r2, [r7, #24]
 8015868:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801586a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801586c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015876:	429a      	cmp	r2, r3
 8015878:	d302      	bcc.n	8015880 <xQueueGenericSendFromISR+0xcc>
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	2b02      	cmp	r3, #2
 801587e:	d12c      	bne.n	80158da <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801588a:	683a      	ldr	r2, [r7, #0]
 801588c:	68b9      	ldr	r1, [r7, #8]
 801588e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015890:	f000 f99c 	bl	8015bcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015894:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801589c:	d112      	bne.n	80158c4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d016      	beq.n	80158d4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a8:	3324      	adds	r3, #36	; 0x24
 80158aa:	4618      	mov	r0, r3
 80158ac:	f000 ff0e 	bl	80166cc <xTaskRemoveFromEventList>
 80158b0:	4603      	mov	r3, r0
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d00e      	beq.n	80158d4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d00b      	beq.n	80158d4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	2201      	movs	r2, #1
 80158c0:	601a      	str	r2, [r3, #0]
 80158c2:	e007      	b.n	80158d4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80158c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80158c8:	3301      	adds	r3, #1
 80158ca:	b2db      	uxtb	r3, r3
 80158cc:	b25a      	sxtb	r2, r3
 80158ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80158d4:	2301      	movs	r3, #1
 80158d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80158d8:	e001      	b.n	80158de <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80158da:	2300      	movs	r3, #0
 80158dc:	637b      	str	r3, [r7, #52]	; 0x34
 80158de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80158e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80158ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3738      	adds	r7, #56	; 0x38
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}

080158f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b08c      	sub	sp, #48	; 0x30
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015900:	2300      	movs	r3, #0
 8015902:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590a:	2b00      	cmp	r3, #0
 801590c:	d10c      	bne.n	8015928 <xQueueReceive+0x34>
	__asm volatile
 801590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015912:	b672      	cpsid	i
 8015914:	f383 8811 	msr	BASEPRI, r3
 8015918:	f3bf 8f6f 	isb	sy
 801591c:	f3bf 8f4f 	dsb	sy
 8015920:	b662      	cpsie	i
 8015922:	623b      	str	r3, [r7, #32]
}
 8015924:	bf00      	nop
 8015926:	e7fe      	b.n	8015926 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d103      	bne.n	8015936 <xQueueReceive+0x42>
 801592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015932:	2b00      	cmp	r3, #0
 8015934:	d101      	bne.n	801593a <xQueueReceive+0x46>
 8015936:	2301      	movs	r3, #1
 8015938:	e000      	b.n	801593c <xQueueReceive+0x48>
 801593a:	2300      	movs	r3, #0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d10c      	bne.n	801595a <xQueueReceive+0x66>
	__asm volatile
 8015940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015944:	b672      	cpsid	i
 8015946:	f383 8811 	msr	BASEPRI, r3
 801594a:	f3bf 8f6f 	isb	sy
 801594e:	f3bf 8f4f 	dsb	sy
 8015952:	b662      	cpsie	i
 8015954:	61fb      	str	r3, [r7, #28]
}
 8015956:	bf00      	nop
 8015958:	e7fe      	b.n	8015958 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801595a:	f001 f87d 	bl	8016a58 <xTaskGetSchedulerState>
 801595e:	4603      	mov	r3, r0
 8015960:	2b00      	cmp	r3, #0
 8015962:	d102      	bne.n	801596a <xQueueReceive+0x76>
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d101      	bne.n	801596e <xQueueReceive+0x7a>
 801596a:	2301      	movs	r3, #1
 801596c:	e000      	b.n	8015970 <xQueueReceive+0x7c>
 801596e:	2300      	movs	r3, #0
 8015970:	2b00      	cmp	r3, #0
 8015972:	d10c      	bne.n	801598e <xQueueReceive+0x9a>
	__asm volatile
 8015974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015978:	b672      	cpsid	i
 801597a:	f383 8811 	msr	BASEPRI, r3
 801597e:	f3bf 8f6f 	isb	sy
 8015982:	f3bf 8f4f 	dsb	sy
 8015986:	b662      	cpsie	i
 8015988:	61bb      	str	r3, [r7, #24]
}
 801598a:	bf00      	nop
 801598c:	e7fe      	b.n	801598c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801598e:	f001 fc75 	bl	801727c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015996:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801599a:	2b00      	cmp	r3, #0
 801599c:	d01f      	beq.n	80159de <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801599e:	68b9      	ldr	r1, [r7, #8]
 80159a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159a2:	f000 f97d 	bl	8015ca0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80159a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a8:	1e5a      	subs	r2, r3, #1
 80159aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80159ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b0:	691b      	ldr	r3, [r3, #16]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d00f      	beq.n	80159d6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80159b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b8:	3310      	adds	r3, #16
 80159ba:	4618      	mov	r0, r3
 80159bc:	f000 fe86 	bl	80166cc <xTaskRemoveFromEventList>
 80159c0:	4603      	mov	r3, r0
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d007      	beq.n	80159d6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80159c6:	4b3d      	ldr	r3, [pc, #244]	; (8015abc <xQueueReceive+0x1c8>)
 80159c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159cc:	601a      	str	r2, [r3, #0]
 80159ce:	f3bf 8f4f 	dsb	sy
 80159d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80159d6:	f001 fc85 	bl	80172e4 <vPortExitCritical>
				return pdPASS;
 80159da:	2301      	movs	r3, #1
 80159dc:	e069      	b.n	8015ab2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d103      	bne.n	80159ec <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80159e4:	f001 fc7e 	bl	80172e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80159e8:	2300      	movs	r3, #0
 80159ea:	e062      	b.n	8015ab2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80159ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d106      	bne.n	8015a00 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80159f2:	f107 0310 	add.w	r3, r7, #16
 80159f6:	4618      	mov	r0, r3
 80159f8:	f000 fecc 	bl	8016794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80159fc:	2301      	movs	r3, #1
 80159fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015a00:	f001 fc70 	bl	80172e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015a04:	f000 fc32 	bl	801626c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015a08:	f001 fc38 	bl	801727c <vPortEnterCritical>
 8015a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015a12:	b25b      	sxtb	r3, r3
 8015a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a18:	d103      	bne.n	8015a22 <xQueueReceive+0x12e>
 8015a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a28:	b25b      	sxtb	r3, r3
 8015a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a2e:	d103      	bne.n	8015a38 <xQueueReceive+0x144>
 8015a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a32:	2200      	movs	r2, #0
 8015a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015a38:	f001 fc54 	bl	80172e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a3c:	1d3a      	adds	r2, r7, #4
 8015a3e:	f107 0310 	add.w	r3, r7, #16
 8015a42:	4611      	mov	r1, r2
 8015a44:	4618      	mov	r0, r3
 8015a46:	f000 febb 	bl	80167c0 <xTaskCheckForTimeOut>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d123      	bne.n	8015a98 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a52:	f000 f99d 	bl	8015d90 <prvIsQueueEmpty>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d017      	beq.n	8015a8c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a5e:	3324      	adds	r3, #36	; 0x24
 8015a60:	687a      	ldr	r2, [r7, #4]
 8015a62:	4611      	mov	r1, r2
 8015a64:	4618      	mov	r0, r3
 8015a66:	f000 fe0b 	bl	8016680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a6c:	f000 f93e 	bl	8015cec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015a70:	f000 fc0a 	bl	8016288 <xTaskResumeAll>
 8015a74:	4603      	mov	r3, r0
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d189      	bne.n	801598e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8015a7a:	4b10      	ldr	r3, [pc, #64]	; (8015abc <xQueueReceive+0x1c8>)
 8015a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a80:	601a      	str	r2, [r3, #0]
 8015a82:	f3bf 8f4f 	dsb	sy
 8015a86:	f3bf 8f6f 	isb	sy
 8015a8a:	e780      	b.n	801598e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a8e:	f000 f92d 	bl	8015cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015a92:	f000 fbf9 	bl	8016288 <xTaskResumeAll>
 8015a96:	e77a      	b.n	801598e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a9a:	f000 f927 	bl	8015cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a9e:	f000 fbf3 	bl	8016288 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015aa4:	f000 f974 	bl	8015d90 <prvIsQueueEmpty>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	f43f af6f 	beq.w	801598e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015ab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3730      	adds	r7, #48	; 0x30
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	bf00      	nop
 8015abc:	e000ed04 	.word	0xe000ed04

08015ac0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b08e      	sub	sp, #56	; 0x38
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	60f8      	str	r0, [r7, #12]
 8015ac8:	60b9      	str	r1, [r7, #8]
 8015aca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d10c      	bne.n	8015af0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8015ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ada:	b672      	cpsid	i
 8015adc:	f383 8811 	msr	BASEPRI, r3
 8015ae0:	f3bf 8f6f 	isb	sy
 8015ae4:	f3bf 8f4f 	dsb	sy
 8015ae8:	b662      	cpsie	i
 8015aea:	623b      	str	r3, [r7, #32]
}
 8015aec:	bf00      	nop
 8015aee:	e7fe      	b.n	8015aee <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d103      	bne.n	8015afe <xQueueReceiveFromISR+0x3e>
 8015af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d101      	bne.n	8015b02 <xQueueReceiveFromISR+0x42>
 8015afe:	2301      	movs	r3, #1
 8015b00:	e000      	b.n	8015b04 <xQueueReceiveFromISR+0x44>
 8015b02:	2300      	movs	r3, #0
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d10c      	bne.n	8015b22 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8015b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b0c:	b672      	cpsid	i
 8015b0e:	f383 8811 	msr	BASEPRI, r3
 8015b12:	f3bf 8f6f 	isb	sy
 8015b16:	f3bf 8f4f 	dsb	sy
 8015b1a:	b662      	cpsie	i
 8015b1c:	61fb      	str	r3, [r7, #28]
}
 8015b1e:	bf00      	nop
 8015b20:	e7fe      	b.n	8015b20 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b22:	f001 fc93 	bl	801744c <vPortValidateInterruptPriority>
	__asm volatile
 8015b26:	f3ef 8211 	mrs	r2, BASEPRI
 8015b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b2e:	b672      	cpsid	i
 8015b30:	f383 8811 	msr	BASEPRI, r3
 8015b34:	f3bf 8f6f 	isb	sy
 8015b38:	f3bf 8f4f 	dsb	sy
 8015b3c:	b662      	cpsie	i
 8015b3e:	61ba      	str	r2, [r7, #24]
 8015b40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015b42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d02f      	beq.n	8015bb2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015b5c:	68b9      	ldr	r1, [r7, #8]
 8015b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b60:	f000 f89e 	bl	8015ca0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b66:	1e5a      	subs	r2, r3, #1
 8015b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b74:	d112      	bne.n	8015b9c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b78:	691b      	ldr	r3, [r3, #16]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d016      	beq.n	8015bac <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b80:	3310      	adds	r3, #16
 8015b82:	4618      	mov	r0, r3
 8015b84:	f000 fda2 	bl	80166cc <xTaskRemoveFromEventList>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d00e      	beq.n	8015bac <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d00b      	beq.n	8015bac <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	2201      	movs	r2, #1
 8015b98:	601a      	str	r2, [r3, #0]
 8015b9a:	e007      	b.n	8015bac <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ba0:	3301      	adds	r3, #1
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	b25a      	sxtb	r2, r3
 8015ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015bac:	2301      	movs	r3, #1
 8015bae:	637b      	str	r3, [r7, #52]	; 0x34
 8015bb0:	e001      	b.n	8015bb6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8015bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	f383 8811 	msr	BASEPRI, r3
}
 8015bc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	3738      	adds	r7, #56	; 0x38
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}

08015bcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b086      	sub	sp, #24
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	60f8      	str	r0, [r7, #12]
 8015bd4:	60b9      	str	r1, [r7, #8]
 8015bd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015be0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d10d      	bne.n	8015c06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d14d      	bne.n	8015c8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	689b      	ldr	r3, [r3, #8]
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f000 ff4c 	bl	8016a94 <xTaskPriorityDisinherit>
 8015bfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2200      	movs	r2, #0
 8015c02:	609a      	str	r2, [r3, #8]
 8015c04:	e043      	b.n	8015c8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d119      	bne.n	8015c40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	6858      	ldr	r0, [r3, #4]
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c14:	461a      	mov	r2, r3
 8015c16:	68b9      	ldr	r1, [r7, #8]
 8015c18:	f002 f976 	bl	8017f08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	685a      	ldr	r2, [r3, #4]
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c24:	441a      	add	r2, r3
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	685a      	ldr	r2, [r3, #4]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	689b      	ldr	r3, [r3, #8]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d32b      	bcc.n	8015c8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	681a      	ldr	r2, [r3, #0]
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	605a      	str	r2, [r3, #4]
 8015c3e:	e026      	b.n	8015c8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	68d8      	ldr	r0, [r3, #12]
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c48:	461a      	mov	r2, r3
 8015c4a:	68b9      	ldr	r1, [r7, #8]
 8015c4c:	f002 f95c 	bl	8017f08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	68da      	ldr	r2, [r3, #12]
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c58:	425b      	negs	r3, r3
 8015c5a:	441a      	add	r2, r3
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	68da      	ldr	r2, [r3, #12]
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d207      	bcs.n	8015c7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	689a      	ldr	r2, [r3, #8]
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c74:	425b      	negs	r3, r3
 8015c76:	441a      	add	r2, r3
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2b02      	cmp	r3, #2
 8015c80:	d105      	bne.n	8015c8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c82:	693b      	ldr	r3, [r7, #16]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d002      	beq.n	8015c8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015c88:	693b      	ldr	r3, [r7, #16]
 8015c8a:	3b01      	subs	r3, #1
 8015c8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015c8e:	693b      	ldr	r3, [r7, #16]
 8015c90:	1c5a      	adds	r2, r3, #1
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015c96:	697b      	ldr	r3, [r7, #20]
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3718      	adds	r7, #24
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}

08015ca0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b082      	sub	sp, #8
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
 8015ca8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d018      	beq.n	8015ce4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	68da      	ldr	r2, [r3, #12]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cba:	441a      	add	r2, r3
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	68da      	ldr	r2, [r3, #12]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	689b      	ldr	r3, [r3, #8]
 8015cc8:	429a      	cmp	r2, r3
 8015cca:	d303      	bcc.n	8015cd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681a      	ldr	r2, [r3, #0]
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	68d9      	ldr	r1, [r3, #12]
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cdc:	461a      	mov	r2, r3
 8015cde:	6838      	ldr	r0, [r7, #0]
 8015ce0:	f002 f912 	bl	8017f08 <memcpy>
	}
}
 8015ce4:	bf00      	nop
 8015ce6:	3708      	adds	r7, #8
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}

08015cec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015cf4:	f001 fac2 	bl	801727c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015cfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015d00:	e011      	b.n	8015d26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d012      	beq.n	8015d30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	3324      	adds	r3, #36	; 0x24
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f000 fcdc 	bl	80166cc <xTaskRemoveFromEventList>
 8015d14:	4603      	mov	r3, r0
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d001      	beq.n	8015d1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015d1a:	f000 fdb7 	bl	801688c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015d1e:	7bfb      	ldrb	r3, [r7, #15]
 8015d20:	3b01      	subs	r3, #1
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	dce9      	bgt.n	8015d02 <prvUnlockQueue+0x16>
 8015d2e:	e000      	b.n	8015d32 <prvUnlockQueue+0x46>
					break;
 8015d30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	22ff      	movs	r2, #255	; 0xff
 8015d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015d3a:	f001 fad3 	bl	80172e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015d3e:	f001 fa9d 	bl	801727c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015d4a:	e011      	b.n	8015d70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	691b      	ldr	r3, [r3, #16]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d012      	beq.n	8015d7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	3310      	adds	r3, #16
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f000 fcb7 	bl	80166cc <xTaskRemoveFromEventList>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d001      	beq.n	8015d68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015d64:	f000 fd92 	bl	801688c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015d68:	7bbb      	ldrb	r3, [r7, #14]
 8015d6a:	3b01      	subs	r3, #1
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	dce9      	bgt.n	8015d4c <prvUnlockQueue+0x60>
 8015d78:	e000      	b.n	8015d7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015d7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	22ff      	movs	r2, #255	; 0xff
 8015d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015d84:	f001 faae 	bl	80172e4 <vPortExitCritical>
}
 8015d88:	bf00      	nop
 8015d8a:	3710      	adds	r7, #16
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b084      	sub	sp, #16
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015d98:	f001 fa70 	bl	801727c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d102      	bne.n	8015daa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015da4:	2301      	movs	r3, #1
 8015da6:	60fb      	str	r3, [r7, #12]
 8015da8:	e001      	b.n	8015dae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015daa:	2300      	movs	r3, #0
 8015dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015dae:	f001 fa99 	bl	80172e4 <vPortExitCritical>

	return xReturn;
 8015db2:	68fb      	ldr	r3, [r7, #12]
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3710      	adds	r7, #16
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015dc4:	f001 fa5a 	bl	801727c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d102      	bne.n	8015dda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	60fb      	str	r3, [r7, #12]
 8015dd8:	e001      	b.n	8015dde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015dde:	f001 fa81 	bl	80172e4 <vPortExitCritical>

	return xReturn;
 8015de2:	68fb      	ldr	r3, [r7, #12]
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3710      	adds	r7, #16
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b08e      	sub	sp, #56	; 0x38
 8015df0:	af04      	add	r7, sp, #16
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	607a      	str	r2, [r7, #4]
 8015df8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d10c      	bne.n	8015e1a <xTaskCreateStatic+0x2e>
	__asm volatile
 8015e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e04:	b672      	cpsid	i
 8015e06:	f383 8811 	msr	BASEPRI, r3
 8015e0a:	f3bf 8f6f 	isb	sy
 8015e0e:	f3bf 8f4f 	dsb	sy
 8015e12:	b662      	cpsie	i
 8015e14:	623b      	str	r3, [r7, #32]
}
 8015e16:	bf00      	nop
 8015e18:	e7fe      	b.n	8015e18 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d10c      	bne.n	8015e3a <xTaskCreateStatic+0x4e>
	__asm volatile
 8015e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e24:	b672      	cpsid	i
 8015e26:	f383 8811 	msr	BASEPRI, r3
 8015e2a:	f3bf 8f6f 	isb	sy
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	b662      	cpsie	i
 8015e34:	61fb      	str	r3, [r7, #28]
}
 8015e36:	bf00      	nop
 8015e38:	e7fe      	b.n	8015e38 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015e3a:	2358      	movs	r3, #88	; 0x58
 8015e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015e3e:	693b      	ldr	r3, [r7, #16]
 8015e40:	2b58      	cmp	r3, #88	; 0x58
 8015e42:	d00c      	beq.n	8015e5e <xTaskCreateStatic+0x72>
	__asm volatile
 8015e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e48:	b672      	cpsid	i
 8015e4a:	f383 8811 	msr	BASEPRI, r3
 8015e4e:	f3bf 8f6f 	isb	sy
 8015e52:	f3bf 8f4f 	dsb	sy
 8015e56:	b662      	cpsie	i
 8015e58:	61bb      	str	r3, [r7, #24]
}
 8015e5a:	bf00      	nop
 8015e5c:	e7fe      	b.n	8015e5c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015e5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d01e      	beq.n	8015ea4 <xTaskCreateStatic+0xb8>
 8015e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d01b      	beq.n	8015ea4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e78:	2202      	movs	r2, #2
 8015e7a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015e7e:	2300      	movs	r3, #0
 8015e80:	9303      	str	r3, [sp, #12]
 8015e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e84:	9302      	str	r3, [sp, #8]
 8015e86:	f107 0314 	add.w	r3, r7, #20
 8015e8a:	9301      	str	r3, [sp, #4]
 8015e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e8e:	9300      	str	r3, [sp, #0]
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	687a      	ldr	r2, [r7, #4]
 8015e94:	68b9      	ldr	r1, [r7, #8]
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f000 f850 	bl	8015f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e9e:	f000 f8e1 	bl	8016064 <prvAddNewTaskToReadyList>
 8015ea2:	e001      	b.n	8015ea8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015ea8:	697b      	ldr	r3, [r7, #20]
	}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3728      	adds	r7, #40	; 0x28
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}

08015eb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015eb2:	b580      	push	{r7, lr}
 8015eb4:	b08c      	sub	sp, #48	; 0x30
 8015eb6:	af04      	add	r7, sp, #16
 8015eb8:	60f8      	str	r0, [r7, #12]
 8015eba:	60b9      	str	r1, [r7, #8]
 8015ebc:	603b      	str	r3, [r7, #0]
 8015ebe:	4613      	mov	r3, r2
 8015ec0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015ec2:	88fb      	ldrh	r3, [r7, #6]
 8015ec4:	009b      	lsls	r3, r3, #2
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f001 fb04 	bl	80174d4 <pvPortMalloc>
 8015ecc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d00e      	beq.n	8015ef2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015ed4:	2058      	movs	r0, #88	; 0x58
 8015ed6:	f001 fafd 	bl	80174d4 <pvPortMalloc>
 8015eda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015edc:	69fb      	ldr	r3, [r7, #28]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d003      	beq.n	8015eea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015ee2:	69fb      	ldr	r3, [r7, #28]
 8015ee4:	697a      	ldr	r2, [r7, #20]
 8015ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8015ee8:	e005      	b.n	8015ef6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015eea:	6978      	ldr	r0, [r7, #20]
 8015eec:	f001 fbc2 	bl	8017674 <vPortFree>
 8015ef0:	e001      	b.n	8015ef6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015ef6:	69fb      	ldr	r3, [r7, #28]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d017      	beq.n	8015f2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015efc:	69fb      	ldr	r3, [r7, #28]
 8015efe:	2200      	movs	r2, #0
 8015f00:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015f04:	88fa      	ldrh	r2, [r7, #6]
 8015f06:	2300      	movs	r3, #0
 8015f08:	9303      	str	r3, [sp, #12]
 8015f0a:	69fb      	ldr	r3, [r7, #28]
 8015f0c:	9302      	str	r3, [sp, #8]
 8015f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f10:	9301      	str	r3, [sp, #4]
 8015f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f14:	9300      	str	r3, [sp, #0]
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	68b9      	ldr	r1, [r7, #8]
 8015f1a:	68f8      	ldr	r0, [r7, #12]
 8015f1c:	f000 f80e 	bl	8015f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015f20:	69f8      	ldr	r0, [r7, #28]
 8015f22:	f000 f89f 	bl	8016064 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015f26:	2301      	movs	r3, #1
 8015f28:	61bb      	str	r3, [r7, #24]
 8015f2a:	e002      	b.n	8015f32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015f30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015f32:	69bb      	ldr	r3, [r7, #24]
	}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3720      	adds	r7, #32
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}

08015f3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b088      	sub	sp, #32
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	60f8      	str	r0, [r7, #12]
 8015f44:	60b9      	str	r1, [r7, #8]
 8015f46:	607a      	str	r2, [r7, #4]
 8015f48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	009b      	lsls	r3, r3, #2
 8015f52:	461a      	mov	r2, r3
 8015f54:	21a5      	movs	r1, #165	; 0xa5
 8015f56:	f001 ffe5 	bl	8017f24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015f5e:	6879      	ldr	r1, [r7, #4]
 8015f60:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8015f64:	440b      	add	r3, r1
 8015f66:	009b      	lsls	r3, r3, #2
 8015f68:	4413      	add	r3, r2
 8015f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015f6c:	69bb      	ldr	r3, [r7, #24]
 8015f6e:	f023 0307 	bic.w	r3, r3, #7
 8015f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015f74:	69bb      	ldr	r3, [r7, #24]
 8015f76:	f003 0307 	and.w	r3, r3, #7
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d00c      	beq.n	8015f98 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8015f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f82:	b672      	cpsid	i
 8015f84:	f383 8811 	msr	BASEPRI, r3
 8015f88:	f3bf 8f6f 	isb	sy
 8015f8c:	f3bf 8f4f 	dsb	sy
 8015f90:	b662      	cpsie	i
 8015f92:	617b      	str	r3, [r7, #20]
}
 8015f94:	bf00      	nop
 8015f96:	e7fe      	b.n	8015f96 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d01f      	beq.n	8015fde <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	61fb      	str	r3, [r7, #28]
 8015fa2:	e012      	b.n	8015fca <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015fa4:	68ba      	ldr	r2, [r7, #8]
 8015fa6:	69fb      	ldr	r3, [r7, #28]
 8015fa8:	4413      	add	r3, r2
 8015faa:	7819      	ldrb	r1, [r3, #0]
 8015fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fae:	69fb      	ldr	r3, [r7, #28]
 8015fb0:	4413      	add	r3, r2
 8015fb2:	3334      	adds	r3, #52	; 0x34
 8015fb4:	460a      	mov	r2, r1
 8015fb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015fb8:	68ba      	ldr	r2, [r7, #8]
 8015fba:	69fb      	ldr	r3, [r7, #28]
 8015fbc:	4413      	add	r3, r2
 8015fbe:	781b      	ldrb	r3, [r3, #0]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d006      	beq.n	8015fd2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015fc4:	69fb      	ldr	r3, [r7, #28]
 8015fc6:	3301      	adds	r3, #1
 8015fc8:	61fb      	str	r3, [r7, #28]
 8015fca:	69fb      	ldr	r3, [r7, #28]
 8015fcc:	2b0f      	cmp	r3, #15
 8015fce:	d9e9      	bls.n	8015fa4 <prvInitialiseNewTask+0x68>
 8015fd0:	e000      	b.n	8015fd4 <prvInitialiseNewTask+0x98>
			{
				break;
 8015fd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015fdc:	e003      	b.n	8015fe6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe8:	2b06      	cmp	r3, #6
 8015fea:	d901      	bls.n	8015ff0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015fec:	2306      	movs	r3, #6
 8015fee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ff4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ffa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ffe:	2200      	movs	r2, #0
 8016000:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016004:	3304      	adds	r3, #4
 8016006:	4618      	mov	r0, r3
 8016008:	f7ff f8ec 	bl	80151e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801600e:	3318      	adds	r3, #24
 8016010:	4618      	mov	r0, r3
 8016012:	f7ff f8e7 	bl	80151e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801601a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801601e:	f1c3 0207 	rsb	r2, r3, #7
 8016022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016024:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801602a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801602e:	2200      	movs	r2, #0
 8016030:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016034:	2200      	movs	r2, #0
 8016036:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801603a:	2200      	movs	r2, #0
 801603c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016040:	683a      	ldr	r2, [r7, #0]
 8016042:	68f9      	ldr	r1, [r7, #12]
 8016044:	69b8      	ldr	r0, [r7, #24]
 8016046:	f001 f80d 	bl	8017064 <pxPortInitialiseStack>
 801604a:	4602      	mov	r2, r0
 801604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801604e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016052:	2b00      	cmp	r3, #0
 8016054:	d002      	beq.n	801605c <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801605a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801605c:	bf00      	nop
 801605e:	3720      	adds	r7, #32
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}

08016064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b082      	sub	sp, #8
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801606c:	f001 f906 	bl	801727c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016070:	4b2a      	ldr	r3, [pc, #168]	; (801611c <prvAddNewTaskToReadyList+0xb8>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	3301      	adds	r3, #1
 8016076:	4a29      	ldr	r2, [pc, #164]	; (801611c <prvAddNewTaskToReadyList+0xb8>)
 8016078:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801607a:	4b29      	ldr	r3, [pc, #164]	; (8016120 <prvAddNewTaskToReadyList+0xbc>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d109      	bne.n	8016096 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016082:	4a27      	ldr	r2, [pc, #156]	; (8016120 <prvAddNewTaskToReadyList+0xbc>)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016088:	4b24      	ldr	r3, [pc, #144]	; (801611c <prvAddNewTaskToReadyList+0xb8>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	2b01      	cmp	r3, #1
 801608e:	d110      	bne.n	80160b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016090:	f000 fc22 	bl	80168d8 <prvInitialiseTaskLists>
 8016094:	e00d      	b.n	80160b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016096:	4b23      	ldr	r3, [pc, #140]	; (8016124 <prvAddNewTaskToReadyList+0xc0>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d109      	bne.n	80160b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801609e:	4b20      	ldr	r3, [pc, #128]	; (8016120 <prvAddNewTaskToReadyList+0xbc>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d802      	bhi.n	80160b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80160ac:	4a1c      	ldr	r2, [pc, #112]	; (8016120 <prvAddNewTaskToReadyList+0xbc>)
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80160b2:	4b1d      	ldr	r3, [pc, #116]	; (8016128 <prvAddNewTaskToReadyList+0xc4>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	3301      	adds	r3, #1
 80160b8:	4a1b      	ldr	r2, [pc, #108]	; (8016128 <prvAddNewTaskToReadyList+0xc4>)
 80160ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160c0:	2201      	movs	r2, #1
 80160c2:	409a      	lsls	r2, r3
 80160c4:	4b19      	ldr	r3, [pc, #100]	; (801612c <prvAddNewTaskToReadyList+0xc8>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	4313      	orrs	r3, r2
 80160ca:	4a18      	ldr	r2, [pc, #96]	; (801612c <prvAddNewTaskToReadyList+0xc8>)
 80160cc:	6013      	str	r3, [r2, #0]
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160d2:	4613      	mov	r3, r2
 80160d4:	009b      	lsls	r3, r3, #2
 80160d6:	4413      	add	r3, r2
 80160d8:	009b      	lsls	r3, r3, #2
 80160da:	4a15      	ldr	r2, [pc, #84]	; (8016130 <prvAddNewTaskToReadyList+0xcc>)
 80160dc:	441a      	add	r2, r3
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	3304      	adds	r3, #4
 80160e2:	4619      	mov	r1, r3
 80160e4:	4610      	mov	r0, r2
 80160e6:	f7ff f88a 	bl	80151fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80160ea:	f001 f8fb 	bl	80172e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80160ee:	4b0d      	ldr	r3, [pc, #52]	; (8016124 <prvAddNewTaskToReadyList+0xc0>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d00e      	beq.n	8016114 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80160f6:	4b0a      	ldr	r3, [pc, #40]	; (8016120 <prvAddNewTaskToReadyList+0xbc>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016100:	429a      	cmp	r2, r3
 8016102:	d207      	bcs.n	8016114 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016104:	4b0b      	ldr	r3, [pc, #44]	; (8016134 <prvAddNewTaskToReadyList+0xd0>)
 8016106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801610a:	601a      	str	r2, [r3, #0]
 801610c:	f3bf 8f4f 	dsb	sy
 8016110:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016114:	bf00      	nop
 8016116:	3708      	adds	r7, #8
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}
 801611c:	200419fc 	.word	0x200419fc
 8016120:	200418fc 	.word	0x200418fc
 8016124:	20041a08 	.word	0x20041a08
 8016128:	20041a18 	.word	0x20041a18
 801612c:	20041a04 	.word	0x20041a04
 8016130:	20041900 	.word	0x20041900
 8016134:	e000ed04 	.word	0xe000ed04

08016138 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016138:	b580      	push	{r7, lr}
 801613a:	b084      	sub	sp, #16
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016140:	2300      	movs	r3, #0
 8016142:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d019      	beq.n	801617e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801614a:	4b14      	ldr	r3, [pc, #80]	; (801619c <vTaskDelay+0x64>)
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d00c      	beq.n	801616c <vTaskDelay+0x34>
	__asm volatile
 8016152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016156:	b672      	cpsid	i
 8016158:	f383 8811 	msr	BASEPRI, r3
 801615c:	f3bf 8f6f 	isb	sy
 8016160:	f3bf 8f4f 	dsb	sy
 8016164:	b662      	cpsie	i
 8016166:	60bb      	str	r3, [r7, #8]
}
 8016168:	bf00      	nop
 801616a:	e7fe      	b.n	801616a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801616c:	f000 f87e 	bl	801626c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016170:	2100      	movs	r1, #0
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	f000 ff10 	bl	8016f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016178:	f000 f886 	bl	8016288 <xTaskResumeAll>
 801617c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d107      	bne.n	8016194 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8016184:	4b06      	ldr	r3, [pc, #24]	; (80161a0 <vTaskDelay+0x68>)
 8016186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801618a:	601a      	str	r2, [r3, #0]
 801618c:	f3bf 8f4f 	dsb	sy
 8016190:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016194:	bf00      	nop
 8016196:	3710      	adds	r7, #16
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}
 801619c:	20041a24 	.word	0x20041a24
 80161a0:	e000ed04 	.word	0xe000ed04

080161a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b08a      	sub	sp, #40	; 0x28
 80161a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80161aa:	2300      	movs	r3, #0
 80161ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80161ae:	2300      	movs	r3, #0
 80161b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80161b2:	463a      	mov	r2, r7
 80161b4:	1d39      	adds	r1, r7, #4
 80161b6:	f107 0308 	add.w	r3, r7, #8
 80161ba:	4618      	mov	r0, r3
 80161bc:	f7eb f80c 	bl	80011d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80161c0:	6839      	ldr	r1, [r7, #0]
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	68ba      	ldr	r2, [r7, #8]
 80161c6:	9202      	str	r2, [sp, #8]
 80161c8:	9301      	str	r3, [sp, #4]
 80161ca:	2300      	movs	r3, #0
 80161cc:	9300      	str	r3, [sp, #0]
 80161ce:	2300      	movs	r3, #0
 80161d0:	460a      	mov	r2, r1
 80161d2:	4920      	ldr	r1, [pc, #128]	; (8016254 <vTaskStartScheduler+0xb0>)
 80161d4:	4820      	ldr	r0, [pc, #128]	; (8016258 <vTaskStartScheduler+0xb4>)
 80161d6:	f7ff fe09 	bl	8015dec <xTaskCreateStatic>
 80161da:	4603      	mov	r3, r0
 80161dc:	4a1f      	ldr	r2, [pc, #124]	; (801625c <vTaskStartScheduler+0xb8>)
 80161de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80161e0:	4b1e      	ldr	r3, [pc, #120]	; (801625c <vTaskStartScheduler+0xb8>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d002      	beq.n	80161ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80161e8:	2301      	movs	r3, #1
 80161ea:	617b      	str	r3, [r7, #20]
 80161ec:	e001      	b.n	80161f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80161ee:	2300      	movs	r3, #0
 80161f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80161f2:	697b      	ldr	r3, [r7, #20]
 80161f4:	2b01      	cmp	r3, #1
 80161f6:	d118      	bne.n	801622a <vTaskStartScheduler+0x86>
	__asm volatile
 80161f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161fc:	b672      	cpsid	i
 80161fe:	f383 8811 	msr	BASEPRI, r3
 8016202:	f3bf 8f6f 	isb	sy
 8016206:	f3bf 8f4f 	dsb	sy
 801620a:	b662      	cpsie	i
 801620c:	613b      	str	r3, [r7, #16]
}
 801620e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016210:	4b13      	ldr	r3, [pc, #76]	; (8016260 <vTaskStartScheduler+0xbc>)
 8016212:	f04f 32ff 	mov.w	r2, #4294967295
 8016216:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016218:	4b12      	ldr	r3, [pc, #72]	; (8016264 <vTaskStartScheduler+0xc0>)
 801621a:	2201      	movs	r2, #1
 801621c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801621e:	4b12      	ldr	r3, [pc, #72]	; (8016268 <vTaskStartScheduler+0xc4>)
 8016220:	2200      	movs	r2, #0
 8016222:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016224:	f000 ffac 	bl	8017180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016228:	e010      	b.n	801624c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016230:	d10c      	bne.n	801624c <vTaskStartScheduler+0xa8>
	__asm volatile
 8016232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016236:	b672      	cpsid	i
 8016238:	f383 8811 	msr	BASEPRI, r3
 801623c:	f3bf 8f6f 	isb	sy
 8016240:	f3bf 8f4f 	dsb	sy
 8016244:	b662      	cpsie	i
 8016246:	60fb      	str	r3, [r7, #12]
}
 8016248:	bf00      	nop
 801624a:	e7fe      	b.n	801624a <vTaskStartScheduler+0xa6>
}
 801624c:	bf00      	nop
 801624e:	3718      	adds	r7, #24
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}
 8016254:	08019ae8 	.word	0x08019ae8
 8016258:	080168a5 	.word	0x080168a5
 801625c:	20041a20 	.word	0x20041a20
 8016260:	20041a1c 	.word	0x20041a1c
 8016264:	20041a08 	.word	0x20041a08
 8016268:	20041a00 	.word	0x20041a00

0801626c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801626c:	b480      	push	{r7}
 801626e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016270:	4b04      	ldr	r3, [pc, #16]	; (8016284 <vTaskSuspendAll+0x18>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	3301      	adds	r3, #1
 8016276:	4a03      	ldr	r2, [pc, #12]	; (8016284 <vTaskSuspendAll+0x18>)
 8016278:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801627a:	bf00      	nop
 801627c:	46bd      	mov	sp, r7
 801627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016282:	4770      	bx	lr
 8016284:	20041a24 	.word	0x20041a24

08016288 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b084      	sub	sp, #16
 801628c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801628e:	2300      	movs	r3, #0
 8016290:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016292:	2300      	movs	r3, #0
 8016294:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016296:	4b42      	ldr	r3, [pc, #264]	; (80163a0 <xTaskResumeAll+0x118>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d10c      	bne.n	80162b8 <xTaskResumeAll+0x30>
	__asm volatile
 801629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a2:	b672      	cpsid	i
 80162a4:	f383 8811 	msr	BASEPRI, r3
 80162a8:	f3bf 8f6f 	isb	sy
 80162ac:	f3bf 8f4f 	dsb	sy
 80162b0:	b662      	cpsie	i
 80162b2:	603b      	str	r3, [r7, #0]
}
 80162b4:	bf00      	nop
 80162b6:	e7fe      	b.n	80162b6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80162b8:	f000 ffe0 	bl	801727c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80162bc:	4b38      	ldr	r3, [pc, #224]	; (80163a0 <xTaskResumeAll+0x118>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	3b01      	subs	r3, #1
 80162c2:	4a37      	ldr	r2, [pc, #220]	; (80163a0 <xTaskResumeAll+0x118>)
 80162c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80162c6:	4b36      	ldr	r3, [pc, #216]	; (80163a0 <xTaskResumeAll+0x118>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d161      	bne.n	8016392 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80162ce:	4b35      	ldr	r3, [pc, #212]	; (80163a4 <xTaskResumeAll+0x11c>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d05d      	beq.n	8016392 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80162d6:	e02e      	b.n	8016336 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162d8:	4b33      	ldr	r3, [pc, #204]	; (80163a8 <xTaskResumeAll+0x120>)
 80162da:	68db      	ldr	r3, [r3, #12]
 80162dc:	68db      	ldr	r3, [r3, #12]
 80162de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	3318      	adds	r3, #24
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7fe ffe7 	bl	80152b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	3304      	adds	r3, #4
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7fe ffe2 	bl	80152b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162f8:	2201      	movs	r2, #1
 80162fa:	409a      	lsls	r2, r3
 80162fc:	4b2b      	ldr	r3, [pc, #172]	; (80163ac <xTaskResumeAll+0x124>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	4313      	orrs	r3, r2
 8016302:	4a2a      	ldr	r2, [pc, #168]	; (80163ac <xTaskResumeAll+0x124>)
 8016304:	6013      	str	r3, [r2, #0]
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801630a:	4613      	mov	r3, r2
 801630c:	009b      	lsls	r3, r3, #2
 801630e:	4413      	add	r3, r2
 8016310:	009b      	lsls	r3, r3, #2
 8016312:	4a27      	ldr	r2, [pc, #156]	; (80163b0 <xTaskResumeAll+0x128>)
 8016314:	441a      	add	r2, r3
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	3304      	adds	r3, #4
 801631a:	4619      	mov	r1, r3
 801631c:	4610      	mov	r0, r2
 801631e:	f7fe ff6e 	bl	80151fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016326:	4b23      	ldr	r3, [pc, #140]	; (80163b4 <xTaskResumeAll+0x12c>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801632c:	429a      	cmp	r2, r3
 801632e:	d302      	bcc.n	8016336 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8016330:	4b21      	ldr	r3, [pc, #132]	; (80163b8 <xTaskResumeAll+0x130>)
 8016332:	2201      	movs	r2, #1
 8016334:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016336:	4b1c      	ldr	r3, [pc, #112]	; (80163a8 <xTaskResumeAll+0x120>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d1cc      	bne.n	80162d8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d001      	beq.n	8016348 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016344:	f000 fb68 	bl	8016a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016348:	4b1c      	ldr	r3, [pc, #112]	; (80163bc <xTaskResumeAll+0x134>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d010      	beq.n	8016376 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016354:	f000 f858 	bl	8016408 <xTaskIncrementTick>
 8016358:	4603      	mov	r3, r0
 801635a:	2b00      	cmp	r3, #0
 801635c:	d002      	beq.n	8016364 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801635e:	4b16      	ldr	r3, [pc, #88]	; (80163b8 <xTaskResumeAll+0x130>)
 8016360:	2201      	movs	r2, #1
 8016362:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	3b01      	subs	r3, #1
 8016368:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d1f1      	bne.n	8016354 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8016370:	4b12      	ldr	r3, [pc, #72]	; (80163bc <xTaskResumeAll+0x134>)
 8016372:	2200      	movs	r2, #0
 8016374:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016376:	4b10      	ldr	r3, [pc, #64]	; (80163b8 <xTaskResumeAll+0x130>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d009      	beq.n	8016392 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801637e:	2301      	movs	r3, #1
 8016380:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016382:	4b0f      	ldr	r3, [pc, #60]	; (80163c0 <xTaskResumeAll+0x138>)
 8016384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016388:	601a      	str	r2, [r3, #0]
 801638a:	f3bf 8f4f 	dsb	sy
 801638e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016392:	f000 ffa7 	bl	80172e4 <vPortExitCritical>

	return xAlreadyYielded;
 8016396:	68bb      	ldr	r3, [r7, #8]
}
 8016398:	4618      	mov	r0, r3
 801639a:	3710      	adds	r7, #16
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}
 80163a0:	20041a24 	.word	0x20041a24
 80163a4:	200419fc 	.word	0x200419fc
 80163a8:	200419bc 	.word	0x200419bc
 80163ac:	20041a04 	.word	0x20041a04
 80163b0:	20041900 	.word	0x20041900
 80163b4:	200418fc 	.word	0x200418fc
 80163b8:	20041a10 	.word	0x20041a10
 80163bc:	20041a0c 	.word	0x20041a0c
 80163c0:	e000ed04 	.word	0xe000ed04

080163c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80163c4:	b480      	push	{r7}
 80163c6:	b083      	sub	sp, #12
 80163c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80163ca:	4b05      	ldr	r3, [pc, #20]	; (80163e0 <xTaskGetTickCount+0x1c>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80163d0:	687b      	ldr	r3, [r7, #4]
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	370c      	adds	r7, #12
 80163d6:	46bd      	mov	sp, r7
 80163d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163dc:	4770      	bx	lr
 80163de:	bf00      	nop
 80163e0:	20041a00 	.word	0x20041a00

080163e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80163ea:	f001 f82f 	bl	801744c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80163ee:	2300      	movs	r3, #0
 80163f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80163f2:	4b04      	ldr	r3, [pc, #16]	; (8016404 <xTaskGetTickCountFromISR+0x20>)
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80163f8:	683b      	ldr	r3, [r7, #0]
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3708      	adds	r7, #8
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	20041a00 	.word	0x20041a00

08016408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b086      	sub	sp, #24
 801640c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801640e:	2300      	movs	r3, #0
 8016410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016412:	4b4f      	ldr	r3, [pc, #316]	; (8016550 <xTaskIncrementTick+0x148>)
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	2b00      	cmp	r3, #0
 8016418:	f040 808a 	bne.w	8016530 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801641c:	4b4d      	ldr	r3, [pc, #308]	; (8016554 <xTaskIncrementTick+0x14c>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	3301      	adds	r3, #1
 8016422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016424:	4a4b      	ldr	r2, [pc, #300]	; (8016554 <xTaskIncrementTick+0x14c>)
 8016426:	693b      	ldr	r3, [r7, #16]
 8016428:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d122      	bne.n	8016476 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8016430:	4b49      	ldr	r3, [pc, #292]	; (8016558 <xTaskIncrementTick+0x150>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d00c      	beq.n	8016454 <xTaskIncrementTick+0x4c>
	__asm volatile
 801643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801643e:	b672      	cpsid	i
 8016440:	f383 8811 	msr	BASEPRI, r3
 8016444:	f3bf 8f6f 	isb	sy
 8016448:	f3bf 8f4f 	dsb	sy
 801644c:	b662      	cpsie	i
 801644e:	603b      	str	r3, [r7, #0]
}
 8016450:	bf00      	nop
 8016452:	e7fe      	b.n	8016452 <xTaskIncrementTick+0x4a>
 8016454:	4b40      	ldr	r3, [pc, #256]	; (8016558 <xTaskIncrementTick+0x150>)
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	60fb      	str	r3, [r7, #12]
 801645a:	4b40      	ldr	r3, [pc, #256]	; (801655c <xTaskIncrementTick+0x154>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	4a3e      	ldr	r2, [pc, #248]	; (8016558 <xTaskIncrementTick+0x150>)
 8016460:	6013      	str	r3, [r2, #0]
 8016462:	4a3e      	ldr	r2, [pc, #248]	; (801655c <xTaskIncrementTick+0x154>)
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	6013      	str	r3, [r2, #0]
 8016468:	4b3d      	ldr	r3, [pc, #244]	; (8016560 <xTaskIncrementTick+0x158>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	3301      	adds	r3, #1
 801646e:	4a3c      	ldr	r2, [pc, #240]	; (8016560 <xTaskIncrementTick+0x158>)
 8016470:	6013      	str	r3, [r2, #0]
 8016472:	f000 fad1 	bl	8016a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016476:	4b3b      	ldr	r3, [pc, #236]	; (8016564 <xTaskIncrementTick+0x15c>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	693a      	ldr	r2, [r7, #16]
 801647c:	429a      	cmp	r2, r3
 801647e:	d348      	bcc.n	8016512 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016480:	4b35      	ldr	r3, [pc, #212]	; (8016558 <xTaskIncrementTick+0x150>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d104      	bne.n	8016494 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801648a:	4b36      	ldr	r3, [pc, #216]	; (8016564 <xTaskIncrementTick+0x15c>)
 801648c:	f04f 32ff 	mov.w	r2, #4294967295
 8016490:	601a      	str	r2, [r3, #0]
					break;
 8016492:	e03e      	b.n	8016512 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016494:	4b30      	ldr	r3, [pc, #192]	; (8016558 <xTaskIncrementTick+0x150>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	68db      	ldr	r3, [r3, #12]
 801649a:	68db      	ldr	r3, [r3, #12]
 801649c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	685b      	ldr	r3, [r3, #4]
 80164a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80164a4:	693a      	ldr	r2, [r7, #16]
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d203      	bcs.n	80164b4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80164ac:	4a2d      	ldr	r2, [pc, #180]	; (8016564 <xTaskIncrementTick+0x15c>)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80164b2:	e02e      	b.n	8016512 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	3304      	adds	r3, #4
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7fe fefd 	bl	80152b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d004      	beq.n	80164d0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80164c6:	68bb      	ldr	r3, [r7, #8]
 80164c8:	3318      	adds	r3, #24
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7fe fef4 	bl	80152b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164d4:	2201      	movs	r2, #1
 80164d6:	409a      	lsls	r2, r3
 80164d8:	4b23      	ldr	r3, [pc, #140]	; (8016568 <xTaskIncrementTick+0x160>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	4313      	orrs	r3, r2
 80164de:	4a22      	ldr	r2, [pc, #136]	; (8016568 <xTaskIncrementTick+0x160>)
 80164e0:	6013      	str	r3, [r2, #0]
 80164e2:	68bb      	ldr	r3, [r7, #8]
 80164e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164e6:	4613      	mov	r3, r2
 80164e8:	009b      	lsls	r3, r3, #2
 80164ea:	4413      	add	r3, r2
 80164ec:	009b      	lsls	r3, r3, #2
 80164ee:	4a1f      	ldr	r2, [pc, #124]	; (801656c <xTaskIncrementTick+0x164>)
 80164f0:	441a      	add	r2, r3
 80164f2:	68bb      	ldr	r3, [r7, #8]
 80164f4:	3304      	adds	r3, #4
 80164f6:	4619      	mov	r1, r3
 80164f8:	4610      	mov	r0, r2
 80164fa:	f7fe fe80 	bl	80151fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016502:	4b1b      	ldr	r3, [pc, #108]	; (8016570 <xTaskIncrementTick+0x168>)
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016508:	429a      	cmp	r2, r3
 801650a:	d3b9      	bcc.n	8016480 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801650c:	2301      	movs	r3, #1
 801650e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016510:	e7b6      	b.n	8016480 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016512:	4b17      	ldr	r3, [pc, #92]	; (8016570 <xTaskIncrementTick+0x168>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016518:	4914      	ldr	r1, [pc, #80]	; (801656c <xTaskIncrementTick+0x164>)
 801651a:	4613      	mov	r3, r2
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	4413      	add	r3, r2
 8016520:	009b      	lsls	r3, r3, #2
 8016522:	440b      	add	r3, r1
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	2b01      	cmp	r3, #1
 8016528:	d907      	bls.n	801653a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801652a:	2301      	movs	r3, #1
 801652c:	617b      	str	r3, [r7, #20]
 801652e:	e004      	b.n	801653a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016530:	4b10      	ldr	r3, [pc, #64]	; (8016574 <xTaskIncrementTick+0x16c>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	3301      	adds	r3, #1
 8016536:	4a0f      	ldr	r2, [pc, #60]	; (8016574 <xTaskIncrementTick+0x16c>)
 8016538:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801653a:	4b0f      	ldr	r3, [pc, #60]	; (8016578 <xTaskIncrementTick+0x170>)
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d001      	beq.n	8016546 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8016542:	2301      	movs	r3, #1
 8016544:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016546:	697b      	ldr	r3, [r7, #20]
}
 8016548:	4618      	mov	r0, r3
 801654a:	3718      	adds	r7, #24
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}
 8016550:	20041a24 	.word	0x20041a24
 8016554:	20041a00 	.word	0x20041a00
 8016558:	200419b4 	.word	0x200419b4
 801655c:	200419b8 	.word	0x200419b8
 8016560:	20041a14 	.word	0x20041a14
 8016564:	20041a1c 	.word	0x20041a1c
 8016568:	20041a04 	.word	0x20041a04
 801656c:	20041900 	.word	0x20041900
 8016570:	200418fc 	.word	0x200418fc
 8016574:	20041a0c 	.word	0x20041a0c
 8016578:	20041a10 	.word	0x20041a10

0801657c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b088      	sub	sp, #32
 8016580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016582:	4b3a      	ldr	r3, [pc, #232]	; (801666c <vTaskSwitchContext+0xf0>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d003      	beq.n	8016592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801658a:	4b39      	ldr	r3, [pc, #228]	; (8016670 <vTaskSwitchContext+0xf4>)
 801658c:	2201      	movs	r2, #1
 801658e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016590:	e068      	b.n	8016664 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8016592:	4b37      	ldr	r3, [pc, #220]	; (8016670 <vTaskSwitchContext+0xf4>)
 8016594:	2200      	movs	r2, #0
 8016596:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016598:	4b36      	ldr	r3, [pc, #216]	; (8016674 <vTaskSwitchContext+0xf8>)
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801659e:	61fb      	str	r3, [r7, #28]
 80165a0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80165a4:	61bb      	str	r3, [r7, #24]
 80165a6:	69fb      	ldr	r3, [r7, #28]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	69ba      	ldr	r2, [r7, #24]
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d111      	bne.n	80165d4 <vTaskSwitchContext+0x58>
 80165b0:	69fb      	ldr	r3, [r7, #28]
 80165b2:	3304      	adds	r3, #4
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	69ba      	ldr	r2, [r7, #24]
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d10b      	bne.n	80165d4 <vTaskSwitchContext+0x58>
 80165bc:	69fb      	ldr	r3, [r7, #28]
 80165be:	3308      	adds	r3, #8
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	69ba      	ldr	r2, [r7, #24]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d105      	bne.n	80165d4 <vTaskSwitchContext+0x58>
 80165c8:	69fb      	ldr	r3, [r7, #28]
 80165ca:	330c      	adds	r3, #12
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	69ba      	ldr	r2, [r7, #24]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d008      	beq.n	80165e6 <vTaskSwitchContext+0x6a>
 80165d4:	4b27      	ldr	r3, [pc, #156]	; (8016674 <vTaskSwitchContext+0xf8>)
 80165d6:	681a      	ldr	r2, [r3, #0]
 80165d8:	4b26      	ldr	r3, [pc, #152]	; (8016674 <vTaskSwitchContext+0xf8>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	3334      	adds	r3, #52	; 0x34
 80165de:	4619      	mov	r1, r3
 80165e0:	4610      	mov	r0, r2
 80165e2:	f7ea fde6 	bl	80011b2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165e6:	4b24      	ldr	r3, [pc, #144]	; (8016678 <vTaskSwitchContext+0xfc>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	fab3 f383 	clz	r3, r3
 80165f2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80165f4:	7afb      	ldrb	r3, [r7, #11]
 80165f6:	f1c3 031f 	rsb	r3, r3, #31
 80165fa:	617b      	str	r3, [r7, #20]
 80165fc:	491f      	ldr	r1, [pc, #124]	; (801667c <vTaskSwitchContext+0x100>)
 80165fe:	697a      	ldr	r2, [r7, #20]
 8016600:	4613      	mov	r3, r2
 8016602:	009b      	lsls	r3, r3, #2
 8016604:	4413      	add	r3, r2
 8016606:	009b      	lsls	r3, r3, #2
 8016608:	440b      	add	r3, r1
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d10c      	bne.n	801662a <vTaskSwitchContext+0xae>
	__asm volatile
 8016610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016614:	b672      	cpsid	i
 8016616:	f383 8811 	msr	BASEPRI, r3
 801661a:	f3bf 8f6f 	isb	sy
 801661e:	f3bf 8f4f 	dsb	sy
 8016622:	b662      	cpsie	i
 8016624:	607b      	str	r3, [r7, #4]
}
 8016626:	bf00      	nop
 8016628:	e7fe      	b.n	8016628 <vTaskSwitchContext+0xac>
 801662a:	697a      	ldr	r2, [r7, #20]
 801662c:	4613      	mov	r3, r2
 801662e:	009b      	lsls	r3, r3, #2
 8016630:	4413      	add	r3, r2
 8016632:	009b      	lsls	r3, r3, #2
 8016634:	4a11      	ldr	r2, [pc, #68]	; (801667c <vTaskSwitchContext+0x100>)
 8016636:	4413      	add	r3, r2
 8016638:	613b      	str	r3, [r7, #16]
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	685b      	ldr	r3, [r3, #4]
 801663e:	685a      	ldr	r2, [r3, #4]
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	605a      	str	r2, [r3, #4]
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	685a      	ldr	r2, [r3, #4]
 8016648:	693b      	ldr	r3, [r7, #16]
 801664a:	3308      	adds	r3, #8
 801664c:	429a      	cmp	r2, r3
 801664e:	d104      	bne.n	801665a <vTaskSwitchContext+0xde>
 8016650:	693b      	ldr	r3, [r7, #16]
 8016652:	685b      	ldr	r3, [r3, #4]
 8016654:	685a      	ldr	r2, [r3, #4]
 8016656:	693b      	ldr	r3, [r7, #16]
 8016658:	605a      	str	r2, [r3, #4]
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	68db      	ldr	r3, [r3, #12]
 8016660:	4a04      	ldr	r2, [pc, #16]	; (8016674 <vTaskSwitchContext+0xf8>)
 8016662:	6013      	str	r3, [r2, #0]
}
 8016664:	bf00      	nop
 8016666:	3720      	adds	r7, #32
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}
 801666c:	20041a24 	.word	0x20041a24
 8016670:	20041a10 	.word	0x20041a10
 8016674:	200418fc 	.word	0x200418fc
 8016678:	20041a04 	.word	0x20041a04
 801667c:	20041900 	.word	0x20041900

08016680 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b084      	sub	sp, #16
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d10c      	bne.n	80166aa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8016690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016694:	b672      	cpsid	i
 8016696:	f383 8811 	msr	BASEPRI, r3
 801669a:	f3bf 8f6f 	isb	sy
 801669e:	f3bf 8f4f 	dsb	sy
 80166a2:	b662      	cpsie	i
 80166a4:	60fb      	str	r3, [r7, #12]
}
 80166a6:	bf00      	nop
 80166a8:	e7fe      	b.n	80166a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80166aa:	4b07      	ldr	r3, [pc, #28]	; (80166c8 <vTaskPlaceOnEventList+0x48>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	3318      	adds	r3, #24
 80166b0:	4619      	mov	r1, r3
 80166b2:	6878      	ldr	r0, [r7, #4]
 80166b4:	f7fe fdc7 	bl	8015246 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80166b8:	2101      	movs	r1, #1
 80166ba:	6838      	ldr	r0, [r7, #0]
 80166bc:	f000 fc6c 	bl	8016f98 <prvAddCurrentTaskToDelayedList>
}
 80166c0:	bf00      	nop
 80166c2:	3710      	adds	r7, #16
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	200418fc 	.word	0x200418fc

080166cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	68db      	ldr	r3, [r3, #12]
 80166d8:	68db      	ldr	r3, [r3, #12]
 80166da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80166dc:	693b      	ldr	r3, [r7, #16]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d10c      	bne.n	80166fc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80166e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e6:	b672      	cpsid	i
 80166e8:	f383 8811 	msr	BASEPRI, r3
 80166ec:	f3bf 8f6f 	isb	sy
 80166f0:	f3bf 8f4f 	dsb	sy
 80166f4:	b662      	cpsie	i
 80166f6:	60fb      	str	r3, [r7, #12]
}
 80166f8:	bf00      	nop
 80166fa:	e7fe      	b.n	80166fa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80166fc:	693b      	ldr	r3, [r7, #16]
 80166fe:	3318      	adds	r3, #24
 8016700:	4618      	mov	r0, r3
 8016702:	f7fe fdd9 	bl	80152b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016706:	4b1d      	ldr	r3, [pc, #116]	; (801677c <xTaskRemoveFromEventList+0xb0>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d11c      	bne.n	8016748 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801670e:	693b      	ldr	r3, [r7, #16]
 8016710:	3304      	adds	r3, #4
 8016712:	4618      	mov	r0, r3
 8016714:	f7fe fdd0 	bl	80152b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016718:	693b      	ldr	r3, [r7, #16]
 801671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801671c:	2201      	movs	r2, #1
 801671e:	409a      	lsls	r2, r3
 8016720:	4b17      	ldr	r3, [pc, #92]	; (8016780 <xTaskRemoveFromEventList+0xb4>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	4313      	orrs	r3, r2
 8016726:	4a16      	ldr	r2, [pc, #88]	; (8016780 <xTaskRemoveFromEventList+0xb4>)
 8016728:	6013      	str	r3, [r2, #0]
 801672a:	693b      	ldr	r3, [r7, #16]
 801672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801672e:	4613      	mov	r3, r2
 8016730:	009b      	lsls	r3, r3, #2
 8016732:	4413      	add	r3, r2
 8016734:	009b      	lsls	r3, r3, #2
 8016736:	4a13      	ldr	r2, [pc, #76]	; (8016784 <xTaskRemoveFromEventList+0xb8>)
 8016738:	441a      	add	r2, r3
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	3304      	adds	r3, #4
 801673e:	4619      	mov	r1, r3
 8016740:	4610      	mov	r0, r2
 8016742:	f7fe fd5c 	bl	80151fe <vListInsertEnd>
 8016746:	e005      	b.n	8016754 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016748:	693b      	ldr	r3, [r7, #16]
 801674a:	3318      	adds	r3, #24
 801674c:	4619      	mov	r1, r3
 801674e:	480e      	ldr	r0, [pc, #56]	; (8016788 <xTaskRemoveFromEventList+0xbc>)
 8016750:	f7fe fd55 	bl	80151fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016758:	4b0c      	ldr	r3, [pc, #48]	; (801678c <xTaskRemoveFromEventList+0xc0>)
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801675e:	429a      	cmp	r2, r3
 8016760:	d905      	bls.n	801676e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016762:	2301      	movs	r3, #1
 8016764:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016766:	4b0a      	ldr	r3, [pc, #40]	; (8016790 <xTaskRemoveFromEventList+0xc4>)
 8016768:	2201      	movs	r2, #1
 801676a:	601a      	str	r2, [r3, #0]
 801676c:	e001      	b.n	8016772 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801676e:	2300      	movs	r3, #0
 8016770:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016772:	697b      	ldr	r3, [r7, #20]
}
 8016774:	4618      	mov	r0, r3
 8016776:	3718      	adds	r7, #24
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}
 801677c:	20041a24 	.word	0x20041a24
 8016780:	20041a04 	.word	0x20041a04
 8016784:	20041900 	.word	0x20041900
 8016788:	200419bc 	.word	0x200419bc
 801678c:	200418fc 	.word	0x200418fc
 8016790:	20041a10 	.word	0x20041a10

08016794 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016794:	b480      	push	{r7}
 8016796:	b083      	sub	sp, #12
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801679c:	4b06      	ldr	r3, [pc, #24]	; (80167b8 <vTaskInternalSetTimeOutState+0x24>)
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80167a4:	4b05      	ldr	r3, [pc, #20]	; (80167bc <vTaskInternalSetTimeOutState+0x28>)
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	605a      	str	r2, [r3, #4]
}
 80167ac:	bf00      	nop
 80167ae:	370c      	adds	r7, #12
 80167b0:	46bd      	mov	sp, r7
 80167b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b6:	4770      	bx	lr
 80167b8:	20041a14 	.word	0x20041a14
 80167bc:	20041a00 	.word	0x20041a00

080167c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b088      	sub	sp, #32
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
 80167c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d10c      	bne.n	80167ea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80167d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167d4:	b672      	cpsid	i
 80167d6:	f383 8811 	msr	BASEPRI, r3
 80167da:	f3bf 8f6f 	isb	sy
 80167de:	f3bf 8f4f 	dsb	sy
 80167e2:	b662      	cpsie	i
 80167e4:	613b      	str	r3, [r7, #16]
}
 80167e6:	bf00      	nop
 80167e8:	e7fe      	b.n	80167e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d10c      	bne.n	801680a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80167f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167f4:	b672      	cpsid	i
 80167f6:	f383 8811 	msr	BASEPRI, r3
 80167fa:	f3bf 8f6f 	isb	sy
 80167fe:	f3bf 8f4f 	dsb	sy
 8016802:	b662      	cpsie	i
 8016804:	60fb      	str	r3, [r7, #12]
}
 8016806:	bf00      	nop
 8016808:	e7fe      	b.n	8016808 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801680a:	f000 fd37 	bl	801727c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801680e:	4b1d      	ldr	r3, [pc, #116]	; (8016884 <xTaskCheckForTimeOut+0xc4>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	69ba      	ldr	r2, [r7, #24]
 801681a:	1ad3      	subs	r3, r2, r3
 801681c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016826:	d102      	bne.n	801682e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016828:	2300      	movs	r3, #0
 801682a:	61fb      	str	r3, [r7, #28]
 801682c:	e023      	b.n	8016876 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681a      	ldr	r2, [r3, #0]
 8016832:	4b15      	ldr	r3, [pc, #84]	; (8016888 <xTaskCheckForTimeOut+0xc8>)
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	429a      	cmp	r2, r3
 8016838:	d007      	beq.n	801684a <xTaskCheckForTimeOut+0x8a>
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	685b      	ldr	r3, [r3, #4]
 801683e:	69ba      	ldr	r2, [r7, #24]
 8016840:	429a      	cmp	r2, r3
 8016842:	d302      	bcc.n	801684a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016844:	2301      	movs	r3, #1
 8016846:	61fb      	str	r3, [r7, #28]
 8016848:	e015      	b.n	8016876 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	697a      	ldr	r2, [r7, #20]
 8016850:	429a      	cmp	r2, r3
 8016852:	d20b      	bcs.n	801686c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	681a      	ldr	r2, [r3, #0]
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	1ad2      	subs	r2, r2, r3
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f7ff ff97 	bl	8016794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016866:	2300      	movs	r3, #0
 8016868:	61fb      	str	r3, [r7, #28]
 801686a:	e004      	b.n	8016876 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	2200      	movs	r2, #0
 8016870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016872:	2301      	movs	r3, #1
 8016874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016876:	f000 fd35 	bl	80172e4 <vPortExitCritical>

	return xReturn;
 801687a:	69fb      	ldr	r3, [r7, #28]
}
 801687c:	4618      	mov	r0, r3
 801687e:	3720      	adds	r7, #32
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	20041a00 	.word	0x20041a00
 8016888:	20041a14 	.word	0x20041a14

0801688c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801688c:	b480      	push	{r7}
 801688e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016890:	4b03      	ldr	r3, [pc, #12]	; (80168a0 <vTaskMissedYield+0x14>)
 8016892:	2201      	movs	r2, #1
 8016894:	601a      	str	r2, [r3, #0]
}
 8016896:	bf00      	nop
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr
 80168a0:	20041a10 	.word	0x20041a10

080168a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80168ac:	f000 f854 	bl	8016958 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80168b0:	4b07      	ldr	r3, [pc, #28]	; (80168d0 <prvIdleTask+0x2c>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	2b01      	cmp	r3, #1
 80168b6:	d907      	bls.n	80168c8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80168b8:	4b06      	ldr	r3, [pc, #24]	; (80168d4 <prvIdleTask+0x30>)
 80168ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168be:	601a      	str	r2, [r3, #0]
 80168c0:	f3bf 8f4f 	dsb	sy
 80168c4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80168c8:	f7ea fc6c 	bl	80011a4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80168cc:	e7ee      	b.n	80168ac <prvIdleTask+0x8>
 80168ce:	bf00      	nop
 80168d0:	20041900 	.word	0x20041900
 80168d4:	e000ed04 	.word	0xe000ed04

080168d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b082      	sub	sp, #8
 80168dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80168de:	2300      	movs	r3, #0
 80168e0:	607b      	str	r3, [r7, #4]
 80168e2:	e00c      	b.n	80168fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80168e4:	687a      	ldr	r2, [r7, #4]
 80168e6:	4613      	mov	r3, r2
 80168e8:	009b      	lsls	r3, r3, #2
 80168ea:	4413      	add	r3, r2
 80168ec:	009b      	lsls	r3, r3, #2
 80168ee:	4a12      	ldr	r2, [pc, #72]	; (8016938 <prvInitialiseTaskLists+0x60>)
 80168f0:	4413      	add	r3, r2
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7fe fc56 	bl	80151a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	3301      	adds	r3, #1
 80168fc:	607b      	str	r3, [r7, #4]
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	2b06      	cmp	r3, #6
 8016902:	d9ef      	bls.n	80168e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016904:	480d      	ldr	r0, [pc, #52]	; (801693c <prvInitialiseTaskLists+0x64>)
 8016906:	f7fe fc4d 	bl	80151a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801690a:	480d      	ldr	r0, [pc, #52]	; (8016940 <prvInitialiseTaskLists+0x68>)
 801690c:	f7fe fc4a 	bl	80151a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016910:	480c      	ldr	r0, [pc, #48]	; (8016944 <prvInitialiseTaskLists+0x6c>)
 8016912:	f7fe fc47 	bl	80151a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016916:	480c      	ldr	r0, [pc, #48]	; (8016948 <prvInitialiseTaskLists+0x70>)
 8016918:	f7fe fc44 	bl	80151a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801691c:	480b      	ldr	r0, [pc, #44]	; (801694c <prvInitialiseTaskLists+0x74>)
 801691e:	f7fe fc41 	bl	80151a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016922:	4b0b      	ldr	r3, [pc, #44]	; (8016950 <prvInitialiseTaskLists+0x78>)
 8016924:	4a05      	ldr	r2, [pc, #20]	; (801693c <prvInitialiseTaskLists+0x64>)
 8016926:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016928:	4b0a      	ldr	r3, [pc, #40]	; (8016954 <prvInitialiseTaskLists+0x7c>)
 801692a:	4a05      	ldr	r2, [pc, #20]	; (8016940 <prvInitialiseTaskLists+0x68>)
 801692c:	601a      	str	r2, [r3, #0]
}
 801692e:	bf00      	nop
 8016930:	3708      	adds	r7, #8
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}
 8016936:	bf00      	nop
 8016938:	20041900 	.word	0x20041900
 801693c:	2004198c 	.word	0x2004198c
 8016940:	200419a0 	.word	0x200419a0
 8016944:	200419bc 	.word	0x200419bc
 8016948:	200419d0 	.word	0x200419d0
 801694c:	200419e8 	.word	0x200419e8
 8016950:	200419b4 	.word	0x200419b4
 8016954:	200419b8 	.word	0x200419b8

08016958 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801695e:	e019      	b.n	8016994 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016960:	f000 fc8c 	bl	801727c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016964:	4b10      	ldr	r3, [pc, #64]	; (80169a8 <prvCheckTasksWaitingTermination+0x50>)
 8016966:	68db      	ldr	r3, [r3, #12]
 8016968:	68db      	ldr	r3, [r3, #12]
 801696a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	3304      	adds	r3, #4
 8016970:	4618      	mov	r0, r3
 8016972:	f7fe fca1 	bl	80152b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016976:	4b0d      	ldr	r3, [pc, #52]	; (80169ac <prvCheckTasksWaitingTermination+0x54>)
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	3b01      	subs	r3, #1
 801697c:	4a0b      	ldr	r2, [pc, #44]	; (80169ac <prvCheckTasksWaitingTermination+0x54>)
 801697e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016980:	4b0b      	ldr	r3, [pc, #44]	; (80169b0 <prvCheckTasksWaitingTermination+0x58>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	3b01      	subs	r3, #1
 8016986:	4a0a      	ldr	r2, [pc, #40]	; (80169b0 <prvCheckTasksWaitingTermination+0x58>)
 8016988:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801698a:	f000 fcab 	bl	80172e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801698e:	6878      	ldr	r0, [r7, #4]
 8016990:	f000 f810 	bl	80169b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016994:	4b06      	ldr	r3, [pc, #24]	; (80169b0 <prvCheckTasksWaitingTermination+0x58>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d1e1      	bne.n	8016960 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801699c:	bf00      	nop
 801699e:	bf00      	nop
 80169a0:	3708      	adds	r7, #8
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}
 80169a6:	bf00      	nop
 80169a8:	200419d0 	.word	0x200419d0
 80169ac:	200419fc 	.word	0x200419fc
 80169b0:	200419e4 	.word	0x200419e4

080169b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b084      	sub	sp, #16
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d108      	bne.n	80169d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169ca:	4618      	mov	r0, r3
 80169cc:	f000 fe52 	bl	8017674 <vPortFree>
				vPortFree( pxTCB );
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f000 fe4f 	bl	8017674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80169d6:	e01a      	b.n	8016a0e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80169de:	2b01      	cmp	r3, #1
 80169e0:	d103      	bne.n	80169ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f000 fe46 	bl	8017674 <vPortFree>
	}
 80169e8:	e011      	b.n	8016a0e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80169f0:	2b02      	cmp	r3, #2
 80169f2:	d00c      	beq.n	8016a0e <prvDeleteTCB+0x5a>
	__asm volatile
 80169f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169f8:	b672      	cpsid	i
 80169fa:	f383 8811 	msr	BASEPRI, r3
 80169fe:	f3bf 8f6f 	isb	sy
 8016a02:	f3bf 8f4f 	dsb	sy
 8016a06:	b662      	cpsie	i
 8016a08:	60fb      	str	r3, [r7, #12]
}
 8016a0a:	bf00      	nop
 8016a0c:	e7fe      	b.n	8016a0c <prvDeleteTCB+0x58>
	}
 8016a0e:	bf00      	nop
 8016a10:	3710      	adds	r7, #16
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
	...

08016a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016a18:	b480      	push	{r7}
 8016a1a:	b083      	sub	sp, #12
 8016a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a1e:	4b0c      	ldr	r3, [pc, #48]	; (8016a50 <prvResetNextTaskUnblockTime+0x38>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d104      	bne.n	8016a32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016a28:	4b0a      	ldr	r3, [pc, #40]	; (8016a54 <prvResetNextTaskUnblockTime+0x3c>)
 8016a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016a30:	e008      	b.n	8016a44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a32:	4b07      	ldr	r3, [pc, #28]	; (8016a50 <prvResetNextTaskUnblockTime+0x38>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	68db      	ldr	r3, [r3, #12]
 8016a38:	68db      	ldr	r3, [r3, #12]
 8016a3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	685b      	ldr	r3, [r3, #4]
 8016a40:	4a04      	ldr	r2, [pc, #16]	; (8016a54 <prvResetNextTaskUnblockTime+0x3c>)
 8016a42:	6013      	str	r3, [r2, #0]
}
 8016a44:	bf00      	nop
 8016a46:	370c      	adds	r7, #12
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4e:	4770      	bx	lr
 8016a50:	200419b4 	.word	0x200419b4
 8016a54:	20041a1c 	.word	0x20041a1c

08016a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016a58:	b480      	push	{r7}
 8016a5a:	b083      	sub	sp, #12
 8016a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016a5e:	4b0b      	ldr	r3, [pc, #44]	; (8016a8c <xTaskGetSchedulerState+0x34>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d102      	bne.n	8016a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016a66:	2301      	movs	r3, #1
 8016a68:	607b      	str	r3, [r7, #4]
 8016a6a:	e008      	b.n	8016a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a6c:	4b08      	ldr	r3, [pc, #32]	; (8016a90 <xTaskGetSchedulerState+0x38>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d102      	bne.n	8016a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016a74:	2302      	movs	r3, #2
 8016a76:	607b      	str	r3, [r7, #4]
 8016a78:	e001      	b.n	8016a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016a7e:	687b      	ldr	r3, [r7, #4]
	}
 8016a80:	4618      	mov	r0, r3
 8016a82:	370c      	adds	r7, #12
 8016a84:	46bd      	mov	sp, r7
 8016a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8a:	4770      	bx	lr
 8016a8c:	20041a08 	.word	0x20041a08
 8016a90:	20041a24 	.word	0x20041a24

08016a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b086      	sub	sp, #24
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d072      	beq.n	8016b90 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016aaa:	4b3c      	ldr	r3, [pc, #240]	; (8016b9c <xTaskPriorityDisinherit+0x108>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	693a      	ldr	r2, [r7, #16]
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d00c      	beq.n	8016ace <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8016ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab8:	b672      	cpsid	i
 8016aba:	f383 8811 	msr	BASEPRI, r3
 8016abe:	f3bf 8f6f 	isb	sy
 8016ac2:	f3bf 8f4f 	dsb	sy
 8016ac6:	b662      	cpsie	i
 8016ac8:	60fb      	str	r3, [r7, #12]
}
 8016aca:	bf00      	nop
 8016acc:	e7fe      	b.n	8016acc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016ace:	693b      	ldr	r3, [r7, #16]
 8016ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d10c      	bne.n	8016af0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8016ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ada:	b672      	cpsid	i
 8016adc:	f383 8811 	msr	BASEPRI, r3
 8016ae0:	f3bf 8f6f 	isb	sy
 8016ae4:	f3bf 8f4f 	dsb	sy
 8016ae8:	b662      	cpsie	i
 8016aea:	60bb      	str	r3, [r7, #8]
}
 8016aec:	bf00      	nop
 8016aee:	e7fe      	b.n	8016aee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016af4:	1e5a      	subs	r2, r3, #1
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d044      	beq.n	8016b90 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016b06:	693b      	ldr	r3, [r7, #16]
 8016b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d140      	bne.n	8016b90 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	3304      	adds	r3, #4
 8016b12:	4618      	mov	r0, r3
 8016b14:	f7fe fbd0 	bl	80152b8 <uxListRemove>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d115      	bne.n	8016b4a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016b1e:	693b      	ldr	r3, [r7, #16]
 8016b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b22:	491f      	ldr	r1, [pc, #124]	; (8016ba0 <xTaskPriorityDisinherit+0x10c>)
 8016b24:	4613      	mov	r3, r2
 8016b26:	009b      	lsls	r3, r3, #2
 8016b28:	4413      	add	r3, r2
 8016b2a:	009b      	lsls	r3, r3, #2
 8016b2c:	440b      	add	r3, r1
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d10a      	bne.n	8016b4a <xTaskPriorityDisinherit+0xb6>
 8016b34:	693b      	ldr	r3, [r7, #16]
 8016b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b38:	2201      	movs	r2, #1
 8016b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8016b3e:	43da      	mvns	r2, r3
 8016b40:	4b18      	ldr	r3, [pc, #96]	; (8016ba4 <xTaskPriorityDisinherit+0x110>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	4013      	ands	r3, r2
 8016b46:	4a17      	ldr	r2, [pc, #92]	; (8016ba4 <xTaskPriorityDisinherit+0x110>)
 8016b48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016b4e:	693b      	ldr	r3, [r7, #16]
 8016b50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b52:	693b      	ldr	r3, [r7, #16]
 8016b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b56:	f1c3 0207 	rsb	r2, r3, #7
 8016b5a:	693b      	ldr	r3, [r7, #16]
 8016b5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016b5e:	693b      	ldr	r3, [r7, #16]
 8016b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b62:	2201      	movs	r2, #1
 8016b64:	409a      	lsls	r2, r3
 8016b66:	4b0f      	ldr	r3, [pc, #60]	; (8016ba4 <xTaskPriorityDisinherit+0x110>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	4313      	orrs	r3, r2
 8016b6c:	4a0d      	ldr	r2, [pc, #52]	; (8016ba4 <xTaskPriorityDisinherit+0x110>)
 8016b6e:	6013      	str	r3, [r2, #0]
 8016b70:	693b      	ldr	r3, [r7, #16]
 8016b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b74:	4613      	mov	r3, r2
 8016b76:	009b      	lsls	r3, r3, #2
 8016b78:	4413      	add	r3, r2
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	4a08      	ldr	r2, [pc, #32]	; (8016ba0 <xTaskPriorityDisinherit+0x10c>)
 8016b7e:	441a      	add	r2, r3
 8016b80:	693b      	ldr	r3, [r7, #16]
 8016b82:	3304      	adds	r3, #4
 8016b84:	4619      	mov	r1, r3
 8016b86:	4610      	mov	r0, r2
 8016b88:	f7fe fb39 	bl	80151fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016b90:	697b      	ldr	r3, [r7, #20]
	}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3718      	adds	r7, #24
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
 8016b9a:	bf00      	nop
 8016b9c:	200418fc 	.word	0x200418fc
 8016ba0:	20041900 	.word	0x20041900
 8016ba4:	20041a04 	.word	0x20041a04

08016ba8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b086      	sub	sp, #24
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	60f8      	str	r0, [r7, #12]
 8016bb0:	60b9      	str	r1, [r7, #8]
 8016bb2:	607a      	str	r2, [r7, #4]
 8016bb4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8016bb6:	f000 fb61 	bl	801727c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016bba:	4b26      	ldr	r3, [pc, #152]	; (8016c54 <xTaskNotifyWait+0xac>)
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016bc2:	b2db      	uxtb	r3, r3
 8016bc4:	2b02      	cmp	r3, #2
 8016bc6:	d01a      	beq.n	8016bfe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8016bc8:	4b22      	ldr	r3, [pc, #136]	; (8016c54 <xTaskNotifyWait+0xac>)
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8016bce:	68fa      	ldr	r2, [r7, #12]
 8016bd0:	43d2      	mvns	r2, r2
 8016bd2:	400a      	ands	r2, r1
 8016bd4:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8016bd6:	4b1f      	ldr	r3, [pc, #124]	; (8016c54 <xTaskNotifyWait+0xac>)
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	2201      	movs	r2, #1
 8016bdc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d00b      	beq.n	8016bfe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016be6:	2101      	movs	r1, #1
 8016be8:	6838      	ldr	r0, [r7, #0]
 8016bea:	f000 f9d5 	bl	8016f98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8016bee:	4b1a      	ldr	r3, [pc, #104]	; (8016c58 <xTaskNotifyWait+0xb0>)
 8016bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bf4:	601a      	str	r2, [r3, #0]
 8016bf6:	f3bf 8f4f 	dsb	sy
 8016bfa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8016bfe:	f000 fb71 	bl	80172e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8016c02:	f000 fb3b 	bl	801727c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d004      	beq.n	8016c16 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8016c0c:	4b11      	ldr	r3, [pc, #68]	; (8016c54 <xTaskNotifyWait+0xac>)
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016c16:	4b0f      	ldr	r3, [pc, #60]	; (8016c54 <xTaskNotifyWait+0xac>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016c1e:	b2db      	uxtb	r3, r3
 8016c20:	2b02      	cmp	r3, #2
 8016c22:	d002      	beq.n	8016c2a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8016c24:	2300      	movs	r3, #0
 8016c26:	617b      	str	r3, [r7, #20]
 8016c28:	e008      	b.n	8016c3c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8016c2a:	4b0a      	ldr	r3, [pc, #40]	; (8016c54 <xTaskNotifyWait+0xac>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8016c30:	68ba      	ldr	r2, [r7, #8]
 8016c32:	43d2      	mvns	r2, r2
 8016c34:	400a      	ands	r2, r1
 8016c36:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 8016c38:	2301      	movs	r3, #1
 8016c3a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016c3c:	4b05      	ldr	r3, [pc, #20]	; (8016c54 <xTaskNotifyWait+0xac>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	2200      	movs	r2, #0
 8016c42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8016c46:	f000 fb4d 	bl	80172e4 <vPortExitCritical>

		return xReturn;
 8016c4a:	697b      	ldr	r3, [r7, #20]
	}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3718      	adds	r7, #24
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}
 8016c54:	200418fc 	.word	0x200418fc
 8016c58:	e000ed04 	.word	0xe000ed04

08016c5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b08a      	sub	sp, #40	; 0x28
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	60f8      	str	r0, [r7, #12]
 8016c64:	60b9      	str	r1, [r7, #8]
 8016c66:	603b      	str	r3, [r7, #0]
 8016c68:	4613      	mov	r3, r2
 8016c6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d10c      	bne.n	8016c90 <xTaskGenericNotify+0x34>
	__asm volatile
 8016c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c7a:	b672      	cpsid	i
 8016c7c:	f383 8811 	msr	BASEPRI, r3
 8016c80:	f3bf 8f6f 	isb	sy
 8016c84:	f3bf 8f4f 	dsb	sy
 8016c88:	b662      	cpsie	i
 8016c8a:	61bb      	str	r3, [r7, #24]
}
 8016c8c:	bf00      	nop
 8016c8e:	e7fe      	b.n	8016c8e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8016c94:	f000 faf2 	bl	801727c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8016c98:	683b      	ldr	r3, [r7, #0]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d003      	beq.n	8016ca6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8016c9e:	6a3b      	ldr	r3, [r7, #32]
 8016ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016ca6:	6a3b      	ldr	r3, [r7, #32]
 8016ca8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016cac:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016cae:	6a3b      	ldr	r3, [r7, #32]
 8016cb0:	2202      	movs	r2, #2
 8016cb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8016cb6:	79fb      	ldrb	r3, [r7, #7]
 8016cb8:	2b04      	cmp	r3, #4
 8016cba:	d828      	bhi.n	8016d0e <xTaskGenericNotify+0xb2>
 8016cbc:	a201      	add	r2, pc, #4	; (adr r2, 8016cc4 <xTaskGenericNotify+0x68>)
 8016cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cc2:	bf00      	nop
 8016cc4:	08016d33 	.word	0x08016d33
 8016cc8:	08016cd9 	.word	0x08016cd9
 8016ccc:	08016ce7 	.word	0x08016ce7
 8016cd0:	08016cf3 	.word	0x08016cf3
 8016cd4:	08016cfb 	.word	0x08016cfb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8016cd8:	6a3b      	ldr	r3, [r7, #32]
 8016cda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016cdc:	68bb      	ldr	r3, [r7, #8]
 8016cde:	431a      	orrs	r2, r3
 8016ce0:	6a3b      	ldr	r3, [r7, #32]
 8016ce2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016ce4:	e028      	b.n	8016d38 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8016ce6:	6a3b      	ldr	r3, [r7, #32]
 8016ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016cea:	1c5a      	adds	r2, r3, #1
 8016cec:	6a3b      	ldr	r3, [r7, #32]
 8016cee:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016cf0:	e022      	b.n	8016d38 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8016cf2:	6a3b      	ldr	r3, [r7, #32]
 8016cf4:	68ba      	ldr	r2, [r7, #8]
 8016cf6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016cf8:	e01e      	b.n	8016d38 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8016cfa:	7ffb      	ldrb	r3, [r7, #31]
 8016cfc:	2b02      	cmp	r3, #2
 8016cfe:	d003      	beq.n	8016d08 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8016d00:	6a3b      	ldr	r3, [r7, #32]
 8016d02:	68ba      	ldr	r2, [r7, #8]
 8016d04:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8016d06:	e017      	b.n	8016d38 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8016d0c:	e014      	b.n	8016d38 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8016d0e:	6a3b      	ldr	r3, [r7, #32]
 8016d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d16:	d00e      	beq.n	8016d36 <xTaskGenericNotify+0xda>
	__asm volatile
 8016d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d1c:	b672      	cpsid	i
 8016d1e:	f383 8811 	msr	BASEPRI, r3
 8016d22:	f3bf 8f6f 	isb	sy
 8016d26:	f3bf 8f4f 	dsb	sy
 8016d2a:	b662      	cpsie	i
 8016d2c:	617b      	str	r3, [r7, #20]
}
 8016d2e:	bf00      	nop
 8016d30:	e7fe      	b.n	8016d30 <xTaskGenericNotify+0xd4>
					break;
 8016d32:	bf00      	nop
 8016d34:	e000      	b.n	8016d38 <xTaskGenericNotify+0xdc>

					break;
 8016d36:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016d38:	7ffb      	ldrb	r3, [r7, #31]
 8016d3a:	2b01      	cmp	r3, #1
 8016d3c:	d13b      	bne.n	8016db6 <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d3e:	6a3b      	ldr	r3, [r7, #32]
 8016d40:	3304      	adds	r3, #4
 8016d42:	4618      	mov	r0, r3
 8016d44:	f7fe fab8 	bl	80152b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8016d48:	6a3b      	ldr	r3, [r7, #32]
 8016d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d4c:	2201      	movs	r2, #1
 8016d4e:	409a      	lsls	r2, r3
 8016d50:	4b1c      	ldr	r3, [pc, #112]	; (8016dc4 <xTaskGenericNotify+0x168>)
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	4313      	orrs	r3, r2
 8016d56:	4a1b      	ldr	r2, [pc, #108]	; (8016dc4 <xTaskGenericNotify+0x168>)
 8016d58:	6013      	str	r3, [r2, #0]
 8016d5a:	6a3b      	ldr	r3, [r7, #32]
 8016d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d5e:	4613      	mov	r3, r2
 8016d60:	009b      	lsls	r3, r3, #2
 8016d62:	4413      	add	r3, r2
 8016d64:	009b      	lsls	r3, r3, #2
 8016d66:	4a18      	ldr	r2, [pc, #96]	; (8016dc8 <xTaskGenericNotify+0x16c>)
 8016d68:	441a      	add	r2, r3
 8016d6a:	6a3b      	ldr	r3, [r7, #32]
 8016d6c:	3304      	adds	r3, #4
 8016d6e:	4619      	mov	r1, r3
 8016d70:	4610      	mov	r0, r2
 8016d72:	f7fe fa44 	bl	80151fe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016d76:	6a3b      	ldr	r3, [r7, #32]
 8016d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d00c      	beq.n	8016d98 <xTaskGenericNotify+0x13c>
	__asm volatile
 8016d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d82:	b672      	cpsid	i
 8016d84:	f383 8811 	msr	BASEPRI, r3
 8016d88:	f3bf 8f6f 	isb	sy
 8016d8c:	f3bf 8f4f 	dsb	sy
 8016d90:	b662      	cpsie	i
 8016d92:	613b      	str	r3, [r7, #16]
}
 8016d94:	bf00      	nop
 8016d96:	e7fe      	b.n	8016d96 <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016d98:	6a3b      	ldr	r3, [r7, #32]
 8016d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d9c:	4b0b      	ldr	r3, [pc, #44]	; (8016dcc <xTaskGenericNotify+0x170>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d907      	bls.n	8016db6 <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8016da6:	4b0a      	ldr	r3, [pc, #40]	; (8016dd0 <xTaskGenericNotify+0x174>)
 8016da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016dac:	601a      	str	r2, [r3, #0]
 8016dae:	f3bf 8f4f 	dsb	sy
 8016db2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8016db6:	f000 fa95 	bl	80172e4 <vPortExitCritical>

		return xReturn;
 8016dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	3728      	adds	r7, #40	; 0x28
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	20041a04 	.word	0x20041a04
 8016dc8:	20041900 	.word	0x20041900
 8016dcc:	200418fc 	.word	0x200418fc
 8016dd0:	e000ed04 	.word	0xe000ed04

08016dd4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b08e      	sub	sp, #56	; 0x38
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	60f8      	str	r0, [r7, #12]
 8016ddc:	60b9      	str	r1, [r7, #8]
 8016dde:	603b      	str	r3, [r7, #0]
 8016de0:	4613      	mov	r3, r2
 8016de2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8016de4:	2301      	movs	r3, #1
 8016de6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d10c      	bne.n	8016e08 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8016dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016df2:	b672      	cpsid	i
 8016df4:	f383 8811 	msr	BASEPRI, r3
 8016df8:	f3bf 8f6f 	isb	sy
 8016dfc:	f3bf 8f4f 	dsb	sy
 8016e00:	b662      	cpsie	i
 8016e02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016e04:	bf00      	nop
 8016e06:	e7fe      	b.n	8016e06 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e08:	f000 fb20 	bl	801744c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8016e10:	f3ef 8211 	mrs	r2, BASEPRI
 8016e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e18:	b672      	cpsid	i
 8016e1a:	f383 8811 	msr	BASEPRI, r3
 8016e1e:	f3bf 8f6f 	isb	sy
 8016e22:	f3bf 8f4f 	dsb	sy
 8016e26:	b662      	cpsie	i
 8016e28:	623a      	str	r2, [r7, #32]
 8016e2a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8016e2c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8016e30:	683b      	ldr	r3, [r7, #0]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d003      	beq.n	8016e3e <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8016e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e4a:	2202      	movs	r2, #2
 8016e4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8016e50:	79fb      	ldrb	r3, [r7, #7]
 8016e52:	2b04      	cmp	r3, #4
 8016e54:	d828      	bhi.n	8016ea8 <xTaskGenericNotifyFromISR+0xd4>
 8016e56:	a201      	add	r2, pc, #4	; (adr r2, 8016e5c <xTaskGenericNotifyFromISR+0x88>)
 8016e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e5c:	08016ecd 	.word	0x08016ecd
 8016e60:	08016e71 	.word	0x08016e71
 8016e64:	08016e7f 	.word	0x08016e7f
 8016e68:	08016e8b 	.word	0x08016e8b
 8016e6c:	08016e93 	.word	0x08016e93
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8016e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	431a      	orrs	r2, r3
 8016e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e7a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016e7c:	e029      	b.n	8016ed2 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8016e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e82:	1c5a      	adds	r2, r3, #1
 8016e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e86:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016e88:	e023      	b.n	8016ed2 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8016e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e8c:	68ba      	ldr	r2, [r7, #8]
 8016e8e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016e90:	e01f      	b.n	8016ed2 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8016e92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016e96:	2b02      	cmp	r3, #2
 8016e98:	d003      	beq.n	8016ea2 <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8016e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e9c:	68ba      	ldr	r2, [r7, #8]
 8016e9e:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8016ea0:	e017      	b.n	8016ed2 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8016ea6:	e014      	b.n	8016ed2 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8016ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eb0:	d00e      	beq.n	8016ed0 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8016eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb6:	b672      	cpsid	i
 8016eb8:	f383 8811 	msr	BASEPRI, r3
 8016ebc:	f3bf 8f6f 	isb	sy
 8016ec0:	f3bf 8f4f 	dsb	sy
 8016ec4:	b662      	cpsie	i
 8016ec6:	61bb      	str	r3, [r7, #24]
}
 8016ec8:	bf00      	nop
 8016eca:	e7fe      	b.n	8016eca <xTaskGenericNotifyFromISR+0xf6>
					break;
 8016ecc:	bf00      	nop
 8016ece:	e000      	b.n	8016ed2 <xTaskGenericNotifyFromISR+0xfe>
					break;
 8016ed0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016ed6:	2b01      	cmp	r3, #1
 8016ed8:	d147      	bne.n	8016f6a <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d00c      	beq.n	8016efc <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 8016ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ee6:	b672      	cpsid	i
 8016ee8:	f383 8811 	msr	BASEPRI, r3
 8016eec:	f3bf 8f6f 	isb	sy
 8016ef0:	f3bf 8f4f 	dsb	sy
 8016ef4:	b662      	cpsie	i
 8016ef6:	617b      	str	r3, [r7, #20]
}
 8016ef8:	bf00      	nop
 8016efa:	e7fe      	b.n	8016efa <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016efc:	4b20      	ldr	r3, [pc, #128]	; (8016f80 <xTaskGenericNotifyFromISR+0x1ac>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d11c      	bne.n	8016f3e <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f06:	3304      	adds	r3, #4
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7fe f9d5 	bl	80152b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f12:	2201      	movs	r2, #1
 8016f14:	409a      	lsls	r2, r3
 8016f16:	4b1b      	ldr	r3, [pc, #108]	; (8016f84 <xTaskGenericNotifyFromISR+0x1b0>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	4313      	orrs	r3, r2
 8016f1c:	4a19      	ldr	r2, [pc, #100]	; (8016f84 <xTaskGenericNotifyFromISR+0x1b0>)
 8016f1e:	6013      	str	r3, [r2, #0]
 8016f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f24:	4613      	mov	r3, r2
 8016f26:	009b      	lsls	r3, r3, #2
 8016f28:	4413      	add	r3, r2
 8016f2a:	009b      	lsls	r3, r3, #2
 8016f2c:	4a16      	ldr	r2, [pc, #88]	; (8016f88 <xTaskGenericNotifyFromISR+0x1b4>)
 8016f2e:	441a      	add	r2, r3
 8016f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f32:	3304      	adds	r3, #4
 8016f34:	4619      	mov	r1, r3
 8016f36:	4610      	mov	r0, r2
 8016f38:	f7fe f961 	bl	80151fe <vListInsertEnd>
 8016f3c:	e005      	b.n	8016f4a <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f40:	3318      	adds	r3, #24
 8016f42:	4619      	mov	r1, r3
 8016f44:	4811      	ldr	r0, [pc, #68]	; (8016f8c <xTaskGenericNotifyFromISR+0x1b8>)
 8016f46:	f7fe f95a 	bl	80151fe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f4e:	4b10      	ldr	r3, [pc, #64]	; (8016f90 <xTaskGenericNotifyFromISR+0x1bc>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d908      	bls.n	8016f6a <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8016f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d002      	beq.n	8016f64 <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8016f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f60:	2201      	movs	r2, #1
 8016f62:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8016f64:	4b0b      	ldr	r3, [pc, #44]	; (8016f94 <xTaskGenericNotifyFromISR+0x1c0>)
 8016f66:	2201      	movs	r2, #1
 8016f68:	601a      	str	r2, [r3, #0]
 8016f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016f6e:	693b      	ldr	r3, [r7, #16]
 8016f70:	f383 8811 	msr	BASEPRI, r3
}
 8016f74:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8016f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3738      	adds	r7, #56	; 0x38
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	20041a24 	.word	0x20041a24
 8016f84:	20041a04 	.word	0x20041a04
 8016f88:	20041900 	.word	0x20041900
 8016f8c:	200419bc 	.word	0x200419bc
 8016f90:	200418fc 	.word	0x200418fc
 8016f94:	20041a10 	.word	0x20041a10

08016f98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b084      	sub	sp, #16
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
 8016fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016fa2:	4b29      	ldr	r3, [pc, #164]	; (8017048 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016fa8:	4b28      	ldr	r3, [pc, #160]	; (801704c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	3304      	adds	r3, #4
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7fe f982 	bl	80152b8 <uxListRemove>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d10b      	bne.n	8016fd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016fba:	4b24      	ldr	r3, [pc, #144]	; (801704c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fc0:	2201      	movs	r2, #1
 8016fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8016fc6:	43da      	mvns	r2, r3
 8016fc8:	4b21      	ldr	r3, [pc, #132]	; (8017050 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	4013      	ands	r3, r2
 8016fce:	4a20      	ldr	r2, [pc, #128]	; (8017050 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016fd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fd8:	d10a      	bne.n	8016ff0 <prvAddCurrentTaskToDelayedList+0x58>
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d007      	beq.n	8016ff0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016fe0:	4b1a      	ldr	r3, [pc, #104]	; (801704c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	3304      	adds	r3, #4
 8016fe6:	4619      	mov	r1, r3
 8016fe8:	481a      	ldr	r0, [pc, #104]	; (8017054 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016fea:	f7fe f908 	bl	80151fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016fee:	e026      	b.n	801703e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016ff0:	68fa      	ldr	r2, [r7, #12]
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	4413      	add	r3, r2
 8016ff6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016ff8:	4b14      	ldr	r3, [pc, #80]	; (801704c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	68ba      	ldr	r2, [r7, #8]
 8016ffe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017000:	68ba      	ldr	r2, [r7, #8]
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	429a      	cmp	r2, r3
 8017006:	d209      	bcs.n	801701c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017008:	4b13      	ldr	r3, [pc, #76]	; (8017058 <prvAddCurrentTaskToDelayedList+0xc0>)
 801700a:	681a      	ldr	r2, [r3, #0]
 801700c:	4b0f      	ldr	r3, [pc, #60]	; (801704c <prvAddCurrentTaskToDelayedList+0xb4>)
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	3304      	adds	r3, #4
 8017012:	4619      	mov	r1, r3
 8017014:	4610      	mov	r0, r2
 8017016:	f7fe f916 	bl	8015246 <vListInsert>
}
 801701a:	e010      	b.n	801703e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801701c:	4b0f      	ldr	r3, [pc, #60]	; (801705c <prvAddCurrentTaskToDelayedList+0xc4>)
 801701e:	681a      	ldr	r2, [r3, #0]
 8017020:	4b0a      	ldr	r3, [pc, #40]	; (801704c <prvAddCurrentTaskToDelayedList+0xb4>)
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	3304      	adds	r3, #4
 8017026:	4619      	mov	r1, r3
 8017028:	4610      	mov	r0, r2
 801702a:	f7fe f90c 	bl	8015246 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801702e:	4b0c      	ldr	r3, [pc, #48]	; (8017060 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	68ba      	ldr	r2, [r7, #8]
 8017034:	429a      	cmp	r2, r3
 8017036:	d202      	bcs.n	801703e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017038:	4a09      	ldr	r2, [pc, #36]	; (8017060 <prvAddCurrentTaskToDelayedList+0xc8>)
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	6013      	str	r3, [r2, #0]
}
 801703e:	bf00      	nop
 8017040:	3710      	adds	r7, #16
 8017042:	46bd      	mov	sp, r7
 8017044:	bd80      	pop	{r7, pc}
 8017046:	bf00      	nop
 8017048:	20041a00 	.word	0x20041a00
 801704c:	200418fc 	.word	0x200418fc
 8017050:	20041a04 	.word	0x20041a04
 8017054:	200419e8 	.word	0x200419e8
 8017058:	200419b8 	.word	0x200419b8
 801705c:	200419b4 	.word	0x200419b4
 8017060:	20041a1c 	.word	0x20041a1c

08017064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017064:	b480      	push	{r7}
 8017066:	b085      	sub	sp, #20
 8017068:	af00      	add	r7, sp, #0
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	3b04      	subs	r3, #4
 8017074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801707c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	3b04      	subs	r3, #4
 8017082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	f023 0201 	bic.w	r2, r3, #1
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	3b04      	subs	r3, #4
 8017092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017094:	4a0c      	ldr	r2, [pc, #48]	; (80170c8 <pxPortInitialiseStack+0x64>)
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	3b14      	subs	r3, #20
 801709e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80170a0:	687a      	ldr	r2, [r7, #4]
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	3b04      	subs	r3, #4
 80170aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	f06f 0202 	mvn.w	r2, #2
 80170b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	3b20      	subs	r3, #32
 80170b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80170ba:	68fb      	ldr	r3, [r7, #12]
}
 80170bc:	4618      	mov	r0, r3
 80170be:	3714      	adds	r7, #20
 80170c0:	46bd      	mov	sp, r7
 80170c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c6:	4770      	bx	lr
 80170c8:	080170cd 	.word	0x080170cd

080170cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80170cc:	b480      	push	{r7}
 80170ce:	b085      	sub	sp, #20
 80170d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80170d2:	2300      	movs	r3, #0
 80170d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80170d6:	4b14      	ldr	r3, [pc, #80]	; (8017128 <prvTaskExitError+0x5c>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170de:	d00c      	beq.n	80170fa <prvTaskExitError+0x2e>
	__asm volatile
 80170e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170e4:	b672      	cpsid	i
 80170e6:	f383 8811 	msr	BASEPRI, r3
 80170ea:	f3bf 8f6f 	isb	sy
 80170ee:	f3bf 8f4f 	dsb	sy
 80170f2:	b662      	cpsie	i
 80170f4:	60fb      	str	r3, [r7, #12]
}
 80170f6:	bf00      	nop
 80170f8:	e7fe      	b.n	80170f8 <prvTaskExitError+0x2c>
	__asm volatile
 80170fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170fe:	b672      	cpsid	i
 8017100:	f383 8811 	msr	BASEPRI, r3
 8017104:	f3bf 8f6f 	isb	sy
 8017108:	f3bf 8f4f 	dsb	sy
 801710c:	b662      	cpsie	i
 801710e:	60bb      	str	r3, [r7, #8]
}
 8017110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017112:	bf00      	nop
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d0fc      	beq.n	8017114 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801711a:	bf00      	nop
 801711c:	bf00      	nop
 801711e:	3714      	adds	r7, #20
 8017120:	46bd      	mov	sp, r7
 8017122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017126:	4770      	bx	lr
 8017128:	2000004c 	.word	0x2000004c
 801712c:	00000000 	.word	0x00000000

08017130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017130:	4b07      	ldr	r3, [pc, #28]	; (8017150 <pxCurrentTCBConst2>)
 8017132:	6819      	ldr	r1, [r3, #0]
 8017134:	6808      	ldr	r0, [r1, #0]
 8017136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713a:	f380 8809 	msr	PSP, r0
 801713e:	f3bf 8f6f 	isb	sy
 8017142:	f04f 0000 	mov.w	r0, #0
 8017146:	f380 8811 	msr	BASEPRI, r0
 801714a:	4770      	bx	lr
 801714c:	f3af 8000 	nop.w

08017150 <pxCurrentTCBConst2>:
 8017150:	200418fc 	.word	0x200418fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017154:	bf00      	nop
 8017156:	bf00      	nop

08017158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017158:	4808      	ldr	r0, [pc, #32]	; (801717c <prvPortStartFirstTask+0x24>)
 801715a:	6800      	ldr	r0, [r0, #0]
 801715c:	6800      	ldr	r0, [r0, #0]
 801715e:	f380 8808 	msr	MSP, r0
 8017162:	f04f 0000 	mov.w	r0, #0
 8017166:	f380 8814 	msr	CONTROL, r0
 801716a:	b662      	cpsie	i
 801716c:	b661      	cpsie	f
 801716e:	f3bf 8f4f 	dsb	sy
 8017172:	f3bf 8f6f 	isb	sy
 8017176:	df00      	svc	0
 8017178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801717a:	bf00      	nop
 801717c:	e000ed08 	.word	0xe000ed08

08017180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b084      	sub	sp, #16
 8017184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017186:	4b37      	ldr	r3, [pc, #220]	; (8017264 <xPortStartScheduler+0xe4>)
 8017188:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	781b      	ldrb	r3, [r3, #0]
 801718e:	b2db      	uxtb	r3, r3
 8017190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	22ff      	movs	r2, #255	; 0xff
 8017196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	b2db      	uxtb	r3, r3
 801719e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80171a0:	78fb      	ldrb	r3, [r7, #3]
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80171a8:	b2da      	uxtb	r2, r3
 80171aa:	4b2f      	ldr	r3, [pc, #188]	; (8017268 <xPortStartScheduler+0xe8>)
 80171ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80171ae:	4b2f      	ldr	r3, [pc, #188]	; (801726c <xPortStartScheduler+0xec>)
 80171b0:	2207      	movs	r2, #7
 80171b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80171b4:	e009      	b.n	80171ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80171b6:	4b2d      	ldr	r3, [pc, #180]	; (801726c <xPortStartScheduler+0xec>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	3b01      	subs	r3, #1
 80171bc:	4a2b      	ldr	r2, [pc, #172]	; (801726c <xPortStartScheduler+0xec>)
 80171be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80171c0:	78fb      	ldrb	r3, [r7, #3]
 80171c2:	b2db      	uxtb	r3, r3
 80171c4:	005b      	lsls	r3, r3, #1
 80171c6:	b2db      	uxtb	r3, r3
 80171c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80171ca:	78fb      	ldrb	r3, [r7, #3]
 80171cc:	b2db      	uxtb	r3, r3
 80171ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80171d2:	2b80      	cmp	r3, #128	; 0x80
 80171d4:	d0ef      	beq.n	80171b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80171d6:	4b25      	ldr	r3, [pc, #148]	; (801726c <xPortStartScheduler+0xec>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	f1c3 0307 	rsb	r3, r3, #7
 80171de:	2b04      	cmp	r3, #4
 80171e0:	d00c      	beq.n	80171fc <xPortStartScheduler+0x7c>
	__asm volatile
 80171e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171e6:	b672      	cpsid	i
 80171e8:	f383 8811 	msr	BASEPRI, r3
 80171ec:	f3bf 8f6f 	isb	sy
 80171f0:	f3bf 8f4f 	dsb	sy
 80171f4:	b662      	cpsie	i
 80171f6:	60bb      	str	r3, [r7, #8]
}
 80171f8:	bf00      	nop
 80171fa:	e7fe      	b.n	80171fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80171fc:	4b1b      	ldr	r3, [pc, #108]	; (801726c <xPortStartScheduler+0xec>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	021b      	lsls	r3, r3, #8
 8017202:	4a1a      	ldr	r2, [pc, #104]	; (801726c <xPortStartScheduler+0xec>)
 8017204:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017206:	4b19      	ldr	r3, [pc, #100]	; (801726c <xPortStartScheduler+0xec>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801720e:	4a17      	ldr	r2, [pc, #92]	; (801726c <xPortStartScheduler+0xec>)
 8017210:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	b2da      	uxtb	r2, r3
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801721a:	4b15      	ldr	r3, [pc, #84]	; (8017270 <xPortStartScheduler+0xf0>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	4a14      	ldr	r2, [pc, #80]	; (8017270 <xPortStartScheduler+0xf0>)
 8017220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017224:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017226:	4b12      	ldr	r3, [pc, #72]	; (8017270 <xPortStartScheduler+0xf0>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	4a11      	ldr	r2, [pc, #68]	; (8017270 <xPortStartScheduler+0xf0>)
 801722c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017230:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017232:	f000 f8dd 	bl	80173f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017236:	4b0f      	ldr	r3, [pc, #60]	; (8017274 <xPortStartScheduler+0xf4>)
 8017238:	2200      	movs	r2, #0
 801723a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801723c:	f000 f8fc 	bl	8017438 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017240:	4b0d      	ldr	r3, [pc, #52]	; (8017278 <xPortStartScheduler+0xf8>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	4a0c      	ldr	r2, [pc, #48]	; (8017278 <xPortStartScheduler+0xf8>)
 8017246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801724a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801724c:	f7ff ff84 	bl	8017158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017250:	f7ff f994 	bl	801657c <vTaskSwitchContext>
	prvTaskExitError();
 8017254:	f7ff ff3a 	bl	80170cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017258:	2300      	movs	r3, #0
}
 801725a:	4618      	mov	r0, r3
 801725c:	3710      	adds	r7, #16
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}
 8017262:	bf00      	nop
 8017264:	e000e400 	.word	0xe000e400
 8017268:	20041a28 	.word	0x20041a28
 801726c:	20041a2c 	.word	0x20041a2c
 8017270:	e000ed20 	.word	0xe000ed20
 8017274:	2000004c 	.word	0x2000004c
 8017278:	e000ef34 	.word	0xe000ef34

0801727c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801727c:	b480      	push	{r7}
 801727e:	b083      	sub	sp, #12
 8017280:	af00      	add	r7, sp, #0
	__asm volatile
 8017282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017286:	b672      	cpsid	i
 8017288:	f383 8811 	msr	BASEPRI, r3
 801728c:	f3bf 8f6f 	isb	sy
 8017290:	f3bf 8f4f 	dsb	sy
 8017294:	b662      	cpsie	i
 8017296:	607b      	str	r3, [r7, #4]
}
 8017298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801729a:	4b10      	ldr	r3, [pc, #64]	; (80172dc <vPortEnterCritical+0x60>)
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	3301      	adds	r3, #1
 80172a0:	4a0e      	ldr	r2, [pc, #56]	; (80172dc <vPortEnterCritical+0x60>)
 80172a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80172a4:	4b0d      	ldr	r3, [pc, #52]	; (80172dc <vPortEnterCritical+0x60>)
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	2b01      	cmp	r3, #1
 80172aa:	d111      	bne.n	80172d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80172ac:	4b0c      	ldr	r3, [pc, #48]	; (80172e0 <vPortEnterCritical+0x64>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	b2db      	uxtb	r3, r3
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d00c      	beq.n	80172d0 <vPortEnterCritical+0x54>
	__asm volatile
 80172b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172ba:	b672      	cpsid	i
 80172bc:	f383 8811 	msr	BASEPRI, r3
 80172c0:	f3bf 8f6f 	isb	sy
 80172c4:	f3bf 8f4f 	dsb	sy
 80172c8:	b662      	cpsie	i
 80172ca:	603b      	str	r3, [r7, #0]
}
 80172cc:	bf00      	nop
 80172ce:	e7fe      	b.n	80172ce <vPortEnterCritical+0x52>
	}
}
 80172d0:	bf00      	nop
 80172d2:	370c      	adds	r7, #12
 80172d4:	46bd      	mov	sp, r7
 80172d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172da:	4770      	bx	lr
 80172dc:	2000004c 	.word	0x2000004c
 80172e0:	e000ed04 	.word	0xe000ed04

080172e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80172e4:	b480      	push	{r7}
 80172e6:	b083      	sub	sp, #12
 80172e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80172ea:	4b13      	ldr	r3, [pc, #76]	; (8017338 <vPortExitCritical+0x54>)
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d10c      	bne.n	801730c <vPortExitCritical+0x28>
	__asm volatile
 80172f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172f6:	b672      	cpsid	i
 80172f8:	f383 8811 	msr	BASEPRI, r3
 80172fc:	f3bf 8f6f 	isb	sy
 8017300:	f3bf 8f4f 	dsb	sy
 8017304:	b662      	cpsie	i
 8017306:	607b      	str	r3, [r7, #4]
}
 8017308:	bf00      	nop
 801730a:	e7fe      	b.n	801730a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801730c:	4b0a      	ldr	r3, [pc, #40]	; (8017338 <vPortExitCritical+0x54>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	3b01      	subs	r3, #1
 8017312:	4a09      	ldr	r2, [pc, #36]	; (8017338 <vPortExitCritical+0x54>)
 8017314:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017316:	4b08      	ldr	r3, [pc, #32]	; (8017338 <vPortExitCritical+0x54>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d105      	bne.n	801732a <vPortExitCritical+0x46>
 801731e:	2300      	movs	r3, #0
 8017320:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	f383 8811 	msr	BASEPRI, r3
}
 8017328:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801732a:	bf00      	nop
 801732c:	370c      	adds	r7, #12
 801732e:	46bd      	mov	sp, r7
 8017330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017334:	4770      	bx	lr
 8017336:	bf00      	nop
 8017338:	2000004c 	.word	0x2000004c
 801733c:	00000000 	.word	0x00000000

08017340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017340:	f3ef 8009 	mrs	r0, PSP
 8017344:	f3bf 8f6f 	isb	sy
 8017348:	4b15      	ldr	r3, [pc, #84]	; (80173a0 <pxCurrentTCBConst>)
 801734a:	681a      	ldr	r2, [r3, #0]
 801734c:	f01e 0f10 	tst.w	lr, #16
 8017350:	bf08      	it	eq
 8017352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801735a:	6010      	str	r0, [r2, #0]
 801735c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017364:	b672      	cpsid	i
 8017366:	f380 8811 	msr	BASEPRI, r0
 801736a:	f3bf 8f4f 	dsb	sy
 801736e:	f3bf 8f6f 	isb	sy
 8017372:	b662      	cpsie	i
 8017374:	f7ff f902 	bl	801657c <vTaskSwitchContext>
 8017378:	f04f 0000 	mov.w	r0, #0
 801737c:	f380 8811 	msr	BASEPRI, r0
 8017380:	bc09      	pop	{r0, r3}
 8017382:	6819      	ldr	r1, [r3, #0]
 8017384:	6808      	ldr	r0, [r1, #0]
 8017386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801738a:	f01e 0f10 	tst.w	lr, #16
 801738e:	bf08      	it	eq
 8017390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017394:	f380 8809 	msr	PSP, r0
 8017398:	f3bf 8f6f 	isb	sy
 801739c:	4770      	bx	lr
 801739e:	bf00      	nop

080173a0 <pxCurrentTCBConst>:
 80173a0:	200418fc 	.word	0x200418fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80173a4:	bf00      	nop
 80173a6:	bf00      	nop

080173a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b082      	sub	sp, #8
 80173ac:	af00      	add	r7, sp, #0
	__asm volatile
 80173ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173b2:	b672      	cpsid	i
 80173b4:	f383 8811 	msr	BASEPRI, r3
 80173b8:	f3bf 8f6f 	isb	sy
 80173bc:	f3bf 8f4f 	dsb	sy
 80173c0:	b662      	cpsie	i
 80173c2:	607b      	str	r3, [r7, #4]
}
 80173c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80173c6:	f7ff f81f 	bl	8016408 <xTaskIncrementTick>
 80173ca:	4603      	mov	r3, r0
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d003      	beq.n	80173d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80173d0:	4b06      	ldr	r3, [pc, #24]	; (80173ec <SysTick_Handler+0x44>)
 80173d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173d6:	601a      	str	r2, [r3, #0]
 80173d8:	2300      	movs	r3, #0
 80173da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80173dc:	683b      	ldr	r3, [r7, #0]
 80173de:	f383 8811 	msr	BASEPRI, r3
}
 80173e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80173e4:	bf00      	nop
 80173e6:	3708      	adds	r7, #8
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}
 80173ec:	e000ed04 	.word	0xe000ed04

080173f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80173f0:	b480      	push	{r7}
 80173f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80173f4:	4b0b      	ldr	r3, [pc, #44]	; (8017424 <vPortSetupTimerInterrupt+0x34>)
 80173f6:	2200      	movs	r2, #0
 80173f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80173fa:	4b0b      	ldr	r3, [pc, #44]	; (8017428 <vPortSetupTimerInterrupt+0x38>)
 80173fc:	2200      	movs	r2, #0
 80173fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017400:	4b0a      	ldr	r3, [pc, #40]	; (801742c <vPortSetupTimerInterrupt+0x3c>)
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	4a0a      	ldr	r2, [pc, #40]	; (8017430 <vPortSetupTimerInterrupt+0x40>)
 8017406:	fba2 2303 	umull	r2, r3, r2, r3
 801740a:	099b      	lsrs	r3, r3, #6
 801740c:	4a09      	ldr	r2, [pc, #36]	; (8017434 <vPortSetupTimerInterrupt+0x44>)
 801740e:	3b01      	subs	r3, #1
 8017410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017412:	4b04      	ldr	r3, [pc, #16]	; (8017424 <vPortSetupTimerInterrupt+0x34>)
 8017414:	2207      	movs	r2, #7
 8017416:	601a      	str	r2, [r3, #0]
}
 8017418:	bf00      	nop
 801741a:	46bd      	mov	sp, r7
 801741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017420:	4770      	bx	lr
 8017422:	bf00      	nop
 8017424:	e000e010 	.word	0xe000e010
 8017428:	e000e018 	.word	0xe000e018
 801742c:	20000008 	.word	0x20000008
 8017430:	10624dd3 	.word	0x10624dd3
 8017434:	e000e014 	.word	0xe000e014

08017438 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017438:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017448 <vPortEnableVFP+0x10>
 801743c:	6801      	ldr	r1, [r0, #0]
 801743e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017442:	6001      	str	r1, [r0, #0]
 8017444:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017446:	bf00      	nop
 8017448:	e000ed88 	.word	0xe000ed88

0801744c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801744c:	b480      	push	{r7}
 801744e:	b085      	sub	sp, #20
 8017450:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017452:	f3ef 8305 	mrs	r3, IPSR
 8017456:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	2b0f      	cmp	r3, #15
 801745c:	d916      	bls.n	801748c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801745e:	4a19      	ldr	r2, [pc, #100]	; (80174c4 <vPortValidateInterruptPriority+0x78>)
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	4413      	add	r3, r2
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017468:	4b17      	ldr	r3, [pc, #92]	; (80174c8 <vPortValidateInterruptPriority+0x7c>)
 801746a:	781b      	ldrb	r3, [r3, #0]
 801746c:	7afa      	ldrb	r2, [r7, #11]
 801746e:	429a      	cmp	r2, r3
 8017470:	d20c      	bcs.n	801748c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8017472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017476:	b672      	cpsid	i
 8017478:	f383 8811 	msr	BASEPRI, r3
 801747c:	f3bf 8f6f 	isb	sy
 8017480:	f3bf 8f4f 	dsb	sy
 8017484:	b662      	cpsie	i
 8017486:	607b      	str	r3, [r7, #4]
}
 8017488:	bf00      	nop
 801748a:	e7fe      	b.n	801748a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801748c:	4b0f      	ldr	r3, [pc, #60]	; (80174cc <vPortValidateInterruptPriority+0x80>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017494:	4b0e      	ldr	r3, [pc, #56]	; (80174d0 <vPortValidateInterruptPriority+0x84>)
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	429a      	cmp	r2, r3
 801749a:	d90c      	bls.n	80174b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174a0:	b672      	cpsid	i
 80174a2:	f383 8811 	msr	BASEPRI, r3
 80174a6:	f3bf 8f6f 	isb	sy
 80174aa:	f3bf 8f4f 	dsb	sy
 80174ae:	b662      	cpsie	i
 80174b0:	603b      	str	r3, [r7, #0]
}
 80174b2:	bf00      	nop
 80174b4:	e7fe      	b.n	80174b4 <vPortValidateInterruptPriority+0x68>
	}
 80174b6:	bf00      	nop
 80174b8:	3714      	adds	r7, #20
 80174ba:	46bd      	mov	sp, r7
 80174bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c0:	4770      	bx	lr
 80174c2:	bf00      	nop
 80174c4:	e000e3f0 	.word	0xe000e3f0
 80174c8:	20041a28 	.word	0x20041a28
 80174cc:	e000ed0c 	.word	0xe000ed0c
 80174d0:	20041a2c 	.word	0x20041a2c

080174d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b08a      	sub	sp, #40	; 0x28
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80174dc:	2300      	movs	r3, #0
 80174de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80174e0:	f7fe fec4 	bl	801626c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80174e4:	4b5e      	ldr	r3, [pc, #376]	; (8017660 <pvPortMalloc+0x18c>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d101      	bne.n	80174f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80174ec:	f000 f920 	bl	8017730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80174f0:	4b5c      	ldr	r3, [pc, #368]	; (8017664 <pvPortMalloc+0x190>)
 80174f2:	681a      	ldr	r2, [r3, #0]
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	4013      	ands	r3, r2
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	f040 8092 	bne.w	8017622 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d01f      	beq.n	8017544 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8017504:	2208      	movs	r2, #8
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	4413      	add	r3, r2
 801750a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f003 0307 	and.w	r3, r3, #7
 8017512:	2b00      	cmp	r3, #0
 8017514:	d016      	beq.n	8017544 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	f023 0307 	bic.w	r3, r3, #7
 801751c:	3308      	adds	r3, #8
 801751e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f003 0307 	and.w	r3, r3, #7
 8017526:	2b00      	cmp	r3, #0
 8017528:	d00c      	beq.n	8017544 <pvPortMalloc+0x70>
	__asm volatile
 801752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801752e:	b672      	cpsid	i
 8017530:	f383 8811 	msr	BASEPRI, r3
 8017534:	f3bf 8f6f 	isb	sy
 8017538:	f3bf 8f4f 	dsb	sy
 801753c:	b662      	cpsie	i
 801753e:	617b      	str	r3, [r7, #20]
}
 8017540:	bf00      	nop
 8017542:	e7fe      	b.n	8017542 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d06b      	beq.n	8017622 <pvPortMalloc+0x14e>
 801754a:	4b47      	ldr	r3, [pc, #284]	; (8017668 <pvPortMalloc+0x194>)
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	687a      	ldr	r2, [r7, #4]
 8017550:	429a      	cmp	r2, r3
 8017552:	d866      	bhi.n	8017622 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017554:	4b45      	ldr	r3, [pc, #276]	; (801766c <pvPortMalloc+0x198>)
 8017556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017558:	4b44      	ldr	r3, [pc, #272]	; (801766c <pvPortMalloc+0x198>)
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801755e:	e004      	b.n	801756a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8017560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801756c:	685b      	ldr	r3, [r3, #4]
 801756e:	687a      	ldr	r2, [r7, #4]
 8017570:	429a      	cmp	r2, r3
 8017572:	d903      	bls.n	801757c <pvPortMalloc+0xa8>
 8017574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d1f1      	bne.n	8017560 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801757c:	4b38      	ldr	r3, [pc, #224]	; (8017660 <pvPortMalloc+0x18c>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017582:	429a      	cmp	r2, r3
 8017584:	d04d      	beq.n	8017622 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017586:	6a3b      	ldr	r3, [r7, #32]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	2208      	movs	r2, #8
 801758c:	4413      	add	r3, r2
 801758e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017592:	681a      	ldr	r2, [r3, #0]
 8017594:	6a3b      	ldr	r3, [r7, #32]
 8017596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801759a:	685a      	ldr	r2, [r3, #4]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	1ad2      	subs	r2, r2, r3
 80175a0:	2308      	movs	r3, #8
 80175a2:	005b      	lsls	r3, r3, #1
 80175a4:	429a      	cmp	r2, r3
 80175a6:	d921      	bls.n	80175ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80175a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	4413      	add	r3, r2
 80175ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80175b0:	69bb      	ldr	r3, [r7, #24]
 80175b2:	f003 0307 	and.w	r3, r3, #7
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d00c      	beq.n	80175d4 <pvPortMalloc+0x100>
	__asm volatile
 80175ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175be:	b672      	cpsid	i
 80175c0:	f383 8811 	msr	BASEPRI, r3
 80175c4:	f3bf 8f6f 	isb	sy
 80175c8:	f3bf 8f4f 	dsb	sy
 80175cc:	b662      	cpsie	i
 80175ce:	613b      	str	r3, [r7, #16]
}
 80175d0:	bf00      	nop
 80175d2:	e7fe      	b.n	80175d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80175d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d6:	685a      	ldr	r2, [r3, #4]
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	1ad2      	subs	r2, r2, r3
 80175dc:	69bb      	ldr	r3, [r7, #24]
 80175de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80175e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e2:	687a      	ldr	r2, [r7, #4]
 80175e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80175e6:	69b8      	ldr	r0, [r7, #24]
 80175e8:	f000 f904 	bl	80177f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80175ec:	4b1e      	ldr	r3, [pc, #120]	; (8017668 <pvPortMalloc+0x194>)
 80175ee:	681a      	ldr	r2, [r3, #0]
 80175f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f2:	685b      	ldr	r3, [r3, #4]
 80175f4:	1ad3      	subs	r3, r2, r3
 80175f6:	4a1c      	ldr	r2, [pc, #112]	; (8017668 <pvPortMalloc+0x194>)
 80175f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80175fa:	4b1b      	ldr	r3, [pc, #108]	; (8017668 <pvPortMalloc+0x194>)
 80175fc:	681a      	ldr	r2, [r3, #0]
 80175fe:	4b1c      	ldr	r3, [pc, #112]	; (8017670 <pvPortMalloc+0x19c>)
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	429a      	cmp	r2, r3
 8017604:	d203      	bcs.n	801760e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017606:	4b18      	ldr	r3, [pc, #96]	; (8017668 <pvPortMalloc+0x194>)
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	4a19      	ldr	r2, [pc, #100]	; (8017670 <pvPortMalloc+0x19c>)
 801760c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017610:	685a      	ldr	r2, [r3, #4]
 8017612:	4b14      	ldr	r3, [pc, #80]	; (8017664 <pvPortMalloc+0x190>)
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	431a      	orrs	r2, r3
 8017618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761e:	2200      	movs	r2, #0
 8017620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017622:	f7fe fe31 	bl	8016288 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8017626:	69fb      	ldr	r3, [r7, #28]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d101      	bne.n	8017630 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801762c:	f7e9 fdcc 	bl	80011c8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	f003 0307 	and.w	r3, r3, #7
 8017636:	2b00      	cmp	r3, #0
 8017638:	d00c      	beq.n	8017654 <pvPortMalloc+0x180>
	__asm volatile
 801763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801763e:	b672      	cpsid	i
 8017640:	f383 8811 	msr	BASEPRI, r3
 8017644:	f3bf 8f6f 	isb	sy
 8017648:	f3bf 8f4f 	dsb	sy
 801764c:	b662      	cpsie	i
 801764e:	60fb      	str	r3, [r7, #12]
}
 8017650:	bf00      	nop
 8017652:	e7fe      	b.n	8017652 <pvPortMalloc+0x17e>
	return pvReturn;
 8017654:	69fb      	ldr	r3, [r7, #28]
}
 8017656:	4618      	mov	r0, r3
 8017658:	3728      	adds	r7, #40	; 0x28
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
 801765e:	bf00      	nop
 8017660:	20049a38 	.word	0x20049a38
 8017664:	20049a44 	.word	0x20049a44
 8017668:	20049a3c 	.word	0x20049a3c
 801766c:	20049a30 	.word	0x20049a30
 8017670:	20049a40 	.word	0x20049a40

08017674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b086      	sub	sp, #24
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d04c      	beq.n	8017720 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017686:	2308      	movs	r3, #8
 8017688:	425b      	negs	r3, r3
 801768a:	697a      	ldr	r2, [r7, #20]
 801768c:	4413      	add	r3, r2
 801768e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017694:	693b      	ldr	r3, [r7, #16]
 8017696:	685a      	ldr	r2, [r3, #4]
 8017698:	4b23      	ldr	r3, [pc, #140]	; (8017728 <vPortFree+0xb4>)
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	4013      	ands	r3, r2
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d10c      	bne.n	80176bc <vPortFree+0x48>
	__asm volatile
 80176a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a6:	b672      	cpsid	i
 80176a8:	f383 8811 	msr	BASEPRI, r3
 80176ac:	f3bf 8f6f 	isb	sy
 80176b0:	f3bf 8f4f 	dsb	sy
 80176b4:	b662      	cpsie	i
 80176b6:	60fb      	str	r3, [r7, #12]
}
 80176b8:	bf00      	nop
 80176ba:	e7fe      	b.n	80176ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80176bc:	693b      	ldr	r3, [r7, #16]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d00c      	beq.n	80176de <vPortFree+0x6a>
	__asm volatile
 80176c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c8:	b672      	cpsid	i
 80176ca:	f383 8811 	msr	BASEPRI, r3
 80176ce:	f3bf 8f6f 	isb	sy
 80176d2:	f3bf 8f4f 	dsb	sy
 80176d6:	b662      	cpsie	i
 80176d8:	60bb      	str	r3, [r7, #8]
}
 80176da:	bf00      	nop
 80176dc:	e7fe      	b.n	80176dc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80176de:	693b      	ldr	r3, [r7, #16]
 80176e0:	685a      	ldr	r2, [r3, #4]
 80176e2:	4b11      	ldr	r3, [pc, #68]	; (8017728 <vPortFree+0xb4>)
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	4013      	ands	r3, r2
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d019      	beq.n	8017720 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80176ec:	693b      	ldr	r3, [r7, #16]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d115      	bne.n	8017720 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80176f4:	693b      	ldr	r3, [r7, #16]
 80176f6:	685a      	ldr	r2, [r3, #4]
 80176f8:	4b0b      	ldr	r3, [pc, #44]	; (8017728 <vPortFree+0xb4>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	43db      	mvns	r3, r3
 80176fe:	401a      	ands	r2, r3
 8017700:	693b      	ldr	r3, [r7, #16]
 8017702:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017704:	f7fe fdb2 	bl	801626c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017708:	693b      	ldr	r3, [r7, #16]
 801770a:	685a      	ldr	r2, [r3, #4]
 801770c:	4b07      	ldr	r3, [pc, #28]	; (801772c <vPortFree+0xb8>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4413      	add	r3, r2
 8017712:	4a06      	ldr	r2, [pc, #24]	; (801772c <vPortFree+0xb8>)
 8017714:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017716:	6938      	ldr	r0, [r7, #16]
 8017718:	f000 f86c 	bl	80177f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801771c:	f7fe fdb4 	bl	8016288 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017720:	bf00      	nop
 8017722:	3718      	adds	r7, #24
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	20049a44 	.word	0x20049a44
 801772c:	20049a3c 	.word	0x20049a3c

08017730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017730:	b480      	push	{r7}
 8017732:	b085      	sub	sp, #20
 8017734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801773a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801773c:	4b27      	ldr	r3, [pc, #156]	; (80177dc <prvHeapInit+0xac>)
 801773e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	f003 0307 	and.w	r3, r3, #7
 8017746:	2b00      	cmp	r3, #0
 8017748:	d00c      	beq.n	8017764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	3307      	adds	r3, #7
 801774e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	f023 0307 	bic.w	r3, r3, #7
 8017756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017758:	68ba      	ldr	r2, [r7, #8]
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	1ad3      	subs	r3, r2, r3
 801775e:	4a1f      	ldr	r2, [pc, #124]	; (80177dc <prvHeapInit+0xac>)
 8017760:	4413      	add	r3, r2
 8017762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017768:	4a1d      	ldr	r2, [pc, #116]	; (80177e0 <prvHeapInit+0xb0>)
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801776e:	4b1c      	ldr	r3, [pc, #112]	; (80177e0 <prvHeapInit+0xb0>)
 8017770:	2200      	movs	r2, #0
 8017772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	68ba      	ldr	r2, [r7, #8]
 8017778:	4413      	add	r3, r2
 801777a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801777c:	2208      	movs	r2, #8
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	1a9b      	subs	r3, r3, r2
 8017782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	f023 0307 	bic.w	r3, r3, #7
 801778a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	4a15      	ldr	r2, [pc, #84]	; (80177e4 <prvHeapInit+0xb4>)
 8017790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017792:	4b14      	ldr	r3, [pc, #80]	; (80177e4 <prvHeapInit+0xb4>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	2200      	movs	r2, #0
 8017798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801779a:	4b12      	ldr	r3, [pc, #72]	; (80177e4 <prvHeapInit+0xb4>)
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	2200      	movs	r2, #0
 80177a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80177a6:	683b      	ldr	r3, [r7, #0]
 80177a8:	68fa      	ldr	r2, [r7, #12]
 80177aa:	1ad2      	subs	r2, r2, r3
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80177b0:	4b0c      	ldr	r3, [pc, #48]	; (80177e4 <prvHeapInit+0xb4>)
 80177b2:	681a      	ldr	r2, [r3, #0]
 80177b4:	683b      	ldr	r3, [r7, #0]
 80177b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80177b8:	683b      	ldr	r3, [r7, #0]
 80177ba:	685b      	ldr	r3, [r3, #4]
 80177bc:	4a0a      	ldr	r2, [pc, #40]	; (80177e8 <prvHeapInit+0xb8>)
 80177be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80177c0:	683b      	ldr	r3, [r7, #0]
 80177c2:	685b      	ldr	r3, [r3, #4]
 80177c4:	4a09      	ldr	r2, [pc, #36]	; (80177ec <prvHeapInit+0xbc>)
 80177c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80177c8:	4b09      	ldr	r3, [pc, #36]	; (80177f0 <prvHeapInit+0xc0>)
 80177ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80177ce:	601a      	str	r2, [r3, #0]
}
 80177d0:	bf00      	nop
 80177d2:	3714      	adds	r7, #20
 80177d4:	46bd      	mov	sp, r7
 80177d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177da:	4770      	bx	lr
 80177dc:	20041a30 	.word	0x20041a30
 80177e0:	20049a30 	.word	0x20049a30
 80177e4:	20049a38 	.word	0x20049a38
 80177e8:	20049a40 	.word	0x20049a40
 80177ec:	20049a3c 	.word	0x20049a3c
 80177f0:	20049a44 	.word	0x20049a44

080177f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80177f4:	b480      	push	{r7}
 80177f6:	b085      	sub	sp, #20
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80177fc:	4b28      	ldr	r3, [pc, #160]	; (80178a0 <prvInsertBlockIntoFreeList+0xac>)
 80177fe:	60fb      	str	r3, [r7, #12]
 8017800:	e002      	b.n	8017808 <prvInsertBlockIntoFreeList+0x14>
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	60fb      	str	r3, [r7, #12]
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	687a      	ldr	r2, [r7, #4]
 801780e:	429a      	cmp	r2, r3
 8017810:	d8f7      	bhi.n	8017802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	685b      	ldr	r3, [r3, #4]
 801781a:	68ba      	ldr	r2, [r7, #8]
 801781c:	4413      	add	r3, r2
 801781e:	687a      	ldr	r2, [r7, #4]
 8017820:	429a      	cmp	r2, r3
 8017822:	d108      	bne.n	8017836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	685a      	ldr	r2, [r3, #4]
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	685b      	ldr	r3, [r3, #4]
 801782c:	441a      	add	r2, r3
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	685b      	ldr	r3, [r3, #4]
 801783e:	68ba      	ldr	r2, [r7, #8]
 8017840:	441a      	add	r2, r3
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	429a      	cmp	r2, r3
 8017848:	d118      	bne.n	801787c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	681a      	ldr	r2, [r3, #0]
 801784e:	4b15      	ldr	r3, [pc, #84]	; (80178a4 <prvInsertBlockIntoFreeList+0xb0>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	429a      	cmp	r2, r3
 8017854:	d00d      	beq.n	8017872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	685a      	ldr	r2, [r3, #4]
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	685b      	ldr	r3, [r3, #4]
 8017860:	441a      	add	r2, r3
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	681a      	ldr	r2, [r3, #0]
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	601a      	str	r2, [r3, #0]
 8017870:	e008      	b.n	8017884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017872:	4b0c      	ldr	r3, [pc, #48]	; (80178a4 <prvInsertBlockIntoFreeList+0xb0>)
 8017874:	681a      	ldr	r2, [r3, #0]
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	601a      	str	r2, [r3, #0]
 801787a:	e003      	b.n	8017884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	681a      	ldr	r2, [r3, #0]
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017884:	68fa      	ldr	r2, [r7, #12]
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	429a      	cmp	r2, r3
 801788a:	d002      	beq.n	8017892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	687a      	ldr	r2, [r7, #4]
 8017890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017892:	bf00      	nop
 8017894:	3714      	adds	r7, #20
 8017896:	46bd      	mov	sp, r7
 8017898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789c:	4770      	bx	lr
 801789e:	bf00      	nop
 80178a0:	20049a30 	.word	0x20049a30
 80178a4:	20049a38 	.word	0x20049a38

080178a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80178ac:	2201      	movs	r2, #1
 80178ae:	490e      	ldr	r1, [pc, #56]	; (80178e8 <MX_USB_HOST_Init+0x40>)
 80178b0:	480e      	ldr	r0, [pc, #56]	; (80178ec <MX_USB_HOST_Init+0x44>)
 80178b2:	f7fb fc7b 	bl	80131ac <USBH_Init>
 80178b6:	4603      	mov	r3, r0
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d001      	beq.n	80178c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80178bc:	f7eb f8cc 	bl	8002a58 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80178c0:	490b      	ldr	r1, [pc, #44]	; (80178f0 <MX_USB_HOST_Init+0x48>)
 80178c2:	480a      	ldr	r0, [pc, #40]	; (80178ec <MX_USB_HOST_Init+0x44>)
 80178c4:	f7fb fd28 	bl	8013318 <USBH_RegisterClass>
 80178c8:	4603      	mov	r3, r0
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d001      	beq.n	80178d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80178ce:	f7eb f8c3 	bl	8002a58 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80178d2:	4806      	ldr	r0, [pc, #24]	; (80178ec <MX_USB_HOST_Init+0x44>)
 80178d4:	f7fb fdac 	bl	8013430 <USBH_Start>
 80178d8:	4603      	mov	r3, r0
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d001      	beq.n	80178e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80178de:	f7eb f8bb 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80178e2:	bf00      	nop
 80178e4:	bd80      	pop	{r7, pc}
 80178e6:	bf00      	nop
 80178e8:	080178f5 	.word	0x080178f5
 80178ec:	20049a48 	.word	0x20049a48
 80178f0:	2000002c 	.word	0x2000002c

080178f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80178f4:	b480      	push	{r7}
 80178f6:	b083      	sub	sp, #12
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	460b      	mov	r3, r1
 80178fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017900:	78fb      	ldrb	r3, [r7, #3]
 8017902:	3b01      	subs	r3, #1
 8017904:	2b04      	cmp	r3, #4
 8017906:	d819      	bhi.n	801793c <USBH_UserProcess+0x48>
 8017908:	a201      	add	r2, pc, #4	; (adr r2, 8017910 <USBH_UserProcess+0x1c>)
 801790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801790e:	bf00      	nop
 8017910:	0801793d 	.word	0x0801793d
 8017914:	0801792d 	.word	0x0801792d
 8017918:	0801793d 	.word	0x0801793d
 801791c:	08017935 	.word	0x08017935
 8017920:	08017925 	.word	0x08017925
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017924:	4b09      	ldr	r3, [pc, #36]	; (801794c <USBH_UserProcess+0x58>)
 8017926:	2203      	movs	r2, #3
 8017928:	701a      	strb	r2, [r3, #0]
  break;
 801792a:	e008      	b.n	801793e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801792c:	4b07      	ldr	r3, [pc, #28]	; (801794c <USBH_UserProcess+0x58>)
 801792e:	2202      	movs	r2, #2
 8017930:	701a      	strb	r2, [r3, #0]
  break;
 8017932:	e004      	b.n	801793e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017934:	4b05      	ldr	r3, [pc, #20]	; (801794c <USBH_UserProcess+0x58>)
 8017936:	2201      	movs	r2, #1
 8017938:	701a      	strb	r2, [r3, #0]
  break;
 801793a:	e000      	b.n	801793e <USBH_UserProcess+0x4a>

  default:
  break;
 801793c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801793e:	bf00      	nop
 8017940:	370c      	adds	r7, #12
 8017942:	46bd      	mov	sp, r7
 8017944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017948:	4770      	bx	lr
 801794a:	bf00      	nop
 801794c:	20049e2c 	.word	0x20049e2c

08017950 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b08a      	sub	sp, #40	; 0x28
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017958:	f107 0314 	add.w	r3, r7, #20
 801795c:	2200      	movs	r2, #0
 801795e:	601a      	str	r2, [r3, #0]
 8017960:	605a      	str	r2, [r3, #4]
 8017962:	609a      	str	r2, [r3, #8]
 8017964:	60da      	str	r2, [r3, #12]
 8017966:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017970:	d13c      	bne.n	80179ec <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017972:	4b20      	ldr	r3, [pc, #128]	; (80179f4 <HAL_HCD_MspInit+0xa4>)
 8017974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017976:	4a1f      	ldr	r2, [pc, #124]	; (80179f4 <HAL_HCD_MspInit+0xa4>)
 8017978:	f043 0301 	orr.w	r3, r3, #1
 801797c:	6313      	str	r3, [r2, #48]	; 0x30
 801797e:	4b1d      	ldr	r3, [pc, #116]	; (80179f4 <HAL_HCD_MspInit+0xa4>)
 8017980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017982:	f003 0301 	and.w	r3, r3, #1
 8017986:	613b      	str	r3, [r7, #16]
 8017988:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801798a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801798e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017990:	2302      	movs	r3, #2
 8017992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017994:	2300      	movs	r3, #0
 8017996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017998:	2303      	movs	r3, #3
 801799a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801799c:	230a      	movs	r3, #10
 801799e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80179a0:	f107 0314 	add.w	r3, r7, #20
 80179a4:	4619      	mov	r1, r3
 80179a6:	4814      	ldr	r0, [pc, #80]	; (80179f8 <HAL_HCD_MspInit+0xa8>)
 80179a8:	f7ef fe12 	bl	80075d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80179ac:	4b11      	ldr	r3, [pc, #68]	; (80179f4 <HAL_HCD_MspInit+0xa4>)
 80179ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179b0:	4a10      	ldr	r2, [pc, #64]	; (80179f4 <HAL_HCD_MspInit+0xa4>)
 80179b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179b6:	6353      	str	r3, [r2, #52]	; 0x34
 80179b8:	4b0e      	ldr	r3, [pc, #56]	; (80179f4 <HAL_HCD_MspInit+0xa4>)
 80179ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80179c0:	60fb      	str	r3, [r7, #12]
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	4b0b      	ldr	r3, [pc, #44]	; (80179f4 <HAL_HCD_MspInit+0xa4>)
 80179c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179c8:	4a0a      	ldr	r2, [pc, #40]	; (80179f4 <HAL_HCD_MspInit+0xa4>)
 80179ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80179ce:	6453      	str	r3, [r2, #68]	; 0x44
 80179d0:	4b08      	ldr	r3, [pc, #32]	; (80179f4 <HAL_HCD_MspInit+0xa4>)
 80179d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80179d8:	60bb      	str	r3, [r7, #8]
 80179da:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80179dc:	2200      	movs	r2, #0
 80179de:	2105      	movs	r1, #5
 80179e0:	2043      	movs	r0, #67	; 0x43
 80179e2:	f7ee fbd7 	bl	8006194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80179e6:	2043      	movs	r0, #67	; 0x43
 80179e8:	f7ee fbf0 	bl	80061cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80179ec:	bf00      	nop
 80179ee:	3728      	adds	r7, #40	; 0x28
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}
 80179f4:	40023800 	.word	0x40023800
 80179f8:	40020000 	.word	0x40020000

080179fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b082      	sub	sp, #8
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f7fc f9bd 	bl	8013d8a <USBH_LL_IncTimer>
}
 8017a10:	bf00      	nop
 8017a12:	3708      	adds	r7, #8
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}

08017a18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b082      	sub	sp, #8
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017a26:	4618      	mov	r0, r3
 8017a28:	f7fc fa01 	bl	8013e2e <USBH_LL_Connect>
}
 8017a2c:	bf00      	nop
 8017a2e:	3708      	adds	r7, #8
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}

08017a34 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b082      	sub	sp, #8
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7fc fa16 	bl	8013e74 <USBH_LL_Disconnect>
}
 8017a48:	bf00      	nop
 8017a4a:	3708      	adds	r7, #8
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}

08017a50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
 8017a58:	460b      	mov	r3, r1
 8017a5a:	70fb      	strb	r3, [r7, #3]
 8017a5c:	4613      	mov	r3, r2
 8017a5e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017a66:	4618      	mov	r0, r3
 8017a68:	f7fc fa4b 	bl	8013f02 <USBH_LL_NotifyURBChange>
#endif
}
 8017a6c:	bf00      	nop
 8017a6e:	3708      	adds	r7, #8
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}

08017a74 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017a82:	4618      	mov	r0, r3
 8017a84:	f7fc f9ab 	bl	8013dde <USBH_LL_PortEnabled>
}
 8017a88:	bf00      	nop
 8017a8a:	3708      	adds	r7, #8
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}

08017a90 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f7fc f9b7 	bl	8013e12 <USBH_LL_PortDisabled>
}
 8017aa4:	bf00      	nop
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8017aba:	2b01      	cmp	r3, #1
 8017abc:	d12a      	bne.n	8017b14 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8017abe:	4a18      	ldr	r2, [pc, #96]	; (8017b20 <USBH_LL_Init+0x74>)
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	4a15      	ldr	r2, [pc, #84]	; (8017b20 <USBH_LL_Init+0x74>)
 8017aca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017ace:	4b14      	ldr	r3, [pc, #80]	; (8017b20 <USBH_LL_Init+0x74>)
 8017ad0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017ad4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8017ad6:	4b12      	ldr	r3, [pc, #72]	; (8017b20 <USBH_LL_Init+0x74>)
 8017ad8:	2208      	movs	r2, #8
 8017ada:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8017adc:	4b10      	ldr	r3, [pc, #64]	; (8017b20 <USBH_LL_Init+0x74>)
 8017ade:	2201      	movs	r2, #1
 8017ae0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017ae2:	4b0f      	ldr	r3, [pc, #60]	; (8017b20 <USBH_LL_Init+0x74>)
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8017ae8:	4b0d      	ldr	r3, [pc, #52]	; (8017b20 <USBH_LL_Init+0x74>)
 8017aea:	2202      	movs	r2, #2
 8017aec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017aee:	4b0c      	ldr	r3, [pc, #48]	; (8017b20 <USBH_LL_Init+0x74>)
 8017af0:	2200      	movs	r2, #0
 8017af2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017af4:	480a      	ldr	r0, [pc, #40]	; (8017b20 <USBH_LL_Init+0x74>)
 8017af6:	f7f0 f892 	bl	8007c1e <HAL_HCD_Init>
 8017afa:	4603      	mov	r3, r0
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d001      	beq.n	8017b04 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8017b00:	f7ea ffaa 	bl	8002a58 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8017b04:	4806      	ldr	r0, [pc, #24]	; (8017b20 <USBH_LL_Init+0x74>)
 8017b06:	f7f0 fc6f 	bl	80083e8 <HAL_HCD_GetCurrentFrame>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	4619      	mov	r1, r3
 8017b0e:	6878      	ldr	r0, [r7, #4]
 8017b10:	f7fc f92c 	bl	8013d6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8017b14:	2300      	movs	r3, #0
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	3708      	adds	r7, #8
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}
 8017b1e:	bf00      	nop
 8017b20:	20049e30 	.word	0x20049e30

08017b24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b084      	sub	sp, #16
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017b30:	2300      	movs	r3, #0
 8017b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7f0 fbde 	bl	80082fc <HAL_HCD_Start>
 8017b40:	4603      	mov	r3, r0
 8017b42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017b44:	7bfb      	ldrb	r3, [r7, #15]
 8017b46:	4618      	mov	r0, r3
 8017b48:	f000 f95c 	bl	8017e04 <USBH_Get_USB_Status>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b52:	4618      	mov	r0, r3
 8017b54:	3710      	adds	r7, #16
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}

08017b5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017b5a:	b580      	push	{r7, lr}
 8017b5c:	b084      	sub	sp, #16
 8017b5e:	af00      	add	r7, sp, #0
 8017b60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b62:	2300      	movs	r3, #0
 8017b64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017b66:	2300      	movs	r3, #0
 8017b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7f0 fbe6 	bl	8008342 <HAL_HCD_Stop>
 8017b76:	4603      	mov	r3, r0
 8017b78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017b7a:	7bfb      	ldrb	r3, [r7, #15]
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	f000 f941 	bl	8017e04 <USBH_Get_USB_Status>
 8017b82:	4603      	mov	r3, r0
 8017b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b88:	4618      	mov	r0, r3
 8017b8a:	3710      	adds	r7, #16
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}

08017b90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b084      	sub	sp, #16
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8017b98:	2301      	movs	r3, #1
 8017b9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7f0 fc2e 	bl	8008404 <HAL_HCD_GetCurrentSpeed>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	2b02      	cmp	r3, #2
 8017bac:	d00c      	beq.n	8017bc8 <USBH_LL_GetSpeed+0x38>
 8017bae:	2b02      	cmp	r3, #2
 8017bb0:	d80d      	bhi.n	8017bce <USBH_LL_GetSpeed+0x3e>
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d002      	beq.n	8017bbc <USBH_LL_GetSpeed+0x2c>
 8017bb6:	2b01      	cmp	r3, #1
 8017bb8:	d003      	beq.n	8017bc2 <USBH_LL_GetSpeed+0x32>
 8017bba:	e008      	b.n	8017bce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8017bc0:	e008      	b.n	8017bd4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8017bc6:	e005      	b.n	8017bd4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8017bc8:	2302      	movs	r3, #2
 8017bca:	73fb      	strb	r3, [r7, #15]
    break;
 8017bcc:	e002      	b.n	8017bd4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8017bce:	2301      	movs	r3, #1
 8017bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8017bd2:	bf00      	nop
  }
  return  speed;
 8017bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	3710      	adds	r7, #16
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}

08017bde <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8017bde:	b580      	push	{r7, lr}
 8017be0:	b084      	sub	sp, #16
 8017be2:	af00      	add	r7, sp, #0
 8017be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017be6:	2300      	movs	r3, #0
 8017be8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017bea:	2300      	movs	r3, #0
 8017bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7f0 fbc1 	bl	800837c <HAL_HCD_ResetPort>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017bfe:	7bfb      	ldrb	r3, [r7, #15]
 8017c00:	4618      	mov	r0, r3
 8017c02:	f000 f8ff 	bl	8017e04 <USBH_Get_USB_Status>
 8017c06:	4603      	mov	r3, r0
 8017c08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	3710      	adds	r7, #16
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}

08017c14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b082      	sub	sp, #8
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017c26:	78fa      	ldrb	r2, [r7, #3]
 8017c28:	4611      	mov	r1, r2
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7f0 fbc8 	bl	80083c0 <HAL_HCD_HC_GetXferCount>
 8017c30:	4603      	mov	r3, r0
}
 8017c32:	4618      	mov	r0, r3
 8017c34:	3708      	adds	r7, #8
 8017c36:	46bd      	mov	sp, r7
 8017c38:	bd80      	pop	{r7, pc}

08017c3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017c3a:	b590      	push	{r4, r7, lr}
 8017c3c:	b089      	sub	sp, #36	; 0x24
 8017c3e:	af04      	add	r7, sp, #16
 8017c40:	6078      	str	r0, [r7, #4]
 8017c42:	4608      	mov	r0, r1
 8017c44:	4611      	mov	r1, r2
 8017c46:	461a      	mov	r2, r3
 8017c48:	4603      	mov	r3, r0
 8017c4a:	70fb      	strb	r3, [r7, #3]
 8017c4c:	460b      	mov	r3, r1
 8017c4e:	70bb      	strb	r3, [r7, #2]
 8017c50:	4613      	mov	r3, r2
 8017c52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c54:	2300      	movs	r3, #0
 8017c56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8017c62:	787c      	ldrb	r4, [r7, #1]
 8017c64:	78ba      	ldrb	r2, [r7, #2]
 8017c66:	78f9      	ldrb	r1, [r7, #3]
 8017c68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017c6a:	9302      	str	r3, [sp, #8]
 8017c6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017c70:	9301      	str	r3, [sp, #4]
 8017c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017c76:	9300      	str	r3, [sp, #0]
 8017c78:	4623      	mov	r3, r4
 8017c7a:	f7f0 f832 	bl	8007ce2 <HAL_HCD_HC_Init>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8017c82:	7bfb      	ldrb	r3, [r7, #15]
 8017c84:	4618      	mov	r0, r3
 8017c86:	f000 f8bd 	bl	8017e04 <USBH_Get_USB_Status>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c90:	4618      	mov	r0, r3
 8017c92:	3714      	adds	r7, #20
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd90      	pop	{r4, r7, pc}

08017c98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b084      	sub	sp, #16
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
 8017ca0:	460b      	mov	r3, r1
 8017ca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017ca8:	2300      	movs	r3, #0
 8017caa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017cb2:	78fa      	ldrb	r2, [r7, #3]
 8017cb4:	4611      	mov	r1, r2
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7f0 f8a2 	bl	8007e00 <HAL_HCD_HC_Halt>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017cc0:	7bfb      	ldrb	r3, [r7, #15]
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f000 f89e 	bl	8017e04 <USBH_Get_USB_Status>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cce:	4618      	mov	r0, r3
 8017cd0:	3710      	adds	r7, #16
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}

08017cd6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8017cd6:	b590      	push	{r4, r7, lr}
 8017cd8:	b089      	sub	sp, #36	; 0x24
 8017cda:	af04      	add	r7, sp, #16
 8017cdc:	6078      	str	r0, [r7, #4]
 8017cde:	4608      	mov	r0, r1
 8017ce0:	4611      	mov	r1, r2
 8017ce2:	461a      	mov	r2, r3
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	70fb      	strb	r3, [r7, #3]
 8017ce8:	460b      	mov	r3, r1
 8017cea:	70bb      	strb	r3, [r7, #2]
 8017cec:	4613      	mov	r3, r2
 8017cee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8017cfe:	787c      	ldrb	r4, [r7, #1]
 8017d00:	78ba      	ldrb	r2, [r7, #2]
 8017d02:	78f9      	ldrb	r1, [r7, #3]
 8017d04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017d08:	9303      	str	r3, [sp, #12]
 8017d0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017d0c:	9302      	str	r3, [sp, #8]
 8017d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d10:	9301      	str	r3, [sp, #4]
 8017d12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017d16:	9300      	str	r3, [sp, #0]
 8017d18:	4623      	mov	r3, r4
 8017d1a:	f7f0 f895 	bl	8007e48 <HAL_HCD_HC_SubmitRequest>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8017d22:	7bfb      	ldrb	r3, [r7, #15]
 8017d24:	4618      	mov	r0, r3
 8017d26:	f000 f86d 	bl	8017e04 <USBH_Get_USB_Status>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d30:	4618      	mov	r0, r3
 8017d32:	3714      	adds	r7, #20
 8017d34:	46bd      	mov	sp, r7
 8017d36:	bd90      	pop	{r4, r7, pc}

08017d38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b082      	sub	sp, #8
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
 8017d40:	460b      	mov	r3, r1
 8017d42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017d4a:	78fa      	ldrb	r2, [r7, #3]
 8017d4c:	4611      	mov	r1, r2
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7f0 fb22 	bl	8008398 <HAL_HCD_HC_GetURBState>
 8017d54:	4603      	mov	r3, r0
}
 8017d56:	4618      	mov	r0, r3
 8017d58:	3708      	adds	r7, #8
 8017d5a:	46bd      	mov	sp, r7
 8017d5c:	bd80      	pop	{r7, pc}

08017d5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8017d5e:	b580      	push	{r7, lr}
 8017d60:	b082      	sub	sp, #8
 8017d62:	af00      	add	r7, sp, #0
 8017d64:	6078      	str	r0, [r7, #4]
 8017d66:	460b      	mov	r3, r1
 8017d68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8017d70:	2b01      	cmp	r3, #1
 8017d72:	d103      	bne.n	8017d7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8017d74:	78fb      	ldrb	r3, [r7, #3]
 8017d76:	4618      	mov	r0, r3
 8017d78:	f000 f870 	bl	8017e5c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8017d7c:	20c8      	movs	r0, #200	; 0xc8
 8017d7e:	f7ed fe81 	bl	8005a84 <HAL_Delay>
  return USBH_OK;
 8017d82:	2300      	movs	r3, #0
}
 8017d84:	4618      	mov	r0, r3
 8017d86:	3708      	adds	r7, #8
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}

08017d8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8017d8c:	b480      	push	{r7}
 8017d8e:	b085      	sub	sp, #20
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
 8017d94:	460b      	mov	r3, r1
 8017d96:	70fb      	strb	r3, [r7, #3]
 8017d98:	4613      	mov	r3, r2
 8017d9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017da2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8017da4:	78fb      	ldrb	r3, [r7, #3]
 8017da6:	68fa      	ldr	r2, [r7, #12]
 8017da8:	212c      	movs	r1, #44	; 0x2c
 8017daa:	fb01 f303 	mul.w	r3, r1, r3
 8017dae:	4413      	add	r3, r2
 8017db0:	333b      	adds	r3, #59	; 0x3b
 8017db2:	781b      	ldrb	r3, [r3, #0]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d009      	beq.n	8017dcc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8017db8:	78fb      	ldrb	r3, [r7, #3]
 8017dba:	68fa      	ldr	r2, [r7, #12]
 8017dbc:	212c      	movs	r1, #44	; 0x2c
 8017dbe:	fb01 f303 	mul.w	r3, r1, r3
 8017dc2:	4413      	add	r3, r2
 8017dc4:	3354      	adds	r3, #84	; 0x54
 8017dc6:	78ba      	ldrb	r2, [r7, #2]
 8017dc8:	701a      	strb	r2, [r3, #0]
 8017dca:	e008      	b.n	8017dde <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8017dcc:	78fb      	ldrb	r3, [r7, #3]
 8017dce:	68fa      	ldr	r2, [r7, #12]
 8017dd0:	212c      	movs	r1, #44	; 0x2c
 8017dd2:	fb01 f303 	mul.w	r3, r1, r3
 8017dd6:	4413      	add	r3, r2
 8017dd8:	3355      	adds	r3, #85	; 0x55
 8017dda:	78ba      	ldrb	r2, [r7, #2]
 8017ddc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8017dde:	2300      	movs	r3, #0
}
 8017de0:	4618      	mov	r0, r3
 8017de2:	3714      	adds	r7, #20
 8017de4:	46bd      	mov	sp, r7
 8017de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dea:	4770      	bx	lr

08017dec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b082      	sub	sp, #8
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8017df4:	6878      	ldr	r0, [r7, #4]
 8017df6:	f7ed fe45 	bl	8005a84 <HAL_Delay>
}
 8017dfa:	bf00      	nop
 8017dfc:	3708      	adds	r7, #8
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}
	...

08017e04 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017e04:	b480      	push	{r7}
 8017e06:	b085      	sub	sp, #20
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017e12:	79fb      	ldrb	r3, [r7, #7]
 8017e14:	2b03      	cmp	r3, #3
 8017e16:	d817      	bhi.n	8017e48 <USBH_Get_USB_Status+0x44>
 8017e18:	a201      	add	r2, pc, #4	; (adr r2, 8017e20 <USBH_Get_USB_Status+0x1c>)
 8017e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e1e:	bf00      	nop
 8017e20:	08017e31 	.word	0x08017e31
 8017e24:	08017e37 	.word	0x08017e37
 8017e28:	08017e3d 	.word	0x08017e3d
 8017e2c:	08017e43 	.word	0x08017e43
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8017e30:	2300      	movs	r3, #0
 8017e32:	73fb      	strb	r3, [r7, #15]
    break;
 8017e34:	e00b      	b.n	8017e4e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8017e36:	2302      	movs	r3, #2
 8017e38:	73fb      	strb	r3, [r7, #15]
    break;
 8017e3a:	e008      	b.n	8017e4e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8017e40:	e005      	b.n	8017e4e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8017e42:	2302      	movs	r3, #2
 8017e44:	73fb      	strb	r3, [r7, #15]
    break;
 8017e46:	e002      	b.n	8017e4e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8017e48:	2302      	movs	r3, #2
 8017e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8017e4c:	bf00      	nop
  }
  return usb_status;
 8017e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e50:	4618      	mov	r0, r3
 8017e52:	3714      	adds	r7, #20
 8017e54:	46bd      	mov	sp, r7
 8017e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5a:	4770      	bx	lr

08017e5c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b084      	sub	sp, #16
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	4603      	mov	r3, r0
 8017e64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8017e66:	79fb      	ldrb	r3, [r7, #7]
 8017e68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8017e6a:	79fb      	ldrb	r3, [r7, #7]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d102      	bne.n	8017e76 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8017e70:	2301      	movs	r3, #1
 8017e72:	73fb      	strb	r3, [r7, #15]
 8017e74:	e001      	b.n	8017e7a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8017e76:	2300      	movs	r3, #0
 8017e78:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8017e7a:	7bfb      	ldrb	r3, [r7, #15]
 8017e7c:	461a      	mov	r2, r3
 8017e7e:	2120      	movs	r1, #32
 8017e80:	4803      	ldr	r0, [pc, #12]	; (8017e90 <MX_DriverVbusFS+0x34>)
 8017e82:	f7ef fe75 	bl	8007b70 <HAL_GPIO_WritePin>
}
 8017e86:	bf00      	nop
 8017e88:	3710      	adds	r7, #16
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}
 8017e8e:	bf00      	nop
 8017e90:	40020c00 	.word	0x40020c00

08017e94 <__errno>:
 8017e94:	4b01      	ldr	r3, [pc, #4]	; (8017e9c <__errno+0x8>)
 8017e96:	6818      	ldr	r0, [r3, #0]
 8017e98:	4770      	bx	lr
 8017e9a:	bf00      	nop
 8017e9c:	20000050 	.word	0x20000050

08017ea0 <__libc_init_array>:
 8017ea0:	b570      	push	{r4, r5, r6, lr}
 8017ea2:	4d0d      	ldr	r5, [pc, #52]	; (8017ed8 <__libc_init_array+0x38>)
 8017ea4:	4c0d      	ldr	r4, [pc, #52]	; (8017edc <__libc_init_array+0x3c>)
 8017ea6:	1b64      	subs	r4, r4, r5
 8017ea8:	10a4      	asrs	r4, r4, #2
 8017eaa:	2600      	movs	r6, #0
 8017eac:	42a6      	cmp	r6, r4
 8017eae:	d109      	bne.n	8017ec4 <__libc_init_array+0x24>
 8017eb0:	4d0b      	ldr	r5, [pc, #44]	; (8017ee0 <__libc_init_array+0x40>)
 8017eb2:	4c0c      	ldr	r4, [pc, #48]	; (8017ee4 <__libc_init_array+0x44>)
 8017eb4:	f001 fcfe 	bl	80198b4 <_init>
 8017eb8:	1b64      	subs	r4, r4, r5
 8017eba:	10a4      	asrs	r4, r4, #2
 8017ebc:	2600      	movs	r6, #0
 8017ebe:	42a6      	cmp	r6, r4
 8017ec0:	d105      	bne.n	8017ece <__libc_init_array+0x2e>
 8017ec2:	bd70      	pop	{r4, r5, r6, pc}
 8017ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ec8:	4798      	blx	r3
 8017eca:	3601      	adds	r6, #1
 8017ecc:	e7ee      	b.n	8017eac <__libc_init_array+0xc>
 8017ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ed2:	4798      	blx	r3
 8017ed4:	3601      	adds	r6, #1
 8017ed6:	e7f2      	b.n	8017ebe <__libc_init_array+0x1e>
 8017ed8:	0801baf0 	.word	0x0801baf0
 8017edc:	0801baf0 	.word	0x0801baf0
 8017ee0:	0801baf0 	.word	0x0801baf0
 8017ee4:	0801baf4 	.word	0x0801baf4

08017ee8 <malloc>:
 8017ee8:	4b02      	ldr	r3, [pc, #8]	; (8017ef4 <malloc+0xc>)
 8017eea:	4601      	mov	r1, r0
 8017eec:	6818      	ldr	r0, [r3, #0]
 8017eee:	f000 b88d 	b.w	801800c <_malloc_r>
 8017ef2:	bf00      	nop
 8017ef4:	20000050 	.word	0x20000050

08017ef8 <free>:
 8017ef8:	4b02      	ldr	r3, [pc, #8]	; (8017f04 <free+0xc>)
 8017efa:	4601      	mov	r1, r0
 8017efc:	6818      	ldr	r0, [r3, #0]
 8017efe:	f000 b819 	b.w	8017f34 <_free_r>
 8017f02:	bf00      	nop
 8017f04:	20000050 	.word	0x20000050

08017f08 <memcpy>:
 8017f08:	440a      	add	r2, r1
 8017f0a:	4291      	cmp	r1, r2
 8017f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017f10:	d100      	bne.n	8017f14 <memcpy+0xc>
 8017f12:	4770      	bx	lr
 8017f14:	b510      	push	{r4, lr}
 8017f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f1e:	4291      	cmp	r1, r2
 8017f20:	d1f9      	bne.n	8017f16 <memcpy+0xe>
 8017f22:	bd10      	pop	{r4, pc}

08017f24 <memset>:
 8017f24:	4402      	add	r2, r0
 8017f26:	4603      	mov	r3, r0
 8017f28:	4293      	cmp	r3, r2
 8017f2a:	d100      	bne.n	8017f2e <memset+0xa>
 8017f2c:	4770      	bx	lr
 8017f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8017f32:	e7f9      	b.n	8017f28 <memset+0x4>

08017f34 <_free_r>:
 8017f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f36:	2900      	cmp	r1, #0
 8017f38:	d044      	beq.n	8017fc4 <_free_r+0x90>
 8017f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f3e:	9001      	str	r0, [sp, #4]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	f1a1 0404 	sub.w	r4, r1, #4
 8017f46:	bfb8      	it	lt
 8017f48:	18e4      	addlt	r4, r4, r3
 8017f4a:	f000 fc87 	bl	801885c <__malloc_lock>
 8017f4e:	4a1e      	ldr	r2, [pc, #120]	; (8017fc8 <_free_r+0x94>)
 8017f50:	9801      	ldr	r0, [sp, #4]
 8017f52:	6813      	ldr	r3, [r2, #0]
 8017f54:	b933      	cbnz	r3, 8017f64 <_free_r+0x30>
 8017f56:	6063      	str	r3, [r4, #4]
 8017f58:	6014      	str	r4, [r2, #0]
 8017f5a:	b003      	add	sp, #12
 8017f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f60:	f000 bc82 	b.w	8018868 <__malloc_unlock>
 8017f64:	42a3      	cmp	r3, r4
 8017f66:	d908      	bls.n	8017f7a <_free_r+0x46>
 8017f68:	6825      	ldr	r5, [r4, #0]
 8017f6a:	1961      	adds	r1, r4, r5
 8017f6c:	428b      	cmp	r3, r1
 8017f6e:	bf01      	itttt	eq
 8017f70:	6819      	ldreq	r1, [r3, #0]
 8017f72:	685b      	ldreq	r3, [r3, #4]
 8017f74:	1949      	addeq	r1, r1, r5
 8017f76:	6021      	streq	r1, [r4, #0]
 8017f78:	e7ed      	b.n	8017f56 <_free_r+0x22>
 8017f7a:	461a      	mov	r2, r3
 8017f7c:	685b      	ldr	r3, [r3, #4]
 8017f7e:	b10b      	cbz	r3, 8017f84 <_free_r+0x50>
 8017f80:	42a3      	cmp	r3, r4
 8017f82:	d9fa      	bls.n	8017f7a <_free_r+0x46>
 8017f84:	6811      	ldr	r1, [r2, #0]
 8017f86:	1855      	adds	r5, r2, r1
 8017f88:	42a5      	cmp	r5, r4
 8017f8a:	d10b      	bne.n	8017fa4 <_free_r+0x70>
 8017f8c:	6824      	ldr	r4, [r4, #0]
 8017f8e:	4421      	add	r1, r4
 8017f90:	1854      	adds	r4, r2, r1
 8017f92:	42a3      	cmp	r3, r4
 8017f94:	6011      	str	r1, [r2, #0]
 8017f96:	d1e0      	bne.n	8017f5a <_free_r+0x26>
 8017f98:	681c      	ldr	r4, [r3, #0]
 8017f9a:	685b      	ldr	r3, [r3, #4]
 8017f9c:	6053      	str	r3, [r2, #4]
 8017f9e:	4421      	add	r1, r4
 8017fa0:	6011      	str	r1, [r2, #0]
 8017fa2:	e7da      	b.n	8017f5a <_free_r+0x26>
 8017fa4:	d902      	bls.n	8017fac <_free_r+0x78>
 8017fa6:	230c      	movs	r3, #12
 8017fa8:	6003      	str	r3, [r0, #0]
 8017faa:	e7d6      	b.n	8017f5a <_free_r+0x26>
 8017fac:	6825      	ldr	r5, [r4, #0]
 8017fae:	1961      	adds	r1, r4, r5
 8017fb0:	428b      	cmp	r3, r1
 8017fb2:	bf04      	itt	eq
 8017fb4:	6819      	ldreq	r1, [r3, #0]
 8017fb6:	685b      	ldreq	r3, [r3, #4]
 8017fb8:	6063      	str	r3, [r4, #4]
 8017fba:	bf04      	itt	eq
 8017fbc:	1949      	addeq	r1, r1, r5
 8017fbe:	6021      	streq	r1, [r4, #0]
 8017fc0:	6054      	str	r4, [r2, #4]
 8017fc2:	e7ca      	b.n	8017f5a <_free_r+0x26>
 8017fc4:	b003      	add	sp, #12
 8017fc6:	bd30      	pop	{r4, r5, pc}
 8017fc8:	2004a134 	.word	0x2004a134

08017fcc <sbrk_aligned>:
 8017fcc:	b570      	push	{r4, r5, r6, lr}
 8017fce:	4e0e      	ldr	r6, [pc, #56]	; (8018008 <sbrk_aligned+0x3c>)
 8017fd0:	460c      	mov	r4, r1
 8017fd2:	6831      	ldr	r1, [r6, #0]
 8017fd4:	4605      	mov	r5, r0
 8017fd6:	b911      	cbnz	r1, 8017fde <sbrk_aligned+0x12>
 8017fd8:	f000 f930 	bl	801823c <_sbrk_r>
 8017fdc:	6030      	str	r0, [r6, #0]
 8017fde:	4621      	mov	r1, r4
 8017fe0:	4628      	mov	r0, r5
 8017fe2:	f000 f92b 	bl	801823c <_sbrk_r>
 8017fe6:	1c43      	adds	r3, r0, #1
 8017fe8:	d00a      	beq.n	8018000 <sbrk_aligned+0x34>
 8017fea:	1cc4      	adds	r4, r0, #3
 8017fec:	f024 0403 	bic.w	r4, r4, #3
 8017ff0:	42a0      	cmp	r0, r4
 8017ff2:	d007      	beq.n	8018004 <sbrk_aligned+0x38>
 8017ff4:	1a21      	subs	r1, r4, r0
 8017ff6:	4628      	mov	r0, r5
 8017ff8:	f000 f920 	bl	801823c <_sbrk_r>
 8017ffc:	3001      	adds	r0, #1
 8017ffe:	d101      	bne.n	8018004 <sbrk_aligned+0x38>
 8018000:	f04f 34ff 	mov.w	r4, #4294967295
 8018004:	4620      	mov	r0, r4
 8018006:	bd70      	pop	{r4, r5, r6, pc}
 8018008:	2004a138 	.word	0x2004a138

0801800c <_malloc_r>:
 801800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018010:	1ccd      	adds	r5, r1, #3
 8018012:	f025 0503 	bic.w	r5, r5, #3
 8018016:	3508      	adds	r5, #8
 8018018:	2d0c      	cmp	r5, #12
 801801a:	bf38      	it	cc
 801801c:	250c      	movcc	r5, #12
 801801e:	2d00      	cmp	r5, #0
 8018020:	4607      	mov	r7, r0
 8018022:	db01      	blt.n	8018028 <_malloc_r+0x1c>
 8018024:	42a9      	cmp	r1, r5
 8018026:	d905      	bls.n	8018034 <_malloc_r+0x28>
 8018028:	230c      	movs	r3, #12
 801802a:	603b      	str	r3, [r7, #0]
 801802c:	2600      	movs	r6, #0
 801802e:	4630      	mov	r0, r6
 8018030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018034:	4e2e      	ldr	r6, [pc, #184]	; (80180f0 <_malloc_r+0xe4>)
 8018036:	f000 fc11 	bl	801885c <__malloc_lock>
 801803a:	6833      	ldr	r3, [r6, #0]
 801803c:	461c      	mov	r4, r3
 801803e:	bb34      	cbnz	r4, 801808e <_malloc_r+0x82>
 8018040:	4629      	mov	r1, r5
 8018042:	4638      	mov	r0, r7
 8018044:	f7ff ffc2 	bl	8017fcc <sbrk_aligned>
 8018048:	1c43      	adds	r3, r0, #1
 801804a:	4604      	mov	r4, r0
 801804c:	d14d      	bne.n	80180ea <_malloc_r+0xde>
 801804e:	6834      	ldr	r4, [r6, #0]
 8018050:	4626      	mov	r6, r4
 8018052:	2e00      	cmp	r6, #0
 8018054:	d140      	bne.n	80180d8 <_malloc_r+0xcc>
 8018056:	6823      	ldr	r3, [r4, #0]
 8018058:	4631      	mov	r1, r6
 801805a:	4638      	mov	r0, r7
 801805c:	eb04 0803 	add.w	r8, r4, r3
 8018060:	f000 f8ec 	bl	801823c <_sbrk_r>
 8018064:	4580      	cmp	r8, r0
 8018066:	d13a      	bne.n	80180de <_malloc_r+0xd2>
 8018068:	6821      	ldr	r1, [r4, #0]
 801806a:	3503      	adds	r5, #3
 801806c:	1a6d      	subs	r5, r5, r1
 801806e:	f025 0503 	bic.w	r5, r5, #3
 8018072:	3508      	adds	r5, #8
 8018074:	2d0c      	cmp	r5, #12
 8018076:	bf38      	it	cc
 8018078:	250c      	movcc	r5, #12
 801807a:	4629      	mov	r1, r5
 801807c:	4638      	mov	r0, r7
 801807e:	f7ff ffa5 	bl	8017fcc <sbrk_aligned>
 8018082:	3001      	adds	r0, #1
 8018084:	d02b      	beq.n	80180de <_malloc_r+0xd2>
 8018086:	6823      	ldr	r3, [r4, #0]
 8018088:	442b      	add	r3, r5
 801808a:	6023      	str	r3, [r4, #0]
 801808c:	e00e      	b.n	80180ac <_malloc_r+0xa0>
 801808e:	6822      	ldr	r2, [r4, #0]
 8018090:	1b52      	subs	r2, r2, r5
 8018092:	d41e      	bmi.n	80180d2 <_malloc_r+0xc6>
 8018094:	2a0b      	cmp	r2, #11
 8018096:	d916      	bls.n	80180c6 <_malloc_r+0xba>
 8018098:	1961      	adds	r1, r4, r5
 801809a:	42a3      	cmp	r3, r4
 801809c:	6025      	str	r5, [r4, #0]
 801809e:	bf18      	it	ne
 80180a0:	6059      	strne	r1, [r3, #4]
 80180a2:	6863      	ldr	r3, [r4, #4]
 80180a4:	bf08      	it	eq
 80180a6:	6031      	streq	r1, [r6, #0]
 80180a8:	5162      	str	r2, [r4, r5]
 80180aa:	604b      	str	r3, [r1, #4]
 80180ac:	4638      	mov	r0, r7
 80180ae:	f104 060b 	add.w	r6, r4, #11
 80180b2:	f000 fbd9 	bl	8018868 <__malloc_unlock>
 80180b6:	f026 0607 	bic.w	r6, r6, #7
 80180ba:	1d23      	adds	r3, r4, #4
 80180bc:	1af2      	subs	r2, r6, r3
 80180be:	d0b6      	beq.n	801802e <_malloc_r+0x22>
 80180c0:	1b9b      	subs	r3, r3, r6
 80180c2:	50a3      	str	r3, [r4, r2]
 80180c4:	e7b3      	b.n	801802e <_malloc_r+0x22>
 80180c6:	6862      	ldr	r2, [r4, #4]
 80180c8:	42a3      	cmp	r3, r4
 80180ca:	bf0c      	ite	eq
 80180cc:	6032      	streq	r2, [r6, #0]
 80180ce:	605a      	strne	r2, [r3, #4]
 80180d0:	e7ec      	b.n	80180ac <_malloc_r+0xa0>
 80180d2:	4623      	mov	r3, r4
 80180d4:	6864      	ldr	r4, [r4, #4]
 80180d6:	e7b2      	b.n	801803e <_malloc_r+0x32>
 80180d8:	4634      	mov	r4, r6
 80180da:	6876      	ldr	r6, [r6, #4]
 80180dc:	e7b9      	b.n	8018052 <_malloc_r+0x46>
 80180de:	230c      	movs	r3, #12
 80180e0:	603b      	str	r3, [r7, #0]
 80180e2:	4638      	mov	r0, r7
 80180e4:	f000 fbc0 	bl	8018868 <__malloc_unlock>
 80180e8:	e7a1      	b.n	801802e <_malloc_r+0x22>
 80180ea:	6025      	str	r5, [r4, #0]
 80180ec:	e7de      	b.n	80180ac <_malloc_r+0xa0>
 80180ee:	bf00      	nop
 80180f0:	2004a134 	.word	0x2004a134

080180f4 <iprintf>:
 80180f4:	b40f      	push	{r0, r1, r2, r3}
 80180f6:	4b0a      	ldr	r3, [pc, #40]	; (8018120 <iprintf+0x2c>)
 80180f8:	b513      	push	{r0, r1, r4, lr}
 80180fa:	681c      	ldr	r4, [r3, #0]
 80180fc:	b124      	cbz	r4, 8018108 <iprintf+0x14>
 80180fe:	69a3      	ldr	r3, [r4, #24]
 8018100:	b913      	cbnz	r3, 8018108 <iprintf+0x14>
 8018102:	4620      	mov	r0, r4
 8018104:	f000 faa4 	bl	8018650 <__sinit>
 8018108:	ab05      	add	r3, sp, #20
 801810a:	9a04      	ldr	r2, [sp, #16]
 801810c:	68a1      	ldr	r1, [r4, #8]
 801810e:	9301      	str	r3, [sp, #4]
 8018110:	4620      	mov	r0, r4
 8018112:	f000 fd35 	bl	8018b80 <_vfiprintf_r>
 8018116:	b002      	add	sp, #8
 8018118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801811c:	b004      	add	sp, #16
 801811e:	4770      	bx	lr
 8018120:	20000050 	.word	0x20000050

08018124 <putchar>:
 8018124:	4b09      	ldr	r3, [pc, #36]	; (801814c <putchar+0x28>)
 8018126:	b513      	push	{r0, r1, r4, lr}
 8018128:	681c      	ldr	r4, [r3, #0]
 801812a:	4601      	mov	r1, r0
 801812c:	b134      	cbz	r4, 801813c <putchar+0x18>
 801812e:	69a3      	ldr	r3, [r4, #24]
 8018130:	b923      	cbnz	r3, 801813c <putchar+0x18>
 8018132:	9001      	str	r0, [sp, #4]
 8018134:	4620      	mov	r0, r4
 8018136:	f000 fa8b 	bl	8018650 <__sinit>
 801813a:	9901      	ldr	r1, [sp, #4]
 801813c:	68a2      	ldr	r2, [r4, #8]
 801813e:	4620      	mov	r0, r4
 8018140:	b002      	add	sp, #8
 8018142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018146:	f000 bfdf 	b.w	8019108 <_putc_r>
 801814a:	bf00      	nop
 801814c:	20000050 	.word	0x20000050

08018150 <_puts_r>:
 8018150:	b570      	push	{r4, r5, r6, lr}
 8018152:	460e      	mov	r6, r1
 8018154:	4605      	mov	r5, r0
 8018156:	b118      	cbz	r0, 8018160 <_puts_r+0x10>
 8018158:	6983      	ldr	r3, [r0, #24]
 801815a:	b90b      	cbnz	r3, 8018160 <_puts_r+0x10>
 801815c:	f000 fa78 	bl	8018650 <__sinit>
 8018160:	69ab      	ldr	r3, [r5, #24]
 8018162:	68ac      	ldr	r4, [r5, #8]
 8018164:	b913      	cbnz	r3, 801816c <_puts_r+0x1c>
 8018166:	4628      	mov	r0, r5
 8018168:	f000 fa72 	bl	8018650 <__sinit>
 801816c:	4b2c      	ldr	r3, [pc, #176]	; (8018220 <_puts_r+0xd0>)
 801816e:	429c      	cmp	r4, r3
 8018170:	d120      	bne.n	80181b4 <_puts_r+0x64>
 8018172:	686c      	ldr	r4, [r5, #4]
 8018174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018176:	07db      	lsls	r3, r3, #31
 8018178:	d405      	bmi.n	8018186 <_puts_r+0x36>
 801817a:	89a3      	ldrh	r3, [r4, #12]
 801817c:	0598      	lsls	r0, r3, #22
 801817e:	d402      	bmi.n	8018186 <_puts_r+0x36>
 8018180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018182:	f000 fb03 	bl	801878c <__retarget_lock_acquire_recursive>
 8018186:	89a3      	ldrh	r3, [r4, #12]
 8018188:	0719      	lsls	r1, r3, #28
 801818a:	d51d      	bpl.n	80181c8 <_puts_r+0x78>
 801818c:	6923      	ldr	r3, [r4, #16]
 801818e:	b1db      	cbz	r3, 80181c8 <_puts_r+0x78>
 8018190:	3e01      	subs	r6, #1
 8018192:	68a3      	ldr	r3, [r4, #8]
 8018194:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018198:	3b01      	subs	r3, #1
 801819a:	60a3      	str	r3, [r4, #8]
 801819c:	bb39      	cbnz	r1, 80181ee <_puts_r+0x9e>
 801819e:	2b00      	cmp	r3, #0
 80181a0:	da38      	bge.n	8018214 <_puts_r+0xc4>
 80181a2:	4622      	mov	r2, r4
 80181a4:	210a      	movs	r1, #10
 80181a6:	4628      	mov	r0, r5
 80181a8:	f000 f878 	bl	801829c <__swbuf_r>
 80181ac:	3001      	adds	r0, #1
 80181ae:	d011      	beq.n	80181d4 <_puts_r+0x84>
 80181b0:	250a      	movs	r5, #10
 80181b2:	e011      	b.n	80181d8 <_puts_r+0x88>
 80181b4:	4b1b      	ldr	r3, [pc, #108]	; (8018224 <_puts_r+0xd4>)
 80181b6:	429c      	cmp	r4, r3
 80181b8:	d101      	bne.n	80181be <_puts_r+0x6e>
 80181ba:	68ac      	ldr	r4, [r5, #8]
 80181bc:	e7da      	b.n	8018174 <_puts_r+0x24>
 80181be:	4b1a      	ldr	r3, [pc, #104]	; (8018228 <_puts_r+0xd8>)
 80181c0:	429c      	cmp	r4, r3
 80181c2:	bf08      	it	eq
 80181c4:	68ec      	ldreq	r4, [r5, #12]
 80181c6:	e7d5      	b.n	8018174 <_puts_r+0x24>
 80181c8:	4621      	mov	r1, r4
 80181ca:	4628      	mov	r0, r5
 80181cc:	f000 f8b8 	bl	8018340 <__swsetup_r>
 80181d0:	2800      	cmp	r0, #0
 80181d2:	d0dd      	beq.n	8018190 <_puts_r+0x40>
 80181d4:	f04f 35ff 	mov.w	r5, #4294967295
 80181d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80181da:	07da      	lsls	r2, r3, #31
 80181dc:	d405      	bmi.n	80181ea <_puts_r+0x9a>
 80181de:	89a3      	ldrh	r3, [r4, #12]
 80181e0:	059b      	lsls	r3, r3, #22
 80181e2:	d402      	bmi.n	80181ea <_puts_r+0x9a>
 80181e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80181e6:	f000 fad2 	bl	801878e <__retarget_lock_release_recursive>
 80181ea:	4628      	mov	r0, r5
 80181ec:	bd70      	pop	{r4, r5, r6, pc}
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	da04      	bge.n	80181fc <_puts_r+0xac>
 80181f2:	69a2      	ldr	r2, [r4, #24]
 80181f4:	429a      	cmp	r2, r3
 80181f6:	dc06      	bgt.n	8018206 <_puts_r+0xb6>
 80181f8:	290a      	cmp	r1, #10
 80181fa:	d004      	beq.n	8018206 <_puts_r+0xb6>
 80181fc:	6823      	ldr	r3, [r4, #0]
 80181fe:	1c5a      	adds	r2, r3, #1
 8018200:	6022      	str	r2, [r4, #0]
 8018202:	7019      	strb	r1, [r3, #0]
 8018204:	e7c5      	b.n	8018192 <_puts_r+0x42>
 8018206:	4622      	mov	r2, r4
 8018208:	4628      	mov	r0, r5
 801820a:	f000 f847 	bl	801829c <__swbuf_r>
 801820e:	3001      	adds	r0, #1
 8018210:	d1bf      	bne.n	8018192 <_puts_r+0x42>
 8018212:	e7df      	b.n	80181d4 <_puts_r+0x84>
 8018214:	6823      	ldr	r3, [r4, #0]
 8018216:	250a      	movs	r5, #10
 8018218:	1c5a      	adds	r2, r3, #1
 801821a:	6022      	str	r2, [r4, #0]
 801821c:	701d      	strb	r5, [r3, #0]
 801821e:	e7db      	b.n	80181d8 <_puts_r+0x88>
 8018220:	0801ba74 	.word	0x0801ba74
 8018224:	0801ba94 	.word	0x0801ba94
 8018228:	0801ba54 	.word	0x0801ba54

0801822c <puts>:
 801822c:	4b02      	ldr	r3, [pc, #8]	; (8018238 <puts+0xc>)
 801822e:	4601      	mov	r1, r0
 8018230:	6818      	ldr	r0, [r3, #0]
 8018232:	f7ff bf8d 	b.w	8018150 <_puts_r>
 8018236:	bf00      	nop
 8018238:	20000050 	.word	0x20000050

0801823c <_sbrk_r>:
 801823c:	b538      	push	{r3, r4, r5, lr}
 801823e:	4d06      	ldr	r5, [pc, #24]	; (8018258 <_sbrk_r+0x1c>)
 8018240:	2300      	movs	r3, #0
 8018242:	4604      	mov	r4, r0
 8018244:	4608      	mov	r0, r1
 8018246:	602b      	str	r3, [r5, #0]
 8018248:	f7eb fd66 	bl	8003d18 <_sbrk>
 801824c:	1c43      	adds	r3, r0, #1
 801824e:	d102      	bne.n	8018256 <_sbrk_r+0x1a>
 8018250:	682b      	ldr	r3, [r5, #0]
 8018252:	b103      	cbz	r3, 8018256 <_sbrk_r+0x1a>
 8018254:	6023      	str	r3, [r4, #0]
 8018256:	bd38      	pop	{r3, r4, r5, pc}
 8018258:	2004a140 	.word	0x2004a140

0801825c <siprintf>:
 801825c:	b40e      	push	{r1, r2, r3}
 801825e:	b500      	push	{lr}
 8018260:	b09c      	sub	sp, #112	; 0x70
 8018262:	ab1d      	add	r3, sp, #116	; 0x74
 8018264:	9002      	str	r0, [sp, #8]
 8018266:	9006      	str	r0, [sp, #24]
 8018268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801826c:	4809      	ldr	r0, [pc, #36]	; (8018294 <siprintf+0x38>)
 801826e:	9107      	str	r1, [sp, #28]
 8018270:	9104      	str	r1, [sp, #16]
 8018272:	4909      	ldr	r1, [pc, #36]	; (8018298 <siprintf+0x3c>)
 8018274:	f853 2b04 	ldr.w	r2, [r3], #4
 8018278:	9105      	str	r1, [sp, #20]
 801827a:	6800      	ldr	r0, [r0, #0]
 801827c:	9301      	str	r3, [sp, #4]
 801827e:	a902      	add	r1, sp, #8
 8018280:	f000 fb54 	bl	801892c <_svfiprintf_r>
 8018284:	9b02      	ldr	r3, [sp, #8]
 8018286:	2200      	movs	r2, #0
 8018288:	701a      	strb	r2, [r3, #0]
 801828a:	b01c      	add	sp, #112	; 0x70
 801828c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018290:	b003      	add	sp, #12
 8018292:	4770      	bx	lr
 8018294:	20000050 	.word	0x20000050
 8018298:	ffff0208 	.word	0xffff0208

0801829c <__swbuf_r>:
 801829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801829e:	460e      	mov	r6, r1
 80182a0:	4614      	mov	r4, r2
 80182a2:	4605      	mov	r5, r0
 80182a4:	b118      	cbz	r0, 80182ae <__swbuf_r+0x12>
 80182a6:	6983      	ldr	r3, [r0, #24]
 80182a8:	b90b      	cbnz	r3, 80182ae <__swbuf_r+0x12>
 80182aa:	f000 f9d1 	bl	8018650 <__sinit>
 80182ae:	4b21      	ldr	r3, [pc, #132]	; (8018334 <__swbuf_r+0x98>)
 80182b0:	429c      	cmp	r4, r3
 80182b2:	d12b      	bne.n	801830c <__swbuf_r+0x70>
 80182b4:	686c      	ldr	r4, [r5, #4]
 80182b6:	69a3      	ldr	r3, [r4, #24]
 80182b8:	60a3      	str	r3, [r4, #8]
 80182ba:	89a3      	ldrh	r3, [r4, #12]
 80182bc:	071a      	lsls	r2, r3, #28
 80182be:	d52f      	bpl.n	8018320 <__swbuf_r+0x84>
 80182c0:	6923      	ldr	r3, [r4, #16]
 80182c2:	b36b      	cbz	r3, 8018320 <__swbuf_r+0x84>
 80182c4:	6923      	ldr	r3, [r4, #16]
 80182c6:	6820      	ldr	r0, [r4, #0]
 80182c8:	1ac0      	subs	r0, r0, r3
 80182ca:	6963      	ldr	r3, [r4, #20]
 80182cc:	b2f6      	uxtb	r6, r6
 80182ce:	4283      	cmp	r3, r0
 80182d0:	4637      	mov	r7, r6
 80182d2:	dc04      	bgt.n	80182de <__swbuf_r+0x42>
 80182d4:	4621      	mov	r1, r4
 80182d6:	4628      	mov	r0, r5
 80182d8:	f000 f926 	bl	8018528 <_fflush_r>
 80182dc:	bb30      	cbnz	r0, 801832c <__swbuf_r+0x90>
 80182de:	68a3      	ldr	r3, [r4, #8]
 80182e0:	3b01      	subs	r3, #1
 80182e2:	60a3      	str	r3, [r4, #8]
 80182e4:	6823      	ldr	r3, [r4, #0]
 80182e6:	1c5a      	adds	r2, r3, #1
 80182e8:	6022      	str	r2, [r4, #0]
 80182ea:	701e      	strb	r6, [r3, #0]
 80182ec:	6963      	ldr	r3, [r4, #20]
 80182ee:	3001      	adds	r0, #1
 80182f0:	4283      	cmp	r3, r0
 80182f2:	d004      	beq.n	80182fe <__swbuf_r+0x62>
 80182f4:	89a3      	ldrh	r3, [r4, #12]
 80182f6:	07db      	lsls	r3, r3, #31
 80182f8:	d506      	bpl.n	8018308 <__swbuf_r+0x6c>
 80182fa:	2e0a      	cmp	r6, #10
 80182fc:	d104      	bne.n	8018308 <__swbuf_r+0x6c>
 80182fe:	4621      	mov	r1, r4
 8018300:	4628      	mov	r0, r5
 8018302:	f000 f911 	bl	8018528 <_fflush_r>
 8018306:	b988      	cbnz	r0, 801832c <__swbuf_r+0x90>
 8018308:	4638      	mov	r0, r7
 801830a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801830c:	4b0a      	ldr	r3, [pc, #40]	; (8018338 <__swbuf_r+0x9c>)
 801830e:	429c      	cmp	r4, r3
 8018310:	d101      	bne.n	8018316 <__swbuf_r+0x7a>
 8018312:	68ac      	ldr	r4, [r5, #8]
 8018314:	e7cf      	b.n	80182b6 <__swbuf_r+0x1a>
 8018316:	4b09      	ldr	r3, [pc, #36]	; (801833c <__swbuf_r+0xa0>)
 8018318:	429c      	cmp	r4, r3
 801831a:	bf08      	it	eq
 801831c:	68ec      	ldreq	r4, [r5, #12]
 801831e:	e7ca      	b.n	80182b6 <__swbuf_r+0x1a>
 8018320:	4621      	mov	r1, r4
 8018322:	4628      	mov	r0, r5
 8018324:	f000 f80c 	bl	8018340 <__swsetup_r>
 8018328:	2800      	cmp	r0, #0
 801832a:	d0cb      	beq.n	80182c4 <__swbuf_r+0x28>
 801832c:	f04f 37ff 	mov.w	r7, #4294967295
 8018330:	e7ea      	b.n	8018308 <__swbuf_r+0x6c>
 8018332:	bf00      	nop
 8018334:	0801ba74 	.word	0x0801ba74
 8018338:	0801ba94 	.word	0x0801ba94
 801833c:	0801ba54 	.word	0x0801ba54

08018340 <__swsetup_r>:
 8018340:	4b32      	ldr	r3, [pc, #200]	; (801840c <__swsetup_r+0xcc>)
 8018342:	b570      	push	{r4, r5, r6, lr}
 8018344:	681d      	ldr	r5, [r3, #0]
 8018346:	4606      	mov	r6, r0
 8018348:	460c      	mov	r4, r1
 801834a:	b125      	cbz	r5, 8018356 <__swsetup_r+0x16>
 801834c:	69ab      	ldr	r3, [r5, #24]
 801834e:	b913      	cbnz	r3, 8018356 <__swsetup_r+0x16>
 8018350:	4628      	mov	r0, r5
 8018352:	f000 f97d 	bl	8018650 <__sinit>
 8018356:	4b2e      	ldr	r3, [pc, #184]	; (8018410 <__swsetup_r+0xd0>)
 8018358:	429c      	cmp	r4, r3
 801835a:	d10f      	bne.n	801837c <__swsetup_r+0x3c>
 801835c:	686c      	ldr	r4, [r5, #4]
 801835e:	89a3      	ldrh	r3, [r4, #12]
 8018360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018364:	0719      	lsls	r1, r3, #28
 8018366:	d42c      	bmi.n	80183c2 <__swsetup_r+0x82>
 8018368:	06dd      	lsls	r5, r3, #27
 801836a:	d411      	bmi.n	8018390 <__swsetup_r+0x50>
 801836c:	2309      	movs	r3, #9
 801836e:	6033      	str	r3, [r6, #0]
 8018370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018374:	81a3      	strh	r3, [r4, #12]
 8018376:	f04f 30ff 	mov.w	r0, #4294967295
 801837a:	e03e      	b.n	80183fa <__swsetup_r+0xba>
 801837c:	4b25      	ldr	r3, [pc, #148]	; (8018414 <__swsetup_r+0xd4>)
 801837e:	429c      	cmp	r4, r3
 8018380:	d101      	bne.n	8018386 <__swsetup_r+0x46>
 8018382:	68ac      	ldr	r4, [r5, #8]
 8018384:	e7eb      	b.n	801835e <__swsetup_r+0x1e>
 8018386:	4b24      	ldr	r3, [pc, #144]	; (8018418 <__swsetup_r+0xd8>)
 8018388:	429c      	cmp	r4, r3
 801838a:	bf08      	it	eq
 801838c:	68ec      	ldreq	r4, [r5, #12]
 801838e:	e7e6      	b.n	801835e <__swsetup_r+0x1e>
 8018390:	0758      	lsls	r0, r3, #29
 8018392:	d512      	bpl.n	80183ba <__swsetup_r+0x7a>
 8018394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018396:	b141      	cbz	r1, 80183aa <__swsetup_r+0x6a>
 8018398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801839c:	4299      	cmp	r1, r3
 801839e:	d002      	beq.n	80183a6 <__swsetup_r+0x66>
 80183a0:	4630      	mov	r0, r6
 80183a2:	f7ff fdc7 	bl	8017f34 <_free_r>
 80183a6:	2300      	movs	r3, #0
 80183a8:	6363      	str	r3, [r4, #52]	; 0x34
 80183aa:	89a3      	ldrh	r3, [r4, #12]
 80183ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80183b0:	81a3      	strh	r3, [r4, #12]
 80183b2:	2300      	movs	r3, #0
 80183b4:	6063      	str	r3, [r4, #4]
 80183b6:	6923      	ldr	r3, [r4, #16]
 80183b8:	6023      	str	r3, [r4, #0]
 80183ba:	89a3      	ldrh	r3, [r4, #12]
 80183bc:	f043 0308 	orr.w	r3, r3, #8
 80183c0:	81a3      	strh	r3, [r4, #12]
 80183c2:	6923      	ldr	r3, [r4, #16]
 80183c4:	b94b      	cbnz	r3, 80183da <__swsetup_r+0x9a>
 80183c6:	89a3      	ldrh	r3, [r4, #12]
 80183c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80183cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80183d0:	d003      	beq.n	80183da <__swsetup_r+0x9a>
 80183d2:	4621      	mov	r1, r4
 80183d4:	4630      	mov	r0, r6
 80183d6:	f000 fa01 	bl	80187dc <__smakebuf_r>
 80183da:	89a0      	ldrh	r0, [r4, #12]
 80183dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80183e0:	f010 0301 	ands.w	r3, r0, #1
 80183e4:	d00a      	beq.n	80183fc <__swsetup_r+0xbc>
 80183e6:	2300      	movs	r3, #0
 80183e8:	60a3      	str	r3, [r4, #8]
 80183ea:	6963      	ldr	r3, [r4, #20]
 80183ec:	425b      	negs	r3, r3
 80183ee:	61a3      	str	r3, [r4, #24]
 80183f0:	6923      	ldr	r3, [r4, #16]
 80183f2:	b943      	cbnz	r3, 8018406 <__swsetup_r+0xc6>
 80183f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80183f8:	d1ba      	bne.n	8018370 <__swsetup_r+0x30>
 80183fa:	bd70      	pop	{r4, r5, r6, pc}
 80183fc:	0781      	lsls	r1, r0, #30
 80183fe:	bf58      	it	pl
 8018400:	6963      	ldrpl	r3, [r4, #20]
 8018402:	60a3      	str	r3, [r4, #8]
 8018404:	e7f4      	b.n	80183f0 <__swsetup_r+0xb0>
 8018406:	2000      	movs	r0, #0
 8018408:	e7f7      	b.n	80183fa <__swsetup_r+0xba>
 801840a:	bf00      	nop
 801840c:	20000050 	.word	0x20000050
 8018410:	0801ba74 	.word	0x0801ba74
 8018414:	0801ba94 	.word	0x0801ba94
 8018418:	0801ba54 	.word	0x0801ba54

0801841c <__sflush_r>:
 801841c:	898a      	ldrh	r2, [r1, #12]
 801841e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018422:	4605      	mov	r5, r0
 8018424:	0710      	lsls	r0, r2, #28
 8018426:	460c      	mov	r4, r1
 8018428:	d458      	bmi.n	80184dc <__sflush_r+0xc0>
 801842a:	684b      	ldr	r3, [r1, #4]
 801842c:	2b00      	cmp	r3, #0
 801842e:	dc05      	bgt.n	801843c <__sflush_r+0x20>
 8018430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018432:	2b00      	cmp	r3, #0
 8018434:	dc02      	bgt.n	801843c <__sflush_r+0x20>
 8018436:	2000      	movs	r0, #0
 8018438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801843c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801843e:	2e00      	cmp	r6, #0
 8018440:	d0f9      	beq.n	8018436 <__sflush_r+0x1a>
 8018442:	2300      	movs	r3, #0
 8018444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018448:	682f      	ldr	r7, [r5, #0]
 801844a:	602b      	str	r3, [r5, #0]
 801844c:	d032      	beq.n	80184b4 <__sflush_r+0x98>
 801844e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018450:	89a3      	ldrh	r3, [r4, #12]
 8018452:	075a      	lsls	r2, r3, #29
 8018454:	d505      	bpl.n	8018462 <__sflush_r+0x46>
 8018456:	6863      	ldr	r3, [r4, #4]
 8018458:	1ac0      	subs	r0, r0, r3
 801845a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801845c:	b10b      	cbz	r3, 8018462 <__sflush_r+0x46>
 801845e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018460:	1ac0      	subs	r0, r0, r3
 8018462:	2300      	movs	r3, #0
 8018464:	4602      	mov	r2, r0
 8018466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018468:	6a21      	ldr	r1, [r4, #32]
 801846a:	4628      	mov	r0, r5
 801846c:	47b0      	blx	r6
 801846e:	1c43      	adds	r3, r0, #1
 8018470:	89a3      	ldrh	r3, [r4, #12]
 8018472:	d106      	bne.n	8018482 <__sflush_r+0x66>
 8018474:	6829      	ldr	r1, [r5, #0]
 8018476:	291d      	cmp	r1, #29
 8018478:	d82c      	bhi.n	80184d4 <__sflush_r+0xb8>
 801847a:	4a2a      	ldr	r2, [pc, #168]	; (8018524 <__sflush_r+0x108>)
 801847c:	40ca      	lsrs	r2, r1
 801847e:	07d6      	lsls	r6, r2, #31
 8018480:	d528      	bpl.n	80184d4 <__sflush_r+0xb8>
 8018482:	2200      	movs	r2, #0
 8018484:	6062      	str	r2, [r4, #4]
 8018486:	04d9      	lsls	r1, r3, #19
 8018488:	6922      	ldr	r2, [r4, #16]
 801848a:	6022      	str	r2, [r4, #0]
 801848c:	d504      	bpl.n	8018498 <__sflush_r+0x7c>
 801848e:	1c42      	adds	r2, r0, #1
 8018490:	d101      	bne.n	8018496 <__sflush_r+0x7a>
 8018492:	682b      	ldr	r3, [r5, #0]
 8018494:	b903      	cbnz	r3, 8018498 <__sflush_r+0x7c>
 8018496:	6560      	str	r0, [r4, #84]	; 0x54
 8018498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801849a:	602f      	str	r7, [r5, #0]
 801849c:	2900      	cmp	r1, #0
 801849e:	d0ca      	beq.n	8018436 <__sflush_r+0x1a>
 80184a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184a4:	4299      	cmp	r1, r3
 80184a6:	d002      	beq.n	80184ae <__sflush_r+0x92>
 80184a8:	4628      	mov	r0, r5
 80184aa:	f7ff fd43 	bl	8017f34 <_free_r>
 80184ae:	2000      	movs	r0, #0
 80184b0:	6360      	str	r0, [r4, #52]	; 0x34
 80184b2:	e7c1      	b.n	8018438 <__sflush_r+0x1c>
 80184b4:	6a21      	ldr	r1, [r4, #32]
 80184b6:	2301      	movs	r3, #1
 80184b8:	4628      	mov	r0, r5
 80184ba:	47b0      	blx	r6
 80184bc:	1c41      	adds	r1, r0, #1
 80184be:	d1c7      	bne.n	8018450 <__sflush_r+0x34>
 80184c0:	682b      	ldr	r3, [r5, #0]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d0c4      	beq.n	8018450 <__sflush_r+0x34>
 80184c6:	2b1d      	cmp	r3, #29
 80184c8:	d001      	beq.n	80184ce <__sflush_r+0xb2>
 80184ca:	2b16      	cmp	r3, #22
 80184cc:	d101      	bne.n	80184d2 <__sflush_r+0xb6>
 80184ce:	602f      	str	r7, [r5, #0]
 80184d0:	e7b1      	b.n	8018436 <__sflush_r+0x1a>
 80184d2:	89a3      	ldrh	r3, [r4, #12]
 80184d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184d8:	81a3      	strh	r3, [r4, #12]
 80184da:	e7ad      	b.n	8018438 <__sflush_r+0x1c>
 80184dc:	690f      	ldr	r7, [r1, #16]
 80184de:	2f00      	cmp	r7, #0
 80184e0:	d0a9      	beq.n	8018436 <__sflush_r+0x1a>
 80184e2:	0793      	lsls	r3, r2, #30
 80184e4:	680e      	ldr	r6, [r1, #0]
 80184e6:	bf08      	it	eq
 80184e8:	694b      	ldreq	r3, [r1, #20]
 80184ea:	600f      	str	r7, [r1, #0]
 80184ec:	bf18      	it	ne
 80184ee:	2300      	movne	r3, #0
 80184f0:	eba6 0807 	sub.w	r8, r6, r7
 80184f4:	608b      	str	r3, [r1, #8]
 80184f6:	f1b8 0f00 	cmp.w	r8, #0
 80184fa:	dd9c      	ble.n	8018436 <__sflush_r+0x1a>
 80184fc:	6a21      	ldr	r1, [r4, #32]
 80184fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018500:	4643      	mov	r3, r8
 8018502:	463a      	mov	r2, r7
 8018504:	4628      	mov	r0, r5
 8018506:	47b0      	blx	r6
 8018508:	2800      	cmp	r0, #0
 801850a:	dc06      	bgt.n	801851a <__sflush_r+0xfe>
 801850c:	89a3      	ldrh	r3, [r4, #12]
 801850e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018512:	81a3      	strh	r3, [r4, #12]
 8018514:	f04f 30ff 	mov.w	r0, #4294967295
 8018518:	e78e      	b.n	8018438 <__sflush_r+0x1c>
 801851a:	4407      	add	r7, r0
 801851c:	eba8 0800 	sub.w	r8, r8, r0
 8018520:	e7e9      	b.n	80184f6 <__sflush_r+0xda>
 8018522:	bf00      	nop
 8018524:	20400001 	.word	0x20400001

08018528 <_fflush_r>:
 8018528:	b538      	push	{r3, r4, r5, lr}
 801852a:	690b      	ldr	r3, [r1, #16]
 801852c:	4605      	mov	r5, r0
 801852e:	460c      	mov	r4, r1
 8018530:	b913      	cbnz	r3, 8018538 <_fflush_r+0x10>
 8018532:	2500      	movs	r5, #0
 8018534:	4628      	mov	r0, r5
 8018536:	bd38      	pop	{r3, r4, r5, pc}
 8018538:	b118      	cbz	r0, 8018542 <_fflush_r+0x1a>
 801853a:	6983      	ldr	r3, [r0, #24]
 801853c:	b90b      	cbnz	r3, 8018542 <_fflush_r+0x1a>
 801853e:	f000 f887 	bl	8018650 <__sinit>
 8018542:	4b14      	ldr	r3, [pc, #80]	; (8018594 <_fflush_r+0x6c>)
 8018544:	429c      	cmp	r4, r3
 8018546:	d11b      	bne.n	8018580 <_fflush_r+0x58>
 8018548:	686c      	ldr	r4, [r5, #4]
 801854a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d0ef      	beq.n	8018532 <_fflush_r+0xa>
 8018552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018554:	07d0      	lsls	r0, r2, #31
 8018556:	d404      	bmi.n	8018562 <_fflush_r+0x3a>
 8018558:	0599      	lsls	r1, r3, #22
 801855a:	d402      	bmi.n	8018562 <_fflush_r+0x3a>
 801855c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801855e:	f000 f915 	bl	801878c <__retarget_lock_acquire_recursive>
 8018562:	4628      	mov	r0, r5
 8018564:	4621      	mov	r1, r4
 8018566:	f7ff ff59 	bl	801841c <__sflush_r>
 801856a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801856c:	07da      	lsls	r2, r3, #31
 801856e:	4605      	mov	r5, r0
 8018570:	d4e0      	bmi.n	8018534 <_fflush_r+0xc>
 8018572:	89a3      	ldrh	r3, [r4, #12]
 8018574:	059b      	lsls	r3, r3, #22
 8018576:	d4dd      	bmi.n	8018534 <_fflush_r+0xc>
 8018578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801857a:	f000 f908 	bl	801878e <__retarget_lock_release_recursive>
 801857e:	e7d9      	b.n	8018534 <_fflush_r+0xc>
 8018580:	4b05      	ldr	r3, [pc, #20]	; (8018598 <_fflush_r+0x70>)
 8018582:	429c      	cmp	r4, r3
 8018584:	d101      	bne.n	801858a <_fflush_r+0x62>
 8018586:	68ac      	ldr	r4, [r5, #8]
 8018588:	e7df      	b.n	801854a <_fflush_r+0x22>
 801858a:	4b04      	ldr	r3, [pc, #16]	; (801859c <_fflush_r+0x74>)
 801858c:	429c      	cmp	r4, r3
 801858e:	bf08      	it	eq
 8018590:	68ec      	ldreq	r4, [r5, #12]
 8018592:	e7da      	b.n	801854a <_fflush_r+0x22>
 8018594:	0801ba74 	.word	0x0801ba74
 8018598:	0801ba94 	.word	0x0801ba94
 801859c:	0801ba54 	.word	0x0801ba54

080185a0 <std>:
 80185a0:	2300      	movs	r3, #0
 80185a2:	b510      	push	{r4, lr}
 80185a4:	4604      	mov	r4, r0
 80185a6:	e9c0 3300 	strd	r3, r3, [r0]
 80185aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80185ae:	6083      	str	r3, [r0, #8]
 80185b0:	8181      	strh	r1, [r0, #12]
 80185b2:	6643      	str	r3, [r0, #100]	; 0x64
 80185b4:	81c2      	strh	r2, [r0, #14]
 80185b6:	6183      	str	r3, [r0, #24]
 80185b8:	4619      	mov	r1, r3
 80185ba:	2208      	movs	r2, #8
 80185bc:	305c      	adds	r0, #92	; 0x5c
 80185be:	f7ff fcb1 	bl	8017f24 <memset>
 80185c2:	4b05      	ldr	r3, [pc, #20]	; (80185d8 <std+0x38>)
 80185c4:	6263      	str	r3, [r4, #36]	; 0x24
 80185c6:	4b05      	ldr	r3, [pc, #20]	; (80185dc <std+0x3c>)
 80185c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80185ca:	4b05      	ldr	r3, [pc, #20]	; (80185e0 <std+0x40>)
 80185cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80185ce:	4b05      	ldr	r3, [pc, #20]	; (80185e4 <std+0x44>)
 80185d0:	6224      	str	r4, [r4, #32]
 80185d2:	6323      	str	r3, [r4, #48]	; 0x30
 80185d4:	bd10      	pop	{r4, pc}
 80185d6:	bf00      	nop
 80185d8:	08019199 	.word	0x08019199
 80185dc:	080191bb 	.word	0x080191bb
 80185e0:	080191f3 	.word	0x080191f3
 80185e4:	08019217 	.word	0x08019217

080185e8 <_cleanup_r>:
 80185e8:	4901      	ldr	r1, [pc, #4]	; (80185f0 <_cleanup_r+0x8>)
 80185ea:	f000 b8af 	b.w	801874c <_fwalk_reent>
 80185ee:	bf00      	nop
 80185f0:	08018529 	.word	0x08018529

080185f4 <__sfmoreglue>:
 80185f4:	b570      	push	{r4, r5, r6, lr}
 80185f6:	2268      	movs	r2, #104	; 0x68
 80185f8:	1e4d      	subs	r5, r1, #1
 80185fa:	4355      	muls	r5, r2
 80185fc:	460e      	mov	r6, r1
 80185fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018602:	f7ff fd03 	bl	801800c <_malloc_r>
 8018606:	4604      	mov	r4, r0
 8018608:	b140      	cbz	r0, 801861c <__sfmoreglue+0x28>
 801860a:	2100      	movs	r1, #0
 801860c:	e9c0 1600 	strd	r1, r6, [r0]
 8018610:	300c      	adds	r0, #12
 8018612:	60a0      	str	r0, [r4, #8]
 8018614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018618:	f7ff fc84 	bl	8017f24 <memset>
 801861c:	4620      	mov	r0, r4
 801861e:	bd70      	pop	{r4, r5, r6, pc}

08018620 <__sfp_lock_acquire>:
 8018620:	4801      	ldr	r0, [pc, #4]	; (8018628 <__sfp_lock_acquire+0x8>)
 8018622:	f000 b8b3 	b.w	801878c <__retarget_lock_acquire_recursive>
 8018626:	bf00      	nop
 8018628:	2004a13d 	.word	0x2004a13d

0801862c <__sfp_lock_release>:
 801862c:	4801      	ldr	r0, [pc, #4]	; (8018634 <__sfp_lock_release+0x8>)
 801862e:	f000 b8ae 	b.w	801878e <__retarget_lock_release_recursive>
 8018632:	bf00      	nop
 8018634:	2004a13d 	.word	0x2004a13d

08018638 <__sinit_lock_acquire>:
 8018638:	4801      	ldr	r0, [pc, #4]	; (8018640 <__sinit_lock_acquire+0x8>)
 801863a:	f000 b8a7 	b.w	801878c <__retarget_lock_acquire_recursive>
 801863e:	bf00      	nop
 8018640:	2004a13e 	.word	0x2004a13e

08018644 <__sinit_lock_release>:
 8018644:	4801      	ldr	r0, [pc, #4]	; (801864c <__sinit_lock_release+0x8>)
 8018646:	f000 b8a2 	b.w	801878e <__retarget_lock_release_recursive>
 801864a:	bf00      	nop
 801864c:	2004a13e 	.word	0x2004a13e

08018650 <__sinit>:
 8018650:	b510      	push	{r4, lr}
 8018652:	4604      	mov	r4, r0
 8018654:	f7ff fff0 	bl	8018638 <__sinit_lock_acquire>
 8018658:	69a3      	ldr	r3, [r4, #24]
 801865a:	b11b      	cbz	r3, 8018664 <__sinit+0x14>
 801865c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018660:	f7ff bff0 	b.w	8018644 <__sinit_lock_release>
 8018664:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018668:	6523      	str	r3, [r4, #80]	; 0x50
 801866a:	4b13      	ldr	r3, [pc, #76]	; (80186b8 <__sinit+0x68>)
 801866c:	4a13      	ldr	r2, [pc, #76]	; (80186bc <__sinit+0x6c>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	62a2      	str	r2, [r4, #40]	; 0x28
 8018672:	42a3      	cmp	r3, r4
 8018674:	bf04      	itt	eq
 8018676:	2301      	moveq	r3, #1
 8018678:	61a3      	streq	r3, [r4, #24]
 801867a:	4620      	mov	r0, r4
 801867c:	f000 f820 	bl	80186c0 <__sfp>
 8018680:	6060      	str	r0, [r4, #4]
 8018682:	4620      	mov	r0, r4
 8018684:	f000 f81c 	bl	80186c0 <__sfp>
 8018688:	60a0      	str	r0, [r4, #8]
 801868a:	4620      	mov	r0, r4
 801868c:	f000 f818 	bl	80186c0 <__sfp>
 8018690:	2200      	movs	r2, #0
 8018692:	60e0      	str	r0, [r4, #12]
 8018694:	2104      	movs	r1, #4
 8018696:	6860      	ldr	r0, [r4, #4]
 8018698:	f7ff ff82 	bl	80185a0 <std>
 801869c:	68a0      	ldr	r0, [r4, #8]
 801869e:	2201      	movs	r2, #1
 80186a0:	2109      	movs	r1, #9
 80186a2:	f7ff ff7d 	bl	80185a0 <std>
 80186a6:	68e0      	ldr	r0, [r4, #12]
 80186a8:	2202      	movs	r2, #2
 80186aa:	2112      	movs	r1, #18
 80186ac:	f7ff ff78 	bl	80185a0 <std>
 80186b0:	2301      	movs	r3, #1
 80186b2:	61a3      	str	r3, [r4, #24]
 80186b4:	e7d2      	b.n	801865c <__sinit+0xc>
 80186b6:	bf00      	nop
 80186b8:	0801ba50 	.word	0x0801ba50
 80186bc:	080185e9 	.word	0x080185e9

080186c0 <__sfp>:
 80186c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186c2:	4607      	mov	r7, r0
 80186c4:	f7ff ffac 	bl	8018620 <__sfp_lock_acquire>
 80186c8:	4b1e      	ldr	r3, [pc, #120]	; (8018744 <__sfp+0x84>)
 80186ca:	681e      	ldr	r6, [r3, #0]
 80186cc:	69b3      	ldr	r3, [r6, #24]
 80186ce:	b913      	cbnz	r3, 80186d6 <__sfp+0x16>
 80186d0:	4630      	mov	r0, r6
 80186d2:	f7ff ffbd 	bl	8018650 <__sinit>
 80186d6:	3648      	adds	r6, #72	; 0x48
 80186d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80186dc:	3b01      	subs	r3, #1
 80186de:	d503      	bpl.n	80186e8 <__sfp+0x28>
 80186e0:	6833      	ldr	r3, [r6, #0]
 80186e2:	b30b      	cbz	r3, 8018728 <__sfp+0x68>
 80186e4:	6836      	ldr	r6, [r6, #0]
 80186e6:	e7f7      	b.n	80186d8 <__sfp+0x18>
 80186e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80186ec:	b9d5      	cbnz	r5, 8018724 <__sfp+0x64>
 80186ee:	4b16      	ldr	r3, [pc, #88]	; (8018748 <__sfp+0x88>)
 80186f0:	60e3      	str	r3, [r4, #12]
 80186f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80186f6:	6665      	str	r5, [r4, #100]	; 0x64
 80186f8:	f000 f847 	bl	801878a <__retarget_lock_init_recursive>
 80186fc:	f7ff ff96 	bl	801862c <__sfp_lock_release>
 8018700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018708:	6025      	str	r5, [r4, #0]
 801870a:	61a5      	str	r5, [r4, #24]
 801870c:	2208      	movs	r2, #8
 801870e:	4629      	mov	r1, r5
 8018710:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018714:	f7ff fc06 	bl	8017f24 <memset>
 8018718:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801871c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018720:	4620      	mov	r0, r4
 8018722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018724:	3468      	adds	r4, #104	; 0x68
 8018726:	e7d9      	b.n	80186dc <__sfp+0x1c>
 8018728:	2104      	movs	r1, #4
 801872a:	4638      	mov	r0, r7
 801872c:	f7ff ff62 	bl	80185f4 <__sfmoreglue>
 8018730:	4604      	mov	r4, r0
 8018732:	6030      	str	r0, [r6, #0]
 8018734:	2800      	cmp	r0, #0
 8018736:	d1d5      	bne.n	80186e4 <__sfp+0x24>
 8018738:	f7ff ff78 	bl	801862c <__sfp_lock_release>
 801873c:	230c      	movs	r3, #12
 801873e:	603b      	str	r3, [r7, #0]
 8018740:	e7ee      	b.n	8018720 <__sfp+0x60>
 8018742:	bf00      	nop
 8018744:	0801ba50 	.word	0x0801ba50
 8018748:	ffff0001 	.word	0xffff0001

0801874c <_fwalk_reent>:
 801874c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018750:	4606      	mov	r6, r0
 8018752:	4688      	mov	r8, r1
 8018754:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018758:	2700      	movs	r7, #0
 801875a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801875e:	f1b9 0901 	subs.w	r9, r9, #1
 8018762:	d505      	bpl.n	8018770 <_fwalk_reent+0x24>
 8018764:	6824      	ldr	r4, [r4, #0]
 8018766:	2c00      	cmp	r4, #0
 8018768:	d1f7      	bne.n	801875a <_fwalk_reent+0xe>
 801876a:	4638      	mov	r0, r7
 801876c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018770:	89ab      	ldrh	r3, [r5, #12]
 8018772:	2b01      	cmp	r3, #1
 8018774:	d907      	bls.n	8018786 <_fwalk_reent+0x3a>
 8018776:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801877a:	3301      	adds	r3, #1
 801877c:	d003      	beq.n	8018786 <_fwalk_reent+0x3a>
 801877e:	4629      	mov	r1, r5
 8018780:	4630      	mov	r0, r6
 8018782:	47c0      	blx	r8
 8018784:	4307      	orrs	r7, r0
 8018786:	3568      	adds	r5, #104	; 0x68
 8018788:	e7e9      	b.n	801875e <_fwalk_reent+0x12>

0801878a <__retarget_lock_init_recursive>:
 801878a:	4770      	bx	lr

0801878c <__retarget_lock_acquire_recursive>:
 801878c:	4770      	bx	lr

0801878e <__retarget_lock_release_recursive>:
 801878e:	4770      	bx	lr

08018790 <__swhatbuf_r>:
 8018790:	b570      	push	{r4, r5, r6, lr}
 8018792:	460e      	mov	r6, r1
 8018794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018798:	2900      	cmp	r1, #0
 801879a:	b096      	sub	sp, #88	; 0x58
 801879c:	4614      	mov	r4, r2
 801879e:	461d      	mov	r5, r3
 80187a0:	da08      	bge.n	80187b4 <__swhatbuf_r+0x24>
 80187a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80187a6:	2200      	movs	r2, #0
 80187a8:	602a      	str	r2, [r5, #0]
 80187aa:	061a      	lsls	r2, r3, #24
 80187ac:	d410      	bmi.n	80187d0 <__swhatbuf_r+0x40>
 80187ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80187b2:	e00e      	b.n	80187d2 <__swhatbuf_r+0x42>
 80187b4:	466a      	mov	r2, sp
 80187b6:	f000 fd55 	bl	8019264 <_fstat_r>
 80187ba:	2800      	cmp	r0, #0
 80187bc:	dbf1      	blt.n	80187a2 <__swhatbuf_r+0x12>
 80187be:	9a01      	ldr	r2, [sp, #4]
 80187c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80187c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80187c8:	425a      	negs	r2, r3
 80187ca:	415a      	adcs	r2, r3
 80187cc:	602a      	str	r2, [r5, #0]
 80187ce:	e7ee      	b.n	80187ae <__swhatbuf_r+0x1e>
 80187d0:	2340      	movs	r3, #64	; 0x40
 80187d2:	2000      	movs	r0, #0
 80187d4:	6023      	str	r3, [r4, #0]
 80187d6:	b016      	add	sp, #88	; 0x58
 80187d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080187dc <__smakebuf_r>:
 80187dc:	898b      	ldrh	r3, [r1, #12]
 80187de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80187e0:	079d      	lsls	r5, r3, #30
 80187e2:	4606      	mov	r6, r0
 80187e4:	460c      	mov	r4, r1
 80187e6:	d507      	bpl.n	80187f8 <__smakebuf_r+0x1c>
 80187e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80187ec:	6023      	str	r3, [r4, #0]
 80187ee:	6123      	str	r3, [r4, #16]
 80187f0:	2301      	movs	r3, #1
 80187f2:	6163      	str	r3, [r4, #20]
 80187f4:	b002      	add	sp, #8
 80187f6:	bd70      	pop	{r4, r5, r6, pc}
 80187f8:	ab01      	add	r3, sp, #4
 80187fa:	466a      	mov	r2, sp
 80187fc:	f7ff ffc8 	bl	8018790 <__swhatbuf_r>
 8018800:	9900      	ldr	r1, [sp, #0]
 8018802:	4605      	mov	r5, r0
 8018804:	4630      	mov	r0, r6
 8018806:	f7ff fc01 	bl	801800c <_malloc_r>
 801880a:	b948      	cbnz	r0, 8018820 <__smakebuf_r+0x44>
 801880c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018810:	059a      	lsls	r2, r3, #22
 8018812:	d4ef      	bmi.n	80187f4 <__smakebuf_r+0x18>
 8018814:	f023 0303 	bic.w	r3, r3, #3
 8018818:	f043 0302 	orr.w	r3, r3, #2
 801881c:	81a3      	strh	r3, [r4, #12]
 801881e:	e7e3      	b.n	80187e8 <__smakebuf_r+0xc>
 8018820:	4b0d      	ldr	r3, [pc, #52]	; (8018858 <__smakebuf_r+0x7c>)
 8018822:	62b3      	str	r3, [r6, #40]	; 0x28
 8018824:	89a3      	ldrh	r3, [r4, #12]
 8018826:	6020      	str	r0, [r4, #0]
 8018828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801882c:	81a3      	strh	r3, [r4, #12]
 801882e:	9b00      	ldr	r3, [sp, #0]
 8018830:	6163      	str	r3, [r4, #20]
 8018832:	9b01      	ldr	r3, [sp, #4]
 8018834:	6120      	str	r0, [r4, #16]
 8018836:	b15b      	cbz	r3, 8018850 <__smakebuf_r+0x74>
 8018838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801883c:	4630      	mov	r0, r6
 801883e:	f000 fd23 	bl	8019288 <_isatty_r>
 8018842:	b128      	cbz	r0, 8018850 <__smakebuf_r+0x74>
 8018844:	89a3      	ldrh	r3, [r4, #12]
 8018846:	f023 0303 	bic.w	r3, r3, #3
 801884a:	f043 0301 	orr.w	r3, r3, #1
 801884e:	81a3      	strh	r3, [r4, #12]
 8018850:	89a0      	ldrh	r0, [r4, #12]
 8018852:	4305      	orrs	r5, r0
 8018854:	81a5      	strh	r5, [r4, #12]
 8018856:	e7cd      	b.n	80187f4 <__smakebuf_r+0x18>
 8018858:	080185e9 	.word	0x080185e9

0801885c <__malloc_lock>:
 801885c:	4801      	ldr	r0, [pc, #4]	; (8018864 <__malloc_lock+0x8>)
 801885e:	f7ff bf95 	b.w	801878c <__retarget_lock_acquire_recursive>
 8018862:	bf00      	nop
 8018864:	2004a13c 	.word	0x2004a13c

08018868 <__malloc_unlock>:
 8018868:	4801      	ldr	r0, [pc, #4]	; (8018870 <__malloc_unlock+0x8>)
 801886a:	f7ff bf90 	b.w	801878e <__retarget_lock_release_recursive>
 801886e:	bf00      	nop
 8018870:	2004a13c 	.word	0x2004a13c

08018874 <__ssputs_r>:
 8018874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018878:	688e      	ldr	r6, [r1, #8]
 801887a:	429e      	cmp	r6, r3
 801887c:	4682      	mov	sl, r0
 801887e:	460c      	mov	r4, r1
 8018880:	4690      	mov	r8, r2
 8018882:	461f      	mov	r7, r3
 8018884:	d838      	bhi.n	80188f8 <__ssputs_r+0x84>
 8018886:	898a      	ldrh	r2, [r1, #12]
 8018888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801888c:	d032      	beq.n	80188f4 <__ssputs_r+0x80>
 801888e:	6825      	ldr	r5, [r4, #0]
 8018890:	6909      	ldr	r1, [r1, #16]
 8018892:	eba5 0901 	sub.w	r9, r5, r1
 8018896:	6965      	ldr	r5, [r4, #20]
 8018898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801889c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80188a0:	3301      	adds	r3, #1
 80188a2:	444b      	add	r3, r9
 80188a4:	106d      	asrs	r5, r5, #1
 80188a6:	429d      	cmp	r5, r3
 80188a8:	bf38      	it	cc
 80188aa:	461d      	movcc	r5, r3
 80188ac:	0553      	lsls	r3, r2, #21
 80188ae:	d531      	bpl.n	8018914 <__ssputs_r+0xa0>
 80188b0:	4629      	mov	r1, r5
 80188b2:	f7ff fbab 	bl	801800c <_malloc_r>
 80188b6:	4606      	mov	r6, r0
 80188b8:	b950      	cbnz	r0, 80188d0 <__ssputs_r+0x5c>
 80188ba:	230c      	movs	r3, #12
 80188bc:	f8ca 3000 	str.w	r3, [sl]
 80188c0:	89a3      	ldrh	r3, [r4, #12]
 80188c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188c6:	81a3      	strh	r3, [r4, #12]
 80188c8:	f04f 30ff 	mov.w	r0, #4294967295
 80188cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188d0:	6921      	ldr	r1, [r4, #16]
 80188d2:	464a      	mov	r2, r9
 80188d4:	f7ff fb18 	bl	8017f08 <memcpy>
 80188d8:	89a3      	ldrh	r3, [r4, #12]
 80188da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80188de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188e2:	81a3      	strh	r3, [r4, #12]
 80188e4:	6126      	str	r6, [r4, #16]
 80188e6:	6165      	str	r5, [r4, #20]
 80188e8:	444e      	add	r6, r9
 80188ea:	eba5 0509 	sub.w	r5, r5, r9
 80188ee:	6026      	str	r6, [r4, #0]
 80188f0:	60a5      	str	r5, [r4, #8]
 80188f2:	463e      	mov	r6, r7
 80188f4:	42be      	cmp	r6, r7
 80188f6:	d900      	bls.n	80188fa <__ssputs_r+0x86>
 80188f8:	463e      	mov	r6, r7
 80188fa:	6820      	ldr	r0, [r4, #0]
 80188fc:	4632      	mov	r2, r6
 80188fe:	4641      	mov	r1, r8
 8018900:	f000 fce4 	bl	80192cc <memmove>
 8018904:	68a3      	ldr	r3, [r4, #8]
 8018906:	1b9b      	subs	r3, r3, r6
 8018908:	60a3      	str	r3, [r4, #8]
 801890a:	6823      	ldr	r3, [r4, #0]
 801890c:	4433      	add	r3, r6
 801890e:	6023      	str	r3, [r4, #0]
 8018910:	2000      	movs	r0, #0
 8018912:	e7db      	b.n	80188cc <__ssputs_r+0x58>
 8018914:	462a      	mov	r2, r5
 8018916:	f000 fcf3 	bl	8019300 <_realloc_r>
 801891a:	4606      	mov	r6, r0
 801891c:	2800      	cmp	r0, #0
 801891e:	d1e1      	bne.n	80188e4 <__ssputs_r+0x70>
 8018920:	6921      	ldr	r1, [r4, #16]
 8018922:	4650      	mov	r0, sl
 8018924:	f7ff fb06 	bl	8017f34 <_free_r>
 8018928:	e7c7      	b.n	80188ba <__ssputs_r+0x46>
	...

0801892c <_svfiprintf_r>:
 801892c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018930:	4698      	mov	r8, r3
 8018932:	898b      	ldrh	r3, [r1, #12]
 8018934:	061b      	lsls	r3, r3, #24
 8018936:	b09d      	sub	sp, #116	; 0x74
 8018938:	4607      	mov	r7, r0
 801893a:	460d      	mov	r5, r1
 801893c:	4614      	mov	r4, r2
 801893e:	d50e      	bpl.n	801895e <_svfiprintf_r+0x32>
 8018940:	690b      	ldr	r3, [r1, #16]
 8018942:	b963      	cbnz	r3, 801895e <_svfiprintf_r+0x32>
 8018944:	2140      	movs	r1, #64	; 0x40
 8018946:	f7ff fb61 	bl	801800c <_malloc_r>
 801894a:	6028      	str	r0, [r5, #0]
 801894c:	6128      	str	r0, [r5, #16]
 801894e:	b920      	cbnz	r0, 801895a <_svfiprintf_r+0x2e>
 8018950:	230c      	movs	r3, #12
 8018952:	603b      	str	r3, [r7, #0]
 8018954:	f04f 30ff 	mov.w	r0, #4294967295
 8018958:	e0d1      	b.n	8018afe <_svfiprintf_r+0x1d2>
 801895a:	2340      	movs	r3, #64	; 0x40
 801895c:	616b      	str	r3, [r5, #20]
 801895e:	2300      	movs	r3, #0
 8018960:	9309      	str	r3, [sp, #36]	; 0x24
 8018962:	2320      	movs	r3, #32
 8018964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018968:	f8cd 800c 	str.w	r8, [sp, #12]
 801896c:	2330      	movs	r3, #48	; 0x30
 801896e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018b18 <_svfiprintf_r+0x1ec>
 8018972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018976:	f04f 0901 	mov.w	r9, #1
 801897a:	4623      	mov	r3, r4
 801897c:	469a      	mov	sl, r3
 801897e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018982:	b10a      	cbz	r2, 8018988 <_svfiprintf_r+0x5c>
 8018984:	2a25      	cmp	r2, #37	; 0x25
 8018986:	d1f9      	bne.n	801897c <_svfiprintf_r+0x50>
 8018988:	ebba 0b04 	subs.w	fp, sl, r4
 801898c:	d00b      	beq.n	80189a6 <_svfiprintf_r+0x7a>
 801898e:	465b      	mov	r3, fp
 8018990:	4622      	mov	r2, r4
 8018992:	4629      	mov	r1, r5
 8018994:	4638      	mov	r0, r7
 8018996:	f7ff ff6d 	bl	8018874 <__ssputs_r>
 801899a:	3001      	adds	r0, #1
 801899c:	f000 80aa 	beq.w	8018af4 <_svfiprintf_r+0x1c8>
 80189a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189a2:	445a      	add	r2, fp
 80189a4:	9209      	str	r2, [sp, #36]	; 0x24
 80189a6:	f89a 3000 	ldrb.w	r3, [sl]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	f000 80a2 	beq.w	8018af4 <_svfiprintf_r+0x1c8>
 80189b0:	2300      	movs	r3, #0
 80189b2:	f04f 32ff 	mov.w	r2, #4294967295
 80189b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189ba:	f10a 0a01 	add.w	sl, sl, #1
 80189be:	9304      	str	r3, [sp, #16]
 80189c0:	9307      	str	r3, [sp, #28]
 80189c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80189c6:	931a      	str	r3, [sp, #104]	; 0x68
 80189c8:	4654      	mov	r4, sl
 80189ca:	2205      	movs	r2, #5
 80189cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189d0:	4851      	ldr	r0, [pc, #324]	; (8018b18 <_svfiprintf_r+0x1ec>)
 80189d2:	f7e7 fc1d 	bl	8000210 <memchr>
 80189d6:	9a04      	ldr	r2, [sp, #16]
 80189d8:	b9d8      	cbnz	r0, 8018a12 <_svfiprintf_r+0xe6>
 80189da:	06d0      	lsls	r0, r2, #27
 80189dc:	bf44      	itt	mi
 80189de:	2320      	movmi	r3, #32
 80189e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189e4:	0711      	lsls	r1, r2, #28
 80189e6:	bf44      	itt	mi
 80189e8:	232b      	movmi	r3, #43	; 0x2b
 80189ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189ee:	f89a 3000 	ldrb.w	r3, [sl]
 80189f2:	2b2a      	cmp	r3, #42	; 0x2a
 80189f4:	d015      	beq.n	8018a22 <_svfiprintf_r+0xf6>
 80189f6:	9a07      	ldr	r2, [sp, #28]
 80189f8:	4654      	mov	r4, sl
 80189fa:	2000      	movs	r0, #0
 80189fc:	f04f 0c0a 	mov.w	ip, #10
 8018a00:	4621      	mov	r1, r4
 8018a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a06:	3b30      	subs	r3, #48	; 0x30
 8018a08:	2b09      	cmp	r3, #9
 8018a0a:	d94e      	bls.n	8018aaa <_svfiprintf_r+0x17e>
 8018a0c:	b1b0      	cbz	r0, 8018a3c <_svfiprintf_r+0x110>
 8018a0e:	9207      	str	r2, [sp, #28]
 8018a10:	e014      	b.n	8018a3c <_svfiprintf_r+0x110>
 8018a12:	eba0 0308 	sub.w	r3, r0, r8
 8018a16:	fa09 f303 	lsl.w	r3, r9, r3
 8018a1a:	4313      	orrs	r3, r2
 8018a1c:	9304      	str	r3, [sp, #16]
 8018a1e:	46a2      	mov	sl, r4
 8018a20:	e7d2      	b.n	80189c8 <_svfiprintf_r+0x9c>
 8018a22:	9b03      	ldr	r3, [sp, #12]
 8018a24:	1d19      	adds	r1, r3, #4
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	9103      	str	r1, [sp, #12]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	bfbb      	ittet	lt
 8018a2e:	425b      	neglt	r3, r3
 8018a30:	f042 0202 	orrlt.w	r2, r2, #2
 8018a34:	9307      	strge	r3, [sp, #28]
 8018a36:	9307      	strlt	r3, [sp, #28]
 8018a38:	bfb8      	it	lt
 8018a3a:	9204      	strlt	r2, [sp, #16]
 8018a3c:	7823      	ldrb	r3, [r4, #0]
 8018a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8018a40:	d10c      	bne.n	8018a5c <_svfiprintf_r+0x130>
 8018a42:	7863      	ldrb	r3, [r4, #1]
 8018a44:	2b2a      	cmp	r3, #42	; 0x2a
 8018a46:	d135      	bne.n	8018ab4 <_svfiprintf_r+0x188>
 8018a48:	9b03      	ldr	r3, [sp, #12]
 8018a4a:	1d1a      	adds	r2, r3, #4
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	9203      	str	r2, [sp, #12]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	bfb8      	it	lt
 8018a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a58:	3402      	adds	r4, #2
 8018a5a:	9305      	str	r3, [sp, #20]
 8018a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018b28 <_svfiprintf_r+0x1fc>
 8018a60:	7821      	ldrb	r1, [r4, #0]
 8018a62:	2203      	movs	r2, #3
 8018a64:	4650      	mov	r0, sl
 8018a66:	f7e7 fbd3 	bl	8000210 <memchr>
 8018a6a:	b140      	cbz	r0, 8018a7e <_svfiprintf_r+0x152>
 8018a6c:	2340      	movs	r3, #64	; 0x40
 8018a6e:	eba0 000a 	sub.w	r0, r0, sl
 8018a72:	fa03 f000 	lsl.w	r0, r3, r0
 8018a76:	9b04      	ldr	r3, [sp, #16]
 8018a78:	4303      	orrs	r3, r0
 8018a7a:	3401      	adds	r4, #1
 8018a7c:	9304      	str	r3, [sp, #16]
 8018a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a82:	4826      	ldr	r0, [pc, #152]	; (8018b1c <_svfiprintf_r+0x1f0>)
 8018a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a88:	2206      	movs	r2, #6
 8018a8a:	f7e7 fbc1 	bl	8000210 <memchr>
 8018a8e:	2800      	cmp	r0, #0
 8018a90:	d038      	beq.n	8018b04 <_svfiprintf_r+0x1d8>
 8018a92:	4b23      	ldr	r3, [pc, #140]	; (8018b20 <_svfiprintf_r+0x1f4>)
 8018a94:	bb1b      	cbnz	r3, 8018ade <_svfiprintf_r+0x1b2>
 8018a96:	9b03      	ldr	r3, [sp, #12]
 8018a98:	3307      	adds	r3, #7
 8018a9a:	f023 0307 	bic.w	r3, r3, #7
 8018a9e:	3308      	adds	r3, #8
 8018aa0:	9303      	str	r3, [sp, #12]
 8018aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018aa4:	4433      	add	r3, r6
 8018aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8018aa8:	e767      	b.n	801897a <_svfiprintf_r+0x4e>
 8018aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8018aae:	460c      	mov	r4, r1
 8018ab0:	2001      	movs	r0, #1
 8018ab2:	e7a5      	b.n	8018a00 <_svfiprintf_r+0xd4>
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	3401      	adds	r4, #1
 8018ab8:	9305      	str	r3, [sp, #20]
 8018aba:	4619      	mov	r1, r3
 8018abc:	f04f 0c0a 	mov.w	ip, #10
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ac6:	3a30      	subs	r2, #48	; 0x30
 8018ac8:	2a09      	cmp	r2, #9
 8018aca:	d903      	bls.n	8018ad4 <_svfiprintf_r+0x1a8>
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d0c5      	beq.n	8018a5c <_svfiprintf_r+0x130>
 8018ad0:	9105      	str	r1, [sp, #20]
 8018ad2:	e7c3      	b.n	8018a5c <_svfiprintf_r+0x130>
 8018ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ad8:	4604      	mov	r4, r0
 8018ada:	2301      	movs	r3, #1
 8018adc:	e7f0      	b.n	8018ac0 <_svfiprintf_r+0x194>
 8018ade:	ab03      	add	r3, sp, #12
 8018ae0:	9300      	str	r3, [sp, #0]
 8018ae2:	462a      	mov	r2, r5
 8018ae4:	4b0f      	ldr	r3, [pc, #60]	; (8018b24 <_svfiprintf_r+0x1f8>)
 8018ae6:	a904      	add	r1, sp, #16
 8018ae8:	4638      	mov	r0, r7
 8018aea:	f3af 8000 	nop.w
 8018aee:	1c42      	adds	r2, r0, #1
 8018af0:	4606      	mov	r6, r0
 8018af2:	d1d6      	bne.n	8018aa2 <_svfiprintf_r+0x176>
 8018af4:	89ab      	ldrh	r3, [r5, #12]
 8018af6:	065b      	lsls	r3, r3, #25
 8018af8:	f53f af2c 	bmi.w	8018954 <_svfiprintf_r+0x28>
 8018afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018afe:	b01d      	add	sp, #116	; 0x74
 8018b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b04:	ab03      	add	r3, sp, #12
 8018b06:	9300      	str	r3, [sp, #0]
 8018b08:	462a      	mov	r2, r5
 8018b0a:	4b06      	ldr	r3, [pc, #24]	; (8018b24 <_svfiprintf_r+0x1f8>)
 8018b0c:	a904      	add	r1, sp, #16
 8018b0e:	4638      	mov	r0, r7
 8018b10:	f000 f9d4 	bl	8018ebc <_printf_i>
 8018b14:	e7eb      	b.n	8018aee <_svfiprintf_r+0x1c2>
 8018b16:	bf00      	nop
 8018b18:	0801bab4 	.word	0x0801bab4
 8018b1c:	0801babe 	.word	0x0801babe
 8018b20:	00000000 	.word	0x00000000
 8018b24:	08018875 	.word	0x08018875
 8018b28:	0801baba 	.word	0x0801baba

08018b2c <__sfputc_r>:
 8018b2c:	6893      	ldr	r3, [r2, #8]
 8018b2e:	3b01      	subs	r3, #1
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	b410      	push	{r4}
 8018b34:	6093      	str	r3, [r2, #8]
 8018b36:	da08      	bge.n	8018b4a <__sfputc_r+0x1e>
 8018b38:	6994      	ldr	r4, [r2, #24]
 8018b3a:	42a3      	cmp	r3, r4
 8018b3c:	db01      	blt.n	8018b42 <__sfputc_r+0x16>
 8018b3e:	290a      	cmp	r1, #10
 8018b40:	d103      	bne.n	8018b4a <__sfputc_r+0x1e>
 8018b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b46:	f7ff bba9 	b.w	801829c <__swbuf_r>
 8018b4a:	6813      	ldr	r3, [r2, #0]
 8018b4c:	1c58      	adds	r0, r3, #1
 8018b4e:	6010      	str	r0, [r2, #0]
 8018b50:	7019      	strb	r1, [r3, #0]
 8018b52:	4608      	mov	r0, r1
 8018b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b58:	4770      	bx	lr

08018b5a <__sfputs_r>:
 8018b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b5c:	4606      	mov	r6, r0
 8018b5e:	460f      	mov	r7, r1
 8018b60:	4614      	mov	r4, r2
 8018b62:	18d5      	adds	r5, r2, r3
 8018b64:	42ac      	cmp	r4, r5
 8018b66:	d101      	bne.n	8018b6c <__sfputs_r+0x12>
 8018b68:	2000      	movs	r0, #0
 8018b6a:	e007      	b.n	8018b7c <__sfputs_r+0x22>
 8018b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b70:	463a      	mov	r2, r7
 8018b72:	4630      	mov	r0, r6
 8018b74:	f7ff ffda 	bl	8018b2c <__sfputc_r>
 8018b78:	1c43      	adds	r3, r0, #1
 8018b7a:	d1f3      	bne.n	8018b64 <__sfputs_r+0xa>
 8018b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018b80 <_vfiprintf_r>:
 8018b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b84:	460d      	mov	r5, r1
 8018b86:	b09d      	sub	sp, #116	; 0x74
 8018b88:	4614      	mov	r4, r2
 8018b8a:	4698      	mov	r8, r3
 8018b8c:	4606      	mov	r6, r0
 8018b8e:	b118      	cbz	r0, 8018b98 <_vfiprintf_r+0x18>
 8018b90:	6983      	ldr	r3, [r0, #24]
 8018b92:	b90b      	cbnz	r3, 8018b98 <_vfiprintf_r+0x18>
 8018b94:	f7ff fd5c 	bl	8018650 <__sinit>
 8018b98:	4b89      	ldr	r3, [pc, #548]	; (8018dc0 <_vfiprintf_r+0x240>)
 8018b9a:	429d      	cmp	r5, r3
 8018b9c:	d11b      	bne.n	8018bd6 <_vfiprintf_r+0x56>
 8018b9e:	6875      	ldr	r5, [r6, #4]
 8018ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ba2:	07d9      	lsls	r1, r3, #31
 8018ba4:	d405      	bmi.n	8018bb2 <_vfiprintf_r+0x32>
 8018ba6:	89ab      	ldrh	r3, [r5, #12]
 8018ba8:	059a      	lsls	r2, r3, #22
 8018baa:	d402      	bmi.n	8018bb2 <_vfiprintf_r+0x32>
 8018bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018bae:	f7ff fded 	bl	801878c <__retarget_lock_acquire_recursive>
 8018bb2:	89ab      	ldrh	r3, [r5, #12]
 8018bb4:	071b      	lsls	r3, r3, #28
 8018bb6:	d501      	bpl.n	8018bbc <_vfiprintf_r+0x3c>
 8018bb8:	692b      	ldr	r3, [r5, #16]
 8018bba:	b9eb      	cbnz	r3, 8018bf8 <_vfiprintf_r+0x78>
 8018bbc:	4629      	mov	r1, r5
 8018bbe:	4630      	mov	r0, r6
 8018bc0:	f7ff fbbe 	bl	8018340 <__swsetup_r>
 8018bc4:	b1c0      	cbz	r0, 8018bf8 <_vfiprintf_r+0x78>
 8018bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018bc8:	07dc      	lsls	r4, r3, #31
 8018bca:	d50e      	bpl.n	8018bea <_vfiprintf_r+0x6a>
 8018bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8018bd0:	b01d      	add	sp, #116	; 0x74
 8018bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bd6:	4b7b      	ldr	r3, [pc, #492]	; (8018dc4 <_vfiprintf_r+0x244>)
 8018bd8:	429d      	cmp	r5, r3
 8018bda:	d101      	bne.n	8018be0 <_vfiprintf_r+0x60>
 8018bdc:	68b5      	ldr	r5, [r6, #8]
 8018bde:	e7df      	b.n	8018ba0 <_vfiprintf_r+0x20>
 8018be0:	4b79      	ldr	r3, [pc, #484]	; (8018dc8 <_vfiprintf_r+0x248>)
 8018be2:	429d      	cmp	r5, r3
 8018be4:	bf08      	it	eq
 8018be6:	68f5      	ldreq	r5, [r6, #12]
 8018be8:	e7da      	b.n	8018ba0 <_vfiprintf_r+0x20>
 8018bea:	89ab      	ldrh	r3, [r5, #12]
 8018bec:	0598      	lsls	r0, r3, #22
 8018bee:	d4ed      	bmi.n	8018bcc <_vfiprintf_r+0x4c>
 8018bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018bf2:	f7ff fdcc 	bl	801878e <__retarget_lock_release_recursive>
 8018bf6:	e7e9      	b.n	8018bcc <_vfiprintf_r+0x4c>
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8018bfc:	2320      	movs	r3, #32
 8018bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8018c06:	2330      	movs	r3, #48	; 0x30
 8018c08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018dcc <_vfiprintf_r+0x24c>
 8018c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c10:	f04f 0901 	mov.w	r9, #1
 8018c14:	4623      	mov	r3, r4
 8018c16:	469a      	mov	sl, r3
 8018c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c1c:	b10a      	cbz	r2, 8018c22 <_vfiprintf_r+0xa2>
 8018c1e:	2a25      	cmp	r2, #37	; 0x25
 8018c20:	d1f9      	bne.n	8018c16 <_vfiprintf_r+0x96>
 8018c22:	ebba 0b04 	subs.w	fp, sl, r4
 8018c26:	d00b      	beq.n	8018c40 <_vfiprintf_r+0xc0>
 8018c28:	465b      	mov	r3, fp
 8018c2a:	4622      	mov	r2, r4
 8018c2c:	4629      	mov	r1, r5
 8018c2e:	4630      	mov	r0, r6
 8018c30:	f7ff ff93 	bl	8018b5a <__sfputs_r>
 8018c34:	3001      	adds	r0, #1
 8018c36:	f000 80aa 	beq.w	8018d8e <_vfiprintf_r+0x20e>
 8018c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c3c:	445a      	add	r2, fp
 8018c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8018c40:	f89a 3000 	ldrb.w	r3, [sl]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	f000 80a2 	beq.w	8018d8e <_vfiprintf_r+0x20e>
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8018c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c54:	f10a 0a01 	add.w	sl, sl, #1
 8018c58:	9304      	str	r3, [sp, #16]
 8018c5a:	9307      	str	r3, [sp, #28]
 8018c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018c60:	931a      	str	r3, [sp, #104]	; 0x68
 8018c62:	4654      	mov	r4, sl
 8018c64:	2205      	movs	r2, #5
 8018c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c6a:	4858      	ldr	r0, [pc, #352]	; (8018dcc <_vfiprintf_r+0x24c>)
 8018c6c:	f7e7 fad0 	bl	8000210 <memchr>
 8018c70:	9a04      	ldr	r2, [sp, #16]
 8018c72:	b9d8      	cbnz	r0, 8018cac <_vfiprintf_r+0x12c>
 8018c74:	06d1      	lsls	r1, r2, #27
 8018c76:	bf44      	itt	mi
 8018c78:	2320      	movmi	r3, #32
 8018c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018c7e:	0713      	lsls	r3, r2, #28
 8018c80:	bf44      	itt	mi
 8018c82:	232b      	movmi	r3, #43	; 0x2b
 8018c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018c88:	f89a 3000 	ldrb.w	r3, [sl]
 8018c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8018c8e:	d015      	beq.n	8018cbc <_vfiprintf_r+0x13c>
 8018c90:	9a07      	ldr	r2, [sp, #28]
 8018c92:	4654      	mov	r4, sl
 8018c94:	2000      	movs	r0, #0
 8018c96:	f04f 0c0a 	mov.w	ip, #10
 8018c9a:	4621      	mov	r1, r4
 8018c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ca0:	3b30      	subs	r3, #48	; 0x30
 8018ca2:	2b09      	cmp	r3, #9
 8018ca4:	d94e      	bls.n	8018d44 <_vfiprintf_r+0x1c4>
 8018ca6:	b1b0      	cbz	r0, 8018cd6 <_vfiprintf_r+0x156>
 8018ca8:	9207      	str	r2, [sp, #28]
 8018caa:	e014      	b.n	8018cd6 <_vfiprintf_r+0x156>
 8018cac:	eba0 0308 	sub.w	r3, r0, r8
 8018cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8018cb4:	4313      	orrs	r3, r2
 8018cb6:	9304      	str	r3, [sp, #16]
 8018cb8:	46a2      	mov	sl, r4
 8018cba:	e7d2      	b.n	8018c62 <_vfiprintf_r+0xe2>
 8018cbc:	9b03      	ldr	r3, [sp, #12]
 8018cbe:	1d19      	adds	r1, r3, #4
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	9103      	str	r1, [sp, #12]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	bfbb      	ittet	lt
 8018cc8:	425b      	neglt	r3, r3
 8018cca:	f042 0202 	orrlt.w	r2, r2, #2
 8018cce:	9307      	strge	r3, [sp, #28]
 8018cd0:	9307      	strlt	r3, [sp, #28]
 8018cd2:	bfb8      	it	lt
 8018cd4:	9204      	strlt	r2, [sp, #16]
 8018cd6:	7823      	ldrb	r3, [r4, #0]
 8018cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8018cda:	d10c      	bne.n	8018cf6 <_vfiprintf_r+0x176>
 8018cdc:	7863      	ldrb	r3, [r4, #1]
 8018cde:	2b2a      	cmp	r3, #42	; 0x2a
 8018ce0:	d135      	bne.n	8018d4e <_vfiprintf_r+0x1ce>
 8018ce2:	9b03      	ldr	r3, [sp, #12]
 8018ce4:	1d1a      	adds	r2, r3, #4
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	9203      	str	r2, [sp, #12]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	bfb8      	it	lt
 8018cee:	f04f 33ff 	movlt.w	r3, #4294967295
 8018cf2:	3402      	adds	r4, #2
 8018cf4:	9305      	str	r3, [sp, #20]
 8018cf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018ddc <_vfiprintf_r+0x25c>
 8018cfa:	7821      	ldrb	r1, [r4, #0]
 8018cfc:	2203      	movs	r2, #3
 8018cfe:	4650      	mov	r0, sl
 8018d00:	f7e7 fa86 	bl	8000210 <memchr>
 8018d04:	b140      	cbz	r0, 8018d18 <_vfiprintf_r+0x198>
 8018d06:	2340      	movs	r3, #64	; 0x40
 8018d08:	eba0 000a 	sub.w	r0, r0, sl
 8018d0c:	fa03 f000 	lsl.w	r0, r3, r0
 8018d10:	9b04      	ldr	r3, [sp, #16]
 8018d12:	4303      	orrs	r3, r0
 8018d14:	3401      	adds	r4, #1
 8018d16:	9304      	str	r3, [sp, #16]
 8018d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d1c:	482c      	ldr	r0, [pc, #176]	; (8018dd0 <_vfiprintf_r+0x250>)
 8018d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018d22:	2206      	movs	r2, #6
 8018d24:	f7e7 fa74 	bl	8000210 <memchr>
 8018d28:	2800      	cmp	r0, #0
 8018d2a:	d03f      	beq.n	8018dac <_vfiprintf_r+0x22c>
 8018d2c:	4b29      	ldr	r3, [pc, #164]	; (8018dd4 <_vfiprintf_r+0x254>)
 8018d2e:	bb1b      	cbnz	r3, 8018d78 <_vfiprintf_r+0x1f8>
 8018d30:	9b03      	ldr	r3, [sp, #12]
 8018d32:	3307      	adds	r3, #7
 8018d34:	f023 0307 	bic.w	r3, r3, #7
 8018d38:	3308      	adds	r3, #8
 8018d3a:	9303      	str	r3, [sp, #12]
 8018d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d3e:	443b      	add	r3, r7
 8018d40:	9309      	str	r3, [sp, #36]	; 0x24
 8018d42:	e767      	b.n	8018c14 <_vfiprintf_r+0x94>
 8018d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d48:	460c      	mov	r4, r1
 8018d4a:	2001      	movs	r0, #1
 8018d4c:	e7a5      	b.n	8018c9a <_vfiprintf_r+0x11a>
 8018d4e:	2300      	movs	r3, #0
 8018d50:	3401      	adds	r4, #1
 8018d52:	9305      	str	r3, [sp, #20]
 8018d54:	4619      	mov	r1, r3
 8018d56:	f04f 0c0a 	mov.w	ip, #10
 8018d5a:	4620      	mov	r0, r4
 8018d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d60:	3a30      	subs	r2, #48	; 0x30
 8018d62:	2a09      	cmp	r2, #9
 8018d64:	d903      	bls.n	8018d6e <_vfiprintf_r+0x1ee>
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d0c5      	beq.n	8018cf6 <_vfiprintf_r+0x176>
 8018d6a:	9105      	str	r1, [sp, #20]
 8018d6c:	e7c3      	b.n	8018cf6 <_vfiprintf_r+0x176>
 8018d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d72:	4604      	mov	r4, r0
 8018d74:	2301      	movs	r3, #1
 8018d76:	e7f0      	b.n	8018d5a <_vfiprintf_r+0x1da>
 8018d78:	ab03      	add	r3, sp, #12
 8018d7a:	9300      	str	r3, [sp, #0]
 8018d7c:	462a      	mov	r2, r5
 8018d7e:	4b16      	ldr	r3, [pc, #88]	; (8018dd8 <_vfiprintf_r+0x258>)
 8018d80:	a904      	add	r1, sp, #16
 8018d82:	4630      	mov	r0, r6
 8018d84:	f3af 8000 	nop.w
 8018d88:	4607      	mov	r7, r0
 8018d8a:	1c78      	adds	r0, r7, #1
 8018d8c:	d1d6      	bne.n	8018d3c <_vfiprintf_r+0x1bc>
 8018d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018d90:	07d9      	lsls	r1, r3, #31
 8018d92:	d405      	bmi.n	8018da0 <_vfiprintf_r+0x220>
 8018d94:	89ab      	ldrh	r3, [r5, #12]
 8018d96:	059a      	lsls	r2, r3, #22
 8018d98:	d402      	bmi.n	8018da0 <_vfiprintf_r+0x220>
 8018d9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018d9c:	f7ff fcf7 	bl	801878e <__retarget_lock_release_recursive>
 8018da0:	89ab      	ldrh	r3, [r5, #12]
 8018da2:	065b      	lsls	r3, r3, #25
 8018da4:	f53f af12 	bmi.w	8018bcc <_vfiprintf_r+0x4c>
 8018da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018daa:	e711      	b.n	8018bd0 <_vfiprintf_r+0x50>
 8018dac:	ab03      	add	r3, sp, #12
 8018dae:	9300      	str	r3, [sp, #0]
 8018db0:	462a      	mov	r2, r5
 8018db2:	4b09      	ldr	r3, [pc, #36]	; (8018dd8 <_vfiprintf_r+0x258>)
 8018db4:	a904      	add	r1, sp, #16
 8018db6:	4630      	mov	r0, r6
 8018db8:	f000 f880 	bl	8018ebc <_printf_i>
 8018dbc:	e7e4      	b.n	8018d88 <_vfiprintf_r+0x208>
 8018dbe:	bf00      	nop
 8018dc0:	0801ba74 	.word	0x0801ba74
 8018dc4:	0801ba94 	.word	0x0801ba94
 8018dc8:	0801ba54 	.word	0x0801ba54
 8018dcc:	0801bab4 	.word	0x0801bab4
 8018dd0:	0801babe 	.word	0x0801babe
 8018dd4:	00000000 	.word	0x00000000
 8018dd8:	08018b5b 	.word	0x08018b5b
 8018ddc:	0801baba 	.word	0x0801baba

08018de0 <_printf_common>:
 8018de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018de4:	4616      	mov	r6, r2
 8018de6:	4699      	mov	r9, r3
 8018de8:	688a      	ldr	r2, [r1, #8]
 8018dea:	690b      	ldr	r3, [r1, #16]
 8018dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018df0:	4293      	cmp	r3, r2
 8018df2:	bfb8      	it	lt
 8018df4:	4613      	movlt	r3, r2
 8018df6:	6033      	str	r3, [r6, #0]
 8018df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018dfc:	4607      	mov	r7, r0
 8018dfe:	460c      	mov	r4, r1
 8018e00:	b10a      	cbz	r2, 8018e06 <_printf_common+0x26>
 8018e02:	3301      	adds	r3, #1
 8018e04:	6033      	str	r3, [r6, #0]
 8018e06:	6823      	ldr	r3, [r4, #0]
 8018e08:	0699      	lsls	r1, r3, #26
 8018e0a:	bf42      	ittt	mi
 8018e0c:	6833      	ldrmi	r3, [r6, #0]
 8018e0e:	3302      	addmi	r3, #2
 8018e10:	6033      	strmi	r3, [r6, #0]
 8018e12:	6825      	ldr	r5, [r4, #0]
 8018e14:	f015 0506 	ands.w	r5, r5, #6
 8018e18:	d106      	bne.n	8018e28 <_printf_common+0x48>
 8018e1a:	f104 0a19 	add.w	sl, r4, #25
 8018e1e:	68e3      	ldr	r3, [r4, #12]
 8018e20:	6832      	ldr	r2, [r6, #0]
 8018e22:	1a9b      	subs	r3, r3, r2
 8018e24:	42ab      	cmp	r3, r5
 8018e26:	dc26      	bgt.n	8018e76 <_printf_common+0x96>
 8018e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018e2c:	1e13      	subs	r3, r2, #0
 8018e2e:	6822      	ldr	r2, [r4, #0]
 8018e30:	bf18      	it	ne
 8018e32:	2301      	movne	r3, #1
 8018e34:	0692      	lsls	r2, r2, #26
 8018e36:	d42b      	bmi.n	8018e90 <_printf_common+0xb0>
 8018e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018e3c:	4649      	mov	r1, r9
 8018e3e:	4638      	mov	r0, r7
 8018e40:	47c0      	blx	r8
 8018e42:	3001      	adds	r0, #1
 8018e44:	d01e      	beq.n	8018e84 <_printf_common+0xa4>
 8018e46:	6823      	ldr	r3, [r4, #0]
 8018e48:	68e5      	ldr	r5, [r4, #12]
 8018e4a:	6832      	ldr	r2, [r6, #0]
 8018e4c:	f003 0306 	and.w	r3, r3, #6
 8018e50:	2b04      	cmp	r3, #4
 8018e52:	bf08      	it	eq
 8018e54:	1aad      	subeq	r5, r5, r2
 8018e56:	68a3      	ldr	r3, [r4, #8]
 8018e58:	6922      	ldr	r2, [r4, #16]
 8018e5a:	bf0c      	ite	eq
 8018e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018e60:	2500      	movne	r5, #0
 8018e62:	4293      	cmp	r3, r2
 8018e64:	bfc4      	itt	gt
 8018e66:	1a9b      	subgt	r3, r3, r2
 8018e68:	18ed      	addgt	r5, r5, r3
 8018e6a:	2600      	movs	r6, #0
 8018e6c:	341a      	adds	r4, #26
 8018e6e:	42b5      	cmp	r5, r6
 8018e70:	d11a      	bne.n	8018ea8 <_printf_common+0xc8>
 8018e72:	2000      	movs	r0, #0
 8018e74:	e008      	b.n	8018e88 <_printf_common+0xa8>
 8018e76:	2301      	movs	r3, #1
 8018e78:	4652      	mov	r2, sl
 8018e7a:	4649      	mov	r1, r9
 8018e7c:	4638      	mov	r0, r7
 8018e7e:	47c0      	blx	r8
 8018e80:	3001      	adds	r0, #1
 8018e82:	d103      	bne.n	8018e8c <_printf_common+0xac>
 8018e84:	f04f 30ff 	mov.w	r0, #4294967295
 8018e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e8c:	3501      	adds	r5, #1
 8018e8e:	e7c6      	b.n	8018e1e <_printf_common+0x3e>
 8018e90:	18e1      	adds	r1, r4, r3
 8018e92:	1c5a      	adds	r2, r3, #1
 8018e94:	2030      	movs	r0, #48	; 0x30
 8018e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018e9a:	4422      	add	r2, r4
 8018e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018ea4:	3302      	adds	r3, #2
 8018ea6:	e7c7      	b.n	8018e38 <_printf_common+0x58>
 8018ea8:	2301      	movs	r3, #1
 8018eaa:	4622      	mov	r2, r4
 8018eac:	4649      	mov	r1, r9
 8018eae:	4638      	mov	r0, r7
 8018eb0:	47c0      	blx	r8
 8018eb2:	3001      	adds	r0, #1
 8018eb4:	d0e6      	beq.n	8018e84 <_printf_common+0xa4>
 8018eb6:	3601      	adds	r6, #1
 8018eb8:	e7d9      	b.n	8018e6e <_printf_common+0x8e>
	...

08018ebc <_printf_i>:
 8018ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018ec0:	7e0f      	ldrb	r7, [r1, #24]
 8018ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018ec4:	2f78      	cmp	r7, #120	; 0x78
 8018ec6:	4691      	mov	r9, r2
 8018ec8:	4680      	mov	r8, r0
 8018eca:	460c      	mov	r4, r1
 8018ecc:	469a      	mov	sl, r3
 8018ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018ed2:	d807      	bhi.n	8018ee4 <_printf_i+0x28>
 8018ed4:	2f62      	cmp	r7, #98	; 0x62
 8018ed6:	d80a      	bhi.n	8018eee <_printf_i+0x32>
 8018ed8:	2f00      	cmp	r7, #0
 8018eda:	f000 80d8 	beq.w	801908e <_printf_i+0x1d2>
 8018ede:	2f58      	cmp	r7, #88	; 0x58
 8018ee0:	f000 80a3 	beq.w	801902a <_printf_i+0x16e>
 8018ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018eec:	e03a      	b.n	8018f64 <_printf_i+0xa8>
 8018eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018ef2:	2b15      	cmp	r3, #21
 8018ef4:	d8f6      	bhi.n	8018ee4 <_printf_i+0x28>
 8018ef6:	a101      	add	r1, pc, #4	; (adr r1, 8018efc <_printf_i+0x40>)
 8018ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018efc:	08018f55 	.word	0x08018f55
 8018f00:	08018f69 	.word	0x08018f69
 8018f04:	08018ee5 	.word	0x08018ee5
 8018f08:	08018ee5 	.word	0x08018ee5
 8018f0c:	08018ee5 	.word	0x08018ee5
 8018f10:	08018ee5 	.word	0x08018ee5
 8018f14:	08018f69 	.word	0x08018f69
 8018f18:	08018ee5 	.word	0x08018ee5
 8018f1c:	08018ee5 	.word	0x08018ee5
 8018f20:	08018ee5 	.word	0x08018ee5
 8018f24:	08018ee5 	.word	0x08018ee5
 8018f28:	08019075 	.word	0x08019075
 8018f2c:	08018f99 	.word	0x08018f99
 8018f30:	08019057 	.word	0x08019057
 8018f34:	08018ee5 	.word	0x08018ee5
 8018f38:	08018ee5 	.word	0x08018ee5
 8018f3c:	08019097 	.word	0x08019097
 8018f40:	08018ee5 	.word	0x08018ee5
 8018f44:	08018f99 	.word	0x08018f99
 8018f48:	08018ee5 	.word	0x08018ee5
 8018f4c:	08018ee5 	.word	0x08018ee5
 8018f50:	0801905f 	.word	0x0801905f
 8018f54:	682b      	ldr	r3, [r5, #0]
 8018f56:	1d1a      	adds	r2, r3, #4
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	602a      	str	r2, [r5, #0]
 8018f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018f64:	2301      	movs	r3, #1
 8018f66:	e0a3      	b.n	80190b0 <_printf_i+0x1f4>
 8018f68:	6820      	ldr	r0, [r4, #0]
 8018f6a:	6829      	ldr	r1, [r5, #0]
 8018f6c:	0606      	lsls	r6, r0, #24
 8018f6e:	f101 0304 	add.w	r3, r1, #4
 8018f72:	d50a      	bpl.n	8018f8a <_printf_i+0xce>
 8018f74:	680e      	ldr	r6, [r1, #0]
 8018f76:	602b      	str	r3, [r5, #0]
 8018f78:	2e00      	cmp	r6, #0
 8018f7a:	da03      	bge.n	8018f84 <_printf_i+0xc8>
 8018f7c:	232d      	movs	r3, #45	; 0x2d
 8018f7e:	4276      	negs	r6, r6
 8018f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018f84:	485e      	ldr	r0, [pc, #376]	; (8019100 <_printf_i+0x244>)
 8018f86:	230a      	movs	r3, #10
 8018f88:	e019      	b.n	8018fbe <_printf_i+0x102>
 8018f8a:	680e      	ldr	r6, [r1, #0]
 8018f8c:	602b      	str	r3, [r5, #0]
 8018f8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018f92:	bf18      	it	ne
 8018f94:	b236      	sxthne	r6, r6
 8018f96:	e7ef      	b.n	8018f78 <_printf_i+0xbc>
 8018f98:	682b      	ldr	r3, [r5, #0]
 8018f9a:	6820      	ldr	r0, [r4, #0]
 8018f9c:	1d19      	adds	r1, r3, #4
 8018f9e:	6029      	str	r1, [r5, #0]
 8018fa0:	0601      	lsls	r1, r0, #24
 8018fa2:	d501      	bpl.n	8018fa8 <_printf_i+0xec>
 8018fa4:	681e      	ldr	r6, [r3, #0]
 8018fa6:	e002      	b.n	8018fae <_printf_i+0xf2>
 8018fa8:	0646      	lsls	r6, r0, #25
 8018faa:	d5fb      	bpl.n	8018fa4 <_printf_i+0xe8>
 8018fac:	881e      	ldrh	r6, [r3, #0]
 8018fae:	4854      	ldr	r0, [pc, #336]	; (8019100 <_printf_i+0x244>)
 8018fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8018fb2:	bf0c      	ite	eq
 8018fb4:	2308      	moveq	r3, #8
 8018fb6:	230a      	movne	r3, #10
 8018fb8:	2100      	movs	r1, #0
 8018fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018fbe:	6865      	ldr	r5, [r4, #4]
 8018fc0:	60a5      	str	r5, [r4, #8]
 8018fc2:	2d00      	cmp	r5, #0
 8018fc4:	bfa2      	ittt	ge
 8018fc6:	6821      	ldrge	r1, [r4, #0]
 8018fc8:	f021 0104 	bicge.w	r1, r1, #4
 8018fcc:	6021      	strge	r1, [r4, #0]
 8018fce:	b90e      	cbnz	r6, 8018fd4 <_printf_i+0x118>
 8018fd0:	2d00      	cmp	r5, #0
 8018fd2:	d04d      	beq.n	8019070 <_printf_i+0x1b4>
 8018fd4:	4615      	mov	r5, r2
 8018fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8018fda:	fb03 6711 	mls	r7, r3, r1, r6
 8018fde:	5dc7      	ldrb	r7, [r0, r7]
 8018fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018fe4:	4637      	mov	r7, r6
 8018fe6:	42bb      	cmp	r3, r7
 8018fe8:	460e      	mov	r6, r1
 8018fea:	d9f4      	bls.n	8018fd6 <_printf_i+0x11a>
 8018fec:	2b08      	cmp	r3, #8
 8018fee:	d10b      	bne.n	8019008 <_printf_i+0x14c>
 8018ff0:	6823      	ldr	r3, [r4, #0]
 8018ff2:	07de      	lsls	r6, r3, #31
 8018ff4:	d508      	bpl.n	8019008 <_printf_i+0x14c>
 8018ff6:	6923      	ldr	r3, [r4, #16]
 8018ff8:	6861      	ldr	r1, [r4, #4]
 8018ffa:	4299      	cmp	r1, r3
 8018ffc:	bfde      	ittt	le
 8018ffe:	2330      	movle	r3, #48	; 0x30
 8019000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019004:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019008:	1b52      	subs	r2, r2, r5
 801900a:	6122      	str	r2, [r4, #16]
 801900c:	f8cd a000 	str.w	sl, [sp]
 8019010:	464b      	mov	r3, r9
 8019012:	aa03      	add	r2, sp, #12
 8019014:	4621      	mov	r1, r4
 8019016:	4640      	mov	r0, r8
 8019018:	f7ff fee2 	bl	8018de0 <_printf_common>
 801901c:	3001      	adds	r0, #1
 801901e:	d14c      	bne.n	80190ba <_printf_i+0x1fe>
 8019020:	f04f 30ff 	mov.w	r0, #4294967295
 8019024:	b004      	add	sp, #16
 8019026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801902a:	4835      	ldr	r0, [pc, #212]	; (8019100 <_printf_i+0x244>)
 801902c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019030:	6829      	ldr	r1, [r5, #0]
 8019032:	6823      	ldr	r3, [r4, #0]
 8019034:	f851 6b04 	ldr.w	r6, [r1], #4
 8019038:	6029      	str	r1, [r5, #0]
 801903a:	061d      	lsls	r5, r3, #24
 801903c:	d514      	bpl.n	8019068 <_printf_i+0x1ac>
 801903e:	07df      	lsls	r7, r3, #31
 8019040:	bf44      	itt	mi
 8019042:	f043 0320 	orrmi.w	r3, r3, #32
 8019046:	6023      	strmi	r3, [r4, #0]
 8019048:	b91e      	cbnz	r6, 8019052 <_printf_i+0x196>
 801904a:	6823      	ldr	r3, [r4, #0]
 801904c:	f023 0320 	bic.w	r3, r3, #32
 8019050:	6023      	str	r3, [r4, #0]
 8019052:	2310      	movs	r3, #16
 8019054:	e7b0      	b.n	8018fb8 <_printf_i+0xfc>
 8019056:	6823      	ldr	r3, [r4, #0]
 8019058:	f043 0320 	orr.w	r3, r3, #32
 801905c:	6023      	str	r3, [r4, #0]
 801905e:	2378      	movs	r3, #120	; 0x78
 8019060:	4828      	ldr	r0, [pc, #160]	; (8019104 <_printf_i+0x248>)
 8019062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019066:	e7e3      	b.n	8019030 <_printf_i+0x174>
 8019068:	0659      	lsls	r1, r3, #25
 801906a:	bf48      	it	mi
 801906c:	b2b6      	uxthmi	r6, r6
 801906e:	e7e6      	b.n	801903e <_printf_i+0x182>
 8019070:	4615      	mov	r5, r2
 8019072:	e7bb      	b.n	8018fec <_printf_i+0x130>
 8019074:	682b      	ldr	r3, [r5, #0]
 8019076:	6826      	ldr	r6, [r4, #0]
 8019078:	6961      	ldr	r1, [r4, #20]
 801907a:	1d18      	adds	r0, r3, #4
 801907c:	6028      	str	r0, [r5, #0]
 801907e:	0635      	lsls	r5, r6, #24
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	d501      	bpl.n	8019088 <_printf_i+0x1cc>
 8019084:	6019      	str	r1, [r3, #0]
 8019086:	e002      	b.n	801908e <_printf_i+0x1d2>
 8019088:	0670      	lsls	r0, r6, #25
 801908a:	d5fb      	bpl.n	8019084 <_printf_i+0x1c8>
 801908c:	8019      	strh	r1, [r3, #0]
 801908e:	2300      	movs	r3, #0
 8019090:	6123      	str	r3, [r4, #16]
 8019092:	4615      	mov	r5, r2
 8019094:	e7ba      	b.n	801900c <_printf_i+0x150>
 8019096:	682b      	ldr	r3, [r5, #0]
 8019098:	1d1a      	adds	r2, r3, #4
 801909a:	602a      	str	r2, [r5, #0]
 801909c:	681d      	ldr	r5, [r3, #0]
 801909e:	6862      	ldr	r2, [r4, #4]
 80190a0:	2100      	movs	r1, #0
 80190a2:	4628      	mov	r0, r5
 80190a4:	f7e7 f8b4 	bl	8000210 <memchr>
 80190a8:	b108      	cbz	r0, 80190ae <_printf_i+0x1f2>
 80190aa:	1b40      	subs	r0, r0, r5
 80190ac:	6060      	str	r0, [r4, #4]
 80190ae:	6863      	ldr	r3, [r4, #4]
 80190b0:	6123      	str	r3, [r4, #16]
 80190b2:	2300      	movs	r3, #0
 80190b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80190b8:	e7a8      	b.n	801900c <_printf_i+0x150>
 80190ba:	6923      	ldr	r3, [r4, #16]
 80190bc:	462a      	mov	r2, r5
 80190be:	4649      	mov	r1, r9
 80190c0:	4640      	mov	r0, r8
 80190c2:	47d0      	blx	sl
 80190c4:	3001      	adds	r0, #1
 80190c6:	d0ab      	beq.n	8019020 <_printf_i+0x164>
 80190c8:	6823      	ldr	r3, [r4, #0]
 80190ca:	079b      	lsls	r3, r3, #30
 80190cc:	d413      	bmi.n	80190f6 <_printf_i+0x23a>
 80190ce:	68e0      	ldr	r0, [r4, #12]
 80190d0:	9b03      	ldr	r3, [sp, #12]
 80190d2:	4298      	cmp	r0, r3
 80190d4:	bfb8      	it	lt
 80190d6:	4618      	movlt	r0, r3
 80190d8:	e7a4      	b.n	8019024 <_printf_i+0x168>
 80190da:	2301      	movs	r3, #1
 80190dc:	4632      	mov	r2, r6
 80190de:	4649      	mov	r1, r9
 80190e0:	4640      	mov	r0, r8
 80190e2:	47d0      	blx	sl
 80190e4:	3001      	adds	r0, #1
 80190e6:	d09b      	beq.n	8019020 <_printf_i+0x164>
 80190e8:	3501      	adds	r5, #1
 80190ea:	68e3      	ldr	r3, [r4, #12]
 80190ec:	9903      	ldr	r1, [sp, #12]
 80190ee:	1a5b      	subs	r3, r3, r1
 80190f0:	42ab      	cmp	r3, r5
 80190f2:	dcf2      	bgt.n	80190da <_printf_i+0x21e>
 80190f4:	e7eb      	b.n	80190ce <_printf_i+0x212>
 80190f6:	2500      	movs	r5, #0
 80190f8:	f104 0619 	add.w	r6, r4, #25
 80190fc:	e7f5      	b.n	80190ea <_printf_i+0x22e>
 80190fe:	bf00      	nop
 8019100:	0801bac5 	.word	0x0801bac5
 8019104:	0801bad6 	.word	0x0801bad6

08019108 <_putc_r>:
 8019108:	b570      	push	{r4, r5, r6, lr}
 801910a:	460d      	mov	r5, r1
 801910c:	4614      	mov	r4, r2
 801910e:	4606      	mov	r6, r0
 8019110:	b118      	cbz	r0, 801911a <_putc_r+0x12>
 8019112:	6983      	ldr	r3, [r0, #24]
 8019114:	b90b      	cbnz	r3, 801911a <_putc_r+0x12>
 8019116:	f7ff fa9b 	bl	8018650 <__sinit>
 801911a:	4b1c      	ldr	r3, [pc, #112]	; (801918c <_putc_r+0x84>)
 801911c:	429c      	cmp	r4, r3
 801911e:	d124      	bne.n	801916a <_putc_r+0x62>
 8019120:	6874      	ldr	r4, [r6, #4]
 8019122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019124:	07d8      	lsls	r0, r3, #31
 8019126:	d405      	bmi.n	8019134 <_putc_r+0x2c>
 8019128:	89a3      	ldrh	r3, [r4, #12]
 801912a:	0599      	lsls	r1, r3, #22
 801912c:	d402      	bmi.n	8019134 <_putc_r+0x2c>
 801912e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019130:	f7ff fb2c 	bl	801878c <__retarget_lock_acquire_recursive>
 8019134:	68a3      	ldr	r3, [r4, #8]
 8019136:	3b01      	subs	r3, #1
 8019138:	2b00      	cmp	r3, #0
 801913a:	60a3      	str	r3, [r4, #8]
 801913c:	da05      	bge.n	801914a <_putc_r+0x42>
 801913e:	69a2      	ldr	r2, [r4, #24]
 8019140:	4293      	cmp	r3, r2
 8019142:	db1c      	blt.n	801917e <_putc_r+0x76>
 8019144:	b2eb      	uxtb	r3, r5
 8019146:	2b0a      	cmp	r3, #10
 8019148:	d019      	beq.n	801917e <_putc_r+0x76>
 801914a:	6823      	ldr	r3, [r4, #0]
 801914c:	1c5a      	adds	r2, r3, #1
 801914e:	6022      	str	r2, [r4, #0]
 8019150:	701d      	strb	r5, [r3, #0]
 8019152:	b2ed      	uxtb	r5, r5
 8019154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019156:	07da      	lsls	r2, r3, #31
 8019158:	d405      	bmi.n	8019166 <_putc_r+0x5e>
 801915a:	89a3      	ldrh	r3, [r4, #12]
 801915c:	059b      	lsls	r3, r3, #22
 801915e:	d402      	bmi.n	8019166 <_putc_r+0x5e>
 8019160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019162:	f7ff fb14 	bl	801878e <__retarget_lock_release_recursive>
 8019166:	4628      	mov	r0, r5
 8019168:	bd70      	pop	{r4, r5, r6, pc}
 801916a:	4b09      	ldr	r3, [pc, #36]	; (8019190 <_putc_r+0x88>)
 801916c:	429c      	cmp	r4, r3
 801916e:	d101      	bne.n	8019174 <_putc_r+0x6c>
 8019170:	68b4      	ldr	r4, [r6, #8]
 8019172:	e7d6      	b.n	8019122 <_putc_r+0x1a>
 8019174:	4b07      	ldr	r3, [pc, #28]	; (8019194 <_putc_r+0x8c>)
 8019176:	429c      	cmp	r4, r3
 8019178:	bf08      	it	eq
 801917a:	68f4      	ldreq	r4, [r6, #12]
 801917c:	e7d1      	b.n	8019122 <_putc_r+0x1a>
 801917e:	4629      	mov	r1, r5
 8019180:	4622      	mov	r2, r4
 8019182:	4630      	mov	r0, r6
 8019184:	f7ff f88a 	bl	801829c <__swbuf_r>
 8019188:	4605      	mov	r5, r0
 801918a:	e7e3      	b.n	8019154 <_putc_r+0x4c>
 801918c:	0801ba74 	.word	0x0801ba74
 8019190:	0801ba94 	.word	0x0801ba94
 8019194:	0801ba54 	.word	0x0801ba54

08019198 <__sread>:
 8019198:	b510      	push	{r4, lr}
 801919a:	460c      	mov	r4, r1
 801919c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191a0:	f000 f8de 	bl	8019360 <_read_r>
 80191a4:	2800      	cmp	r0, #0
 80191a6:	bfab      	itete	ge
 80191a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80191aa:	89a3      	ldrhlt	r3, [r4, #12]
 80191ac:	181b      	addge	r3, r3, r0
 80191ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80191b2:	bfac      	ite	ge
 80191b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80191b6:	81a3      	strhlt	r3, [r4, #12]
 80191b8:	bd10      	pop	{r4, pc}

080191ba <__swrite>:
 80191ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191be:	461f      	mov	r7, r3
 80191c0:	898b      	ldrh	r3, [r1, #12]
 80191c2:	05db      	lsls	r3, r3, #23
 80191c4:	4605      	mov	r5, r0
 80191c6:	460c      	mov	r4, r1
 80191c8:	4616      	mov	r6, r2
 80191ca:	d505      	bpl.n	80191d8 <__swrite+0x1e>
 80191cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191d0:	2302      	movs	r3, #2
 80191d2:	2200      	movs	r2, #0
 80191d4:	f000 f868 	bl	80192a8 <_lseek_r>
 80191d8:	89a3      	ldrh	r3, [r4, #12]
 80191da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80191e2:	81a3      	strh	r3, [r4, #12]
 80191e4:	4632      	mov	r2, r6
 80191e6:	463b      	mov	r3, r7
 80191e8:	4628      	mov	r0, r5
 80191ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191ee:	f000 b817 	b.w	8019220 <_write_r>

080191f2 <__sseek>:
 80191f2:	b510      	push	{r4, lr}
 80191f4:	460c      	mov	r4, r1
 80191f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191fa:	f000 f855 	bl	80192a8 <_lseek_r>
 80191fe:	1c43      	adds	r3, r0, #1
 8019200:	89a3      	ldrh	r3, [r4, #12]
 8019202:	bf15      	itete	ne
 8019204:	6560      	strne	r0, [r4, #84]	; 0x54
 8019206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801920a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801920e:	81a3      	strheq	r3, [r4, #12]
 8019210:	bf18      	it	ne
 8019212:	81a3      	strhne	r3, [r4, #12]
 8019214:	bd10      	pop	{r4, pc}

08019216 <__sclose>:
 8019216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801921a:	f000 b813 	b.w	8019244 <_close_r>
	...

08019220 <_write_r>:
 8019220:	b538      	push	{r3, r4, r5, lr}
 8019222:	4d07      	ldr	r5, [pc, #28]	; (8019240 <_write_r+0x20>)
 8019224:	4604      	mov	r4, r0
 8019226:	4608      	mov	r0, r1
 8019228:	4611      	mov	r1, r2
 801922a:	2200      	movs	r2, #0
 801922c:	602a      	str	r2, [r5, #0]
 801922e:	461a      	mov	r2, r3
 8019230:	f7ea fd21 	bl	8003c76 <_write>
 8019234:	1c43      	adds	r3, r0, #1
 8019236:	d102      	bne.n	801923e <_write_r+0x1e>
 8019238:	682b      	ldr	r3, [r5, #0]
 801923a:	b103      	cbz	r3, 801923e <_write_r+0x1e>
 801923c:	6023      	str	r3, [r4, #0]
 801923e:	bd38      	pop	{r3, r4, r5, pc}
 8019240:	2004a140 	.word	0x2004a140

08019244 <_close_r>:
 8019244:	b538      	push	{r3, r4, r5, lr}
 8019246:	4d06      	ldr	r5, [pc, #24]	; (8019260 <_close_r+0x1c>)
 8019248:	2300      	movs	r3, #0
 801924a:	4604      	mov	r4, r0
 801924c:	4608      	mov	r0, r1
 801924e:	602b      	str	r3, [r5, #0]
 8019250:	f7ea fd2d 	bl	8003cae <_close>
 8019254:	1c43      	adds	r3, r0, #1
 8019256:	d102      	bne.n	801925e <_close_r+0x1a>
 8019258:	682b      	ldr	r3, [r5, #0]
 801925a:	b103      	cbz	r3, 801925e <_close_r+0x1a>
 801925c:	6023      	str	r3, [r4, #0]
 801925e:	bd38      	pop	{r3, r4, r5, pc}
 8019260:	2004a140 	.word	0x2004a140

08019264 <_fstat_r>:
 8019264:	b538      	push	{r3, r4, r5, lr}
 8019266:	4d07      	ldr	r5, [pc, #28]	; (8019284 <_fstat_r+0x20>)
 8019268:	2300      	movs	r3, #0
 801926a:	4604      	mov	r4, r0
 801926c:	4608      	mov	r0, r1
 801926e:	4611      	mov	r1, r2
 8019270:	602b      	str	r3, [r5, #0]
 8019272:	f7ea fd28 	bl	8003cc6 <_fstat>
 8019276:	1c43      	adds	r3, r0, #1
 8019278:	d102      	bne.n	8019280 <_fstat_r+0x1c>
 801927a:	682b      	ldr	r3, [r5, #0]
 801927c:	b103      	cbz	r3, 8019280 <_fstat_r+0x1c>
 801927e:	6023      	str	r3, [r4, #0]
 8019280:	bd38      	pop	{r3, r4, r5, pc}
 8019282:	bf00      	nop
 8019284:	2004a140 	.word	0x2004a140

08019288 <_isatty_r>:
 8019288:	b538      	push	{r3, r4, r5, lr}
 801928a:	4d06      	ldr	r5, [pc, #24]	; (80192a4 <_isatty_r+0x1c>)
 801928c:	2300      	movs	r3, #0
 801928e:	4604      	mov	r4, r0
 8019290:	4608      	mov	r0, r1
 8019292:	602b      	str	r3, [r5, #0]
 8019294:	f7ea fd27 	bl	8003ce6 <_isatty>
 8019298:	1c43      	adds	r3, r0, #1
 801929a:	d102      	bne.n	80192a2 <_isatty_r+0x1a>
 801929c:	682b      	ldr	r3, [r5, #0]
 801929e:	b103      	cbz	r3, 80192a2 <_isatty_r+0x1a>
 80192a0:	6023      	str	r3, [r4, #0]
 80192a2:	bd38      	pop	{r3, r4, r5, pc}
 80192a4:	2004a140 	.word	0x2004a140

080192a8 <_lseek_r>:
 80192a8:	b538      	push	{r3, r4, r5, lr}
 80192aa:	4d07      	ldr	r5, [pc, #28]	; (80192c8 <_lseek_r+0x20>)
 80192ac:	4604      	mov	r4, r0
 80192ae:	4608      	mov	r0, r1
 80192b0:	4611      	mov	r1, r2
 80192b2:	2200      	movs	r2, #0
 80192b4:	602a      	str	r2, [r5, #0]
 80192b6:	461a      	mov	r2, r3
 80192b8:	f7ea fd20 	bl	8003cfc <_lseek>
 80192bc:	1c43      	adds	r3, r0, #1
 80192be:	d102      	bne.n	80192c6 <_lseek_r+0x1e>
 80192c0:	682b      	ldr	r3, [r5, #0]
 80192c2:	b103      	cbz	r3, 80192c6 <_lseek_r+0x1e>
 80192c4:	6023      	str	r3, [r4, #0]
 80192c6:	bd38      	pop	{r3, r4, r5, pc}
 80192c8:	2004a140 	.word	0x2004a140

080192cc <memmove>:
 80192cc:	4288      	cmp	r0, r1
 80192ce:	b510      	push	{r4, lr}
 80192d0:	eb01 0402 	add.w	r4, r1, r2
 80192d4:	d902      	bls.n	80192dc <memmove+0x10>
 80192d6:	4284      	cmp	r4, r0
 80192d8:	4623      	mov	r3, r4
 80192da:	d807      	bhi.n	80192ec <memmove+0x20>
 80192dc:	1e43      	subs	r3, r0, #1
 80192de:	42a1      	cmp	r1, r4
 80192e0:	d008      	beq.n	80192f4 <memmove+0x28>
 80192e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80192e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80192ea:	e7f8      	b.n	80192de <memmove+0x12>
 80192ec:	4402      	add	r2, r0
 80192ee:	4601      	mov	r1, r0
 80192f0:	428a      	cmp	r2, r1
 80192f2:	d100      	bne.n	80192f6 <memmove+0x2a>
 80192f4:	bd10      	pop	{r4, pc}
 80192f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80192fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80192fe:	e7f7      	b.n	80192f0 <memmove+0x24>

08019300 <_realloc_r>:
 8019300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019304:	4680      	mov	r8, r0
 8019306:	4614      	mov	r4, r2
 8019308:	460e      	mov	r6, r1
 801930a:	b921      	cbnz	r1, 8019316 <_realloc_r+0x16>
 801930c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019310:	4611      	mov	r1, r2
 8019312:	f7fe be7b 	b.w	801800c <_malloc_r>
 8019316:	b92a      	cbnz	r2, 8019324 <_realloc_r+0x24>
 8019318:	f7fe fe0c 	bl	8017f34 <_free_r>
 801931c:	4625      	mov	r5, r4
 801931e:	4628      	mov	r0, r5
 8019320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019324:	f000 f82e 	bl	8019384 <_malloc_usable_size_r>
 8019328:	4284      	cmp	r4, r0
 801932a:	4607      	mov	r7, r0
 801932c:	d802      	bhi.n	8019334 <_realloc_r+0x34>
 801932e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019332:	d812      	bhi.n	801935a <_realloc_r+0x5a>
 8019334:	4621      	mov	r1, r4
 8019336:	4640      	mov	r0, r8
 8019338:	f7fe fe68 	bl	801800c <_malloc_r>
 801933c:	4605      	mov	r5, r0
 801933e:	2800      	cmp	r0, #0
 8019340:	d0ed      	beq.n	801931e <_realloc_r+0x1e>
 8019342:	42bc      	cmp	r4, r7
 8019344:	4622      	mov	r2, r4
 8019346:	4631      	mov	r1, r6
 8019348:	bf28      	it	cs
 801934a:	463a      	movcs	r2, r7
 801934c:	f7fe fddc 	bl	8017f08 <memcpy>
 8019350:	4631      	mov	r1, r6
 8019352:	4640      	mov	r0, r8
 8019354:	f7fe fdee 	bl	8017f34 <_free_r>
 8019358:	e7e1      	b.n	801931e <_realloc_r+0x1e>
 801935a:	4635      	mov	r5, r6
 801935c:	e7df      	b.n	801931e <_realloc_r+0x1e>
	...

08019360 <_read_r>:
 8019360:	b538      	push	{r3, r4, r5, lr}
 8019362:	4d07      	ldr	r5, [pc, #28]	; (8019380 <_read_r+0x20>)
 8019364:	4604      	mov	r4, r0
 8019366:	4608      	mov	r0, r1
 8019368:	4611      	mov	r1, r2
 801936a:	2200      	movs	r2, #0
 801936c:	602a      	str	r2, [r5, #0]
 801936e:	461a      	mov	r2, r3
 8019370:	f7ea fc64 	bl	8003c3c <_read>
 8019374:	1c43      	adds	r3, r0, #1
 8019376:	d102      	bne.n	801937e <_read_r+0x1e>
 8019378:	682b      	ldr	r3, [r5, #0]
 801937a:	b103      	cbz	r3, 801937e <_read_r+0x1e>
 801937c:	6023      	str	r3, [r4, #0]
 801937e:	bd38      	pop	{r3, r4, r5, pc}
 8019380:	2004a140 	.word	0x2004a140

08019384 <_malloc_usable_size_r>:
 8019384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019388:	1f18      	subs	r0, r3, #4
 801938a:	2b00      	cmp	r3, #0
 801938c:	bfbc      	itt	lt
 801938e:	580b      	ldrlt	r3, [r1, r0]
 8019390:	18c0      	addlt	r0, r0, r3
 8019392:	4770      	bx	lr
 8019394:	0000      	movs	r0, r0
	...

08019398 <log10>:
 8019398:	b538      	push	{r3, r4, r5, lr}
 801939a:	ed2d 8b02 	vpush	{d8}
 801939e:	ec55 4b10 	vmov	r4, r5, d0
 80193a2:	f000 f839 	bl	8019418 <__ieee754_log10>
 80193a6:	4622      	mov	r2, r4
 80193a8:	462b      	mov	r3, r5
 80193aa:	4620      	mov	r0, r4
 80193ac:	4629      	mov	r1, r5
 80193ae:	eeb0 8a40 	vmov.f32	s16, s0
 80193b2:	eef0 8a60 	vmov.f32	s17, s1
 80193b6:	f7e7 fbd1 	bl	8000b5c <__aeabi_dcmpun>
 80193ba:	b998      	cbnz	r0, 80193e4 <log10+0x4c>
 80193bc:	2200      	movs	r2, #0
 80193be:	2300      	movs	r3, #0
 80193c0:	4620      	mov	r0, r4
 80193c2:	4629      	mov	r1, r5
 80193c4:	f7e7 fbac 	bl	8000b20 <__aeabi_dcmple>
 80193c8:	b160      	cbz	r0, 80193e4 <log10+0x4c>
 80193ca:	2200      	movs	r2, #0
 80193cc:	2300      	movs	r3, #0
 80193ce:	4620      	mov	r0, r4
 80193d0:	4629      	mov	r1, r5
 80193d2:	f7e7 fb91 	bl	8000af8 <__aeabi_dcmpeq>
 80193d6:	b160      	cbz	r0, 80193f2 <log10+0x5a>
 80193d8:	f7fe fd5c 	bl	8017e94 <__errno>
 80193dc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8019408 <log10+0x70>
 80193e0:	2322      	movs	r3, #34	; 0x22
 80193e2:	6003      	str	r3, [r0, #0]
 80193e4:	eeb0 0a48 	vmov.f32	s0, s16
 80193e8:	eef0 0a68 	vmov.f32	s1, s17
 80193ec:	ecbd 8b02 	vpop	{d8}
 80193f0:	bd38      	pop	{r3, r4, r5, pc}
 80193f2:	f7fe fd4f 	bl	8017e94 <__errno>
 80193f6:	ecbd 8b02 	vpop	{d8}
 80193fa:	2321      	movs	r3, #33	; 0x21
 80193fc:	6003      	str	r3, [r0, #0]
 80193fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019402:	4803      	ldr	r0, [pc, #12]	; (8019410 <log10+0x78>)
 8019404:	f000 b894 	b.w	8019530 <nan>
 8019408:	00000000 	.word	0x00000000
 801940c:	fff00000 	.word	0xfff00000
 8019410:	0801bab9 	.word	0x0801bab9
 8019414:	00000000 	.word	0x00000000

08019418 <__ieee754_log10>:
 8019418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801941c:	ec55 4b10 	vmov	r4, r5, d0
 8019420:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8019424:	462b      	mov	r3, r5
 8019426:	da2f      	bge.n	8019488 <__ieee754_log10+0x70>
 8019428:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801942c:	4322      	orrs	r2, r4
 801942e:	d109      	bne.n	8019444 <__ieee754_log10+0x2c>
 8019430:	493b      	ldr	r1, [pc, #236]	; (8019520 <__ieee754_log10+0x108>)
 8019432:	2200      	movs	r2, #0
 8019434:	2300      	movs	r3, #0
 8019436:	2000      	movs	r0, #0
 8019438:	f7e7 fa20 	bl	800087c <__aeabi_ddiv>
 801943c:	ec41 0b10 	vmov	d0, r0, r1
 8019440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019444:	2d00      	cmp	r5, #0
 8019446:	da09      	bge.n	801945c <__ieee754_log10+0x44>
 8019448:	ee10 2a10 	vmov	r2, s0
 801944c:	ee10 0a10 	vmov	r0, s0
 8019450:	4629      	mov	r1, r5
 8019452:	f7e6 ff31 	bl	80002b8 <__aeabi_dsub>
 8019456:	2200      	movs	r2, #0
 8019458:	2300      	movs	r3, #0
 801945a:	e7ed      	b.n	8019438 <__ieee754_log10+0x20>
 801945c:	4b31      	ldr	r3, [pc, #196]	; (8019524 <__ieee754_log10+0x10c>)
 801945e:	2200      	movs	r2, #0
 8019460:	4629      	mov	r1, r5
 8019462:	ee10 0a10 	vmov	r0, s0
 8019466:	f7e7 f8df 	bl	8000628 <__aeabi_dmul>
 801946a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801946e:	4604      	mov	r4, r0
 8019470:	460d      	mov	r5, r1
 8019472:	460b      	mov	r3, r1
 8019474:	492c      	ldr	r1, [pc, #176]	; (8019528 <__ieee754_log10+0x110>)
 8019476:	428b      	cmp	r3, r1
 8019478:	dd08      	ble.n	801948c <__ieee754_log10+0x74>
 801947a:	4622      	mov	r2, r4
 801947c:	462b      	mov	r3, r5
 801947e:	4620      	mov	r0, r4
 8019480:	4629      	mov	r1, r5
 8019482:	f7e6 ff1b 	bl	80002bc <__adddf3>
 8019486:	e7d9      	b.n	801943c <__ieee754_log10+0x24>
 8019488:	2200      	movs	r2, #0
 801948a:	e7f3      	b.n	8019474 <__ieee754_log10+0x5c>
 801948c:	1518      	asrs	r0, r3, #20
 801948e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8019492:	4410      	add	r0, r2
 8019494:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8019498:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801949c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80194a0:	f7e7 f858 	bl	8000554 <__aeabi_i2d>
 80194a4:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80194a8:	3303      	adds	r3, #3
 80194aa:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80194ae:	ec45 4b10 	vmov	d0, r4, r5
 80194b2:	4606      	mov	r6, r0
 80194b4:	460f      	mov	r7, r1
 80194b6:	f000 f843 	bl	8019540 <__ieee754_log>
 80194ba:	a313      	add	r3, pc, #76	; (adr r3, 8019508 <__ieee754_log10+0xf0>)
 80194bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c0:	4630      	mov	r0, r6
 80194c2:	4639      	mov	r1, r7
 80194c4:	ec59 8b10 	vmov	r8, r9, d0
 80194c8:	f7e7 f8ae 	bl	8000628 <__aeabi_dmul>
 80194cc:	a310      	add	r3, pc, #64	; (adr r3, 8019510 <__ieee754_log10+0xf8>)
 80194ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194d2:	4604      	mov	r4, r0
 80194d4:	460d      	mov	r5, r1
 80194d6:	4640      	mov	r0, r8
 80194d8:	4649      	mov	r1, r9
 80194da:	f7e7 f8a5 	bl	8000628 <__aeabi_dmul>
 80194de:	4602      	mov	r2, r0
 80194e0:	460b      	mov	r3, r1
 80194e2:	4620      	mov	r0, r4
 80194e4:	4629      	mov	r1, r5
 80194e6:	f7e6 fee9 	bl	80002bc <__adddf3>
 80194ea:	a30b      	add	r3, pc, #44	; (adr r3, 8019518 <__ieee754_log10+0x100>)
 80194ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194f0:	4604      	mov	r4, r0
 80194f2:	460d      	mov	r5, r1
 80194f4:	4630      	mov	r0, r6
 80194f6:	4639      	mov	r1, r7
 80194f8:	f7e7 f896 	bl	8000628 <__aeabi_dmul>
 80194fc:	4602      	mov	r2, r0
 80194fe:	460b      	mov	r3, r1
 8019500:	4620      	mov	r0, r4
 8019502:	4629      	mov	r1, r5
 8019504:	e7bd      	b.n	8019482 <__ieee754_log10+0x6a>
 8019506:	bf00      	nop
 8019508:	11f12b36 	.word	0x11f12b36
 801950c:	3d59fef3 	.word	0x3d59fef3
 8019510:	1526e50e 	.word	0x1526e50e
 8019514:	3fdbcb7b 	.word	0x3fdbcb7b
 8019518:	509f6000 	.word	0x509f6000
 801951c:	3fd34413 	.word	0x3fd34413
 8019520:	c3500000 	.word	0xc3500000
 8019524:	43500000 	.word	0x43500000
 8019528:	7fefffff 	.word	0x7fefffff
 801952c:	00000000 	.word	0x00000000

08019530 <nan>:
 8019530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019538 <nan+0x8>
 8019534:	4770      	bx	lr
 8019536:	bf00      	nop
 8019538:	00000000 	.word	0x00000000
 801953c:	7ff80000 	.word	0x7ff80000

08019540 <__ieee754_log>:
 8019540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019544:	ec51 0b10 	vmov	r0, r1, d0
 8019548:	ed2d 8b04 	vpush	{d8-d9}
 801954c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8019550:	b083      	sub	sp, #12
 8019552:	460d      	mov	r5, r1
 8019554:	da29      	bge.n	80195aa <__ieee754_log+0x6a>
 8019556:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801955a:	4303      	orrs	r3, r0
 801955c:	ee10 2a10 	vmov	r2, s0
 8019560:	d10c      	bne.n	801957c <__ieee754_log+0x3c>
 8019562:	49cf      	ldr	r1, [pc, #828]	; (80198a0 <__ieee754_log+0x360>)
 8019564:	2200      	movs	r2, #0
 8019566:	2300      	movs	r3, #0
 8019568:	2000      	movs	r0, #0
 801956a:	f7e7 f987 	bl	800087c <__aeabi_ddiv>
 801956e:	ec41 0b10 	vmov	d0, r0, r1
 8019572:	b003      	add	sp, #12
 8019574:	ecbd 8b04 	vpop	{d8-d9}
 8019578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801957c:	2900      	cmp	r1, #0
 801957e:	da05      	bge.n	801958c <__ieee754_log+0x4c>
 8019580:	460b      	mov	r3, r1
 8019582:	f7e6 fe99 	bl	80002b8 <__aeabi_dsub>
 8019586:	2200      	movs	r2, #0
 8019588:	2300      	movs	r3, #0
 801958a:	e7ee      	b.n	801956a <__ieee754_log+0x2a>
 801958c:	4bc5      	ldr	r3, [pc, #788]	; (80198a4 <__ieee754_log+0x364>)
 801958e:	2200      	movs	r2, #0
 8019590:	f7e7 f84a 	bl	8000628 <__aeabi_dmul>
 8019594:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8019598:	460d      	mov	r5, r1
 801959a:	4ac3      	ldr	r2, [pc, #780]	; (80198a8 <__ieee754_log+0x368>)
 801959c:	4295      	cmp	r5, r2
 801959e:	dd06      	ble.n	80195ae <__ieee754_log+0x6e>
 80195a0:	4602      	mov	r2, r0
 80195a2:	460b      	mov	r3, r1
 80195a4:	f7e6 fe8a 	bl	80002bc <__adddf3>
 80195a8:	e7e1      	b.n	801956e <__ieee754_log+0x2e>
 80195aa:	2300      	movs	r3, #0
 80195ac:	e7f5      	b.n	801959a <__ieee754_log+0x5a>
 80195ae:	152c      	asrs	r4, r5, #20
 80195b0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80195b4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80195b8:	441c      	add	r4, r3
 80195ba:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80195be:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80195c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80195c6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80195ca:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80195ce:	ea42 0105 	orr.w	r1, r2, r5
 80195d2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80195d6:	2200      	movs	r2, #0
 80195d8:	4bb4      	ldr	r3, [pc, #720]	; (80198ac <__ieee754_log+0x36c>)
 80195da:	f7e6 fe6d 	bl	80002b8 <__aeabi_dsub>
 80195de:	1cab      	adds	r3, r5, #2
 80195e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80195e4:	2b02      	cmp	r3, #2
 80195e6:	4682      	mov	sl, r0
 80195e8:	468b      	mov	fp, r1
 80195ea:	f04f 0200 	mov.w	r2, #0
 80195ee:	dc53      	bgt.n	8019698 <__ieee754_log+0x158>
 80195f0:	2300      	movs	r3, #0
 80195f2:	f7e7 fa81 	bl	8000af8 <__aeabi_dcmpeq>
 80195f6:	b1d0      	cbz	r0, 801962e <__ieee754_log+0xee>
 80195f8:	2c00      	cmp	r4, #0
 80195fa:	f000 8122 	beq.w	8019842 <__ieee754_log+0x302>
 80195fe:	4620      	mov	r0, r4
 8019600:	f7e6 ffa8 	bl	8000554 <__aeabi_i2d>
 8019604:	a390      	add	r3, pc, #576	; (adr r3, 8019848 <__ieee754_log+0x308>)
 8019606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801960a:	4606      	mov	r6, r0
 801960c:	460f      	mov	r7, r1
 801960e:	f7e7 f80b 	bl	8000628 <__aeabi_dmul>
 8019612:	a38f      	add	r3, pc, #572	; (adr r3, 8019850 <__ieee754_log+0x310>)
 8019614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019618:	4604      	mov	r4, r0
 801961a:	460d      	mov	r5, r1
 801961c:	4630      	mov	r0, r6
 801961e:	4639      	mov	r1, r7
 8019620:	f7e7 f802 	bl	8000628 <__aeabi_dmul>
 8019624:	4602      	mov	r2, r0
 8019626:	460b      	mov	r3, r1
 8019628:	4620      	mov	r0, r4
 801962a:	4629      	mov	r1, r5
 801962c:	e7ba      	b.n	80195a4 <__ieee754_log+0x64>
 801962e:	a38a      	add	r3, pc, #552	; (adr r3, 8019858 <__ieee754_log+0x318>)
 8019630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019634:	4650      	mov	r0, sl
 8019636:	4659      	mov	r1, fp
 8019638:	f7e6 fff6 	bl	8000628 <__aeabi_dmul>
 801963c:	4602      	mov	r2, r0
 801963e:	460b      	mov	r3, r1
 8019640:	2000      	movs	r0, #0
 8019642:	499b      	ldr	r1, [pc, #620]	; (80198b0 <__ieee754_log+0x370>)
 8019644:	f7e6 fe38 	bl	80002b8 <__aeabi_dsub>
 8019648:	4652      	mov	r2, sl
 801964a:	4606      	mov	r6, r0
 801964c:	460f      	mov	r7, r1
 801964e:	465b      	mov	r3, fp
 8019650:	4650      	mov	r0, sl
 8019652:	4659      	mov	r1, fp
 8019654:	f7e6 ffe8 	bl	8000628 <__aeabi_dmul>
 8019658:	4602      	mov	r2, r0
 801965a:	460b      	mov	r3, r1
 801965c:	4630      	mov	r0, r6
 801965e:	4639      	mov	r1, r7
 8019660:	f7e6 ffe2 	bl	8000628 <__aeabi_dmul>
 8019664:	4606      	mov	r6, r0
 8019666:	460f      	mov	r7, r1
 8019668:	b914      	cbnz	r4, 8019670 <__ieee754_log+0x130>
 801966a:	4632      	mov	r2, r6
 801966c:	463b      	mov	r3, r7
 801966e:	e0a2      	b.n	80197b6 <__ieee754_log+0x276>
 8019670:	4620      	mov	r0, r4
 8019672:	f7e6 ff6f 	bl	8000554 <__aeabi_i2d>
 8019676:	a374      	add	r3, pc, #464	; (adr r3, 8019848 <__ieee754_log+0x308>)
 8019678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801967c:	4680      	mov	r8, r0
 801967e:	4689      	mov	r9, r1
 8019680:	f7e6 ffd2 	bl	8000628 <__aeabi_dmul>
 8019684:	a372      	add	r3, pc, #456	; (adr r3, 8019850 <__ieee754_log+0x310>)
 8019686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801968a:	4604      	mov	r4, r0
 801968c:	460d      	mov	r5, r1
 801968e:	4640      	mov	r0, r8
 8019690:	4649      	mov	r1, r9
 8019692:	f7e6 ffc9 	bl	8000628 <__aeabi_dmul>
 8019696:	e0a7      	b.n	80197e8 <__ieee754_log+0x2a8>
 8019698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801969c:	f7e6 fe0e 	bl	80002bc <__adddf3>
 80196a0:	4602      	mov	r2, r0
 80196a2:	460b      	mov	r3, r1
 80196a4:	4650      	mov	r0, sl
 80196a6:	4659      	mov	r1, fp
 80196a8:	f7e7 f8e8 	bl	800087c <__aeabi_ddiv>
 80196ac:	ec41 0b18 	vmov	d8, r0, r1
 80196b0:	4620      	mov	r0, r4
 80196b2:	f7e6 ff4f 	bl	8000554 <__aeabi_i2d>
 80196b6:	ec53 2b18 	vmov	r2, r3, d8
 80196ba:	ec41 0b19 	vmov	d9, r0, r1
 80196be:	ec51 0b18 	vmov	r0, r1, d8
 80196c2:	f7e6 ffb1 	bl	8000628 <__aeabi_dmul>
 80196c6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80196ca:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80196ce:	9301      	str	r3, [sp, #4]
 80196d0:	4602      	mov	r2, r0
 80196d2:	460b      	mov	r3, r1
 80196d4:	4680      	mov	r8, r0
 80196d6:	4689      	mov	r9, r1
 80196d8:	f7e6 ffa6 	bl	8000628 <__aeabi_dmul>
 80196dc:	a360      	add	r3, pc, #384	; (adr r3, 8019860 <__ieee754_log+0x320>)
 80196de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196e2:	4606      	mov	r6, r0
 80196e4:	460f      	mov	r7, r1
 80196e6:	f7e6 ff9f 	bl	8000628 <__aeabi_dmul>
 80196ea:	a35f      	add	r3, pc, #380	; (adr r3, 8019868 <__ieee754_log+0x328>)
 80196ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196f0:	f7e6 fde4 	bl	80002bc <__adddf3>
 80196f4:	4632      	mov	r2, r6
 80196f6:	463b      	mov	r3, r7
 80196f8:	f7e6 ff96 	bl	8000628 <__aeabi_dmul>
 80196fc:	a35c      	add	r3, pc, #368	; (adr r3, 8019870 <__ieee754_log+0x330>)
 80196fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019702:	f7e6 fddb 	bl	80002bc <__adddf3>
 8019706:	4632      	mov	r2, r6
 8019708:	463b      	mov	r3, r7
 801970a:	f7e6 ff8d 	bl	8000628 <__aeabi_dmul>
 801970e:	a35a      	add	r3, pc, #360	; (adr r3, 8019878 <__ieee754_log+0x338>)
 8019710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019714:	f7e6 fdd2 	bl	80002bc <__adddf3>
 8019718:	4642      	mov	r2, r8
 801971a:	464b      	mov	r3, r9
 801971c:	f7e6 ff84 	bl	8000628 <__aeabi_dmul>
 8019720:	a357      	add	r3, pc, #348	; (adr r3, 8019880 <__ieee754_log+0x340>)
 8019722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019726:	4680      	mov	r8, r0
 8019728:	4689      	mov	r9, r1
 801972a:	4630      	mov	r0, r6
 801972c:	4639      	mov	r1, r7
 801972e:	f7e6 ff7b 	bl	8000628 <__aeabi_dmul>
 8019732:	a355      	add	r3, pc, #340	; (adr r3, 8019888 <__ieee754_log+0x348>)
 8019734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019738:	f7e6 fdc0 	bl	80002bc <__adddf3>
 801973c:	4632      	mov	r2, r6
 801973e:	463b      	mov	r3, r7
 8019740:	f7e6 ff72 	bl	8000628 <__aeabi_dmul>
 8019744:	a352      	add	r3, pc, #328	; (adr r3, 8019890 <__ieee754_log+0x350>)
 8019746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801974a:	f7e6 fdb7 	bl	80002bc <__adddf3>
 801974e:	4632      	mov	r2, r6
 8019750:	463b      	mov	r3, r7
 8019752:	f7e6 ff69 	bl	8000628 <__aeabi_dmul>
 8019756:	460b      	mov	r3, r1
 8019758:	4602      	mov	r2, r0
 801975a:	4649      	mov	r1, r9
 801975c:	4640      	mov	r0, r8
 801975e:	f7e6 fdad 	bl	80002bc <__adddf3>
 8019762:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8019766:	9b01      	ldr	r3, [sp, #4]
 8019768:	3551      	adds	r5, #81	; 0x51
 801976a:	431d      	orrs	r5, r3
 801976c:	2d00      	cmp	r5, #0
 801976e:	4680      	mov	r8, r0
 8019770:	4689      	mov	r9, r1
 8019772:	dd48      	ble.n	8019806 <__ieee754_log+0x2c6>
 8019774:	4b4e      	ldr	r3, [pc, #312]	; (80198b0 <__ieee754_log+0x370>)
 8019776:	2200      	movs	r2, #0
 8019778:	4650      	mov	r0, sl
 801977a:	4659      	mov	r1, fp
 801977c:	f7e6 ff54 	bl	8000628 <__aeabi_dmul>
 8019780:	4652      	mov	r2, sl
 8019782:	465b      	mov	r3, fp
 8019784:	f7e6 ff50 	bl	8000628 <__aeabi_dmul>
 8019788:	4602      	mov	r2, r0
 801978a:	460b      	mov	r3, r1
 801978c:	4606      	mov	r6, r0
 801978e:	460f      	mov	r7, r1
 8019790:	4640      	mov	r0, r8
 8019792:	4649      	mov	r1, r9
 8019794:	f7e6 fd92 	bl	80002bc <__adddf3>
 8019798:	ec53 2b18 	vmov	r2, r3, d8
 801979c:	f7e6 ff44 	bl	8000628 <__aeabi_dmul>
 80197a0:	4680      	mov	r8, r0
 80197a2:	4689      	mov	r9, r1
 80197a4:	b964      	cbnz	r4, 80197c0 <__ieee754_log+0x280>
 80197a6:	4602      	mov	r2, r0
 80197a8:	460b      	mov	r3, r1
 80197aa:	4630      	mov	r0, r6
 80197ac:	4639      	mov	r1, r7
 80197ae:	f7e6 fd83 	bl	80002b8 <__aeabi_dsub>
 80197b2:	4602      	mov	r2, r0
 80197b4:	460b      	mov	r3, r1
 80197b6:	4650      	mov	r0, sl
 80197b8:	4659      	mov	r1, fp
 80197ba:	f7e6 fd7d 	bl	80002b8 <__aeabi_dsub>
 80197be:	e6d6      	b.n	801956e <__ieee754_log+0x2e>
 80197c0:	a321      	add	r3, pc, #132	; (adr r3, 8019848 <__ieee754_log+0x308>)
 80197c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c6:	ec51 0b19 	vmov	r0, r1, d9
 80197ca:	f7e6 ff2d 	bl	8000628 <__aeabi_dmul>
 80197ce:	a320      	add	r3, pc, #128	; (adr r3, 8019850 <__ieee754_log+0x310>)
 80197d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d4:	4604      	mov	r4, r0
 80197d6:	460d      	mov	r5, r1
 80197d8:	ec51 0b19 	vmov	r0, r1, d9
 80197dc:	f7e6 ff24 	bl	8000628 <__aeabi_dmul>
 80197e0:	4642      	mov	r2, r8
 80197e2:	464b      	mov	r3, r9
 80197e4:	f7e6 fd6a 	bl	80002bc <__adddf3>
 80197e8:	4602      	mov	r2, r0
 80197ea:	460b      	mov	r3, r1
 80197ec:	4630      	mov	r0, r6
 80197ee:	4639      	mov	r1, r7
 80197f0:	f7e6 fd62 	bl	80002b8 <__aeabi_dsub>
 80197f4:	4652      	mov	r2, sl
 80197f6:	465b      	mov	r3, fp
 80197f8:	f7e6 fd5e 	bl	80002b8 <__aeabi_dsub>
 80197fc:	4602      	mov	r2, r0
 80197fe:	460b      	mov	r3, r1
 8019800:	4620      	mov	r0, r4
 8019802:	4629      	mov	r1, r5
 8019804:	e7d9      	b.n	80197ba <__ieee754_log+0x27a>
 8019806:	4602      	mov	r2, r0
 8019808:	460b      	mov	r3, r1
 801980a:	4650      	mov	r0, sl
 801980c:	4659      	mov	r1, fp
 801980e:	f7e6 fd53 	bl	80002b8 <__aeabi_dsub>
 8019812:	ec53 2b18 	vmov	r2, r3, d8
 8019816:	f7e6 ff07 	bl	8000628 <__aeabi_dmul>
 801981a:	4606      	mov	r6, r0
 801981c:	460f      	mov	r7, r1
 801981e:	2c00      	cmp	r4, #0
 8019820:	f43f af23 	beq.w	801966a <__ieee754_log+0x12a>
 8019824:	a308      	add	r3, pc, #32	; (adr r3, 8019848 <__ieee754_log+0x308>)
 8019826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801982a:	ec51 0b19 	vmov	r0, r1, d9
 801982e:	f7e6 fefb 	bl	8000628 <__aeabi_dmul>
 8019832:	a307      	add	r3, pc, #28	; (adr r3, 8019850 <__ieee754_log+0x310>)
 8019834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019838:	4604      	mov	r4, r0
 801983a:	460d      	mov	r5, r1
 801983c:	ec51 0b19 	vmov	r0, r1, d9
 8019840:	e727      	b.n	8019692 <__ieee754_log+0x152>
 8019842:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8019898 <__ieee754_log+0x358>
 8019846:	e694      	b.n	8019572 <__ieee754_log+0x32>
 8019848:	fee00000 	.word	0xfee00000
 801984c:	3fe62e42 	.word	0x3fe62e42
 8019850:	35793c76 	.word	0x35793c76
 8019854:	3dea39ef 	.word	0x3dea39ef
 8019858:	55555555 	.word	0x55555555
 801985c:	3fd55555 	.word	0x3fd55555
 8019860:	df3e5244 	.word	0xdf3e5244
 8019864:	3fc2f112 	.word	0x3fc2f112
 8019868:	96cb03de 	.word	0x96cb03de
 801986c:	3fc74664 	.word	0x3fc74664
 8019870:	94229359 	.word	0x94229359
 8019874:	3fd24924 	.word	0x3fd24924
 8019878:	55555593 	.word	0x55555593
 801987c:	3fe55555 	.word	0x3fe55555
 8019880:	d078c69f 	.word	0xd078c69f
 8019884:	3fc39a09 	.word	0x3fc39a09
 8019888:	1d8e78af 	.word	0x1d8e78af
 801988c:	3fcc71c5 	.word	0x3fcc71c5
 8019890:	9997fa04 	.word	0x9997fa04
 8019894:	3fd99999 	.word	0x3fd99999
	...
 80198a0:	c3500000 	.word	0xc3500000
 80198a4:	43500000 	.word	0x43500000
 80198a8:	7fefffff 	.word	0x7fefffff
 80198ac:	3ff00000 	.word	0x3ff00000
 80198b0:	3fe00000 	.word	0x3fe00000

080198b4 <_init>:
 80198b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198b6:	bf00      	nop
 80198b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198ba:	bc08      	pop	{r3}
 80198bc:	469e      	mov	lr, r3
 80198be:	4770      	bx	lr

080198c0 <_fini>:
 80198c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198c2:	bf00      	nop
 80198c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198c6:	bc08      	pop	{r3}
 80198c8:	469e      	mov	lr, r3
 80198ca:	4770      	bx	lr
